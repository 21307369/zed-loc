name: Build Remote Server (Linux)

on:
  workflow_dispatch: # Manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: 手动同步 zed 源代码
        uses: actions/checkout@v4
        with:
          repository: zed-industries/zed
          ref: main
          path: zed

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Add target platform
        run: rustup target add x86_64-unknown-linux-musl

      - name: 安装 Linux 依赖项
        run: |
          cp mac/github-config.toml zed/.cargo/config.toml && cp mac/Cargo.toml zed/Cargo.toml
          ./zed/script/linux
          ./zed/script/install-mold 2.34.0
          ./zed/script/clear-target-dir-if-larger-than 100

      - name: Build Remote Server
        run: cd zed && cargo build -p remote_server --target x86_64-unknown-linux-musl --release

      - name: Strip debug symbols
        run: |
          cd zed
          target_dir="target/x86_64-unknown-linux-musl/release"
          if [ -f "${target_dir}/remote_server" ]; then
            echo "Stripping debug symbols from remote_server"
            objcopy --only-keep-debug "${target_dir}/remote_server" "${target_dir}/remote_server.dbg"
            objcopy --strip-debug "${target_dir}/remote_server"
          else
            echo "Error: remote_server not found in ${target_dir}"
            exit 1
          fi

      - name: Create tarball
        run: |
          mkdir -p package
          cp "zed/${target_dir}/remote_server" package/
          if [ "$(ls -A package)" ]; then
            gzip -f --stdout --best  package/remote_server > remote_server-linux.gz
          else
            echo "Error: package directory is empty"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: remote_server-linux
          path: remote_server-linux.gz

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: remote-server-linux-${{ github.run_id }}
          release_name: Remote Server Linux Build ${{ github.run_id }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./remote_server-linux.gz
          asset_name: remote_server-linux.gz
          asset_content_type: application/gzip