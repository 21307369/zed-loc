name: Build Remote Server (Linux)

on:
  workflow_dispatch: # Manual trigger

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: 手动同步 zed 源代码
        uses: actions/checkout@v4
        with:
          repository: zed-industries/zed
          ref: main
          path: zed

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Add target platform
        run: rustup target add x86_64-unknown-linux-gnu

      - name: 安装 Linux 依赖项
        run: |
          cp mac/github-config.toml zed/.cargo/config.toml && cp mac/Cargo.toml zed/Cargo.toml
          ./zed/script/linux
          ./zed/script/install-mold 2.34.0
          ./zed/script/clear-target-dir-if-larger-than 100    

      - name: Prepare environment variables for remote_server
        run: |
          cd zed
          export ZED_BUNDLE=true
          channel=$(<crates/zed/RELEASE_CHANNEL)
          target_dir="${CARGO_TARGET_DIR:-target}"
          version="$(script/get-crate-version zed)"
          export RELEASE_VERSION="${version}"
          commit=$(git rev-parse HEAD | cut -c 1-7)
          version_info=$(rustc --version --verbose)
          host_line=$(echo "$version_info" | grep host)
          target_triple=${host_line#*: }
          musl_triple=${target_triple%-gnu}-musl
          remote_server_triple=${musl_triple}
          rustup_installed=false
          if command -v rustup >/dev/null 2>&1; then
              rustup_installed=true
          fi
          if "$rustup_installed"; then
              rustup target add "$remote_server_triple"
          fi


      - name: Build Remote Server
        run: |
          cd zed
          export CC=$(which clang)
          if [[ "$remote_server_triple" == "$musl_triple" ]]; then
              export RUSTFLAGS="-C target-feature=+crt-static"
              rustup target add "$remote_server_triple" || echo "Failed to add custom target, proceeding with build..."
          fi
          cargo build -p remote_server --target $remote_server_triple --release

      - name: Strip debug symbols
        run: |
          cd zed
          objcopy --only-keep-debug "${target_dir}/${remote_server_triple}/release/remote_server" "${target_dir}/${remote_server_triple}/release/remote_server.dbg"
          objcopy --strip-debug "${target_dir}/${remote_server_triple}/release/remote_server"

      - name: Create tarball
        run: |
          mkdir -p package
          cp zed/target/${remote_server_triple}/release/remote_server package/
          tar czvf remote_server-linux.tar.gz package/*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: remote_server-linux
          path: remote_server-linux.tar.gz

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: remote-server-linux-${{ github.run_id }}
          release_name: Remote Server Linux Build ${{ github.run_id }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./remote_server-linux.tar.gz
          asset_name: remote_server-linux.tar.gz
          asset_content_type: application/gzip