{
    "zed/crates/activity_indicator/src/activity_indicator.rs": {
        "Language server error: {}\n\n{}": "",
        ": ": "",
        " + {} more": "",
        "Downloading {}...": "",
        ", ": "",
        "Checking for updates to {}...": "",
        "Failed to run {}. Click to show error.": "",
        "Formatting failed: {}. Click to see logs.": "",
        "Checking for Zed updates…": "",
        "Downloading Zed update…": "",
        "Installing Zed update…": "",
        "Click to restart and update Zed": "",
        "Auto update failed": "",
        "Updating {extension_id} extension…": ""
    },
    "zed/crates/anthropic/src/anthropic.rs": {
        "invalid model id": "",
        "failed to serialize request": "",
        "failed to construct request body": "",
        "failed to send request to Anthropic": "",
        "failed to read response body": "",
        "failed to deserialize response body": "",
        "failed to parse response body as UTF-8": "",
        "Failed to connect to API: {} {}": "",
        "requests": "",
        "tokens": "",
        "missing header `{key}`": "",
        "data: ": "",
        "Unexpected success response while expecting an error: '{body_str}'": "",
        "lowercase": "",
        "type": "",
        "text": "",
        "image": "",
        "thinking": "",
        "error": "",
        "an error occurred while interacting with the Anthropic API: {error_type}: {message}": ""
    },
    "zed/crates/assets/src/assets.rs": {
        "could not find asset at path \"{}\"": "",
        "Assets should never return None": ""
    },
    "zed/crates/assistant/src/assistant_configuration.rs": {
        "Open New Chat": "",
        "No configuration view for {}": "",
        "Configure your Assistant": "",
        "At least one LLM provider must be configured to use the Assistant.": "",
        "Configuration": ""
    },
    "zed/crates/assistant/src/assistant_panel.rs": {
        "history": "",
        "Open History": "",
        "New Chat": "",
        "menu": "",
        "Toggle Assistant Menu": "",
        "Zoom Out": "",
        "Zoom In": "",
        "History": "",
        "Prompt Library": "",
        "Configure": "",
        "no context found with ID: {}": "",
        "No language model provider configured": "",
        "Cancel": "",
        "assistant panel": "",
        "Assistant Panel": "",
        "no Assistant panel found": ""
    },
    "zed/crates/assistant/src/inline_assistant.rs": {
        "editor was dropped": "",
        "cancel": "",
        "Cancel Assist": "",
        "start": "",
        "Transform": "",
        "stop": "",
        "Interrupt Transformation": "",
        "Changes won't be discarded": "",
        "restart": "",
        "Regenerate Transformation": "",
        "Current change will be discarded": "",
        "confirm": "",
        "Confirm Assist": "",
        "PromptEditor": "",
        "context": "",
        "Using {}": "",
        "No model selected": "",
        "Change Model": "",
        "error": "",
        "Add a prompt…": "",
        " • {keybinding} for context": "",
        "Generate": "",
        "{action}…{context_keybinding} • ↓↑ for history": "",
        "assist not found": "",
        "inline assist": "",
        "previous": "",
        "Previous Alternative": "",
        "next": "",
        "Next Alternative": "",
        "Tokens Used ({} from the Assistant Panel)": "",
        "Click to open the Assistant Panel": "",
        "Tokens used": "",
        "Out of Tokens": "",
        "Try Zed Pro for higher limits, a wider range of models, and more.": "",
        "dont-show-again": "",
        "Don't show again": "",
        "Dismiss": "",
        "More Info": "",
        "dismissed-rate-limit-notice": "",
        "Inline assistant error: {}": "",
        "no user prompt": "",
        "no active model": "",
        "delete": "",
        "invalid transformation range": "",
        "Failed to generate content prompt: {}": "",
        "<|CURSOR|>": "",
        "assistant": "",
        "Fix with Assistant": "",
        "editor was released": "",
        "invalid range": "",
        "assistant panel was released": "",
        "Fix Diagnostics": ""
    },
    "zed/crates/assistant/src/terminal_inline_assistant.rs": {
        "invalid assist": "",
        "SHELL": "",
        "Terminal inline assistant error: {}": "",
        "cancel": "",
        "Cancel Assist": "",
        "start": "",
        "Generate": "",
        "stop": "",
        "Interrupt Generation": "",
        "Changes won't be discarded": "",
        "restart": "",
        "Restart Generation": "",
        "Changes will be discarded": "",
        "Accept Generated Command": "",
        "Execute Generated Command": "",
        "Using {}": "",
        "No model selected": "",
        "Change Model": "",
        "error": "",
        " • {keybinding} for context": "",
        "Generate…{context_keybinding} • ↓↑ for history": "",
        "token_count": "",
        "Tokens Used by Inline Assistant": "",
        "Click to Open Assistant Panel": ""
    },
    "zed/crates/assistant_context_editor/src/context_editor.rs": {
        "New Chat": "",
        "invoked-slash-command": "",
        "Thinking Process": "",
        "Press": "",
        "esc": "",
        "to cancel": "",
        "You": "",
        "Assistant": "",
        "pulsating-label": "",
        "System": "",
        "role": "",
        "Toggle message role": "",
        "Available roles: You (User), Assistant, System": "",
        "message_header": "",
        "cached": "",
        "Context Cached": "",
        "Large messages cached to optimize performance": "",
        "Error": "",
        "View Details": "",
        "Canceled": "",
        "old_blocks should contain a message_id we've just removed.": "",
        "{} copied to clipboard.": "",
        "Code block": "",
        "Selection": "",
        "Generating…": "",
        "Zed AI is here! Get started by signing in →": "",
        "sign-in": "",
        "Sign in": "",
        "No LLM provider selected.": "",
        "LLM provider is not configured.": "",
        "LLM provider requires accepting the Terms of Service.": "",
        "open-configuration": "",
        "Configure Providers": "",
        "Token limit reached": "",
        "Token limit is close to exhaustion": "",
        "Chat": "",
        "Send": "",
        "edit_button": "",
        "Suggest Edits": "",
        "trigger": "",
        "Add Context": "",
        "Type / to insert via keyboard": "",
        "No model selected": "",
        "active-model": "",
        "Change Model": "",
        "Suggest Edits needs a file to edit": "",
        "error-message": "",
        "To include files, type /file or /tab in your prompt.": "",
        "dismiss": "",
        "Dismiss": "",
        "Free tier exceeded. Subscribe and add payment to continue using Zed LLMs. You'll be billed at cost for tokens used.": "",
        "Free Usage Exceeded": "",
        "subscribe": "",
        "Subscribe": "",
        "You have reached your maximum monthly spend. Increase your spend limit to continue using Zed LLMs.": "",
        "Max Monthly Spend Reached": "",
        "Update Monthly Spend Limit": "",
        "Error interacting with language model": "",
        "fenced_code_block": "",
        "code_fence_content": "",
        "Thinking…": "",
        "Thought Process": "",
        "slash-command-output-fold-indicator": "",
        "quote-selection-indicator": "",
        "slash-command-gutter-decoration": "",
        "crates-being-indexed": "",
        "Indexing {package}…": "",
        "latest-error": "",
        "Failed to index: {latest_error}": "",
        "ContextEditor": "",
        "or": "",
        "Token Limit Reached": "",
        "Token Limit is Close to Exhaustion": "",
        "Regenerate Title": "",
        "Files to scan: {}": "",
        "error: {message}": "",
        "unexpected result on row {:?}": ""
    },
    "zed/crates/assistant_slash_commands/src/diagnostics_command.rs": {
        "diagnostics": "",
        "Insert diagnostics": "",
        "workspace was dropped": "",
        "No diagnostics found": "",
        "diagnostics: {}": "",
        "Diagnostics": "",
        " {} errors": "",
        " {} warnings": "",
        "warning": "",
        "error": ""
    },
    "zed/crates/assistant_slash_commands/src/terminal_command.rs": {
        "terminal": "",
        "Insert terminal output": "",
        "workspace was dropped": "",
        "no active terminal": "",
        "Terminal output:\n": "",
        "Terminal": ""
    },
    "zed/crates/assistant_tools/src/now_tool.rs": {
        "now": "",
        "Returns the current datetime in RFC 3339 format. Only use this tool when the user specifically asks for it or the current task would benefit from knowing the current datetime.": "",
        "Get current time": "",
        "The current datetime is {now}.": ""
    },
    "zed/crates/audio/src/assets.rs": {
        "No such asset available": ""
    },
    "zed/crates/auto_update/src/auto_update.rs": {
        "auto-updater-should-show-updated-notification": "",
        "hdiutil": "",
        "detach": "",
        "Successfully unmounted the disk image": "",
        "Failed to unmount disk image: {:?}": "",
        "Error while trying to unmount disk image: {:?}": "",
        "auto_update": "",
        "ZED_UPDATE_EXPLANATION": "",
        "Zed was installed via a package manager.": "",
        "Ok": "",
        "Could not check for updates": "",
        "Auto-updates disabled for non-bundled app.": "",
        "auto-update failed: error:{:?}": "",
        "auto-update not initialized": "",
        "downloading zed-remote-server {os} {arch} version {}": "",
        "stable": "",
        "failed to fetch release: {:?}": "",
        "error deserializing release {:?}": "",
        "not supported: {:?}": "",
        "rsync": "",
        "Aborting. Could not find rsync which is required for auto-updates.": "",
        "failed to download remote server release: {:?}": "",
        "remote": "",
        "local": "",
        "downloaded update. path:{:?}": "",
        "HOME": "",
        "no HOME env var set": "",
        "failed to create directory into which to extract update": "",
        "failed to extract {:?} to {:?}: {:?}": "",
        "failed to copy Zed update from {:?} to {:?}: {:?}": "",
        "invalid running app path": "",
        "attach": "",
        "failed to mount: {:?}": "",
        "failed to copy app: {:?}": ""
    },
    "zed/crates/breadcrumbs/src/breadcrumbs.rs": {
        "toggle outline view": "",
        "Show Symbol Outline": ""
    },
    "zed/crates/channel/src/channel_buffer.rs": {
        "channel buffer {} disconnected": ""
    },
    "zed/crates/channel/src/channel_chat.rs": {
        "message body can't be empty": "",
        "current_user is not present": "",
        "invalid message": "",
        "empty message": "",
        "nonce is required": ""
    },
    "zed/crates/channel/src/channel_store.rs": {
        "{}/channel/{}-{}": "",
        "channel store dropped": "",
        "no channel for id: {}": "",
        "missing channel in response": "",
        "invite request already in progress": "",
        "member request already in progress": ""
    },
    "zed/crates/cli/src/main.rs": {
        "The Zed CLI binary.\nThis CLI is a separate binary that invokes Zed.\n\nExamples:\n    `zed`\n          Simply opens Zed\n    `zed --foreground`\n          Runs in foreground (shows all logs)\n    `zed path-to-your-project`\n          Open your project in Zed\n    `zed -n path-to-file `\n          Open file/folder in a new window": "",
        "To read from stdin, append '-', e.g. 'ps axf | zed -'": "",
        "new": "",
        "add": "",
        "no-bundled-uninstall": "",
        "retrieving current directory": "",
        "parsing as path with position {argument_str}": "",
        "Bundle detection": "",
        "The `--system-specs` argument is not supported in the Zed CLI, only on Zed binary.": "",
        "To retrieve the system specs on the command line, run the following command:": "",
        "sh": "",
        "ZED_CHANNEL": "",
        "Failed to execute uninstall script": "",
        "Handshake before Zed spawn": "",
        "zed-cli://{server_name}": "",
        "Dev servers were removed in v0.157.x please upgrade to SSH remoting: https://zed.dev/docs/remote-development": "",
        "Handshake after Zed spawn": "",
        "{message}": "",
        "memfd:": "",
        "no parent path for cli": "",
        "could not find any of: {}": "",
        ", ": "",
        "failed to setsid: {}": "",
        "failed to close_fd: {}": "",
        "failed to exec {:?}: {}": "",
        "ZED_FLATPAK_LIB_PATH": "",
        "ZED_FLATPAK_NO_ESCAPE": "",
        "LD_LIBRARY_PATH": "",
        "lib": "",
        "bin": "",
        "libexec": "",
        "zed-editor": "",
        "failed restart cli on host: {:?}": "",
        "FLATPAK_ID": "",
        "ZED_UPDATE_EXPLANATION": "",
        "Please use flatpak to update zed": "",
        "flatpak": "",
        "info": "",
        "--show-location": "",
        "files": "",
        "XDG_DATA_HOME": "",
        "XDG_CONFIG_HOME": "",
        "XDG_CACHE_HOME": "",
        "XDG_STATE_HOME": "",
        "--env=FLATPAK_{}={}": "",
        "{}-Instance-Mutex": "",
        "Unable to create instance sync event": "",
        "--foreground": "",
        "CFBundleShortVersionString": "",
        "app": "",
        "cannot find app bundle containing {:?}": "",
        "Args bundle path {bundle_path:?} canonicalization": "",
        "bundle autodiscovery": "",
        "Reading *.app bundle plist file at {plist_path:?}": "",
        "Zed {} – {}": "",
        "invalid app path {app_path:?}": "",
        "cannot start app bundle {}": "",
        "Executable {executable:?} path has no parent": "",
        "Log file creation in {executable_parent:?}": "",
        "Cloning descriptor for file {subprocess_stdout_file:?}": "",
        "Spawning {command:?}": "",
        "Contents/MacOS/zed": "",
        "<development>": "",
        "id of app \"{}\"": "",
        "osascript": "",
        "-e": "",
        "Could not determine app id for {}": "",
        "kMDItemCFBundleIdentifier == '{app_name}'": "",
        "mdfind": "",
        "Could not determine app path for {}": "",
        "{app_path}/Contents/MacOS/cli": ""
    },
    "zed/crates/client/src/client.rs": {
        "ZED_SERVER_URL": "",
        "ZED_RPC_URL": "",
        "ZED_IMPERSONATE": "",
        "ZED_ADMIN_API_TOKEN": "",
        "ZED_APP_PATH": "",
        "ZED_ALWAYS_ACTIVE": "",
        "upgrade required": "",
        "unauthorized": "",
        "{0}": "",
        "{} {}": "",
        "handling queued rpc message. client_id:{}, sender_id:{:?}, type:{}": "",
        "unhandled message {}": "",
        "telemetry": "",
        "set status on client {}: {:?}": "",
        "failed to connect {}": "",
        "already subscribed to entity": "",
        "{}:{} registered handler for the same message {} twice": "",
        "authentication canceled": "",
        "timed out waiting on hello message from server": "",
        "timed out trying to establish connection": "",
        "add connection to peer": "",
        "waiting for server hello": "",
        "no hello message received": "",
        "got server hello": "",
        "invalid hello message received: {:?}": "",
        "invalid peer id": "",
        "set status to connected (connection id: {:?}, peer id: {:?})": "",
        "connection error: {:?}": "",
        "invalid rpc url": "",
        "Location": "",
        "missing location header in /rpc response": "",
        "unexpected /rpc response status {}": "",
        "https": "",
        "http": "",
        "invalid rpc url: {}": "",
        "missing host in rpc url": "",
        "connected to rpc endpoint {}": "",
        "wss": "",
        "ws": "",
        "Authorization": "",
        "x-zed-protocol-version": "",
        "x-zed-app-version": "",
        "x-zed-release-channel": "",
        "unknown": "",
        "x-zed-system-id": "",
        "x-zed-metrics-id": "",
        "failed to generate keypair for auth": "",
        "failed to serialize public key for auth": "",
        "authenticate as admin {login}, {token}": "",
        "127.0.0.1:0": "",
        "failed to find open port": "",
        "impersonating user @{}": "",
        "&impersonate={}": "",
        "failed to parse login notification url": "",
        "access_token": "",
        "user_id": "",
        "failed to respond to login http request": "",
        "missing user_id parameter": "",
        "missing access_token parameter": "",
        "didn't receive login redirect": "",
        "failed to decrypt access token": "",
        "GITHUB_TOKEN": "",
        "error fetching GitHub user": "",
        "error reading GitHub user": "",
        "status error {}, response: {text:?}": "",
        "Error deserializing: {:?}": "",
        "GitHub API response text: {:?}": "",
        "error deserializing GitHub user": "",
        "github_login": "",
        "github_user_id": "",
        "github_user_created_at": "",
        "token {api_token}": "",
        "admin user request failed {} - {}": "",
        "ADMIN_TOKEN:": "",
        "not connected": "",
        "rpc send. client_id:{}, name:{}": "",
        "rpc request start. client_id:{}. name:{}": "",
        "rpc request finish. client_id:{}. name:{}": "",
        "rpc message received. client_id:{}, sender_id:{:?}, type:{}": "",
        "rpc message handled. client_id:{}, sender_id:{:?}, type:{}": "",
        "error handling message. client_id:{}, sender_id:{:?}, type:{}, error:{:?}": "",
        "rpc respond. client_id:{}, name:{}": "",
        "token": ""
    },
    "zed/crates/client/src/socks.rs": {
        "error connecting to socks {}": "",
        "socks4": "",
        "socks": ""
    },
    "zed/crates/client/src/telemetry.rs": {
        "Failed to load /etc/os-release, /usr/lib/os-release": "",
        "unknown": "",
        "App Closed": "",
        "Assistant Responded": "",
        "Assistant Invoked": "",
        "Assistant Response Accepted": "",
        "Assistant Response Rejected": "",
        "Editor Edited": "",
        "Project Opened": "",
        "telemetry": "",
        "Failed to send events: HTTP {:?}": "",
        "test": ""
    },
    "zed/crates/client/src/test.rs": {
        "server dropped": "",
        "server is forbidding connections": "",
        "not connected": "",
        "other half hung up": "",
        "failed to build accepted_tos_at": "",
        "fake server received unexpected message type: {:?}": ""
    },
    "zed/crates/client/src/user.rs": {
        "ZED_IGNORE_ACCEPTED_TOS": "",
        "can't upgrade user store handle": "",
        "can't upgrade client reference": "",
        "user {} not found": "",
        "server responded with no users": "",
        "no current user": "",
        "error accepting tos": "",
        "client not found": "",
        "error loading users": "",
        "invalid peer id": ""
    },
    "zed/crates/clock/src/clock.rs": {
        "Lamport {{{}: {}}}": "",
        "Global {{": "",
        "<branch>: {}": ""
    },
    "zed/crates/command_palette_hooks/src/command_palette_hooks.rs": {
        "malformed action name": ""
    },
    "zed/crates/collab/src/api/billing.rs": {
        "user not found": "",
        "Spend Limit Updated": "",
        "Zed LLM Usage": "",
        "failed to retrieve Stripe client": "",
        "not supported": "",
        "failed to retrieve Stripe billing object": "",
        "failed to retrieve LLM database": "",
        "user already has an active subscription": "",
        "user has overdue invoices": "",
        "failed to parse customer ID": "",
        "claude-3-5-sonnet": "",
        "{}/account?checkout_complete=1": "",
        "billing customer not found": "",
        "subscription not found": "",
        "failed to parse subscription ID": ""
    },
    "zed/crates/collab/src/api/contributors.rs": {
        "must be one of `github_user_id` or `github_login`.": "",
        "failed to parse 'created_at' for 'renovate[bot]'": ""
    },
    "zed/crates/collab/src/api/events.rs": {
        "Crash uploads from {} are ignored.": "",
        "We've already uploaded this crash": "",
        "Failed to upload crash: {}": "",
        "Can't parse {}: {}": "",
        "client": "",
        "crash report": "",
        "app_version": "",
        "os_version": "",
        "os_name": "",
        "bundle_id": "",
        "incident_id": "",
        "installation_id": "",
        "description": "",
        "backtrace": "",
        "Crash Reported": "",
        "*Version:*\n{} ({})": "",
        "*Incident:*\n<https://{}.{}/{}.ips|{}…>": "",
        "Failed to serialize payload to JSON: {err}": "",
        "Content-Type": "",
        "application/json": "",
        "Failed to send payload to Slack: {err}": "",
        "events not enabled": "",
        "invalid checksum": "",
        "can't parse report json: {err}": "",
        "Possible hang detected on main thread:": "",
        "<unknown>": "",
        "hang report": "",
        "invalid json": "",
        "invalid os version": "",
        ".json": "",
        "panic report": "",
        "Panic Reported": "",
        "{}\n   and {} more": "",
        "Panic request": "",
        "*Version:*\n {} ": "",
        "ERROR_SURFACE_LOST_KHR": "",
        "ERROR_INITIALIZATION_FAILED": "",
        "GPU has crashed, and no debug information is available": "",
        "can't parse event json: {err}": "",
        "no events": "",
        "open": "",
        "Editor Opened": "",
        "save": "",
        "Editor Saved": "",
        "Unknown Editor Event: {}": "",
        "Edit Prediction {}": "",
        "Accepted": "",
        "Discarded": "",
        "Edit Prediction Rated": "",
        "unshare project": "",
        "Project Unshared": "",
        "open channel notes": "",
        "Channel Notes Opened": "",
        "share project": "",
        "Project Shared": "",
        "join channel": "",
        "Channel Joined": "",
        "hang up": "",
        "Call Ended": "",
        "accept incoming": "",
        "Incoming Call Accepted": "",
        "invite": "",
        "Participant Invited": "",
        "disable microphone": "",
        "Microphone Disabled": "",
        "enable microphone": "",
        "Microphone Enabled": "",
        "enable screen share": "",
        "Screen Share Enabled": "",
        "disable screen share": "",
        "Screen Share Disabled": "",
        "decline incoming": "",
        "Incoming Call Declined": "",
        "Unknown Call Event: {}": "",
        "Assistant Responded": "",
        "Assistant Invoked": "",
        "Assistant Response Accepted": "",
        "Assistant Response Rejected": "",
        "App Opened": "",
        "first open": "",
        "App First Opened": "",
        "first open for release channel": "",
        "App First Opened For Release Channel": "",
        "close": "",
        "App Closed": "",
        "open project": "",
        "Project Opened": "",
        "open node project": "",
        "project_type": "",
        "node": "",
        "open pnpm project": "",
        "pnpm": "",
        "open yarn project": "",
        "yarn": "",
        "create ssh server": "",
        "SSH Server Created": "",
        "create ssh project": "",
        "SSH Project Created": "",
        "open ssh project": "",
        "SSH Project Opened": "",
        "welcome page: change keymap": "",
        "Welcome Keymap Changed": "",
        "welcome page: change theme": "",
        "Welcome Theme Changed": "",
        "welcome page: close": "",
        "Welcome Page Closed": "",
        "welcome page: edit settings": "",
        "Welcome Settings Edited": "",
        "welcome page: install cli": "",
        "Welcome CLI Installed": "",
        "welcome page: open": "",
        "Welcome Page Opened": "",
        "welcome page: open extensions": "",
        "Welcome Extensions Page Opened": "",
        "welcome page: sign in to copilot": "",
        "Welcome Copilot Signed In": "",
        "welcome page: toggle diagnostic telemetry": "",
        "Welcome Diagnostic Telemetry Toggled": "",
        "welcome page: toggle metric telemetry": "",
        "Welcome Metric Telemetry Toggled": "",
        "welcome page: toggle vim": "",
        "Welcome Vim Mode Toggled": "",
        "welcome page: view docs": "",
        "Welcome Documentation Viewed": "",
        "extensions page: open": "",
        "Extensions Page Opened": "",
        "extensions: install extension": "",
        "Extension Installed": "",
        "extensions: uninstall extension": "",
        "Extension Uninstalled": "",
        "markdown preview: open": "",
        "Markdown Preview Opened": "",
        "project diagnostics: open": "",
        "Project Diagnostics Opened": "",
        "project search: open": "",
        "Project Search Opened": "",
        "repl sessions: open": "",
        "REPL Session Started": "",
        "feature upsell: toggle vim": "",
        "source": "",
        "Feature Upsell": "",
        "Vim Mode Toggled": "",
        "feature upsell: viewed docs (": "",
        "Unknown App Event: {}": "",
        "url": "",
        "Documentation Viewed": "",
        "Settings Changed": "",
        "Extension Loaded": "",
        "Editor Edited": "",
        "Action Invoked": "",
        "Kernel Status Changed": "",
        "architecture": "",
        "country": ""
    },
    "zed/crates/collab/src/api/extensions.rs": {
        "extension_search": "",
        "unknown extension": "",
        "not supported": "",
        "unknown extension version": "",
        "failed to create presigned extension download url {e}": "",
        "no blob store client": "",
        "no blob store bucket": "",
        "fetching extensions from blob store": "",
        "extensions/": "",
        "fetched {} object(s) from blob store": "",
        "extensions": "",
        "found {} published extensions": "",
        "fetched {} new extensions from blob store": "",
        "failed to download manifest for extension {extension_id} version {version}": "",
        "invalid manifest for extension {extension_id} version {version}: {}": "",
        "missing last modified timestamp for extension {extension_id} version {version}": "",
        "invalid version for extension {extension_id} version {version}": ""
    },
    "zed/crates/collab/src/api/ips_file.rs": {
        "No header found": "",
        "Failed to parse header: {}": "",
        "No body found": "",
        "Failed to parse body: {}": "",
        "Abort trap: 6": "",
        "Panic `{}`": "",
        "Crash `Abort trap: 6` (possible panic)": "",
        "Exception `{}`": "",
        "Crash `{}`": "",
        " on thread {} ({})": "",
        "<unknown-image>": "",
        "<unknown>": "",
        "  and {} more...": "",
        "<no backtrace available>": ""
    },
    "zed/crates/collab/src/db/queries/access_tokens.rs": {
        "no such access token": ""
    },
    "zed/crates/collab/src/db/queries/billing_preferences.rs": {
        "billing preferences not found": ""
    },
    "zed/crates/collab/src/db/queries/buffers.rs": {
        "user is not a member of channel": "",
        "can't rejoin buffer, epoch has changed": "",
        "can't rejoin buffer, no previous collaborator found": "",
        "not a collaborator on this project": "",
        "no such buffer": "",
        "missing buffer snapshot": "",
        "no such snapshot": ""
    },
    "zed/crates/collab/src/db/queries/channels.rs": {
        "direction": "",
        "parent": "",
        "children": "",
        "channel name can't be blank": "",
        "no such invitation": "",
        "no such member": "",
        "sqlite": "",
        "UPPER(github_login) LIKE ?": "",
        "github_login ILIKE $1": "",
        "not role = 'admin', not role = 'member', not role = 'guest', not accepted, github_login": "",
        "user is not a channel admin or channel does not exist": "",
        "user is not a channel member or channel does not exist": "",
        "user is not a channel participant or channel does not exist": ""
    },
    "zed/crates/collab/src/db/queries/contacts.rs": {
        "contact already requested": "",
        "no such contact": "",
        "no such contact request": ""
    },
    "zed/crates/collab/src/db/queries/extensions.rs": {
        "name ILIKE $1": "",
        "no such extension: {extension_id}": "",
        "failed to insert extension": "",
        ", ": ""
    },
    "zed/crates/collab/src/db/queries/messages.rs": {
        "not a chat participant": "",
        "failed to insert message": "",
        "no such message": "",
        "operation could not be completed": "",
        "ChannelMessageMention": "",
        "Channel message not found": "",
        "Attempted to edit a message (id: {message_id}) which does not exist anymore.": ""
    },
    "zed/crates/collab/src/db/queries/notifications.rs": {
        "Unknown notification kind": "",
        "invalid notification kind {:?}": ""
    },
    "zed/crates/collab/src/db/queries/projects.rs": {
        "could not find participant": "",
        "shared project on unexpected room": "",
        "guests cannot share projects": "",
        "project not found": "",
        "cannot unshare a project hosted by another user": "",
        "no such project": "",
        "invalid worktree update. removed entries: {}, updated entries: {}": "",
        "no such project: {project_id}": "",
        "invalid summary": "",
        "can't update a project hosted by someone else": "",
        "invalid language server": "",
        "unknown worktree settings kind: {kind}": "",
        "failed to deserialize repository's entry ids": "",
        "not a collaborator on this project": "",
        "failed to read project host": "",
        "not authorized to edit projects": "",
        "not authorized to read projects": "",
        "can only send project updates to a project you're in": "",
        "not room participants": ""
    },
    "zed/crates/collab/src/db/queries/rooms.rs": {
        "user is not in the room": "",
        "banned users cannot invite": "",
        "failed to build incoming call": "",
        "could not find call to decline": "",
        "no call to cancel": "",
        "no such room": "",
        "tried to join channel call directly": "",
        "room does not exist or was already joined": "",
        "no channel for room": "",
        "project does not exist": "",
        "no such project": "",
        "host not found among collaborators": "",
        "failed to deserialize repository's entry ids": "",
        "invalid location": "",
        "could not update room participant location": "",
        "only admins can set participant role": "",
        "could not update room participant role": "",
        "could not find room": "",
        "user has not signed the Zed CLA": "",
        "not a room participant": ""
    },
    "zed/crates/collab/src/db/queries/users.rs": {
        "too many users": "",
        "could not find user": ""
    },
    "zed/crates/collab_ui/src/chat_panel/message_editor.rs": {
        "message editor must be singleton": "",
        "failed to load Markdown language": "",
        "Message #{channel_name}": "",
        "Message Channel": ""
    },
    "zed/crates/collab_ui/src/collab_panel/channel_modal.rs": {
        "Public": "",
        "Copy Link": "",
        "Manage Members": "",
        "Invite Members": "",
        "Search collaborator by username...": "",
        "Invited": "",
        "Admin": "",
        "Guest": "",
        "ellipsis": "",
        "You": "",
        "Member": "",
        "Failed to update role": "",
        "Failed to remove member": "",
        "Failed to invite member": "",
        "Demote to Guest": "",
        "Promote to Member": "",
        "Demote to Member": "",
        "Promote to Admin": "",
        "Remove from Channel": ""
    },
    "zed/crates/collab_ui/src/collab_panel/contact_finder.rs": {
        "Contacts": "",
        "Invite new contacts": "",
        "Search collaborator by username...": ""
    },
    "zed/crates/collab_ui/src/notifications/stories/collab_notification.rs": {
        "Incoming Call Notification": "",
        "accept": "",
        "Accept": "",
        "decline": "",
        "Decline": "",
        "maxdeviant is sharing a project in Zed": "",
        "Project Shared Notification": "",
        "open": "",
        "Open": "",
        "dismiss": "",
        "Dismiss": "",
        "iamnbutler": "",
        "is sharing a project in Zed:": ""
    },
    "zed/crates/collab_ui/src/notifications/incoming_call_notification.rs": {
        "accept": "",
        "Accept": "",
        "decline": "",
        "Decline": "",
        "{} is sharing a project in Zed": ""
    },
    "zed/crates/collab_ui/src/notifications/project_shared_notification.rs": {
        "open": "",
        "Open": "",
        "dismiss": "",
        "Dismiss": "",
        "is sharing a project in Zed{}": "",
        ", ": ""
    },
    "zed/crates/collab_ui/src/channel_view.rs": {
        "Channel Notes Opened": "",
        "Copy link to section": "",
        "Link copied to clipboard": "",
        "read-only": "",
        "disconnected": "",
        "<unknown>": ""
    },
    "zed/crates/collab_ui/src/chat_panel.rs": {
        "ChatPanel": "",
        "Message has been deleted...": "",
        "reply-to-saved-message-container": "",
        "reply-to-pending-message-container": "",
        "composing-reply-container": "",
        " ": "",
        "Go to message": "",
        "saved-message": "",
        "pending-message": "",
        "body": "",
        "New messages": "",
        "reply": "",
        "Reply": "",
        "edit": "",
        "message editor must be singleton": "",
        "Edit": "",
        "menu": "",
        "trigger": "",
        "more": "",
        "More": "",
        "Copy message text": "",
        "Delete message": "",
        " (edited)": "",
        "chat_header": "",
        "Chat": "",
        "Select a channel to chat in.": "",
        "toggle-collab": "",
        "Open": "",
        "Editing message": "",
        "cancel-edit-message": "",
        "Cancel edit message": "",
        "reply-preview": "",
        "Replying to ": "",
        "close-reply-preview": "",
        "Close reply": "",
        "Chat Panel": "",
        "*hi*, «@abc», let's **call** «@fgh»": "",
        "fgh": "",
        "avatar_fgh": "",
        "«hi», «@abc», let’s «call» «@fgh»": "",
        "Here is a link https://zed.dev to zeds website": "",
        "Here is a link «https://zed.dev» to zeds website": "",
        "**Here is a link https://zed.dev to zeds website**": "",
        "«Here is a link »«https://zed.dev»« to zeds website»": ""
    },
    "zed/crates/collab_ui/src/collab_panel.rs": {
        "CollaborationPanel": "",
        "toggle_on_modifiers_press": "",
        "{project:?}": "",
        "{room:?}": "",
        "Filter...": "",
        "Failed to read collaboration panel from key value store": "",
        "Follow {}": "",
        "Calling": "",
        "leave-call": "",
        "Leave Call": "",
        "Guest": "",
        "Mic only": "",
        "untitled": "",
        ", ": "",
        "Failed to join project": "",
        "Open {}": "",
        "screen": "",
        "Screen": "",
        "Open shared screen": "",
        "channel-notes": "",
        "notes": "",
        "Open Channel Notes": "",
        "channel-chat": "",
        "chat": "",
        "Open Chat": "",
        "Grant Mic Access": "",
        "Failed to grant mic access": "",
        "Grant Write Access": "",
        "Failed to grant write access": "",
        "This user has not yet signed the CLA at https://zed.dev/cla.": "",
        "Mute": "",
        "Revoke Access": "",
        "Failed to revoke access": "",
        "Expand Subchannels": "",
        "Collapse Subchannels": "",
        "Open Notes": "",
        "Copy Channel Link": "",
        "New Subchannel": "",
        "Rename": "",
        "Move '#{}' here": "",
        "Manage Members": "",
        "Move this channel": "",
        "Make Channel Private": "",
        "Make Channel Public": "",
        "Delete": "",
        "Leave Channel": "",
        "Invite {} to join": "",
        "Call {}": "",
        "Remove Contact": "",
        " ": "",
        "Failed to create channel": "",
        "Failed to hang up": "",
        "Failed to set channel visibility": "",
        "direction": "",
        "parent": "",
        "To make a channel public, its parent channel must be public.": "",
        "To make a channel private, all of its subchannels must be private.": "",
        "Failed to move channel": "",
        "Public channels must have public parents": "",
        "You cannot move a channel into itself": "",
        "You cannot move a channel into a different root channel": "",
        "Are you sure you want to leave \"#{}\"?": "",
        "Leave": "",
        "Cancel": "",
        "Failed to leave channel": "",
        "Are you sure you want to remove the channel \"{}\"?": "",
        "Remove": "",
        "Are you sure you want to remove \"{}\" from your contacts?": "",
        "Failed to remove contact": "",
        "Failed to respond to contact request": "",
        "Call failed": "",
        "Failed to join channel": "",
        "Work with your team in realtime with collaborative editing, voice, shared notes and more.": "",
        "sign_in": "",
        "Sign in": "",
        "Sign in to enable collaboration.": "",
        "Copy public channel link.": "",
        "Copy private channel link.": "",
        "Current Call": "",
        "Requests": "",
        "Contacts": "",
        "Channels": "",
        "Invites": "",
        "Online": "",
        "Offline": "",
        "channel-link": "",
        "section-header": "",
        "Copy channel link": "",
        "add-contact": "",
        "Search for new contact": "",
        "add-channel": "",
        "Create a channel": "",
        "contact context menu": "",
        " {} is offline": "",
        " {} is on a call": "",
        "Invite {} to join call": "",
        "decline-contact": "",
        "Decline invite": "",
        "accept-contact": "",
        "Accept invite": "",
        "remove_contact": "",
        "Cancel invite": "",
        "reject-invite": "",
        "accept-invite": "",
        "channel-invite": "",
        "contact-placeholder": "",
        "Add a Contact": "",
        "+{extra_count}": "",
        "channel_chat": "",
        "Open channel chat": "",
        "channel_notes": "",
        "Open channel notes": "",
        "channel-editor": "",
        "CollabPanel": "",
        "Collab Panel": "",
        "Join channel": ""
    },
    "zed/crates/collab_ui/src/collab_ui.rs": {},
    "zed/crates/collab_ui/src/notification_panel.rs": {
        "NotificationPanel": "",
        "notification_timestamp": "",
        "You accepted": "",
        "You declined": "",
        "decline": "",
        "Decline": "",
        "accept": "",
        "Accept": "",
        "{} wants to add you as a contact": "",
        "{} accepted your contact invite": "",
        "{} invited you to join the #{channel_name} channel": "",
        "{} mentioned you in #{}:\n{}": "",
        "Notifications": "",
        "sign_in_prompt_button": "",
        "Sign in": "",
        "Sign in to view notifications.": "",
        "You have no notifications.": "",
        "Notification Panel": "",
        "notification_panel_toast": "",
        "close": ""
    },
    "zed/crates/command_palette/src/command_palette.rs": {
        "Execute a command...": "",
        "Action Invoked": "",
        "command palette": "",
        "Command": "",
        "name": "",
        "editor::GoToDefinition": "",
        "editor: go to definition": "",
        "editor::Backspace": "",
        "editor: backspace": "",
        "go_to_line::Deploy": "",
        "go to line: deploy": "",
        "editor:  backspace": "",
        "editor:    backspace": "",
        "editor:GoToDefinition": "",
        "editor::::GoToDefinition": "",
        "editor: :GoToDefinition": "",
        "abc": "",
        "cmd-shift-p": "",
        "bcksp": "",
        "enter": "",
        "ab": "",
        "editor": "",
        "Editor::    Backspace": "",
        "cmd-n": "",
        "1\n2\n3\n4\n5\n6\n": "",
        "go to line: Toggle": "",
        "3 enter": "",
        "[\n                    {\n                        ": "",
        ": {\n                            ": "",
        ": ": "",
        ",\n                            ": "",
        "\n                        }\n                    }\n                ]": ""
    },
    "zed/crates/copilot/src/copilot_chat.rs": {
        "lowercase": "",
        "schemars": "",
        "gpt-4o": "",
        "gpt-4o-2024-05-13": "",
        "gpt-4": "",
        "gpt-3.5-turbo": "",
        "o1": "",
        "o1-mini": "",
        "o3-mini": "",
        "claude-3-5-sonnet": "",
        "claude-3.5-sonnet": "",
        "claude-3-7-sonnet": "",
        "claude-3.7-sonnet": "",
        "claude-3.7-sonnet-thought": "",
        "gemini-2.0-flash": "",
        "gemini-2.0-flash-001": "",
        "Invalid model id: {}": "",
        "GPT-4": "",
        "GPT-4o": "",
        "Claude 3.5 Sonnet": "",
        "Claude 3.7 Sonnet": "",
        "Claude 3.7 Sonnet Thinking": "",
        "Gemini 2.0 Flash": "",
        "Vec::is_empty": "",
        "Option::is_none": "",
        "type": "",
        "role": "",
        "invalid expires_at": "",
        "AppData": "",
        "Local": "",
        ".config": "",
        "github-copilot": "",
        "Copilot chat is not enabled": "",
        "No OAuth token available": "",
        "token {}": "",
        "Accept": "",
        "application/json": "",
        "Failed to request API token: {}": "",
        "oauth_token": "",
        "Editor-Version": "",
        "Zed/{}": "",
        "CARGO_PKG_VERSION": "",
        "unknown": "",
        "Failed to connect to API: {} {}": "",
        "data: ": "",
        "[DONE]": ""
    },
    "zed/crates/copilot/src/copilot.rs": {
        "must sign in before using copilot": "",
        "copilot is still starting": "",
        "copilot is disabled": "",
        "copilot was not started because of an error: {}": "",
        "Unsupported protocol scheme for language server proxy (must be http or https)": "",
        "copilot hasn't started yet": ""
    },
    "zed/crates/copilot/src/sign_in.rs": {
        "Copilot is starting...": "",
        "Copilot has started!": "",
        "Copied!": "",
        "Copy": "",
        "Waiting for connection...": "",
        "Connect to GitHub": "",
        "Use GitHub Copilot in Zed.": "",
        "Using Copilot requires an active subscription on GitHub.": "",
        "Paste this code into GitHub after clicking the button below.": "",
        "connect-button": "",
        "copilot-enable-cancel-button": "",
        "Cancel": "",
        "Copilot Enabled!": "",
        "You can update your settings or sign out from the Copilot menu in the status bar.": "",
        "copilot-enabled-done-button": "",
        "Done": "",
        "You must have an active GitHub Copilot subscription.": "",
        "You can enable Copilot by connecting your existing license once you have subscribed or renewed your subscription.": "",
        "copilot-subscribe-button": "",
        "Subscribe on GitHub": "",
        "copilot-subscribe-cancel-button": "",
        "icon_circle_arrow": "",
        "copilot code verification": ""
    },
    "zed/crates/db/src/db.rs": {
        "Could not create db directory": "",
        "Opening main db": "",
        "Opening fallback db": "",
        "Fallback in memory database failed. Likely initialization queries or migrations have fundamental errors": "",
        "global": "",
        "DbTests": "",
        "SELECT * FROM test2": ""
    },
    "zed/crates/db/src/query.rs": {
        "Error in {}, exec failed to execute or parse for: {}": "",
        "Error in {}, exec_bound failed to execute or parse for: {}": "",
        "Error in {}, select_row failed to execute or parse for: {}": "",
        "Error in {}, select_row_bound failed to execute or parse for: {}": "",
        "Error in {}, select_row_bound expected single row result but found none for: {}": ""
    },
    "zed/crates/diagnostics/src/diagnostics_tests.rs": {
        "move occurs because `x` has type `Vec<char>`, which does not implement the `Copy` trait": "",
        "move occurs because `y` has type `Vec<char>`, which does not implement the `Copy` trait": "",
        "value moved here": "",
        "use of moved value\nvalue used here after move": "",
        "mismatched types\nexpected `usize`, found `char`": "",
        "invalid `OPERATIONS` variable": "",
        "finishing diagnostic check for language server {server_id}": "",
        "updating diagnostics. language server {server_id} path {path:?}": "",
        "updating mutated diagnostics view": "",
        "constructing reference diagnostics view": "",
        "diagnostic not found in reference view": "",
        "  removing diagnostic group {group_id}": "",
        "  inserting diagnostic group {group_id} at index {ix}. ranges: {:?}": "",
        "diagnostic group {group_id}": "",
        "file header": "",
        "excerpt header": ""
    },
    "zed/crates/diagnostics/src/diagnostics.rs": {
        "No problems in workspace": "",
        "No errors in workspace": "",
        "EmptyPane": "",
        "s": "",
        "Show {} warning{}": "",
        "diagnostics-show-warning-label": "",
        "Diagnostics": "",
        "disk based diagnostics finished for server {language_server_id}": "",
        "diagnostics updated for server {language_server_id}, path {path:?}. recording change": "",
        "diagnostics updated for server {language_server_id}, path {path:?}. updating excerpts": "",
        "no Near/Replace block should have been pushed to blocks_to_add": "",
        "excerpts are not sorted by path {:?}": "",
        "Project Diagnostics": "",
        "No problems": "",
        "Project Diagnostics Opened": "",
        "diagnostic header": "",
        "({code:?})": "",
        "Expanding to ancestor started on {} node exceeding row limit of {max_row_count}.": "",
        "block": "",
        "statement": "",
        "declaration": "",
        "Expanding to ancestor reached the top node, so using default context line count.": ""
    },
    "zed/crates/diagnostics/src/items.rs": {
        "diagnostic_message": "",
        "Next Diagnostic": "",
        "diagnostic-indicator": "",
        "Project Diagnostics": ""
    },
    "zed/crates/diagnostics/src/toolbar_controls.rs": {
        "Include Warnings": "",
        "Update excerpts": ""
    },
    "zed/crates/docs_preprocessor/src/main.rs": {
        "zed-docs-preprocessor": "",
        "Preprocesses Zed Docs content to provide rich action & keybinding support and more": "",
        "supports": "",
        "renderer": "",
        "Check whether a renderer is supported by this preprocessor": "",
        "Failed to create ZedDocsPreprocessor": "",
        "Required argument": ""
    },
    "zed/crates/editor/src/git/blame.rs": {
        "Updated buffers. Regenerating blame data...": "",
        "Status of git repositories updated. Regenerating blame data...": "",
        "failed to get git blame data: {error:?}": "",
        "OPERATIONS": "",
        "invalid `OPERATIONS` variable": "",
        "MAX_EDITS_PER_OPERATION": "",
        "invalid `MAX_EDITS_PER_OPERATION` variable": "",
        "initial buffer text: {:?}": "",
        "initial blame entries: {:?}": "",
        "quiescing": "",
        "editing buffer": "",
        "buffer text: {:?}": "",
        "regenerating blame entries: {:?}": ""
    },
    "zed/crates/editor/src/clangd_ext.rs": {
        "Unknown": "",
        "lsp ext switch source header proto request": "",
        "Switch source/header LSP request for path \"{source_file}\" failed": "",
        "Clangd returned an empty string when requesting to switch source/header from \"{source_file}\"": "",
        "Parsing URL \"{}\" returned from switch source/header failed": "",
        "URL conversion to file path failed for \"{goto}\"": "",
        "Switch source/header could not open \"{goto}\" in workspace": ""
    },
    "zed/crates/editor/src/code_context_menus.rs": {
        "completions": "",
        "obvious": ""
    },
    "zed/crates/editor/src/display_map.rs": {
        "we expect the font to be loaded because it's rendered by the editor": "",
        "DisplayPoint({}, {})": "",
        "OPERATIONS": "",
        "invalid `OPERATIONS` variable": "",
        "tab size: {}": "",
        "wrap width: {:?}": "",
        "buffer text: {:?}": "",
        "fold text: {:?}": "",
        "tab text: {:?}": "",
        "wrap text: {:?}": "",
        "block text: {:?}": "",
        "display text: {:?}": "",
        "setting wrap width to {:?}": "",
        "setting tab size to {:?}": "",
        "inserting block {:?} with height {}": "",
        "removing block ids {:?}": "",
        "unfolding ranges: {:?}": "",
        "folding ranges: {:?}": "",
        "row boundary before {:?}. reported buffer row boundary: {:?}": "",
        "display row boundary after {:?}. reported buffer row boundary: {:?}": "",
        "row boundary before {:?}. reported display row boundary: {:?}": "",
        "row boundary after {:?}. reported display row boundary: {:?}": "",
        "Moving from point {:?}": "",
        "Right {:?}": "",
        "Left {:?}": ""
    },
    "zed/crates/editor/src/editor_settings_controls.rs": {
        "Font": "",
        "Editor": "",
        "Gutter": "",
        "Buffer Font Family": "",
        "Buffer Font Size": "",
        "Buffer Font Weight": "",
        "Buffer Font Ligatures": "",
        "Inline Git Blame": "",
        "Line Numbers": "",
        "Relative Line Numbers": "",
        "Relative": "",
        "Ascending": ""
    },
    "zed/crates/editor/src/editor.rs": {
        "wordwise": "",
        "done": "",
        "modifiers changed": "",
        "toggle": "",
        "settings change": "",
        "new lines shown": "",
        "buffer edited": "",
        "refresh requested": "",
        "excerpts removed": "",
        "Editor Opened": "",
        "Editor": "",
        "auto_height": "",
        "full": "",
        "jupyter": "",
        "mode": "",
        "renaming": "",
        "menu": "",
        "showing_completions": "",
        "showing_code_actions": "",
        "extension": "",
        "multibuffer": "",
        "copilot_suggestion": "",
        "selection_mode": "",
        "Failed to create buffer": "",
        "The remote instance of Zed does not support this yet. It must be upgraded to {}": "",
        "required": "",
        "the latest version": "",
        "persisting editor selections for editor {editor_id}, workspace {workspace_id:?}": "",
        "persisting editor folds for editor {editor_id}, workspace {workspace_id:?}": "",
        "extend_selection not called with pending selection": "",
        "update_selection dispatched with no pending selection": "",
        "Edit Prediction Accepted": "",
        "Edit Prediction Discarded": "",
        "code_actions_indicator": "",
        "Toggle Code Actions": "",
        "multiple different run targets found on a single line, only the last target will be rendered": "",
        "Edit Log Breakpoint": "",
        "Set Log Breakpoint": "",
        "Edit Condition Breakpoint": "",
        "Set Condition Breakpoint": "",
        "Edit Hit Condition Breakpoint": "",
        "Set Hit Condition Breakpoint": "",
        "Unset Breakpoint": "",
        "Set Breakpoint": "",
        "Disable": "",
        "Enable": "",
        "Run to cursor": "",
        "Accept": "",
        "Jump": "",
        "Scroll": "",
        "Jump to Edit": "",
        "edit_prediction_diff_popover_keybind": "",
        "accept-terms": "",
        "Edit Prediction Provider ToS Clicked": "",
        "Accept Terms of Service": "",
        "Hold": "",
        "No Prediction": "",
        "Preview": "",
        "line did not start with prefix {line_prefix:?}: {line:?}": "",
        "Close Diagnostics": "",
        "Copy diagnostic message": "",
        "Message to log when a breakpoint is hit. Expressions within {} are interpolated.": "",
        "Condition when a breakpoint is hit. Expressions within {} are interpolated.": "",
        "How many breakpoint hits to ignore": "",
        "A multi buffer in breakpoint prompt isn't possible": "",
        "Conflict with Accept Keybinding": "",
        "Your keymap currently overrides the default accept keybinding. To continue, assign one keybinding for the `editor::AcceptEditPrediction` action.": "",
        "open-keymap": "",
        "Assign Keybinding": "",
        "see-docs": "",
        "See Docs": "",
        "stage": "",
        "Stage": "",
        "Stage Hunk": "",
        "Unstage": "",
        "Unstage Hunk": "",
        "Restore": "",
        "Restore Hunk": "",
        "Next Hunk": "",
        "Previous Hunk": ""
    },
    "zed/crates/editor/src/element.rs": {
        "diagnostic": "",
        "expand": "",
        "Expand Excerpt": "",
        "Toggle Excerpt Fold": "",
        "path header block": "",
        "untitled": "",
        "Jump To File": "",
        "Visible context menu should always render.": "",
        "Text": "",
        "Element": "",
        "size": "",
        "len": "",
        "you can't prepaint LineWithInvisibles twice": "",
        "modified diff status for row info": "",
        "blocks": "",
        "Hardcoded expected invisibles differ from the actual ones in '{input_text}'": "",
        "For editor mode {editor_mode_without_invisibles:?} no invisibles was expected but got {invisibles:?}": "",
        "Expected invisibles: {expected_invisibles:?}": "",
        "At index {i}, expected invisible {expected_invisible:?} does not match actual {actual_invisible:?} by kind. Actual invisibles: {actual_invisibles:?}": "",
        "Unexpected extra invisible {actual_invisible:?} at index {i}": "",
        "Missing expected invisibles after index {i}: {missing_expected_invisibles:?}": "",
        "Creating editor with mode {editor_mode:?}, width {}px and text '{input_text}'": ""
    },
    "zed/crates/editor/src/hover_links.rs": {
        "Failed to find file path: {}": "",
        "Incorrect file path for input: {}": "",
        "Expected no result, but got one: {:?}": ""
    },
    "zed/crates/editor/src/hover_popover.rs": {
        "{source}: {}": "",
        "Unicode character U+{:02X}": "",
        "Expected no hovers but got but got: {:?}": "",
        "some other basic docs": "",
        "regular text for hover to show": "",
        "No empty string hovers should be shown": "",
        "Should not have extra line breaks at end of rendered hover": "",
        "A test diagnostic message.": "",
        "some new docs": "",
        "Function to read a file": "",
        "Hint {hint_to_resolve:?} was resolved twice": "",
        "A tooltip for `{new_type_label}`": "",
        "A tooltip for `{struct_label}`": "",
        "Popover range should match the new type label part": "",
        "A tooltip for {new_type_label}": "",
        "Popover range should match the struct label part": "",
        "A tooltip for {struct_label}": "",
        "Rendered markdown element should remove backticks from text": ""
    },
    "zed/crates/editor/src/indent_guides.rs": {
        "offscreen": ""
    },
    "zed/crates/editor/src/inlay_hint_cache.rs": {
        "Visible": "",
        "jumps": "",
        "hint resolve task": "",
        "inlay hint update task for range failed: {e:#?}": "",
        "Fetching inlay hints for range {fetch_range_to_log:?} got throttled and fell off the current visible range, skipping.": "",
        "Fetching inlay hints for range {fetch_range_to_log:?}, reason: {query_reason}, invalidate: {invalidate}": "",
        "Currently visible hints: {visible_hints:?}, cached hints present: {}": "",
        "inlay hint fetch task": "",
        "Fetched {} hints for range {fetch_range_to_log:?}": "",
        "Fetched hints: {new_hints:?}": "",
        "Applying update for range {fetch_range_to_log:?}: remove from editor: {}, remove from cache: {}, add to cache: {}": "",
        "New update: {new_update:?}": "",
        "Should get its first hints when opening the editor": "",
        "Cache should use editor settings to get the allowed hint kinds": "",
        "some change": "",
        "Should get new hints after an edit": "",
        "inlay refresh request failed": "",
        "Should get new hints after hint refresh/ request": "",
        "test_progress_token": "",
        "work done progress create request failed": "",
        "Should not update hints while the work task is running": "",
        "New hints should be queried after the work task is done": "",
        "fn main() { a } // and some long comment to ensure inlays are not trimmed out": "",
        "Test md file with some text": "",
        "Unexpected language: {unexpected}": "",
        "Markdown editor should have a separate version, repeating Rust editor rules": "",
        "some rs change": "",
        "Rust inlay cache should change after the edit": "",
        "Markdown editor should not be affected by Rust editor changes": "",
        "some md change": "",
        "Rust editor should not be affected by Markdown editor changes": "",
        "Markdown editor should also change independently": "",
        "type hint": "",
        "parameter hint": "",
        "other hint": "",
        "Should query new hints once": "",
        "Should load new hints twice": "",
        "Cached hints should not change due to allowed hint kinds settings update": "",
        "Should not load new hints on allowed hint kinds change for hint kinds {new_allowed_hint_kinds:?}": "",
        "Should get its cached hints unchanged after the settings change for hint kinds {new_allowed_hint_kinds:?}": "",
        "Should get its visible hints filtered after the settings change for hint kinds {new_allowed_hint_kinds:?}": "",
        "Cache should use editor settings to get the allowed hint kinds for hint kinds {new_allowed_hint_kinds:?}": "",
        "Should not load new hints when hints got disabled": "",
        "Should clear the cache when hints got disabled": "",
        "Should clear visible hints when hints got disabled": "",
        "Should update its allowed hint kinds even when hints got disabled": "",
        "Should not load new hints when they got disabled": "",
        "Should query for new hints when they got re-enabled": "",
        "Should get its cached hints fully repopulated after the hints got re-enabled": "",
        "Should get its visible hints repopulated and filtered after the h": "",
        "Cache should update editor settings when hints got re-enabled": "",
        "Should query for new hints again": "",
        "initial change #1": "",
        "initial change #2": "",
        "initial change #3": "",
        "Should apply all changes made": "",
        "Should query new hints twice: for editor init and for the last edit that interrupted all others": "",
        "Should get hints from the last edit landed only": "",
        "another change #1": "",
        "another change #2": "",
        "another change #3": "",
        "Should query new hints one more time, for the last edit only": "",
        "When scroll is at the edge of a big document, its visible part and the same range further should be queried in order, but got: {ranges:?}": "",
        "Should initially query visible edge of the document": "",
        "Visible + invisible request": "",
        "Should have hints from both LSP requests made for a big file": "",
        "Should display only hints from the visible range": "",
        "Should query 2 ranges after both scrolls, but got: {ranges:?}": "",
        "Should query 2 adjacent ranges after the scrolls, but got: {ranges:?}": "",
        "First scroll should start the query right after the end of the original scroll": "",
        "Second scroll should query one more screen down after the end of the visible range": "",
        "Should query for hints after every scroll": "",
        "Should have hints from the new LSP response after the edit": "",
        "No new ranges or LSP queries should be made after returning to the selection with cached hints": "",
        "++++more text++++": "",
        "On edit, should scroll to selection and query a range around it: visible + same range above and below. Instead, got query ranges {ranges:?}": "",
        "Above range {above_query_range:?} should be before visible range {visible_query_range:?}": "",
        "Visible range {visible_query_range:?} should be before below range {below_query_range:?}": "",
        "Hints should be queried with the selected range after the query range start": "",
        "Hints should be queried with the selected range before the query range end": "",
        "Hints query range should contain one more screen before": "",
        "Hints query range should contain one more screen after": "",
        "There should be a visible range and two ranges above and below it queried": "",
        "Single buffer should produce a single excerpt with visible range": "",
        "main hint": "",
        "unexpected uri: {:?}": "",
        "out of excerpt range, should be ignored": "",
        "(edited)": "",
        "When scroll is at the edge of a multibuffer, its visible excerpts only should be queried for inlay hints": "",
        "With more scrolls of the multibuffer, more hints should be added into the cache and nothing invalidated without edits": "",
        "After multibuffer was scrolled to the end, all hints for all excerpts should be fetched": "",
        "After multibuffer was scrolled to the end, further scrolls up should not bring more hints": ""
    },
    "zed/crates/editor/src/inline_completion_tests.rs": {
        "editor has no active completion": "",
        "expected edit completion": "",
        "expected move completion": "",
        "Fake Completion Provider": ""
    },
    "zed/crates/editor/src/items.rs": {
        "leaders don't share views for unshared buffers": "",
        "Editor Saved": "",
        "cannot call save_as on an excerpt list": "",
        "untitled": "",
        "Editor": "",
        "Failed to query editor state": "",
        "No path or contents found for buffer": "",
        "Project item at stored path was not a buffer": "",
        "Failed to downcast to Editor after opening abs path {abs_path:?}": "",
        "failed to save serialized editor": "",
        "failed to save contents of buffer": "",
        "just written the type downcasted to": ""
    },
    "zed/crates/editor/src/mouse_context_menu.rs": {
        "MouseContextMenu": "",
        "position": "",
        "context_menu": "",
        "Evaluate Selection": "",
        "Go to Definition": "",
        "Go to Declaration": "",
        "Go to Type Definition": "",
        "Go to Implementation": "",
        "Find All References": "",
        "Rename Symbol": "",
        "Format Buffer": "",
        "Format Selections": "",
        "Code Actions": "",
        "Cut": "",
        "Copy": "",
        "Copy and trim": "",
        "Paste": "",
        "Reveal in Finder": "",
        "Reveal in File Manager": "",
        "Open in Terminal": "",
        "Copy Permalink": ""
    },
    "zed/crates/editor/src/movement.rs": {
        "move left": "",
        "subkind": "",
        "Should not stop at inlays when looking for boundaries": ""
    },
    "zed/crates/editor/src/persistence.rs": {
        "DELETE FROM editors WHERE workspace_id = ? AND item_id NOT IN ({placeholders})": "",
        "Test": "",
        "Go": ""
    },
    "zed/crates/editor/src/proposed_changes_editor.rs": {
        "Apply All": ""
    },
    "zed/crates/editor/src/rust_analyzer_ext.rs": {
        "lsp ext expand macro proto request": "",
        "expand macro": "",
        "Empty macro expansion for position {:?}": "",
        "lsp ext open docs proto request": "",
        "open docs": "",
        "Empty docs urls for position {:?}": ""
    },
    "zed/crates/extension/src/extension_builder.rs": {
        "extension dir {} is not an absolute path": "",
        "failed to create cache dir": "",
        "compiling Rust extension {}": "",
        "failed to compile Rust extension": "",
        "compiled Rust extension {}": "",
        "grammar name '{grammar_name}' must be written in snake_case: {snake_cased_grammar_name}": "",
        "compiling grammar {grammar_name} for extension {}": "",
        "failed to compile grammar '{grammar_name}'": "",
        "compiled grammar {grammar_name} for extension {}": "",
        "finished compiling extension {}": "",
        "compiling Rust crate for extension {}": "",
        "failed to run `cargo`": "",
        "failed to build extension {}": "",
        "compiled Rust crate for extension {}": "",
        "failed to read output module `{}`": "",
        "wasi_snapshot_preview1": "",
        "failed to load adapter module": "",
        "encoding wasm component for extension {}": "",
        "failed to encode wasm component": "",
        "failed to strip debug sections from wasm component": "",
        "compiled wasm did not contain a valid zed extension api version": "",
        "failed to write extension.wasm": "",
        "extension {} written to {}": "",
        "grammars": "",
        "checking out {grammar_name} parser": "",
        "compiling {grammar_name} parser": "",
        "failed to run clang": "",
        "failed to compile {} parser with clang: {}": "",
        "grammar directory '{}' already exists, but is not a git clone of '{}'": "",
        "failed to create grammar directory {}": "",
        "failed to run `git init` in directory '{}'": "",
        "failed to execute `git remote add`": "",
        "failed to add remote {url} for git repository {}": "",
        "failed to execute `git fetch`": "",
        "failed to execute `git checkout`": "",
        "failed to fetch revision {} in directory '{}'": "",
        "failed to checkout revision {} in directory '{}': {}": "",
        "failed to run rustc": "",
        "failed to retrieve rust sysroot: {}": "",
        "failed to run `rustup target add`": "",
        "failed to install the `{RUST_TARGET}` target: {}": "",
        "downloading wasi adapter module to {}": "",
        "failed to save file {}": "",
        "downloaded wasi adapter is invalid": "",
        "wasi-sdk is not available for platform {}": "",
        "downloading wasi-sdk to {}": "",
        "failed to unpack wasi-sdk archive": "",
        "no content": "",
        "failed to read contents of extracted wasi archive directory": "",
        "failed to move extracted wasi dir": "",
        "failed to list languages dir": "",
        "failed to list themes dir": "",
        "failed to list icon themes dir": "",
        "failed to list grammars dir": "",
        "no grammar name": ""
    },
    "zed/crates/extension/src/extension_manifest.rs": {
        "capability for process:exec {desired_command} {desired_args:?} was not listed in the extension manifest": "",
        "invalid extension name": "",
        "failed to load {extension_name} extension.json": "",
        "invalid extension.json for extension {extension_name}": "",
        "failed to load {extension_name} extension.toml": "",
        "invalid extension.toml for extension {extension_name}": ""
    },
    "zed/crates/extension/src/extension.rs": {
        "error parsing wasm extension": "",
        "extension {} has invalid zed:api-version section: {:?}": "",
        "extension {} has no zed:api-version section": ""
    },
    "zed/crates/extension/src/types.rs": {},
    "zed/crates/extension_api/src/extension_api.rs": {
        "`language_server_command` not implemented": "",
        "`run_slash_command` not implemented": "",
        "`context_server_command` not implemented": "",
        "`index_docs` not implemented": ""
    },
    "zed/crates/extension_api/src/http_client.rs": {
        "Method not set": "",
        "URL not set": ""
    },
    "zed/crates/extension_cli/src/main.rs": {
        "failed to canonicalize source_dir": "",
        "failed to canonicalize scratch_dir": "",
        "loading extension manifest": "",
        "compiling extension": "",
        "Zed Extension CLI/{} ({}; {})": "",
        "failed to compile extension": "",
        "failed to copy extension resources": "",
        "failed to run tar": "",
        "failed to create archive.tar.gz: {}": "",
        "missing repository in extension manifest": "",
        "failed to create output dir": "",
        "failed to serialize manifest": "",
        "failed to write extension.toml": "",
        "failed to copy extension.wasm": "",
        "grammars": "",
        "wasm": "",
        "failed to copy grammar '{}'": "",
        "themes": "",
        "invalid theme path": "",
        "failed to copy theme '{}'": "",
        "icon_themes": "",
        "invalid icon theme path": "",
        "failed to copy icon theme '{}'": "",
        "icons": "",
        "failed to copy icons": "",
        "languages": "",
        "invalid language path": "",
        "failed to copy language dir '{}'": "",
        "loaded grammar {grammar_name}": "",
        "grammar not found: '{name}'": "",
        "language {} provides query {} but no grammar": "",
        "loaded language {}": "",
        "loaded theme family {}": "",
        "Theme ": "",
        " is using a deprecated style property: scrollbar_thumb.background. Use `scrollbar.thumb.background` instead.": ""
    },
    "zed/crates/extensions_ui/src/components/extension_card.rs": {
        "Overridden by dev extension.": ""
    },
    "zed/crates/extensions_ui/src/components/feature_upsell.rs": {
        "View docs": "",
        "Documentation Viewed": "",
        "Feature Upsell": ""
    },
    "zed/crates/extensions_ui/src/extension_suggest.rs": {
        "Do you want to install the recommended '{}' extension for '{}' files?": "",
        "Yes, install extension": "",
        "No, don't install it": ""
    },
    "zed/crates/extensions_ui/src/extension_version_selector.rs": {
        "Select extension version...": "",
        "Incompatible": ""
    },
    "zed/crates/extensions_ui/src/extensions_ui.rs": {
        "failed to install dev extension": "",
        "Themes": "",
        "Icon Themes": "",
        "Languages": "",
        "Grammars": "",
        "Language Servers": "",
        "Context Servers": "",
        "Slash Commands": "",
        "Indexed Docs Providers": "",
        "Snippets": "",
        "Search extensions...": "",
        "Rebuild": "",
        "Uninstall": "",
        "Authors": "",
        "Author": "",
        "repository-{}": "",
        "v{version}": "",
        "(v{installed_version} installed)": "",
        "Downloads: {}": "",
        "Install Another Version...": "",
        "Copy Extension ID": "",
        "Copy Author Info": "",
        "Install": "",
        "Extension Installed": "",
        "Upgrade": "",
        "Extension Uninstalled": "",
        "v{version} is not compatible with this version of Zed.": "",
        "BufferSearchBar": "",
        "no extensions": "",
        "Loading extensions...": "",
        "No extensions that match your search.": "",
        "No extensions.": "",
        "No installed extensions that match your search.": "",
        "No installed extensions.": "",
        "No not installed extensions that match your search.": "",
        "No not installed extensions.": "",
        "Zed comes with basic Git support. More Git features are coming in the future.": "",
        "Zed supports linking to a source line on GitHub and others.": "",
        "Vim support is built-in to Zed!": "",
        "Enable vim mode": "",
        "Vim Mode Toggled": "",
        "Feature Upsell": "",
        "Shell support is built-in to Zed!": "",
        "C support is built-in to Zed!": "",
        "C++ support is built-in to Zed!": "",
        "Go support is built-in to Zed!": "",
        "Python support is built-in to Zed!": "",
        "React support is built-in to Zed!": "",
        "Rust support is built-in to Zed!": "",
        "Typescript support is built-in to Zed!": "",
        "Extension Category": "",
        "All": "",
        "Extensions": "",
        "Install Dev Extension": "",
        "Filter extensions by category": "",
        "Show all extensions": "",
        "Installed": "",
        "Show installed extensions": "",
        "Not Installed": "",
        "Show not installed extensions": "",
        "entries": "",
        "Extensions Page Opened": ""
    },
    "zed/crates/feedback/src/feedback_modal.rs": {
        "Give Feedback": "",
        "Thanks for using Zed! To share your experience with us, reach for the channel that's the most appropriate:": "",
        "File a Bug Report": "",
        "Request a Feature": "",
        "Send an Email": "",
        "zed_repository": "",
        "GitHub Repository": ""
    },
    "zed/crates/feedback/src/feedback.rs": {
        "\n\nSystem Information:\n\n{}": "",
        "Copied into clipboard": "",
        "OK": ""
    },
    "zed/crates/feedback/src/system_specs.rs": {
        "(Taylor's Version)": "",
        "Memory: {}": "",
        "Architecture: {}": "",
        "GPU: {}": "",
        "Failed to run `vulkaninfo --summary`": ""
    },
    "zed/crates/file_finder/src/file_finder_tests.rs": {
        "Wrong number of matches for bandana query '{bandana_query}'": "",
        "Wrong match for bandana query '{bandana_query}'": "",
        "Matching abs path should be the only match": "",
        "Mismatching abs path should produce no matches": "",
        "some content": "",
        "Finder should have a query after the update_matches call": "",
        "Expected to have 1 selection (caret) after file finder confirm, but got: {all_selections:?}": "",
        "Caret selection should have its start and end at the same position": "",
        "Query inside file should get caret with the same focus row": "",
        "Query inside file should get caret with the same focus column": "",
        "Excessive rows (as in query outside file borders) should get trimmed to last file row": "",
        "Excessive columns (as in query outside file borders) should get trimmed to selected row's last column": ""
    },
    "zed/crates/file_finder/src/file_finder.rs": {
        "Search project files...": "",
        "Invalid matches state: no element for index {ix}": "",
        "Open": "",
        "Split…": "",
        "Split Left": "",
        "Split Right": "",
        "Split Up": "",
        "Split Down": ""
    },
    "zed/crates/file_finder/src/new_path_prompt.rs": {
        "{} already exists. Do you want to replace it?": "",
        "A file or folder with the same name already exists. Replacing it will overwrite its current contents.": "",
        "Replace": "",
        "Cancel": "",
        "Type a path...": ""
    },
    "zed/crates/file_finder/src/open_path_prompt.rs": {
        "No such file or directory": ""
    },
    "zed/crates/fsevent/examples/events.rs": {
        "Must pass 1 or more paths as arguments": "",
        "event batch": "",
        "This example only works on macOS": ""
    },
    "zed/crates/fsevent/src/fsevent.rs": {
        "dropped": "",
        "unknown flag set for fs event: {}": "",
        "MOUNT ": "",
        "UNMOUNT ": "",
        "ITEM_CREATED ": "",
        "ITEM_REMOVED ": "",
        "INODE_META_MOD ": "",
        "ITEM_RENAMED ": "",
        "ITEM_MODIFIED ": "",
        "FINDER_INFO_MOD ": "",
        "ITEM_CHANGE_OWNER ": "",
        "ITEM_XATTR_MOD ": "",
        "IS_FILE ": "",
        "IS_DIR ": "",
        "IS_SYMLINK ": "",
        "OWN_EVENT ": "",
        "IS_LAST_HARDLINK ": "",
        "IS_HARDLINK ": "",
        "ITEM_CLONED ": "",
        "CoreServices": "",
        "framework": "",
        "test-event-stream": "",
        "existing-file-{}": "",
        "new-file": "",
        "existing-file-5": "",
        "running": "",
        "stopped": "",
        "CI": ""
    },
    "zed/crates/fuzzy/src/strings.rs": {
        "Invariant violation: Index {start} out of range or not on a utf-8 boundary in string {:?}": "",
        "Invariant violation: Index {end} out of range or not on a utf-8 boundary in string {:?}": ""
    },
    "zed/crates/git/src/blame.rs": {
        "failed to get commit messages": "",
        "fatal: no such ref: HEAD": "",
        "fatal: no such path": "",
        "blame": "",
        "--incremental": "",
        "--contents": "",
        "Failed to start git blame process: {}": "",
        "failed to get pipe to stdin of git blame command": "",
        "Failed to read git blame output: {}": "",
        "git blame process failed: {}": "",
        "failed to parse sha": "",
        "Failed to parse original line number": "",
        "Failed to parse final line number": "",
        "[offset_hour][offset_minute]": "",
        "filename": "",
        "previous": "",
        "summary": "",
        "author": "",
        "author-mail": "",
        "author-time": "",
        "author-tz": "",
        "committer": "",
        "committer-mail": "",
        "committer-time": "",
        "committer-tz": "",
        "CARGO_MANIFEST_DIR": "",
        "test_data": "",
        "Could not read test data at {:?}. Is it generated?": "",
        "golden": "",
        "could not serialize entries to JSON": "",
        "UPDATE_GOLDEN": "",
        "true": "",
        "could not create golden test data directory": "",
        "could not write out golden data": "",
        "could not read golden test data file at {:?}. Did you run the test with UPDATE_GOLDEN=true before?": "",
        "wrong blame entries": "",
        "blame_incremental_not_committed": "",
        "blame_incremental_simple": "",
        "blame_incremental_complex": ""
    },
    "zed/crates/git/src/commit.rs": {
        "<MARKER>": "",
        "Failed to start git blame process: {}": "",
        "'git show' failed with error {:?}": ""
    },
    "zed/crates/git/src/git.rs": {
        "failed to parse bytes into git oid": "",
        "failed to parse git oid: {}": ""
    },
    "zed/crates/git/src/remote.rs": {
        "Failed to create USERNAME_REGEX": "",
        "failed to parse URL": "",
        "unexpected scheme for {input:?}": "",
        "unexpected host for {input:?}": "",
        "unexpected path for {input:?}": "",
        "expected \"{url}\" to not parse as a Git remote URL": ""
    },
    "zed/crates/git/src/repository.rs": {
        "Operation cancelled by user": "",
        "failed to read git work directory": "",
        "{} is not a commit": "",
        "no working directory": "",
        "show": "",
        "Failed to start git show process: {e}": "",
        "Failed to start git cat-file process: {e}": "",
        "invalid object size output from cat-file {info_line}": "",
        "invalid object size output from cat-file {}": "",
        "Failed to reset:\n{}": "",
        "Failed to checkout files:\n{}": "",
        "Error loading index text: {:?}": "",
        "indexing SHA: {sha}, path {path:?}": "",
        "Failed to stage:\n{}": "",
        "Failed to unstage:\n{}": "",
        "git status failed: {}": "",
        "Failed to git git branches:\n{}": "",
        "Branch name could not be retrieved": "",
        "Failed to run git diff:\n{}": "",
        "Failed to stage paths:\n{}": "",
        "Failed to commit:\n{}": "",
        "remote": "",
        "Failed to get remotes:\n{}": "",
        "Failed to get HEAD": "",
        "Failed to get remotes": "",
        "Connecting to host timed out": "",
        "Repo paths must be relative": "",
        "no objectname": "",
        "no parent": "",
        "no refname": "",
        "unexpected format for refname": "",
        "no upstream": "",
        "no upstream:track": "",
        "no committerdate": "",
        "no contents:subject": "",
        "missing [": "",
        ", ": "",
        "gone": "",
        "ahead ": "",
        "behind ": "",
        "repo path should not be empty": "",
        "repo path `{}` should be relative, not a windows prefix": "",
        "repo path `{}` should be relative": "",
        "repo path `{}` should not start with `.`": "",
        "repo path `{}` should not start with `..`": "",
        "file": "",
        "initial": "",
        "Initial commit": "",
        "modified before checkpoint": "",
        "modified after checkpoint": "",
        "Commit after checkpoint": "",
        "new_file_after_checkpoint": ""
    },
    "zed/crates/git/src/status.rs": {
        "Invalid status code: {byte}": "",
        "Invalid unmerged status code: {byte}": "",
        "summary": "",
        "Unexpected duplicated status entries: {a_status:?} and {b_status:?}": ""
    },
    "zed/crates/git_hosting_providers/src/providers/codeberg.rs": {
        "error fetching Codeberg commit details at {:?}": "",
        "status error {}, response: {text:?}": "",
        "failed to deserialize Codeberg commit details": ""
    },
    "zed/crates/git_hosting_providers/src/providers/github.rs": {
        "the GitHub instance is not self-hosted": "",
        "github": "",
        "not a GitHub URL": "",
        "GitHub Self-Hosted": "",
        "failed to get host from github base url": "",
        "error fetching GitHub commit details at {:?}": "",
        "status error {}, response: {text:?}": "",
        "failed to deserialize GitHub commit details": "",
        "L{line}": "",
        "L{start_line}-L{end_line}": "",
        "This does not contain a pull request": "",
        "\n            project panel: do not expand collapsed worktrees on ": "",
        " (#10687)\n\n            Fixes #10597\n\n            Release Notes:\n\n            - Fixed ": "",
        " expanding collapsed worktrees.\n            ": "",
        "\n            Follow-up to #10687 to fix problems\n\n            See the original PR, this is a fix.\n            ": ""
    },
    "zed/crates/git_hosting_providers/src/providers/gitlab.rs": {
        "the GitLab instance is not self-hosted": "",
        "gitlab": "",
        "not a GitLab URL": "",
        "GitLab Self-Hosted": ""
    },
    "zed/crates/git_ui/src/branch_picker.rs": {
        "No active repository": "",
        "Failed to create branch": "",
        "Select branch...": "",
        "Failed to change branch": "",
        "Create branch \"{}\"…": "",
        "based off {}": "",
        "based off the current branch": "",
        "no commits found": ""
    },
    "zed/crates/git_ui/src/git_panel.rs": {
        "Stage All": "",
        "Unstage All": "",
        "Open Diff": "",
        "Discard Tracked Changes": "",
        "Trash Untracked Files": "",
        "GitPanel": "",
        "Conflicts": "",
        "Tracked": "",
        "Untracked": "",
        "Enter commit message": "",
        "menu": "",
        "ChangesList": "",
        "CommitEditor": "",
        "Failed to open file": "",
        "Are you sure you want to restore {}?": "",
        "Restore": "",
        "Cancel": "",
        "Trash {}?": "",
        "Failed to trash file": "",
        "HEAD": "",
        "checkout": "",
        "\nand {} more…": "",
        "Discard changes to these files?": "",
        "Trash these files?": "",
        "Failed to trash files": "",
        "add": "",
        "reset": "",
        "Git Committed": "",
        "Git Panel": "",
        "Ok": "",
        "There are still conflicts. You must stage these before committing": "",
        "No changes to commit": "",
        "commit": "",
        "Git Uncommitted": "",
        "HEAD^": "",
        "No active repository": "",
        "This commit was already pushed to {}.": "",
        ", ": "",
        "Are you sure?": "",
        "Delete": "",
        "Create": "",
        "Update": "",
        "Git Commit Message Generated": "",
        "{PROMPT}\nHere are the changes in this commit:\n{diff_text}": "",
        "{PROMPT}\nHere is the user's subject line:\n{subject}\nHere are the changes in this commit:\n{diff_text}\n": "",
        "Git Fetched": "",
        "git fetch": "",
        "Error while fetching {:?}": "",
        "Unable to initialize a git repository": "",
        "Open a directory first": "",
        "Where would you like to initialize this git repository?": "",
        "init": "",
        "Git Pulled": "",
        "Failed to get current remote: {}": "",
        "pull": "",
        "git pull {}": "",
        "Error while pulling {:?}": "",
        "Git Pushed": "",
        "push": "",
        "git push {}": "",
        "Error while pushing {:?}": "",
        "No active branch": "",
        "No active remote": "",
        "Pick which remote to push to": "",
        "Co-authored-by: ": "",
        "git {} failed": "",
        "View Log": "",
        "stdout:\n{}\nstderr:\n{}": "",
        "Open Pull Request": "",
        "Output from git {operation}": "",
        "overflow-menu-trigger": "",
        "Generating Commit...": "",
        "generate-commit-message": "",
        "Generate Commit Message": "",
        "co-authors": "",
        "Add co-authored-by:{}{}": "",
        "You must resolve conflicts before committing": "",
        "Commit in progress": "",
        "No commit message": "",
        "You do not have write access to this project": "",
        "Commit": "",
        "Commit Tracked": "",
        "git reset": "",
        "git add --all .": "",
        "No Changes": "",
        "1 Change": "",
        "{} Changes": "",
        "overflow_menu": "",
        "remote-button": "",
        "commit-editor-container": "",
        "commit-footer": "",
        "expand-commit-editor": "",
        "Open Commit Modal": "",
        "commit-msg-hover": "",
        "undo": "",
        "Uncommit": "",
        "git reset HEAD^ --soft": "",
        "git reset HEAD^": "",
        "No Git repositories": "",
        "Initialize Repository": "",
        "git init": "",
        "entries": "",
        "no active repo": "",
        "Unstage File": "",
        "Stage File": "",
        "Trash File": "",
        "Restore File": "",
        "Open File": "",
        "entry_{}_{}": "",
        "entry_{}_{}_checkbox_wrapper": "",
        "entry_{}_{}_checkbox": "",
        "Unstage": "",
        "Stage": "",
        "{} section": "",
        "Release shift to {} single entry": "",
        "Shift click to {} section": "",
        "git_panel": "",
        " (no branch)": "",
        "repo-selector": "",
        "repository-switcher": "",
        "Switch active repository": "",
        "branch-selector": "",
        "Switch Branch": "",
        "popover-button": "",
        "some-branch": "",
        "origin/some-branch": "",
        "abc123": "",
        "Modify stuff": "",
        "zed/{}": "",
        "repo-{}": "",
        "Action Button States": "",
        "No Branch": "",
        "Remote status unknown": "",
        "No Remote Upstream": "",
        "Not Ahead or Behind": "",
        "Behind remote": "",
        "Ahead of remote": "",
        "Ahead and behind remote": "",
        "Labels": "",
        "Short Branch & Repo": "",
        "main": "",
        "Long Branch": "",
        "redesign-and-update-git-ui-list-entry-style": "",
        "Long Repo": "",
        "gpui": "",
        "Long Repo & Branch": "",
        "Uppercase Repo": "",
        "LICENSES": "",
        "Uppercase Branch": ""
    },
    "zed/crates/git_ui/src/git_ui.rs": {
        "Fetch": "",
        "Fetch updates from remote": "",
        "git fetch": "",
        "Push": "",
        "Push committed changes to remote": "",
        "git push": "",
        "Pull": "",
        "git pull": "",
        "Publish": "",
        "Publish branch to remote": "",
        "git push --set-upstream": "",
        "Republish": "",
        "Re-publish branch to remote": "",
        "split-button-right": "",
        "Force Push": "",
        "split-button-left-{}": "",
        "split-button-right-{}": "",
        "Modified": "",
        "Added": "",
        "Deleted": "",
        "Conflicted": ""
    },
    "zed/crates/git_ui/src/project_diff.rs": {
        "Git Diff Opened": "",
        "Git Panel": "",
        "Action": "",
        "Project Diff": "",
        "Uncommitted Changes": "",
        "Project Diff Opened": "",
        "EmptyPane": "",
        "GitDiff": "",
        "No uncommitted changes": "",
        "Remote up to date": "",
        "project-diff-close-button": "",
        "Close": "",
        "ProjectDiff": "",
        "stage": "",
        "Toggle Staged": "",
        "Stage": "",
        "Stage and go to next hunk": "",
        "unstage": "",
        "Unstage": "",
        "Unstage and go to next hunk": "",
        "undo": "",
        "up": "",
        "Go to previous hunk": "",
        "down": "",
        "Go to next hunk": "",
        "unstage-all": "",
        "Unstage All": "",
        "Unstage all changes": "",
        "Unstaged": "",
        "Stage All": "",
        "Stage all changes": "",
        "commit": "",
        "Commit": "",
        "{} Commits Ahead": "",
        "Push your changes to {}": "",
        "push": "",
        "Publish Branch": "",
        "Create {} on remote": "",
        "publish": "",
        "Remote status unknown": "",
        "No Repository": "",
        "No Changes": "",
        "project-diff-remote-button": "",
        "some-branch": "",
        "origin/some-branch": "",
        "abc123": "",
        "Modify stuff": "",
        "No Repo": "",
        "Unknown Upstream": "",
        "Ahead of Remote": ""
    },
    "zed/crates/git_ui/src/remote_output.rs": {
        "fetch": "",
        "pull": "",
        "push": "",
        "Already up to date": "",
        "Synchronized with remotes": "",
        "Failed to get last line of output": "",
        "Failed to get first word of last line": "",
        "Everything up to date": "",
        "Updating": "",
        "Received {} file change{} from {}": "",
        "s": "",
        "Fast forwarded from {}": "",
        "Merge": "",
        "Merged {} file change{} from {}": "",
        "Merged from {}": "",
        "Successfully rebased": "",
        "Successfully rebased from {}": "",
        "Successfully pulled from {}": "",
        "* [new branch]": "",
        "Create a pull request": "",
        "Published {} to {}": "",
        "Pushed {} to {}": ""
    },
    "zed/crates/go_to_line/src/cursor_position.rs": {
        "before the first character": "",
        "added 1": "",
        "line": "",
        "selection": "",
        "character": "",
        "Go to Line/Column": ""
    },
    "zed/crates/go_to_line/src/go_to_line.rs": {
        "Current Line: {} of {} (column {})": "",
        "Go to line {line}, character {character}": "",
        "Go to line {line}": "",
        "Initially opened go to line modal should not highlight any rows": "",
        "Go to line modal should highlight a row, corresponding to the query": "",
        "If the query is too large, the last row should be highlighted": "",
        "After cancelling and closing the modal, no rows should be highlighted": "",
        "Reopened modal should not highlight any rows": "",
        "After confirming and closing the modal, no rows should be highlighted": "",
        "missing cursor position item": "",
        "No selections should be initially": "",
        "After selecting a text with multibyte unicode characters, the character count should be correct": "",
        "Beginning of the line should be at first line, before any characters": "",
        "Wrong position for char '{c}' in string '{text}'": "",
        "After reaching the end of the text, position should not change when moving right": "",
        "When going to {point:?}, expecting the cursor to be at char '{c}' in string '{text}'": "",
        "When going into too large point, should go to the end of the text": "",
        "No position found": "",
        "No placeholder text": "",
        "Expected one caret selection but got: {selections:?}": "",
        "Expected a single caret selection, but got: {selection:?}": ""
    },
    "zed/crates/google_ai/src/google_ai.rs": {
        "Request must contain at least one content item": "",
        "User content must contain at least one part": "",
        "data: ": "",
        "error during streamGenerateContent, status code: {:?}, body: {}": "",
        "error during countTokens, status code: {:?}, body: {}": ""
    },
    "zed/crates/gpui/examples/hello_world.rs": {
        "Hello, {}!": "",
        "World": ""
    },
    "zed/crates/gpui/examples/image/image.rs": {
        "Image loaded from a local file": "",
        "Image loaded from a remote resource": "",
        "Image loaded from an asset": "",
        "Auto Width": "",
        "Auto Height": "",
        "image with max width 100%": "",
        "examples": "",
        "gpui example": "",
        "Image": "",
        "Quit": "",
        "Image Example": ""
    },
    "zed/crates/gpui/examples/set_menus.rs": {
        "Set Menus Example": "",
        "Quit": "",
        "Gracefully quitting the application . . .": ""
    },
    "zed/crates/gpui/examples/uniform_list.rs": {
        "entries": "",
        "clicked Item {item:?}": "",
        "Item {item}": ""
    },
    "zed/crates/gpui/examples/window_positioning.rs": {
        "origin: {}, {} size: {}, {}": "",
        "cx.bounds() origin: {}, {} size {}, {}": "",
        "Top Left {:?}": "",
        "Top Right {:?}": "",
        "Bottom Left {:?}": "",
        "Bottom Right {:?}": "",
        "Top Center {:?}": "",
        "Left Center {:?}": "",
        "Center {:?}": "",
        "Right Center {:?}": "",
        "Bottom Center {:?}": ""
    },
    "zed/crates/gpui/src/elements/animation.rs": {
        "delta should always be between 0 and 1": "",
        "should only be called once": ""
    },
    "zed/crates/gpui/src/elements/div.rs": {
        "DragMoveEvent is only valid when the stored active drag is of the same type.": "",
        "calling on_drag more than once on the same element is not supported": "",
        "calling on_hover more than once on the same element is not supported": "",
        "calling tooltip more than once on the same element is not supported": "",
        "hover style already set": "",
        "This element was created at:\n{}:{}:{}": "",
        "checked for type drag state type above": ""
    },
    "zed/crates/gpui/src/action.rs": {
        "dyn Action": "",
        "name": "",
        "Didn't find an action named \"{name}\"": "",
        "Error while building action \"{name}\": {error}": "",
        "no action type registered for {:?}": "",
        "All actions in all_names should be registered": "",
        "action generated by `gpui::actions!`": "",
        "action generated by `gpui::action_as!`": "",
        "action, generated by `gpui::action_with_deprecated_aliases!`": "",
        " is an internal action, so cannot be built from JSON.": ""
    },
    "zed/crates/gpui/src/app.rs": {
        "TRACK_THREAD_BORROWS": "",
        "borrowed {thread_id:?}": "",
        "dropped borrow from {thread_id:?}": "",
        "dropped {thread_id:?}": "",
        "GPUI was compiled in test mode": "",
        "must construct App on main thread": "",
        "timed out waiting on app_will_quit": "",
        "invalid event type": "",
        "All windows should be off the stack when flushing effects": "",
        "window not found": "",
        "no state of type {} exists": "",
        "no global added for {}": "",
        "no global registered of type {}": "",
        "invalid entity type": "",
        "attempted to read a window that is already on the stack": "",
        "root view's type has changed": "",
        "Notify({})": "",
        "Emit({:?})": "",
        "RefreshWindows": "",
        "NotifyGlobalObservers({:?})": "",
        "Defer(..)": "",
        "EntityCreated({:?})": "",
        "No HttpClient available": ""
    },
    "zed/crates/gpui/src/arena.rs": {
        "not enough space in Arena": "",
        "attempted to dereference an ArenaRef after its Arena was cleared": ""
    },
    "zed/crates/gpui/src/asset_cache.rs": {
        "Failed to load asset: {}": ""
    },
    "zed/crates/gpui/src/color.rs": {
        "a string in the format #rrggbb or #rrggbbaa": "",
        "Expected #rgb, #rgba, #rrggbb, or #rrggbbaa": "",
        "invalid unicode characters in color": "",
        "invalid RGBA hex color: '{value}'. {EXPECTED_FORMATS}": "",
        "{INVALID_UNICODE}: r component of #rgb/#rgba for value: '{value}'": "",
        "{INVALID_UNICODE}: g component of #rgb/#rgba for value: '{value}'": "",
        "{INVALID_UNICODE}: b component of #rgb/#rgba for value: '{value}'": "",
        "{INVALID_UNICODE}: a component of #rgba for value: '{value}'": "",
        "{}: r component of #rrggbb/#rrggbbaa for value: '{}'": "",
        "{INVALID_UNICODE}: g component of #rrggbb/#rrggbbaa for value: '{value}'": "",
        "{INVALID_UNICODE}: b component of #rrggbb/#rrggbbaa for value: '{value}'": "",
        "{INVALID_UNICODE}: a component of #rrggbbaa for value: '{value}'": "",
        "Solid({:?})": ""
    },
    "zed/crates/gpui/src/element.rs": {
        "views": "",
        "must call request_layout only once": "",
        "must call request_layout before prepaint": "",
        "must call prepaint before paint": "",
        "cannot measure after painting": ""
    },
    "zed/crates/gpui/src/executor.rs": {
        "\nbacktrace of waiting future:\n{:?}": "",
        "\n  waiting on: {}\n": "",
        "parked with nothing left to run{waiting_message}{backtrace_message}": "",
        "parked with nothing let to run": "",
        "local task dropped by a thread that didn't spawn it. Task spawned at {}": "",
        "local task polled by a thread that didn't spawn it. Task spawned at {}": ""
    },
    "zed/crates/gpui/src/key_dispatch.rs": {
        "Editor": "",
        "Pane": "",
        "node {} was not part of the reused subtree {:?}": "",
        "Workspace": ""
    },
    "zed/crates/gpui/src/platform/linux/platform.rs": {
        "Couldn't open file picker due to missing xdg-desktop-portal implementation.": "",
        "Failed to get app path: {:?}": "",
        "Restarting process, using app path: {:?}": "",
        "\n            while kill -0 {pid} 2>/dev/null; do\n                sleep 0.1\n            done\n\n            {app_path}\n            ": "",
        "failed to spawn restart script: {:?}": "",
        "activate is not implemented on Linux, ignoring the call": "",
        "hide is not implemented on Linux, ignoring the call": "",
        "hide_other_apps is not implemented on Linux, ignoring the call": "",
        "unhide_other_apps is not implemented on Linux, ignoring the call": "",
        "Open Folder": "",
        "Open File": "",
        "Save File": "",
        "pathbuf should not be nul terminated": "",
        "pick files": "",
        "pick directories": "",
        "xdg-open": "",
        "invoking xdg-open": "",
        "Platform<LinuxPlatform>::path_for_auxiliary_executable is not implemented yet": "",
        "url": "",
        "username": "",
        "Cannot find username in stored credentials": "",
        "register_url_scheme unimplemented": "",
        "Failed to open with dbus: {}": "",
        "XDG_ACTIVATION_TOKEN": "",
        "Failed to open with {:?}: {}": "",
        "CursorStyle::None should be handled separately in the client": ""
    },
    "zed/crates/gpui/src/platform/windows/platform.rs": {
        "unable to initialize Windows OLE": "",
        "Error creating bitmap factory.": "",
        "Error creating DirectWriteTextSystem": "",
        "Unable to init GPU context": "",
        "Error retrieve windows version": "",
        "Dock menu for index {action_idx} not found": "",
        "Set `MenuItemSubmenu` for dock menu on Windows is not supported.": "",
        "--dock-action {}": "",
        "Something went wrong while waiting {:?}": "",
        "\n            $pidToWaitFor = {}\n            $exePath = ": "",
        "\n\n            while ($true) {{\n                $process = Get-Process -Id $pidToWaitFor -ErrorAction SilentlyContinue\n                if (-not $process) {{\n                    Start-Process -FilePath $exePath\n                    break\n                }}\n                Start-Sleep -Seconds 0.1\n            }}\n            ": "",
        "failed to spawn restart script: {:?}": "",
        "screen capture not implemented": "",
        "only files": "",
        "only folders": "",
        "unable to parse file path": "",
        "unable to parse file full path: {}": "",
        "not yet implemented": "",
        "register_url_scheme unimplemented": "",
        "Unable to open target: {}": "",
        "Unable to open target in explorer: {}": "",
        "All files": "",
        "unable to get module handle": "",
        "unable to load icon file": "",
        "你好，我是张小白": ""
    },
    "zed/crates/html_to_markdown/src/html_to_markdown.rs": {
        "failed to parse HTML": "",
        "failed to convert HTML to Markdown": "",
        "failed to parse HTML document": ""
    },
    "zed/crates/html_to_markdown/src/markdown_writer.rs": {
        "Failed to create empty_line_regex": ""
    },
    "zed/crates/http_client/src/github.rs": {
        "prerelease": "",
        "error fetching latest release": "",
        "error reading latest release": "",
        "status error {}, response: {text:?}": "",
        "Error deserializing: {:?}": "",
        "GitHub API response text: {:?}": "",
        "error deserializing latest release": "",
        "Failed to find a release": "",
        "error deserializing GitHub release": "",
        "cannot modify url path segments": ""
    },
    "zed/crates/http_client/src/http_client.rs": {
        "BlockedHttpClient disallowed request": ""
    },
    "zed/crates/image_viewer/src/image_viewer.rs": {
        "No image path found": "",
        "Path not found": "",
        "DELETE FROM image_viewers WHERE workspace_id = ? AND item_id NOT IN ({placeholders})": ""
    },
    "zed/crates/indexed_docs/src/providers/rustdoc.rs": {
        "failed to load cargo metadata": "",
        "no docs directory for '{crate_name}'. if this is a valid crate name, try running `cargo doc`": "",
        "no cargo doc directory. run `cargo doc`": "",
        "latest": "",
        "error reading docs.rs response body": "",
        "status error {}, response: {text:?}": "",
        "failed to fetch {item:?}: {history:?}": "",
        "failed to fetch {item:?}": ""
    },
    "zed/crates/indexed_docs/src/store.rs": {
        "no indexed docs store found for {provider}": "",
        "no docs found for {key}": ""
    },
    "zed/crates/inline_completion_button/src/inline_completion_button.rs": {
        "copilot-error": "",
        "Copilot can't be started: {}": "",
        "Reinstall Copilot": "",
        "GitHub Copilot": "",
        "copilot": "",
        "copilot-icon": "",
        "supermaven": "",
        "Sign In": "",
        "Use Copilot": "",
        "Read Terms of Service": "",
        "Sign in to use": "",
        "zed-predict-pending-button": "",
        "Edit Predictions": "",
        "Pending ToS Clicked": "",
        "Edit Prediction Status Button": "",
        "Edit Prediction": "",
        "Hidden For This File": "",
        "Disabled For This File": "",
        "zeta": "",
        "pulsating-label": "",
        "Disable Copilot": "",
        "Use Supermaven": "",
        "Show Edit Predictions For": "",
        "This Buffer": "",
        "Edit predictions cannot be toggled for this buffer because they are disabled for {}": "",
        "All Files": "",
        "Display Modes": "",
        "Eager": "",
        "Display predictions inline when there are no language server completions available.": "",
        "Subtle": "",
        "Display predictions inline only when holding a modifier key (alt by default).": "",
        "Privacy Settings": "",
        "Training Data Collection": "",
        "Project identified as open source, and you're sharing data.": "",
        "Project identified as open source, but you're not sharing data.": "",
        "Project not identified as open source. No data captured.": "",
        "Project not identified as open source, and setting turned off.": ""
    },
    "zed/crates/install_cli/src/install_cli.rs": {
        "cli": "",
        "-e": "",
        " with administrator privileges": "",
        "error running osascript": ""
    },
    "zed/crates/language/src/buffer_tests.rs": {
        "Failed to create TRAILING_WHITESPACE_REGEX": "",
        "invalid `MIN_PEERS` variable": "",
        "invalid `MAX_PEERS` variable": "",
        "OPERATIONS": "",
        "invalid `OPERATIONS` variable": "",
        "Adding initial peer with replica id {}": "",
        "initial text: {:?}": "",
        "buffer {} text: {:?}": "",
        "peer {} clearing active selections": "",
        "peer {} setting active selections: {:?}": "",
        "peer {} setting diagnostics: {:?}": "",
        "Adding new replica {} (replicating from {})": "",
        "New replica {} text: {:?}": "",
        "peer {} (version: {:?}) applying {} ops from the network. {:?}": "",
        "Replica {} version != Replica 0 version": "",
        "Replica {} text != Replica 0 text": "",
        "Replica {} diagnostics != Replica 0 diagnostics": "",
        "Replica {} remote selections != expected selections": "",
        "wrong ranges for text lines:\n{:?}": ""
    },
    "zed/crates/language_model_selector/src/language_model_selector.rs": {
        "Failed to authenticate provider: {}: {err}": "",
        "Select a model...": "",
        "Configured Models": "",
        "Zed Pro": "",
        "Upgrade to Pro": "",
        "Try Pro": "",
        "Configure": ""
    },
    "zed/crates/language_selector/src/active_buffer_language.rs": {
        "Unknown": "",
        "Select Language": ""
    },
    "zed/crates/language_selector/src/language_selector.rs": {
        " (current)": "",
        "Select a language…": "",
        "project was dropped": "",
        "buffer was dropped": ""
    },
    "zed/crates/language_models/src/provider/anthropic.rs": {
        "invalid {PROVIDER_NAME} API key": "",
        "App state dropped": "",
        "Missing Anthropic API Key": "",
        "failed to stream completion": "",
        "System role should never occur here": "",
        "end_turn": "",
        "max_tokens": "",
        "tool_use": "",
        "Unexpected anthropic stop_reason: {stop_reason}": "",
        "sk-ant-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx": "",
        "not signed in": "",
        "Loading credentials...": "",
        "To use Zed's assistant with Anthropic, you need to add an API key. Follow these steps:": "",
        "Create one by visiting": "",
        "Anthropic's settings": "",
        "Paste your API key below and hit enter to start using the assistant": "",
        "You can also assign the {ANTHROPIC_API_KEY_VAR} environment variable and restart Zed.": "",
        "API key set in {ANTHROPIC_API_KEY_VAR} environment variable.": "",
        "API key configured.": "",
        "Reset key": "",
        "To reset your API key, unset the {ANTHROPIC_API_KEY_VAR} environment variable.": ""
    },
    "zed/crates/language_models/src/provider/bedrock.rs": {
        "Amazon Bedrock": "",
        "static_credentials": "",
        "default": "",
        "type": "",
        "lowercase": "",
        "You are authenticated using Static Credentials.": "",
        "You are authenticated using a Named Profile, but no profile is set.": "",
        "You are authenticated using a Named Profile: {profile_name}": "",
        "You are authenticated using Automatic Credentials.": "",
        "invalid {PROVIDER_NAME} credentials": "",
        "failed to parse credentials": "",
        "App state dropped": "",
        "zed-bedrock-provider": "",
        "Failed to initialize Bedrock client: {err}": "",
        "Bedrock client not initialized": "",
        "App State Dropped": "",
        "failed to build Bedrock tool use block": "",
        "failed to build Bedrock tool result block": "",
        "System role should never occur here": "",
        "failed to build Bedrock message": "",
        "not signed in": "",
        "Loading credentials...": "",
        "Access Key ID is set in {ZED_BEDROCK_ACCESS_KEY_ID_VAR}, Secret Key is set in {ZED_BEDROCK_SECRET_ACCESS_KEY_VAR}, Region is set in {ZED_BEDROCK_REGION_VAR} environment variables.": "",
        "reset-key": "",
        "Reset key": "",
        "To reset your credentials, unset the {ZED_BEDROCK_ACCESS_KEY_ID_VAR}, {ZED_BEDROCK_SECRET_ACCESS_KEY_VAR}, and {ZED_BEDROCK_REGION_VAR} environment variables.": "",
        "You cannot reset credentials as they're being derived, check Zed settings to understand how": "",
        "To use Zed's assistant with Bedrock, you can set a custom authentication strategy through the settings.json, or use static credentials.": "",
        "Though to access models on AWS first, you will have to: ": "",
        "Grant permissions to the strategy you plan to use according to this documentation: ": "",
        "Prerequisites": "",
        "Select the models you would like access to: ": "",
        "Bedrock Model Catalog": "",
        "You can also assign the {ZED_BEDROCK_ACCESS_KEY_ID_VAR}, {ZED_BEDROCK_SECRET_ACCESS_KEY_VAR} AND {ZED_BEDROCK_REGION_VAR} environment variables and restart Zed.\n Optionally, if your environment uses AWS CLI profiles, you can set {ZED_AWS_PROFILE_VAR}; if it requires a custom endpoint, you can set {ZED_AWS_ENDPOINT_VAR}; and if it requires a Session Token, you can set {ZED_BEDROCK_SESSION_TOKEN_VAR}.": "",
        "Static Keys": "",
        "This method uses your AWS access key ID and secret access key directly.": "",
        "Create an IAM user in the AWS console with programmatic access": "",
        "IAM Console": "",
        "Attach the necessary Bedrock permissions to this ": "",
        "Copy the access key ID and secret access key when provided": "",
        "Enter these credentials below": "",
        "Access Key ID": "",
        "Secret Access Key": "",
        "Session Token (Optional)": "",
        "Region": ""
    },
    "zed/crates/language_models/src/provider/cloud.rs": {
        "type": "",
        "Terms of Service": "",
        "I accept the Terms of Service": "",
        "To start using Zed AI, please read and accept the": "",
        "ZED_COMPLETIONS_URL": "",
        "cloud language model completion failed after {} retries with status {status}: {body}": "",
        "cloud language model completion failed with status {status}: {body}": "",
        "You have full access to Zed's hosted LLMs, which include models from Anthropic, OpenAI, and Google. They come with faster speeds and higher limits through Zed Pro.": "",
        "You have basic access to models from Anthropic through the Zed AI Free plan.": "",
        "Manage Subscription": "",
        "Learn more": "",
        "Upgrade": "",
        "Use Zed AI to access hosted language models.": "",
        "Sign In": ""
    },
    "zed/crates/language_models/src/provider/copilot_chat.rs": {
        "copilot_chat": "",
        "GitHub Copilot Chat": "",
        "Copilot must be enabled for Copilot Chat to work. Please enable Copilot and try again.": "",
        "Received the following error while signing into Copilot: {err}": "",
        "Copilot is still starting, please wait for Copilot to start then try again": "",
        "Unable to authorize with Copilot. Please make sure that you have an active Copilot and Copilot Chat subscription.": "",
        "You have signed out of Copilot. Please sign in to Copilot and try again.": "",
        "Still signing into Copilot...": "",
        "Signing out of GitHub Copilot Chat is currently not supported.": "",
        "copilot_chat/{}": "",
        "Empty prompts aren't allowed. Please provide a non-empty prompt.": "",
        "The final message must be from the user. To provide a system prompt, you must provide the system prompt followed by a user prompt.": "",
        "Response contained no choices": "",
        "Response contained no delta": "",
        "stop": "",
        "tool_calls": "",
        "Unexpected Copilot Chat stop_reason: {stop_reason:?}": "",
        "Authorized.": "",
        "Sign Out": "",
        "icon_circle_arrow": "",
        "Copilot Chat requires an active GitHub Copilot subscription. Please ensure Copilot is configured and try again, or use a different Assistant provider.": "",
        "Starting Copilot...": "",
        "Signing in to Copilot...": "",
        "Copilot had issues starting. Please try restarting it. If the issue persists, try reinstalling Copilot.": "",
        "To use Zed's assistant with GitHub Copilot, you need to be logged in to GitHub. Note that your GitHub account must have an active Copilot Chat subscription.": "",
        "Sign In": "",
        "Sign in to start using Github Copilot Chat.": ""
    },
    "zed/crates/language_models/src/provider/deepseek.rs": {
        "invalid {PROVIDER_NAME} API key": "",
        "App state dropped": "",
        "Missing DeepSeek API Key": "",
        "user": "",
        "assistant": "",
        "system": "",
        "Empty response": "",
        "Loading credentials...": "",
        "To use DeepSeek in Zed, you need an API key:": "",
        "Get your API key from the": "",
        "DeepSeek console": "",
        "Paste your API key below and hit enter to start using the assistant": "",
        "Or set the {} environment variable.": "",
        "API key set in {}": "",
        "API key configured": "",
        "Reset": ""
    },
    "zed/crates/language_models/src/provider/google.rs": {
        "invalid {PROVIDER_NAME} API key": "",
        "App state dropped": "",
        "Missing Google API key": "",
        "failed to stream completion": "",
        "output": "",
        "STOP": "",
        "Unexpected google finish_reason: {finish_reason}": "",
        "user": "",
        "assistant": "",
        "system": "",
        "not signed in": "",
        "AIzaSy...": "",
        "Loading credentials...": "",
        "To use Zed's assistant with Google AI, you need to add an API key. Follow these steps:": "",
        "Create one by visiting": "",
        "Google AI's console": "",
        "Paste your API key below and hit enter to start using the assistant": "",
        "You can also assign the {GOOGLE_AI_API_KEY_VAR} environment variable and restart Zed.": "",
        "API key set in {GOOGLE_AI_API_KEY_VAR} environment variable.": "",
        "API key configured.": "",
        "Reset key": "",
        "To reset your API key, unset the {GOOGLE_AI_API_KEY_VAR} environment variable.": ""
    },
    "zed/crates/language_models/src/provider/lmstudio.rs": {
        "App state dropped": "",
        "Run local LLMs like Llama, Phi, and Qwen.": "",
        "To use LM Studio as a provider for Zed assistant, it needs to be running with at least one model downloaded.": "",
        "Loading models...": "",
        "To get your first model, try running": "",
        "Download LM Studio": "",
        "Model Catalog": "",
        "Connected": "",
        "Connect": ""
    },
    "zed/crates/language_models/src/provider/mistral.rs": {
        "invalid {PROVIDER_NAME} API key": "",
        "App state dropped": "",
        "Missing Mistral API Key": "",
        "Empty response": "",
        "0aBCDEFGhIjKLmNOpqrSTUVwxyzabCDE1f2": "",
        "not signed in": "",
        "Loading credentials...": "",
        "To use Zed's assistant with Mistral, you need to add an API key. Follow these steps:": "",
        "Create one by visiting": "",
        "Mistral's console": "",
        "Ensure your Mistral account has credits": "",
        "Paste your API key below and hit enter to start using the assistant": "",
        "You can also assign the {MISTRAL_API_KEY_VAR} environment variable and restart Zed.": "",
        "API key set in {MISTRAL_API_KEY_VAR} environment variable.": "",
        "API key configured.": "",
        "Reset key": "",
        "To reset your API key, unset the {MISTRAL_API_KEY_VAR} environment variable.": ""
    },
    "zed/crates/language_models/src/provider/ollama.rs": {
        "App state dropped": "",
        "Get up and running with Llama 3.3, Mistral, Gemma 2, and other large language models with Ollama.": "",
        "Ollama must be running with at least one model installed to use it in the assistant.": "",
        "Loading models...": "",
        "Once installed, try ": "",
        "download_ollama_button": "",
        "Download Ollama": "",
        "All Models": "",
        "connected": "",
        "Connected": "",
        "Connect": ""
    },
    "zed/crates/language_models/src/provider/open_ai.rs": {
        "invalid {PROVIDER_NAME} API key": "",
        "App state dropped": "",
        "Missing OpenAI API Key": "",
        "Response contained no choices": "",
        "Unexpected OpenAI stop_reason: {stop_reason:?}": "",
        "not signed in": "",
        "Loading credentials...": "",
        "To use Zed's assistant with OpenAI, you need to add an API key. Follow these steps:": "",
        "Create one by visiting": "",
        "OpenAI's console": "",
        "Ensure your OpenAI account has credits": "",
        "Paste your API key below and hit enter to start using the assistant": "",
        "You can also assign the {OPENAI_API_KEY_VAR} environment variable and restart Zed.": "",
        "Note that having a subscription for another service like GitHub Copilot won't work.": "",
        "API key set in {OPENAI_API_KEY_VAR} environment variable.": "",
        "API key configured.": "",
        "Reset key": "",
        "To reset your API key, unset the {OPENAI_API_KEY_VAR} environment variable.": ""
    },
    "zed/crates/media/src/media.rs": {
        "error getting sample timing info, code {}": "",
        "CoreMedia": "",
        "framework": "",
        "error getting parameter set, code: {}": "",
        "could not get block buffer data": "",
        "could not create texture cache, code: {}": "",
        "could not create texture, code: {}": "",
        "CoreVideo": ""
    },
    "zed/crates/media/build.rs": {
        "unable to generate bindings": "",
        "couldn't write dispatch bindings": ""
    },
    "zed/crates/node_runtime/src/node_runtime.rs": {
        "no version found for npm package {}": "",
        "invalid node binary path": "",
        "failed to create PATH env variable": "",
        "Node runtime install_if_needed": "",
        "Running on unsupported os: {other}": "",
        "Running on unsupported architecture: {other}": "",
        "error creating node containing dir": "",
        "error downloading Node binary tarball": "",
        "missing node binary file": "",
        "missing npm file": "",
        "failed to launch npm subcommand {subcommand} subcommand\nerr: {:?}": "",
        "failed to execute npm {subcommand} subcommand:\nstdout: {:?}\nstderr: {:?}": "",
        "running node from {:?}": "",
        "failed to run node --version. stdout: {}, stderr: {}": "",
        "node at {} is too old. want: {}, got: {}": "",
        "binary_path: no node runtime available": "",
        "run_npm_subcommand: no node runtime available": "",
        "npm_package_installed_version: no node runtime available": "",
        "Missing environment variable: SYSTEMROOT!": "",
        "Missing environment variable: ComSpec!": ""
    },
    "zed/crates/notifications/src/notification_store.rs": {
        "Notification store was dropped while loading notifications": ""
    },
    "zed/crates/ollama/src/ollama.rs": {
        "lowercase": "",
        "user": "",
        "assistant": "",
        "system": "",
        "invalid role '{value}'": "",
        "5m": "",
        "10m": "",
        "1h": "",
        "1d": "",
        "schemars": "",
        "phi": "",
        "tinyllama": "",
        "granite-code": "",
        "llama2": "",
        "yi": "",
        "vicuna": "",
        "stablelm2": "",
        "llama3": "",
        "gemma2": "",
        "gemma": "",
        "codegemma": "",
        "starcoder": "",
        "aya": "",
        "codellama": "",
        "starcoder2": "",
        "mistral": "",
        "codestral": "",
        "mixstral": "",
        "llava": "",
        "qwen2": "",
        "qwen2.5-coder": "",
        "dolphin-mixtral": "",
        "phi3": "",
        "phi4": "",
        "command-r": "",
        "deepseek-coder-v2": "",
        "deepseek-r1": "",
        "yi-coder": "",
        ":latest": "",
        "role": "",
        "type": "",
        "{api_url}/api/chat": "",
        "Content-Type": "",
        "application/json": "",
        "Failed to connect to API: {} {}": "",
        "Unable to parse chat response": "",
        "Failed to connect to Ollama API: {} {}": "",
        "{api_url}/api/tags": "",
        "Accept": "",
        "Unable to parse Ollama tag listing": "",
        "{api_url}/api/generate": "",
        "model": "",
        "keep_alive": "",
        "15m": ""
    },
    "zed/crates/open_ai/src/open_ai.rs": {
        "lowercase": "",
        "user": "",
        "assistant": "",
        "system": "",
        "tool": "",
        "invalid role '{value}'": "",
        "schemars": "",
        "gpt-3.5-turbo": "",
        "gpt-4": "",
        "gpt-4-turbo": "",
        "gpt-4o": "",
        "gpt-4o-mini": "",
        "o1": "",
        "o1-preview": "",
        "o1-mini": "",
        "o3-mini": "",
        "custom": "",
        "gpt-4-turbo-preview": "",
        "invalid model id": "",
        "Option::is_none": "",
        "Vec::is_empty": "",
        "type": "",
        "role": "",
        "is_none_or_empty": "",
        "{api_url}/chat/completions": "",
        "Content-Type": "",
        "application/json": "",
        "Authorization": "",
        "Failed to connect to OpenAI API: {}": "",
        "Failed to connect to OpenAI API: {} {}": "",
        "{api_url}/completions": "",
        "data: ": "",
        "[DONE]": "",
        "text-embedding-3-small": "",
        "text-embedding-3-large": "",
        "{api_url}/embeddings": "",
        "failed to parse OpenAI embedding response": "",
        "error during embedding, status: {:?}, body: {:?}": ""
    },
    "zed/crates/outline/src/outline.rs": {
        "Search buffer symbols...": "",
        "\n                                       // display line 0\n                    struct SingleLine; // display line 1\n                                       // display line 2\n                    struct MultiLine { // display line 3\n                        field_1: i32,  // display line 4\n                        field_2: i32,  // display line 5\n                    }                  // display line 6\n                ": "",
        "struct SingleLine": "",
        "struct MultiLine": "",
        "field_1": "",
        "field_2": "",
        "Initially opened outline view should have no highlights": "",
        "Second struct's rows should be highlighted": "",
        "First struct's row should be highlighted": "",
        "No rows should be highlighted after outline view is cancelled and closed": "",
        "Reopened outline view should have no highlights": "",
        "No rows should be highlighted after outline view is confirmed and closed": "",
        "(struct_item\n            (visibility_modifier)? @context\n            ": "",
        " @context\n            name: (_) @name) @item\n\n        (enum_item\n            (visibility_modifier)? @context\n            ": "",
        " @context\n            name: (_) @name) @item\n\n        (enum_variant\n            (visibility_modifier)? @context\n            name: (_) @name) @item\n\n        (impl_item\n            ": "",
        " @context\n            trait: (_)? @name\n            ": "",
        "? @context\n            type: (_) @name) @item\n\n        (trait_item\n            (visibility_modifier)? @context\n            ": "",
        " @context\n            name: (_) @name) @item\n\n        (function_item\n            (visibility_modifier)? @context\n            (function_modifiers)? @context\n            ": "",
        " @context\n            name: (_) @name) @item\n\n        (function_signature_item\n            (visibility_modifier)? @context\n            (function_modifiers)? @context\n            ": "",
        " @context\n            name: (_) @name) @item\n\n        (macro_definition\n            . ": "",
        " @context\n            name: (_) @name) @item\n\n        (mod_item\n            (visibility_modifier)? @context\n            ": "",
        " @context\n            name: (_) @name) @item\n\n        (type_item\n            (visibility_modifier)? @context\n            ": "",
        " @context\n            name: (_) @name) @item\n\n        (associated_type\n            ": "",
        " @context\n            name: (_) @name) @item\n\n        (const_item\n            (visibility_modifier)? @context\n            ": "",
        " @context\n            name: (_) @name) @item\n\n        (field_declaration\n            (visibility_modifier)? @context\n            name: (_) @name) @item\n": "",
        "Expected one caret selection but got: {selections:?}": "",
        "Expected a single caret selection, but got: {selection:?}": ""
    },
    "zed/crates/outline_panel/src/outline_panel.rs": {
        "OutlinePanel": "",
        "Highlighted text that does not match the buffer text": "",
        "loading outline panel": "",
        "Filter...": "",
        "have a &mut Workspace": "",
        "menu": "",
        "editing": "",
        "not_editing": "",
        "Reveal in Finder": "",
        "Reveal in File Manager": "",
        "Open in Terminal": "",
        "Unfold Directory": "",
        "Fold Directory": "",
        "Copy Path": "",
        "Copy Relative Path": "",
        "Lines {}- {}": "",
        "Untitled": "",
        "Unknown buffer": "",
        "search-{match_range:?}": "",
        "Empty folded dirs receiver": "",
        "project-panel-vertical-scroll": "",
        "project-panel-horizontal-scroll": "",
        "No matches for query": "",
        "No outlines available": "",
        "Toggle this panel with {keystroke}": "",
        "entries": "",
        "outline-panel-menu": "",
        "Unpin Outline": "",
        "Pin Active Outline": "",
        "buffers_inside_directory called on a non-directory entry {dir_entry:?}": "",
        "Outline Panel": "",
        "outline-panel": "",
        "Searching:": "",
        "  <==== selected": "",
        "Project search view expected to appear after new search event trigger": "",
        "param_names_for_lifetime_elision_hints": "",
        "{line_to_select}{SELECTED_MARKER}": "",
        "search: match config.param_names_for_lifetime_elision_hints {": "",
        "inlay_hints/": "",
        "ide/src/": "",
        "a": "",
        "{root_path}\n  crates/\n    ide/src/\n      inlay_hints/\n        fn_lifetime_fn.rs\n          search: match config.param_names_for_lifetime_elision_hints {{\n          search: allocated_lifetimes.push(if config.param_names_for_lifetime_elision_hints {{\n          search: Some(it) if config.param_names_for_lifetime_elision_hints => {{\n          search: InlayHintsConfig {{ param_names_for_lifetime_elision_hints: true, ..TEST_CONFIG }},\n      inlay_hints.rs\n        search: pub param_names_for_lifetime_elision_hints: bool,\n        search: param_names_for_lifetime_elision_hints: self\n      static_index.rs\n        search: param_names_for_lifetime_elision_hints: false,\n    rust-analyzer/src/\n      cli/\n        analysis_stats.rs\n          search: param_names_for_lifetime_elision_hints: true,\n      config.rs\n        search: param_names_for_lifetime_elision_hints: self": "",
        "should have an active editor open": "",
        "search: ": "",
        "Should place the initial editor selection on the corresponding search result": "",
        "search: Some(it) if config.param_names_for_lifetime_elision_hints => {": "",
        "Should still have the initial caret position after SelectNext calls": "",
        "After opening, should move the caret to the opened outline entry's position": "",
        "search: InlayHintsConfig { param_names_for_lifetime_elision_hints: true, ..TEST_CONFIG },": "",
        "Should again preserve the selection after another SelectNext call": "",
        "After opening an excerpt, new editor should be open": "",
        "fn_lifetime_fn.rs  <==== selected": "",
        "When opening the excerpt, should navigate to the place corresponding the outline entry": "",
        "one": "",
        "aaa aaa": "",
        "two": "",
        "a aaa": "",
        "Were opening another worktree directory": "",
        "Directory should be opened successfully": "",
        "aaa": "",
        "src": "",
        "\n#[derive(Clone, Debug, PartialEq, Eq, Hash)]\nstruct OutlineEntryExcerpt {\n    id: ExcerptId,\n    buffer_id: BufferId,\n    range: ExcerptRange<language::Anchor>,\n}": "",
        "\n                (struct_item\n                    (visibility_modifier)? @context\n                    ": "",
        " @context\n                    name: (_) @name) @item\n\n                (field_declaration\n                    (visibility_modifier)? @context\n                    name: (_) @name) @item\n": "",
        "Failed to open Rust source file": "",
        "Should open an editor for Rust source file": "",
        "\noutline: struct OutlineEntryExcerpt\n  outline: id\n  outline: buffer_id\n  outline: range": "",
        "\noutline: struct OutlineEntryExcerpt  <==== selected\n  outline: id\n  outline: buffer_id\n  outline: range": "",
        "\noutline: struct OutlineEntryExcerpt\n  outline: id  <==== selected\n  outline: buffer_id\n  outline: range": "",
        "\noutline: struct OutlineEntryExcerpt\n  outline: id\n  outline: buffer_id  <==== selected\n  outline: range": "",
        "\noutline: struct OutlineEntryExcerpt\n  outline: id\n  outline: buffer_id\n  outline: range  <==== selected": "",
        "public": "",
        "lottie": "",
        "{ ": "",
        ": ": "",
        " }": "",
        "app": "",
        "(site)": "",
        "(about)": "",
        "jobs": "",
        "[slug]": "",
        "static": "",
        "(blog)": "",
        "post": "",
        "components": "",
        " }  <==== selected\n  src/\n    app/(site)/\n      (about)/jobs/[slug]/\n        page.tsx\n          search: static\n      (blog)/post/[slug]/\n        page.tsx\n          search: static\n    components/\n      ErrorBoundary.tsx\n        search: static": "",
        " }\n  src/\n    app/(site)/  <==== selected\n    components/\n      ErrorBoundary.tsx\n        search: static": "",
        " }\n  src/\n    app/(site)/\n    components/\n      ErrorBoundary.tsx\n        search: static  <==== selected": "",
        "Should have an active editor": "",
        " }\n  src/\n    app/(site)/\n    components/\n      ErrorBoundary.tsx  <==== selected": "",
        " }\n  src/\n    app/(site)/\n    components/\n      ErrorBoundary.tsx  <==== selected\n        search: static": "",
        "Failed to load outline panel": "",
        "no outline panel": "",
        "  ": "",
        "Did not cover external files with tests": "",
        "outline: {}": "",
        "search: {}": "",
        "crates": "",
        "ide": "",
        "inlay_hints": "",
        "\n        pub(super) fn hints(\n            acc: &mut Vec<InlayHint>,\n            config: &InlayHintsConfig,\n            func: ast::Fn,\n        ) -> Option<()> {\n            // ... snip\n\n            let mut used_names: FxHashMap<SmolStr, usize> =\n                match config.param_names_for_lifetime_elision_hints {\n                    true => generic_param_list\n                        .iter()\n                        .flat_map(|gpl| gpl.lifetime_params())\n                        .filter_map(|param| param.lifetime())\n                        .filter_map(|lt| Some((SmolStr::from(lt.text().as_str().get(1..)?), 0)))\n                        .collect(),\n                    false => Default::default(),\n                };\n            {\n                let mut potential_lt_refs = potential_lt_refs.iter().filter(|&&(.., is_elided)| is_elided);\n                if self_param.is_some() && potential_lt_refs.next().is_some() {\n                    allocated_lifetimes.push(if config.param_names_for_lifetime_elision_hints {\n                        // self can't be used as a lifetime, so no need to check for collisions\n                        ": "",
        ".into()\n                    } else {\n                        gen_idx_name()\n                    });\n                }\n                potential_lt_refs.for_each(|(name, ..)| {\n                    let name = match name {\n                        Some(it) if config.param_names_for_lifetime_elision_hints => {\n                            if let Some(c) = used_names.get_mut(it.text().as_str()) {\n                                *c += 1;\n                                SmolStr::from(format!(": "",
        ", text = it.text().as_str()))\n                            } else {\n                                used_names.insert(it.text().as_str().into(), 0);\n                                SmolStr::from_iter([": "",
        ", it.text().as_str()])\n                            }\n                        }\n                        _ => gen_idx_name(),\n                    };\n                    allocated_lifetimes.push(name);\n                });\n            }\n\n            // ... snip\n        }\n\n        // ... snip\n\n            #[test]\n            fn hints_lifetimes_named() {\n                check_with_config(\n                    InlayHintsConfig { param_names_for_lifetime_elision_hints: true, ..TEST_CONFIG },\n                    r#": "",
        "#,\n                );\n            }\n\n        // ... snip\n        ": "",
        "\n    #[derive(Clone, Debug, PartialEq, Eq)]\n    pub struct InlayHintsConfig {\n        // ... snip\n        pub param_names_for_lifetime_elision_hints: bool,\n        pub max_length: Option<usize>,\n        // ... snip\n    }\n\n    impl Config {\n        pub fn inlay_hints(&self) -> InlayHintsConfig {\n            InlayHintsConfig {\n                // ... snip\n                param_names_for_lifetime_elision_hints: self\n                    .inlayHints_lifetimeElisionHints_useParameterNames()\n                    .to_owned(),\n                max_length: self.inlayHints_maxLength().to_owned(),\n                // ... snip\n            }\n        }\n    }\n    ": "",
        "\n// ... snip\n        fn add_file(&mut self, file_id: FileId) {\n            let current_crate = crates_for(self.db, file_id).pop().map(Into::into);\n            let folds = self.analysis.folding_ranges(file_id).unwrap();\n            let inlay_hints = self\n                .analysis\n                .inlay_hints(\n                    &InlayHintsConfig {\n                        // ... snip\n                        closure_style: hir::ClosureStyle::ImplFn,\n                        param_names_for_lifetime_elision_hints: false,\n                        binding_mode_hints: false,\n                        max_length: Some(25),\n                        closure_capture_hints: false,\n                        // ... snip\n                    },\n                    file_id,\n                    None,\n                )\n                .unwrap();\n            // ... snip\n    }\n// ... snip\n    ": "",
        "rust-analyzer": "",
        "cli": "",
        "\n        // ... snip\n                for &file_id in &file_ids {\n                    _ = analysis.inlay_hints(\n                        &InlayHintsConfig {\n                            // ... snip\n                            implicit_drop_hints: true,\n                            lifetime_elision_hints: ide::LifetimeElisionHints::Always,\n                            param_names_for_lifetime_elision_hints: true,\n                            hide_named_constructor_hints: false,\n                            hide_closure_initialization_hints: false,\n                            closure_style: hir::ClosureStyle::ImplFn,\n                            max_length: Some(25),\n                            closing_brace_hints_min_lines: Some(20),\n                            fields_to_resolve: InlayFieldsToResolve::empty(),\n                            range_exclusive_hints: true,\n                        },\n                        file_id.into(),\n                        None,\n                    );\n                }\n        // ... snip\n                                    ": "",
        "\n                config_data! {\n                    /// Configs that only make sense when they are set by a client. As such they can only be defined\n                    /// by setting them using client's settings (e.g `settings.json` on VS Code).\n                    client: struct ClientDefaultConfigData <- ClientConfigInput -> {\n                        // ... snip\n                        /// Maximum length for inlay hints. Set to null to have an unlimited length.\n                        inlayHints_maxLength: Option<usize>                        = Some(25),\n                        // ... snip\n                        /// Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n                        inlayHints_lifetimeElisionHints_useParameterNames: bool    = false,\n                        // ... snip\n                    }\n                }\n\n                impl Config {\n                    // ... snip\n                    pub fn inlay_hints(&self) -> InlayHintsConfig {\n                        InlayHintsConfig {\n                            // ... snip\n                            param_names_for_lifetime_elision_hints: self\n                                .inlayHints_lifetimeElisionHints_useParameterNames()\n                                .to_owned(),\n                            max_length: self.inlayHints_maxLength().to_owned(),\n                            // ... snip\n                        }\n                    }\n                    // ... snip\n                }\n                ": "",
        "\n                (field_identifier) @field\n                (struct_expression) @struct\n            ": "",
        "\n                (macro_invocation\n                    (token_tree) @injection.content\n                    (#set! injection.language ": "",
        "))\n            ": "",
        "Active editor should have exactly one selection after any outline panel interactions": ""
    },
    "zed/crates/paths/src/paths.rs": {
        ".zed_server": "",
        "failed to determine RoamingAppData directory": "",
        "FLATPAK_XDG_CONFIG_HOME": "",
        "failed to determine XDG_CONFIG_HOME directory": "",
        ".config": "",
        "Library/Application Support/Zed": "",
        "FLATPAK_XDG_DATA_HOME": "",
        "failed to determine XDG_DATA_HOME directory": "",
        "failed to determine LocalAppData directory": "",
        "failed to determine cachesDirectory directory": "",
        "FLATPAK_XDG_CACHE_HOME": "",
        "failed to determine XDG_CACHE_HOME directory": "",
        ".cache": "",
        "Library/Logs/Zed": "",
        "logs": "",
        "server_state": "",
        "db": "",
        "Library/Logs/DiagnosticReports": "",
        "Retired": "",
        "extensions": "",
        "remote_extensions": "",
        "uploads": "",
        "themes": "",
        "snippets": "",
        "conversations": "",
        "prompts": "",
        "assets": "",
        "prompt_overrides": "",
        "embeddings": "",
        "languages": "",
        "debug_adapters": "",
        "copilot": "",
        "supermaven": "",
        "prettier": "",
        "remote_servers": "",
        ".zed": "",
        ".editorconfig": ""
    },
    "zed/crates/prettier/src/prettier.rs": {
        "prettier": "",
        "prettier-plugin-tailwindcss": "",
        "\nformatted by test prettier": "",
        ".prettierrc": "",
        ".editorconfig": "",
        ".prettierignore": "",
        "node_modules": "",
        "Skipping prettier location for path {path_to_check:?} that is inside node_modules": "",
        "failed to get metadata for initial path {path_to_check:?}": "",
        "empty metadata for initial path {path_to_check:?}": "",
        "Found prettier path {path_to_check:?} in installed prettiers": "",
        "Found prettier path {path_to_check:?} in the node_modules": "",
        "workspaces": "",
        "traversing path parents, should be able to strip prefix": "",
        "Skipping non-string 'workspaces' value: {value:?}": "",
        "Path {path_to_check:?} is the workspace root for project in {closest_package_json_path:?}, but it has no prettier installed": "",
        "Found prettier path {path_to_check:?} in the workspace root for project in {closest_package_json_path:?}": "",
        "Skipping path {path_to_check:?} workspace root with workspaces {workspaces:?} that have no prettier installed": "",
        "Failed to parse workspaces for {path_to_check:?} from package.json, got {unknown:?}. Skipping.": "",
        "Skipping path {path_to_check:?} that has no prettier dependency and no workspaces section in its package.json": "",
        "Found no prettier in ancestors of {locate_from:?}": "",
        "Skipping prettier ignore location for path {path_to_check:?} that is inside node_modules": "",
        "Found prettier ignore at {path_to_check:?}": "",
        "fetching metadata for {ignore_path:?}": "",
        "Found prettier ignore at {ignore_path:?}": "",
        "Found prettier ignore at workspace root {workspace_ignore:?}": "",
        "Found no prettier ignore in ancestors of {locate_from:?}": "",
        "Prettier dir {prettier_dir:?} is not a directory": "",
        "no prettier server package found at {prettier_server:?}": "",
        "prettier server creation": "",
        "prettier server initialization": "",
        "Cannot format: prettier is not allowed for language {buffer_language:?}": "",
        "Prettier node_modules dir does not exist: {prettier_node_modules:?}": "",
        "dist": "",
        "src": "",
        "lib": "",
        "tabWidth": "",
        "printWidth": "",
        "useTabs": "",
        "Have not found plugin path for {plugin_name:?} inside {prettier_node_modules:?}": "",
        "Formatting unsaved file with prettier failed. No prettier parser configured for language {buffer_language:?}": "",
        "Cannot determine prettier parser for unsaved file": "",
        "Formatting file {:?} with prettier, plugins :{:?}, options: {:?}, ignore_path: {:?}": "",
        "prettier params calculation": "",
        "rust": "",
        "prettier does not support Rust": "",
        "Should not format buffer without a language with prettier": "",
        "prettier clear cache": "",
        "fetching metadata for {possible_node_modules_location:?}": "",
        "fetching metadata for package json {possible_package_json:?}": "",
        "reading {possible_package_json:?} file contents": "",
        "parsing {possible_package_json:?} file contents": "",
        "camelCase": "",
        "filepath": "",
        "prettier/format": "",
        "prettier/clear_cache": "",
        ".config": "",
        "{ ": "",
        ": ": "",
        " }": "",
        "work": "",
        "project": "",
        "expect": "",
        "build": "",
        "{\n                                    ": "",
        ": {\n                                        ": "",
        "\n                                    }\n                                }": "",
        "Should find no prettier for path hierarchy without it": "",
        "Should successfully find a prettier for path hierarchy that has node_modules with prettier, but no package.json mentions of it": "",
        "Should not format files inside node_modules/": "",
        "web_blog": "",
        "{\n                                ": "",
        ": {\n                                    ": "",
        "\n                                }\n                            }": "",
        "pages": "",
        "{\n                        ": "",
        ": {\n                            ": "",
        "\n                        },\n                        ": "",
        ": false,\n                            ": "",
        ": 80,\n                            ": "",
        ",\n                            ": "",
        ": 4\n                        }\n                    }": "",
        "Should find a preinstalled prettier in the project root": "",
        "Should not allow formatting node_modules/ contents": "",
        "{\n                            ": "",
        ": {\n                                ": "",
        "\n                            },\n                            ": "",
        ": false,\n                                ": "",
        ": 80,\n                                ": "",
        ",\n                                ": "",
        ": 4\n                            }\n                        }": "",
        "Should find no prettier when node_modules don't have it": "",
        "Should return closest cached value found without path checks": "",
        "Should not allow formatting files inside node_modules/": "",
        "Should ignore cache lookup for files inside node_modules/": "",
        "full-stack-foundations": "",
        "exercises": "",
        "03.loading": "",
        "01.problem.loader": "",
        "app": "",
        "routes": "",
        "users+": "",
        "$username_+": "",
        "{\n                                        ": "",
        ": {\n                                            ": "",
        "\n                                        }\n                                    }": "",
        ": [": "",
        ", ": "",
        "]\n                        }": "",
        "Should ascend to the multi-workspace root and find the prettier there": "",
        "Should not allow formatting files inside root node_modules/": "",
        "Should not allow formatting files inside submodule's node_modules/": "",
        "Expected to fail for prettier in package.json but not in node_modules found, but got path {path:?}": "",
        "Error message should mention which project had prettier defined": "",
        "Error message should mention potential candidates without prettier node_modules contents": "",
        "\n                    }": "",
        "Should find prettierignore in project root": "",
        "monorepo": "",
        "packages": "",
        "web": "",
        "Should find prettierignore in child package": "",
        "Should find child package prettierignore first": ""
    },
    "zed/crates/project/src/buffer_store.rs": {
        "missing variant": "",
        "no worktree found for id {}": "",
        "received chunk for buffer {} without initial state": "",
        "missing transaction": "",
        "buffer doesn't have a file": "",
        "no such worktree": "",
        "{e}": "",
        "buffer {} was already registered": "",
        "unknown buffer id {}": "",
        "tried to register shared lsp handle, but buffer was not shared": "",
        "missing original_sender_id on SynchronizeBuffers request": "",
        "buffer store is not a remote": "",
        "invalid file": "",
        "project is not shared": "",
        "peer_id {} closed buffer_id {} which was either not open or already closed": "",
        "missing line ending": "",
        "local-only method called in a non-local context": "",
        "not a remote buffer store": ""
    },
    "zed/crates/project/src/color_extractor.rs": {
        "Failed to create RELAXED_HEX_REGEX": "",
        "Failed to create STRICT_HEX_REGEX": "",
        "Failed to create RELAXED_RGB_OR_HSL_REGEX": "",
        "Failed to create STRICT_RGB_OR_HSL_REGEX": ""
    },
    "zed/crates/project/src/direnv.rs": {
        "Failed to run direnv. See logs for more info": "",
        "Direnv returned invalid json. See logs for more info": "",
        "direnv": "",
        "export": "",
        "json": "",
        "TERM": "",
        "dumb": "",
        "Loading direnv environment failed ({}), stderr: {}": ""
    },
    "zed/crates/project/src/environment.rs": {
        "using project environment variables from CLI": "",
        "attempted to get project environment for a non-local worktree at {abs_path:?}": "",
        "Failed to load shell environment in {}: not a directory": "",
        "Failed to load shell environment in {}: {}": "",
        "true": "",
        "SHELL": "",
        "Failed to get login environment. SHELL environment variable is not set": "",
        "fish": "",
        "cd '{}'; emit fish_prompt; printf '%s' {MARKER}; /usr/bin/env; exit 0;": "",
        "cd '{}'; printf '%s' {MARKER}; /usr/bin/env; exit 0;": "",
        "tcsh": "",
        "csh": "",
        "Failed to spawn login shell to source login environment variables. See logs for details": "",
        "login shell exited with {}": "",
        "Login shell exited with nonzero exit code. See logs for details": "",
        "failed to parse output of `env` command in login shell. stdout: {:?}, stderr: {:?}": "",
        "Failed to parse stdout of env command. See logs for the output": "",
        "PATH": "",
        "using project environment variables shell launched in {:?}. PATH={:?}": "",
        "{error}": ""
    },
    "zed/crates/project/src/image_store.rs": {
        "worktree not found": "",
        "failed to load image metadata": "",
        "Failed to load image content": "",
        "svg": "",
        "no such worktree": "",
        "Image format not supported": "",
        "Opening images from remote is not supported": "",
        "Reloading images from remote is not supported": ""
    },
    "zed/crates/project/src/lsp_command.rs": {
        "Invalid file path provided to LSP request: {path:?}": "",
        "Prepare rename": "",
        "Rename not supported": "",
        "invalid position": "",
        "Missing start or end position in remote project PrepareRenameResponse": "",
        "Rename": "",
        "missing transaction": "",
        "Get definition": "",
        "Get declaration": "",
        "Get implementation": "",
        "Get type definition": "",
        "no language server found for buffer": "",
        "missing origin start": "",
        "missing origin end": "",
        "missing target": "",
        "missing target start": "",
        "missing target end": "",
        "Find all references": "",
        "Finding references...": "",
        "Get document highlights": "",
        "Get document symbols": "",
        "invalid start": "",
        "invalid end": "",
        "invalid selection start": "",
        "invalid selection end": "",
        "Get signature help": "",
        "waiting for version for buffer {}": "",
        "Get hover": "",
        "Get completion": "",
        "no language server with id {server_id}": "",
        "completion out of expected range": "",
        "completion (insert) out of expected range": "",
        "Get code actions": "",
        "Missing the language server that just returned a response {server_id}": "",
        "Formatting on typing": "",
        "lsp to project inlay hint conversion": "",
        "failed to serialize resolve json data": "",
        "incorrect proto inlay hint message: no resolve state in hint {message_hint:?}": "",
        "incorrect proto inlay hint message: non-json resolve state {lsp_resolve_state:?}": "",
        "No lsp resolve data for the hint that can be resolved: {message_hint:?}": "",
        "Unexpected resolve state {invalid} for hint {message_hint:?}": "",
        "missing label": "",
        "invalid uri in hint part {part:?}": "",
        "Inlay hints": "",
        "typescript-language-server": "",
        "lsp to project inlay hints conversion": "",
        "Code Lens": "",
        "deserializing proto code lens response": "",
        "Linked editing range": ""
    },
    "zed/crates/project/src/lsp_store.rs": {
        "attempting to start language server {:?}, path: {root_path:?}, id: {server_id}": "",
        "{err}\n-- stderr--\n{}": "",
        "Failed to start language server {server_name:?}: {err}": "",
        "server stderr: {:?}": "",
        "workspace/didChangeWatchedFiles": "",
        "textDocument/rangeFormatting": "",
        "textDocument/onTypeFormatting": "",
        "textDocument/formatting": "",
        "workspace/didChangeConfiguration": "",
        "textDocument/rename": "",
        "unhandled capability registration: {reg:?}": "",
        "unhandled capability unregistration: {unreg:?}": "",
        "transaction already open": "",
        "transaction started": "",
        "no formatting transaction": "",
        "forgetting format transaction": "",
        "Buffer edited while formatting. Aborting": "",
        "removing trailing whitespace": "",
        "ensuring final newline": "",
        "going to run code actions on format": "",
        "Formatter set to auto: defaulting to prettier": "",
        "Formatter set to auto: defaulting to primary language server": "",
        "prettier": "",
        "formatting": "",
        "Formatting buffer via prettier": "",
        "No changes": "",
        "command": "",
        "Formatting buffer via external command": "",
        "Failed to format buffer via external command: {}": "",
        "language-server": "",
        "Formatting buffer using language server": "",
        "Cannot format buffer that is not backed by a file on disk using language servers. Skipping": "",
        "No language server found to format buffer '{:?}'. Skipping": "",
        "Formatting buffer '{:?}' using language server '{:?}'": "",
        "formatting ranges": "",
        "Failed to format ranges via language server": "",
        "formatting full": "",
        "failed to format via language server": "",
        "code-actions": "",
        "Formatting buffer using code actions": "",
        "Cannot format buffer that is not backed by a file on disk using code actions. Skipping": "",
        "No code action kinds enabled, skipping": "",
        "Attempting to resolve code actions {:?}": "",
        "Failed to resolve code actions with kinds {:?} for language server {}": "",
        ", ": "",
        "Failed to resolve code actions with kinds {:?} with language server {}": "",
        "No code actions were resolved, continuing": "",
        "code action '{}' with title \"{}\" on server {}": "",
        "unknown": "",
        "Executing {}": "",
        "Failed to resolve {}. Error: {}": "",
        "No changes for code action. Skipping {}": "",
        "Code actions which create, delete, or rename files are not supported on format. Skipping {}": "",
        "Failed to convert URI '{:?}' to file path. Skipping {}": "",
        "File path '{:?}' does not match buffer path '{:?}'. Skipping {}": "",
        "Code actions which produce snippet edits are not supported during formatting. Skipping {}": "",
        "Failed to resolve edits from LSP for buffer {:?} while handling {}": "",
        "No edits resolved from LSP": "",
        "Executing code action command '{}'. This may cause formatting to abort unnecessarily as well as splitting formatting into two entries in the undo history": "",
        "Cannot execute a command {} not listed in the language server capabilities of server {}": "",
        "Executing command {}": "",
        "Failed to execute command '{}' as part of {}": "",
        "Successfully captured {} edits that resulted from command {}": "",
        "Unexpected edits to buffers other than the buffer actively being formatted due to command {}. Impacted buffers: [{}].": "",
        "{} language server does not support range formatting": "",
        "failed to convert abs path to uri": "",
        "lsp_format": "",
        "Formatting via LSP": "",
        "format-full": "",
        "format-range": "",
        "{buffer_path}": "",
        "Untitled": "",
        "failed to acquire stdin": "",
        "command failed with exit code {:?}:\nstdout: {}\nstderr: {}": "",
        "To find LSP adapter": "",
        "Language server ID should be available, as it's registered on demand": "",
        "`{}` is not parseable as an URI": "",
        "no snapshots found for buffer {buffer_id} and server {server_id}": "",
        "snapshot not found for buffer {buffer_id} server {server_id} at version {version}": "",
        "resolving a formatting code action": "",
        "project dropped": "",
        "Cannot execute a command {} not listed in the language server capabilities": "",
        "can't convert URI to path": "",
        "project project closed": "",
        "language server not found": "",
        "Processing new watcher paths for language server with id {}": "",
        "Failed to strip prefix for string pattern: {}, with prefix: {}, with error: {}": "",
        "Failed to strip prefix for relative pattern: {}, with prefix: {}, with error: {}": "",
        "language server {}: unregistered workspace/DidChangeWatchedFiles capability with id {}": "",
        "language server {}: failed to unregister workspace/DidChangeWatchedFiles capability with id {}. not registered.": "",
        "No extension events global found. Skipping JSON schema auto-reload setup": "",
        "Make sure to handle new event types in extension properly": "",
        "generate new workspace configuration for JSON language server while trying to refresh JSON Schemas": "",
        "bad refcounting": "",
        "oops!": "",
        "{} via {} failed: {}": "",
        "no app context": "",
        "missing transaction": "",
        "resolving a code action": "",
        "no app present": "",
        "no upstream client and not local": "",
        "inlay hints proto request": "",
        "inlay hints proto resolve response conversion": "",
        "inlay hint resolve LSP request": "",
        "No upstream client or local language server": "",
        "Unexpected response: {unexpected:?}": "",
        "Fetching completions from server {server_id} timed out, timeout ms: {}": "",
        "server_id mismatch, querying completion resolve for {server_id} but completion server id is {completion_server_id}": "",
        "server_id mismatch, applying completion resolve for {server_id} but completion server id is {completion_server_id}": ""
    },
    "zed/crates/project/src/prettier_store.rs": {
        "Found already started prettier in {prettier_dir:?}": "",
        "Found prettier in {prettier_dir:?}, starting.": "",
        "Failed to determine prettier path for buffer: {e:#}": "",
        "Found prettier ignore in {ignore_dir:?}": "",
        "Failed to determine prettier ignore path for buffer: {e:#}": "",
        "Starting prettier at path {prettier_dir:?}": "",
        "default prettier spawn": "",
        "Default prettier is not installed and cannot be started": "",
        "Waiting for default prettier to install": "",
        "Cannot start default prettier due to its installation failure: {e:#}": "",
        "Started default prettier in {prettier_dir:?}": "",
        "Started prettier in {prettier_dir:?}": "",
        "prettier (default)": "",
        "prettier ({name})": "",
        "prettier ({})": "",
        "node_modules": "",
        "Prettier config file {config_path:?} changed, reloading prettier instances for worktree {current_worktree_id}": "",
        "Failed to clear prettier {prettier_path:?} cache for worktree {worktree_id:?} on prettier settings update: {e:#}": "",
        "Failed to clear default prettier cache for worktree {worktree_id:?} on prettier settings update: {e:#}": "",
        "Default prettier installation had failed {installation_attempt} times, not attempting again": "",
        "Initializing default prettier with plugins {new_plugins:?}": "",
        "locate prettier installation": "",
        "Failed to install default prettier: {e:#}": "",
        "prettier & plugins install": "",
        "Initialized prettier with plugins: {installed_plugins:?}": "",
        "prettier at {path:?}": "",
        "default prettier instance": "",
        "{} failed to format buffer": "",
        "{} failed to spawn: {error:#}": "",
        "Prettier from path {prettier_dir:?} exceeded launch threshold, not starting": "",
        "Default prettier exceeded launch threshold, not starting": "",
        "prettier": "",
        "fetching latest npm version for package {returned_package_name}": "",
        "fetching latest npm versions": "",
        "fetching FS metadata for default prettier dir {default_prettier_dir:?}": "",
        "default prettier dir {default_prettier_dir:?} is not a directory": "",
        "creating default prettier dir {default_prettier_dir:?}": "",
        "Installing default prettier and plugins: {packages_to_versions:?}": "",
        "fetching formatter packages": "",
        "writing {} file at {prettier_wrapper_path:?}": ""
    },
    "zed/crates/project/src/project_settings.rs": {
        "true_value": "",
        "default_inline_diagnostics_debounce_ms": "",
        "default_inline_diagnostics_padding": "",
        "default_true": "",
        "unknown kind {kind}": "",
        "Cannot absolutize {path:?} received as {change:?} FS change: {e}": "",
        "parsing VSCode tasks, file {abs_path:?}": "",
        "converting VSCode tasks into Zed ones, file {abs_path:?}": "",
        "serializing Zed tasks into JSON, file {abs_path:?}": "",
        "Failed to set local settings in {path:?}: {message}": "",
        "Failed to set local settings: {e}": "",
        "Failed to set local tasks in {path:?}: {message:?}": "",
        "Failed to set local tasks: {e}": ""
    },
    "zed/crates/project/src/project.rs": {
        "RemotelyCreatedModelGuard dropped too many times": "",
        "Completion": "",
        "replace_range": "",
        "new_text": "",
        "label": "",
        "documentation": "",
        "source": "",
        "Unknown command": "",
        "command": "",
        "code lens": "",
        "snippets": "",
        "Failed to find a worktree": "",
        "test config": "",
        "No worktree for path {project_path:?}": "",
        "No worktree for entry {entry_id:?}": "",
        "no task": "",
        "project was already shared": "",
        "attempted to unshare a remote project": "",
        "attempted to unshare an unshared project": "",
        "called create_local_buffer on a remote project": "",
        "no such path": "",
        "buffer {} does not exist": "",
        "cannot open buffer while disconnected": "",
        "Project dropped": "",
        "dap": "",
        "lsp": "",
        "Failed to set local settings in {path:?}:\n{message}": "",
        "local-settings-{path:?}": "",
        "Failed to set local tasks in {path:?}:\n{message}": "",
        "local-tasks-{path:?}": "",
        "not an ssh project": "",
        "cannot list directory in remote project": "",
        "empty collaborator": "",
        "missing old peer id": "",
        "missing new peer id": "",
        "received UpdateProjectCollaborator for unknown peer": "",
        "peer {} became {}": "",
        "invalid peer id": "",
        "unknown peer {:?}": "",
        "Invalid prompt level": "",
        "missing query field": "",
        "can't synchronize remote buffers on a readonly project": "",
        "can't synchronize remote buffers on a local project": ""
    },
    "zed/crates/project/src/search_history.rs": {
        "No current selection should be set for the default search history": "",
        "rust": "",
        "Newly added item should be selected": "",
        "Should not add a duplicate": "",
        "rustlang": "",
        "Should replace previous item if it's a substring": "",
        "item{i}": "",
        "Default search history should not have a next item": "",
        "JavaScript": "",
        "TypeScript": "",
        "Should start from the end after reset on previous item query": "",
        "Python": "",
        "Java": "",
        "C++": ""
    },
    "zed/crates/project/src/search.rs": {
        "Failed to create WORD_MATCH_TEST": "",
        "Unexpected escape sequence: {}": "",
        "file": "",
        ".DS_Store": "",
        "~/dir/another_dir/": "",
        "Valid path {valid_path} should be accepted, but got: {e}": "",
        "Path matcher for valid path {valid_path} should match itself": "",
        "dir/{file": "",
        "Invalid glob {invalid_glob} should not be accepted": "",
        "dir/?ile": "",
        "dir/**/file": "",
        "{dir,file}": "",
        "Valid glob should be accepted, but got: {e}": ""
    },
    "zed/crates/project/src/task_inventory.rs": {
        "oneshot": "",
        "{id_base}_{}": "",
        "{id_base}_{id}_{}": "",
        "language_{name}": "",
        "lsp_{server_id}": "",
        "usage": "",
        "local worktree tasks from directory {directory:?}": "",
        "Failed to parse tasks file content as a JSON array: {e}": "",
        "Failed to find task with name {task_name}": "",
        "Failed to resolve task with name {task_name}": "",
        "No tasks expected for empty inventory, but got {initial_tasks:?}": "",
        "1_a_task": "",
        "1_task": "",
        "2_task": "",
        "3_task": "",
        "Tasks with equal amount of usages should be sorted alphanumerically": "",
        "10_hello": "",
        "11_hello": "",
        "common_task_name": "",
        "static_source_1": "",
        "static_source_2": "",
        ".zed": "",
        "local worktree tasks from directory \".zed\"": "",
        "worktree_1": "",
        "worktree_2": "",
        "Without a worktree, only worktree-independent tasks should be listed": "",
        "label": "",
        "command": "",
        "echo": "",
        "args": ""
    },
    "zed/crates/project/src/task_store.rs": {
        "no location given for task context handling": "",
        "empty task store cannot handle task context requests": "",
        "no buffer store when handling task context request": "",
        "cannot handle task context request for invalid buffer id: {}": "",
        "missing task context location start": "",
        "missing task context location end": "",
        "no local buffer with id {buffer_id}": "",
        "Unknown variable name: {variable_name}": "",
        "building basic default context": "",
        "building provider context": ""
    },
    "zed/crates/project/src/terminals.rs": {
        "Connecting to a remote server: {ssh_command:?}": "",
        "TERM": "",
        "xterm-256color": "",
        "{} — Terminal": "",
        "VIRTUAL_ENV": "",
        "bin": "",
        "Debug Terminal": "",
        "Python": "",
        "Scripts": "",
        "source": "",
        "overlay use": "",
        "activate": "",
        "\r": "",
        "{} {} ; clear{}": "",
        " ": "",
        "exec ${SHELL:-sh} -l": "",
        "{}={} ": "",
        "PATH={}:$PATH ": "",
        "cd \"$HOME/{trimmed_path}\"; {env_changes} {to_run}": "",
        "cd {path:?}; {env_changes} {to_run}": "",
        "cd; {env_changes} {to_run}": "",
        "sh -c {}": "",
        "ssh": "",
        "-t": "",
        "PATH": "",
        "failed to create PATH env variable": "",
        "OTHER": "",
        "aaa": ""
    },
    "zed/crates/project/src/toolchain_store.rs": {
        "Missing `toolchain` in payload": ""
    },
    "zed/crates/project/src/worktree_store.rs": {
        "cannot create worktrees via collab": "",
        "Dropped worktree store": "",
        "invalid project": "",
        "Missing worktree for id {source}": "",
        "Missing worktree for id {destination}": "",
        "listing ignored path {abs_path:?}": "",
        "fetching fs metadata for {abs_path:?}": "",
        "obviously binary": "",
        "Invalid UTF-8 sequence in file {abs_path:?} at byte position {starting_position}": "",
        "worktree not found": "",
        "invalid request": ""
    },
    "zed/crates/project_panel/src/project_panel.rs": {
        "ProjectPanel": "",
        "Failed to open file": "",
        "Disconnected from SSH host": "",
        "Disconnected from remote project": "",
        "{} is not shared by the host. This could be because it has been marked as `private`": "",
        "Try Again": "",
        "File is too large to load": "",
        "Failed to load project panel: {}": "",
        "Search Inside": "",
        "New File": "",
        "New Folder": "",
        "Reveal in Finder": "",
        "Reveal in File Manager": "",
        "Open in Default App": "",
        "Open in Terminal": "",
        "Find in Folder…": "",
        "Unfold Directory": "",
        "Fold Directory": "",
        "Cut": "",
        "Copy": "",
        "Duplicate": "",
        "Paste": "",
        "Copy Path": "",
        "Copy Relative Path": "",
        "Rename": "",
        "Trash": "",
        "Delete": "",
        "Add Folder to Project…": "",
        "Remove from Project": "",
        "Collapse All": "",
        "File or directory '{}' already exists at location. Please choose a different name.": "",
        "File or directory name cannot be empty.": "",
        "File or directory name contains leading or trailing whitespace.": "",
        "Created an excluded directory at {abs_path:?}.\nAlter `file_scan_exclusions` in the settings to show it in the panel": "",
        "\n\nIt has unsaved changes, which will be lost.": "",
        "{operation} {path}?{unsaved_warning}": "",
        ".. 1 file not shown": "",
        ".. {} files not shown": "",
        "\n\n1 of these has unsaved changes, which will be lost.": "",
        "\n\n{dirty_buffers} of these have unsaved changes, which will be lost.": "",
        "Do you want to {} the following {} files?\n{}{unsaved_warning}": "",
        "Cancel": "",
        "no such entry": "",
        " copy": "",
        "Worktree abs path has no file name, root entry: {entry:?}": "",
        "Non-root entry has no file name: {entry:?}": "",
        "A file or folder with name {filename} already exists in the destination folder. Do you want to replace it?": "",
        "Replace": "",
        "Edited sub-entry should be an ancestor of selected leaf entry": "",
        "project_entry": "",
        "symlink_icon": "",
        "Symbolic Link": "",
        "menu": "",
        "editing": "",
        "not_editing": "",
        "project-panel": "",
        "entries": "",
        "Open a project": "",
        "{} entries": "",
        "Project Panel": ""
    },
    "zed/crates/prompt_library/src/prompt_library.rs": {
        "This prompt supports special functionality.\n": "",
        "It's read-only, but you can remove it from your default prompt.": "",
        "Prompt Library": "",
        "No prompts.": "",
        "No prompts found matching your search.": "",
        "Search...": "",
        "Untitled": "",
        "toggle-default-prompt": "",
        "Remove from Default Prompt": "",
        "built-in-prompt": "",
        "Built-in prompt": "",
        "delete-prompt": "",
        "Delete Prompt": "",
        "Add to Default Prompt": "",
        "error while loading prompt: {:?}": "",
        "Are you sure you want to delete {}": "",
        "Delete": "",
        "Cancel": "",
        " copy": "",
        "{title_to_duplicate}{DUPLICATE_SUFFIX} {i}": "",
        "prompt-list": "",
        "new-prompt": "",
        "New Prompt": "",
        "prompt-editor": "",
        "prompt-editor-inner": "",
        "active-editor-header": "",
        "token_count": "",
        "{} tokens": "",
        "Model: {}": "",
        "duplicate-prompt": "",
        "Duplicate Prompt": "",
        "prompt-manager": "",
        "PromptLibrary": "",
        "No prompts yet": "",
        "Create your first prompt:": "",
        "create-prompt": ""
    },
    "zed/crates/recent_projects/src/disconnected_overlay.rs": {
        "Failed to reconnect": "",
        "Your connection to the remote project has been lost.": "",
        "\nUnsaved changes are stored locally.": "",
        "Your connection to {} has been lost.{}": "",
        "disconnected": "",
        "Disconnected": "",
        "close-window": "",
        "Close Window": "",
        "reconnect": "",
        "Reconnect": ""
    },
    "zed/crates/recent_projects/src/recent_projects.rs": {
        "{reuse_window} reuses this window, {create_window} opens a new one": "",
        "Recently opened projects will show up here": "",
        "No matches": "",
        ", ": "",
        "delete": "",
        "Delete from Recent Projects...": "",
        "remote": "",
        "Open Remote Folder": "",
        "local": "",
        "Open Local Folder": "",
        "a": "",
        "EDIT": "",
        "After inserting more text into the editor without saving, we should have a dirty project": "",
        "fake candidate": "",
        "Should have no pending prompt on dirty project before opening the new recent project": "",
        "Should remove the modal after selecting new recent project": "",
        "Dirty workspace should prompt before opening the new recent project": "",
        "Cancel": "",
        "Should have no pending prompt after cancelling": "",
        "Should be in the same dirty project after cancelling": ""
    },
    "zed/crates/recent_projects/src/remote_servers.rs": {
        "Add a nickname for this server": "",
        "SSH Project Created": "",
        "could not parse: {:?}": "",
        "Failed to connect": "",
        "SSH Server Created": "",
        "ssh-server": "",
        "No projects.": "",
        "Open Folder": "",
        "View Server Options": "",
        "Failed to connect: {:?}": "",
        "Ok": "",
        ", ": "",
        "Delete Remote Project": "",
        "ssh user@example -p 2222": "",
        "create-remote-server": "",
        "Enter the command you use to SSH into this server.": "",
        "learn-more": "",
        "Learn more…": "",
        "Edit Nickname": "",
        "Add Nickname to Server": "",
        "ssh-options-add-nickname": "",
        "add-nickname": "",
        "Copied server address ({}) to clipboard": "",
        "ssh-options-copy-server-address": "",
        "copy-server-address": "",
        "Copy Server Address": "",
        "Remove server `{}`?": "",
        "Yes, remove it": "",
        "No, keep it": "",
        "remove-server": "",
        "Remove Server": "",
        "go-back": "",
        "Go Back": "",
        "ssh-edit-nickname": "",
        "ssh-connect-new-server-container": "",
        "register-remove-server-button": "",
        "Connect New Server": "",
        "ssh-server-list": "",
        "No remote servers registered yet.": "",
        "remote-projects": "",
        "Remote Projects": "",
        "RemoteServerModal": ""
    },
    "zed/crates/recent_projects/src/ssh_connections.rs": {
        "Option::is_none": "",
        "Vec::is_empty": "",
        "yes/no": "",
        "Connecting": "",
        "PasswordPrompt": "",
        "SshConnectionModal": "",
        "Failed to download remote server binary (version: {}, os: {}, arch: {}): {}": "",
        "unknown": "",
        "Failed to open project: {:?}": "",
        "Failed to connect over SSH": "",
        "Retry": "",
        "Ok": ""
    },
    "zed/crates/refineable/derive_refineable/src/derive_refineable.rs": {
        "refineable": "",
        "Debug": "",
        "{}Refinement": "",
        "This derive macro only supports structs with named fields": "",
        "Option": "",
        "Expected struct type for a refineable field": ""
    },
    "zed/crates/repl/src/components/kernel_options.rs": {
        "Select a kernel...": "",
        "Python Env": "",
        "Remote": "",
        "kernel-docs": "",
        "Kernel Docs": "",
        "kernel-switcher": ""
    },
    "zed/crates/repl/src/kernels/native_kernel.rs": {
        "Empty argv in kernelspec {}": "",
        "Invalid argv in kernelspec {}": "",
        "{connection_file}": "",
        "Missing 'connection_file' in argv in kernelspec {}": "",
        "RunningKernel": "",
        "process": "",
        "hmac-sha256": "",
        "zed-{}": "",
        "Failed to create jupyter runtime dir {runtime_dir:?}": "",
        "failed to start the kernel process": "",
        "kernel: {}": "",
        "kernel process exited successfully": "",
        "kernel process exited with status: {:?}": "",
        "kernel process exited with error: {:?}": "",
        "Failed to kill the kernel process: {}": "",
        "Invalid kernelspec directory: {path:?}": "",
        "Not a directory: {path:?}": "",
        "Error reading kernelspec directory: {err:?}": "",
        "CONDA_PREFIX": "",
        "share": "",
        "jupyter": "",
        "python": "",
        "-c": "",
        "import sys; print(sys.prefix)": "",
        "kernels": "",
        ".zed": "",
        "{ ": "",
        ": 8 }": "",
        "[{\n                        ": "",
        ": ": "",
        ",\n                        ": "",
        ": [": "",
        ", ": "",
        "]\n                    },]": "",
        "{\n                            ": "",
        ",\n                            ": "",
        "],\n                            ": "",
        ": {}\n                        }": "",
        "deno": ""
    },
    "zed/crates/repl/src/kernels/remote_kernels.rs": {
        "POST": "",
        "Authorization": "",
        "token {}": "",
        "Failed to launch kernel: {}": "",
        "GET": "",
        "No kernel specs found": "",
        "Failed to fetch kernel specs: {}": "",
        "{}/api/kernels/{}/channels?token={}": "",
        "http": "",
        "ws": "",
        "User-Agent": "",
        "Zed/{} ({}; {})": "",
        "repl": "",
        "Error receiving message: {:?}": "",
        "RemoteRunningKernel": "",
        "remote_server url": "",
        "working_directory": "",
        "request_tx": "",
        "execution_state": "",
        "kernel_info": "",
        "DELETE": "",
        "Failed to shutdown kernel: {}": ""
    },
    "zed/crates/repl/src/notebook/notebook_ui.rs": {
        "LOCAL_NOTEBOOK_DEV": "",
        "Cells would all run here, if that was implemented!": "",
        "Open notebook triggered": "",
        "Move cell up triggered": "",
        "Move cell down triggered": "",
        "Add markdown block triggered": "",
        "Add code block triggered": "",
        "run-all-cells": "",
        "Execute all cells": "",
        "clear-all-outputs": "",
        "Clear all outputs": "",
        "move-cell-up": "",
        "Move cell up": "",
        "move-cell-down": "",
        "Move cell down": "",
        "new-markdown-cell": "",
        "Add markdown block": "",
        "new-code-cell": "",
        "Add code block": "",
        "more-menu": "",
        "repl": "",
        "notebook": "",
        "notebook-cells": "",
        "ipynb": "",
        "Failed to find the absolute path": "",
        "Failed to parse notebook: {:?}": "",
        "Entry not found": "",
        "notebook controls": "",
        "save() must be implemented if can_save() returns true": "",
        "save_as() must be implemented if can_save() returns true": "",
        "reload() must be implemented if can_save() returns true": ""
    },
    "zed/crates/repl/src/outputs/image.rs": {
        "unsupported image format": ""
    },
    "zed/crates/repl/src/outputs.rs": {
        "copy-output": "",
        "Copy Output": "",
        "open-in-buffer": "",
        "Open in Buffer": "",
        "REPL Output": "",
        "Failed to load image: {}": "",
        "Unsupported media type": "",
        "the output": "",
        "Connecting to kernel...": "",
        "Executing...": "",
        "Unknown status": "",
        "Kernel shutting down...": "",
        "Kernel restarting...": "",
        "Kernel shutdown": "",
        "Queued...": "",
        "Kernel error: {}": ""
    },
    "zed/crates/repl/src/repl_editor.rs": {
        "editor is not in a worktree": "",
        "editor was dropped": "",
        "No kernel found for language: {}": ""
    },
    "zed/crates/repl/src/repl_sessions_ui.rs": {
        "Python": "",
        "REPL Sessions": "",
        "REPL Session Started": "",
        "To start interactively running code in your editor, you need to install and configure Jupyter kernels.": "",
        "No Jupyter Kernels Available": "",
        "install-kernels": "",
        "Install Kernels": "",
        "To run code in a Jupyter kernel, select some code and use the 'repl::Run' command.": "",
        "No Jupyter Kernel Sessions": "",
        "Jupyter Kernel Sessions": ""
    },
    "zed/crates/repl/src/repl_store.rs": {
        "repl": "",
        "Failed to get python kernelspecs: {:?}": "",
        "JUPYTER_SERVER": "",
        "JUPYTER_TOKEN": ""
    },
    "zed/crates/repl/src/session.rs": {
        "editor is not open": "",
        "workspace dropped": "",
        "close_output_area": "",
        "Close output area": "",
        "Kernel Status Changed": "",
        "restarting kernel": "",
        "interrupt": "",
        "Interrupt": "",
        "Starting": "",
        "Error: {err}": "",
        "Shutting Down": "",
        "Shutdown": "",
        "Restarting": "",
        "({status_text})": "",
        "shutdown": ""
    },
    "zed/crates/reqwest_client/src/reqwest_client.rs": {
        "key=[^&]+": "",
        "Failed to initialize HTTP client": "",
        "Failed to parse proxy URI {}: {}": "",
        "no tokio runtime found, creating one for Reqwest...": "",
        "key=REDACTED": "",
        "test": "",
        "socks4://localhost:10808": "",
        "socks4a://localhost:10808": "",
        "socks5://localhost:10808": "",
        "socks5h://localhost:10808": "",
        "file:///etc/hosts": ""
    },
    "zed/crates/rope/src/chunk.rs": {
        "point {:?} extends beyond rows for string {:?}": "",
        "point {:?} extends beyond row for string {:?}": "",
        "point {:?} is beyond this chunk's extent {:?}": "",
        "point {:?} is beyond the end of the line in chunk {:?}": "",
        "point {:?} is within character in chunk {:?}": "",
        "Chunk: {:?}": "",
        "Range: {:?}": "",
        "nth_set_bit({:0128b}, {})": "",
        "Verifying chunk {:?}": "",
        "mismatch at offset {}": "",
        "mismatch at point {:?}": "",
        "mismatch at offset_utf16 {:?}": "",
        "mismatch at point_utf16 {:?}": "",
        "mismatch for unclipped_point_utf16_to_point at {:?}": "",
        "incorrect left clip at {:?}": "",
        "incorrect right clip at {:?}": "",
        "incorrect left clip within multi-byte char at {:?}": "",
        "incorrect right clip within multi-byte char at {:?}": "",
        "incorrect unclipped_point_utf16_to_point within multi-byte char at {:?}": "",
        "incorrect left clip_point_utf16 within multi-byte char at {:?}": "",
        "incorrect right clip_point_utf16 within multi-byte char at {:?}": "",
        "incorrect left clip_offset_utf16 within multi-byte char at {:?}": "",
        "incorrect right clip_offset_utf16 within multi-byte char at {:?}": "",
        "mismatch at final offset {}": "",
        "mismatch at final point {:?}": "",
        "mismatch at final point_utf16 {:?}": "",
        "mismatch for unclipped_point_utf16_to_point at final point {:?}": "",
        "incorrect left clip at final point {:?}": "",
        "incorrect right clip at final point {:?}": "",
        "incorrect left clip_point_utf16 at final point {:?}": "",
        "incorrect right clip_point_utf16 at final point {:?}": "",
        "incorrect left clip_offset_utf16 at final offset {:?}": "",
        "incorrect right clip_offset_utf16 at final offset {:?}": ""
    },
    "zed/crates/rpc/src/auth.rs": {
        "failed to encrypt string with public key": "",
        "failed to base64-decode encrypted string": "",
        "failed to decrypt string with private key": "",
        "decrypted content was not valid utf8": "",
        "failed to serialize public key": "",
        "failed to base64-decode public key string": "",
        "failed to parse public key": "",
        "MIGJAoGBAMPvufou8wOuUIF1Wlkbtn0ZMM9nC55QJ06nTZvgMfZv5esFVU9-cQO_JC1P9ZoEcMDJweFERnQuQLqzsrMDLFbkdgL128ZU43WOLiQraxaICFIZsPUeTtWMKp2D5bPWsNxs-lnCma7vCAry6fpXuj5AKQdk7cTZJNucgvZQ0uUfAgMBAAE=": "",
        "token {:?} has non-printable char {}": "",
        "token {:?} is not URL-safe": ""
    },
    "zed/crates/rpc/src/peer.rs": {
        "handle io future: start": "",
        "connection closed": "",
        "handle io future: end": "",
        "outer loop iteration start": "",
        "inner loop iteration start": "",
        "outgoing rpc message: writing": "",
        "outgoing rpc message: done writing": "",
        "failed to write RPC message": "",
        "keepalive interval: resetting after sending message": "",
        "outgoing rpc message: writing timed out": "",
        "timed out writing message": "",
        "outgoing rpc message: channel closed": "",
        "keepalive interval: pinging": "",
        "keepalive interval: done pinging": "",
        "failed to send keepalive": "",
        "keepalive interval: resetting after pinging": "",
        "keepalive interval: pinging timed out": "",
        "timed out sending keepalive": "",
        "error reading rpc message from socket": "",
        "incoming rpc message: received": "",
        "receive timeout: resetting": "",
        "incoming rpc message: processing": "",
        "incoming rpc message: processed": "",
        "incoming rpc message: channel closed": "",
        "incoming rpc message: processing timed out": "",
        "timed out processing incoming message": "",
        "receive timeout: delay between messages too long": "",
        "delay between messages too long": "",
        "incoming message future: start": "",
        "incoming message future: end": "",
        "incoming response: received": "",
        "incoming response: request future dropped": "",
        "incoming response: waiting to resume requester": "",
        "incoming response: requester resumed": "",
        "incoming stream response: request future dropped": "",
        "incoming stream response: waiting to resume requester": "",
        "incoming stream response: requester resumed": "",
        "incoming response: unknown request": "",
        "incoming message: received": "",
        "unable to construct a typed envelope": "",
        "received response of the wrong type": "",
        "connection was closed": "",
        "message {} was not handled": "",
        "no such connection: {}": "",
        "Peer": "",
        "connections": "",
        "unknown message type": "",
        "message 1": "",
        "message 2": "",
        "response": "",
        "response 2": ""
    },
    "zed/crates/rpc/src/proto_client.rs": {
        "registered handler for the same message twice": "",
        "EntityMessageSubscriber::Entity": "",
        "handle": "",
        "EntityMessageSubscriber::Pending": "",
        "envelopes": "",
        "received response of the wrong type": ""
    },
    "zed/crates/search/src/buffer_search.rs": {
        "util::serde::default_true": "",
        "search_bar": "",
        "Search…": "",
        "Replace with…": "",
        "0/0": "",
        "BufferSearchBar": "",
        "in_replace": "",
        "Find in results": "",
        "editor-scroll": "",
        "buffer-search-bar-toggle-replace-button": "",
        "Toggle Replace": "",
        "buffer-search-bar-toggle-search-selection-button": "",
        "Toggle Search Selection": "",
        "select-all": "",
        "Select All Matches": "",
        "Select Previous Match": "",
        "Select Next Match": "",
        "Close": "",
        "Close Search Bar": "",
        "search-replace-next": "",
        "Replace Next Match": "",
        "search-replace-all": "",
        "Replace All Matches": "",
        "buffer_search": "",
        "query editor should be backed by a singleton buffer": "",
        "regex": "",
        "loading regex language": "",
        "\n                A regular expression (shortened as regex or regexp;[1] also referred to as\n                rational expression[2][3]) is a sequence of characters that specifies a search\n                pattern in text. Usually such patterns are used by string-searching algorithms\n                for ": "",
        " or ": "",
        " operations on strings, or for input validation.\n                ": "",
        "us": "",
        "or": "",
        "\n        A regular expression (shortened as regex or regexp;[1] also referred to as\n        rational expression[2][3]) is a sequence of characters that specifies a search\n        pattern in text. Usually such patterns are used by string-searching algorithms\n        for ": "",
        " operations on strings, or for input validation.\n        ": "",
        "Should pick a query with multiple results": "",
        "a": "",
        "Initially, the editor should not be focused": "",
        "Expected to have only one selection before adding carets to all matches, but got: {initial_selections:?}": "",
        "Should focus editor after successful SelectAllMatches": "",
        "Should select all `a` characters in the buffer, but got: {all_selections:?}": "",
        "Match index should not change after selecting all matches": "",
        "Should still have editor focused after SelectNextMatch": "",
        "On next match, should deselect items and select the next match": "",
        "Next match should be different from the first selection": "",
        "Match index should be updated to the next one": "",
        "Should still have editor focused after SelectPreviousMatch": "",
        "On previous match, should deselect items and select the previous item": "",
        "Previous match should be the same as the first selection": "",
        "Match index should be updated to the previous one": "",
        "abas_nonexistent_match": "",
        "Should not switch focus to editor if SelectAllMatches does not find any matches": "",
        "Should not select anything new if there are no matches": "",
        "For no matches, there should be no active match index": "",
        "Should select all `edit(` in the buffer, but got: {all_selections:?}": ""
    },
    "zed/crates/search/src/mode.rs": {
        "Text": "",
        "Regex": "",
        "Activate {} Mode": ""
    },
    "zed/crates/search/src/project_search.rs": {
        "Searching…": "",
        "No Results": "",
        "Search All Files": "",
        "No results found in this project for the provided query": "",
        "project-search-landing-page": "",
        "Project Search": "",
        "Project Search Opened": "",
        "save_as should not have been called": "",
        "Search all files…": "",
        "Replace in project…": "",
        "regex": "",
        "loading regex language": "",
        "Hit enter to search. For more options:": "",
        "filter-paths": "",
        "Include/exclude specific paths": "",
        "find-replace": "",
        "Find and replace": "",
        "Match with regex": "",
        "match-case": "",
        "Match case": "",
        "match-whole-words": "",
        "Match whole words": "",
        "query editor should be backed by a singleton buffer": "",
        "project-search-filter-button": "",
        "Toggle Filters": "",
        "project-search-toggle-replace": "",
        "Toggle Replace": "",
        "{index}/{match_quantity}+": "",
        "{index}/{match_quantity}": "",
        "0/0": "",
        "project-search-prev-match": "",
        "Go To Previous Match": "",
        "project-search-next-match": "",
        "Go To Next Match": "",
        "matches": "",
        "Search limits reached.\nTry narrowing your search.": "",
        "project-search-replace-next": "",
        "Replace Next Match": "",
        "project-search-replace-all": "",
        "Replace All Matches": "",
        "project-search-opened-only": "",
        "Only Search Open Files": "",
        "ProjectSearchBar": "",
        "in_replace": "",
        "const ONE: usize = 1;": "",
        "const TWO: usize = one::ONE + one::ONE;": "",
        "const THREE: usize = one::ONE + two::TWO;": "",
        "const FOUR: usize = one::ONE + three::THREE;": "",
        "TWO": "",
        "\n\nconst THREE: usize = one::ONE + two::TWO;\n\n\nconst TWO: usize = one::ONE + one::ONE;": "",
        "Expected no search panel to be active": "",
        "Search view expected to appear after new search event trigger": "",
        "Empty search view should be focused after the toggle focus event: no results panel to focus on": "",
        "Search view should be focused after the new search view is activated": "",
        "New search query should be empty but got '{query_text}'": "",
        "Empty search view should have no results but got '{results_text}'": "",
        "sOMETHINGtHATsURELYdOESnOTeXIST": "",
        "Search view for mismatching query should have no results but got '{results_text}'": "",
        "Search view should be focused after mismatching query had been used in search": "",
        "Search view with mismatching query should be focused after the toggle focus event: still no results panel to focus on": "",
        "Search view results should match the query": "",
        "Search view with mismatching query should be focused after search results are available": "",
        "Search view with matching query should still have its results editor focused after the toggle focus event": "",
        "two": "",
        "Query should be updated to first search result after search view 2nd open in a row": "",
        "Results should be unchanged after search view 2nd open in a row": "",
        "Focus should be moved into query editor again after search view 2nd open in a row": "",
        "Search view with matching query should switch focus to the results editor after the toggle focus event": "",
        "New search view should be open after `workspace::NewSearch` event": "",
        "First search view should not have an updated query": "",
        "Results of the first search view should not update too": "",
        "Focus should be moved away from the first search view": "",
        "New search view should get the query from the text cursor was at during the event spawn (first search view's first result)": "",
        "No search results should be in the 2nd view yet, as we did not spawn a search for it": "",
        "Focus should be moved into query editor of the new window": "",
        "FOUR": "",
        "\n\nconst FOUR: usize = one::ONE + three::THREE;": "",
        "New search view with the updated query should have new search results": "",
        "a": "",
        "b": "",
        "no entry for /a/ directory": "",
        "Search view expected to appear after new search in directory event trigger": "",
        "On new search in directory, focus should be moved into query editor": "",
        "New search in directory should not have any excluded files": "",
        "New search in directory should have included dir entry path": "",
        "const": "",
        "\n\nconst ONE: usize = 1;\n\n\nconst TWO: usize = one::ONE + one::ONE;": "",
        "New search in directory should have a filter that matches a certain directory": "",
        "ONE": "",
        "THREE": "",
        "JUST_TEXT_INPUT": "",
        "TWO_NEW": "",
        "\n\n\n\n\n A \n\n\n\n\n": "",
        "\n\n\n\n\n B \n\n\n\n\n": "",
        "A": "",
        " A ": "",
        "unable to update search view": "",
        "B": "",
        " B ": "",
        "search bar query": "",
        "should open a project search view after spawning a new search": "",
        "Project search should take the query from the buffer search bar since it got focused and had a query inside": ""
    },
    "zed/crates/search/src/search.rs": {
        "Match Whole Words": "",
        "Match Case Sensitively": "",
        "Also search files ignored by configuration": "",
        "Use Regular Expressions": "",
        "{:?} is not a named SearchOption": "",
        "No more matches": ""
    },
    "zed/crates/semantic_index/examples/index.rs": {
        "Zed semantic index example": "",
        "Usage: cargo run --example index -p semantic_index -- <project_path>": "",
        "OPENAI_API_KEY": "",
        "OPENAI_API_KEY not set": "",
        "no event emitted": "",
        "Index time: {:?}": "",
        "converting an anchor to a point": "",
        "✄✄✄✄✄✄✄✄✄✄✄✄✄✄ {:?} @ {} ✄✄✄✄✄✄✄✄✄✄✄✄✄✄": ""
    },
    "zed/crates/semantic_index/src/embedding/cloud.rs": {
        "openai/text-embedding-3-small": "",
        "sign in required": "",
        "failed to fetch cached embeddings via cloud model": "",
        "invalid digest for cached embedding": "",
        "server did not return an embedding for {:?}": ""
    },
    "zed/crates/semantic_index/src/embedding/ollama.rs": {
        "nomic-embed-text": "",
        "mxbai-embed-large": "",
        "Unable to pull response": ""
    },
    "zed/crates/semantic_index/src/chunking.rs": {
        "failed to parse file {path:?} for chunking": "",
        "\n            struct Person {\n                first_name: String,\n                last_name: String,\n                age: u32,\n            }\n\n            impl Person {\n                fn new(first_name: String, last_name: String, age: u32) -> Self {\n                    Self { first_name, last_name, age }\n                }\n\n                /// Returns the first name\n                /// something something something\n                fn first_name(&self) -> &str {\n                    &self.first_name\n                }\n\n                fn last_name(&self) -> &str {\n                    &self.last_name\n                }\n\n                fn age(&self) -> u32 {\n                    self.age\n                }\n            }\n        ": "",
        "    /// Returns the first name": "",
        "\n            struct T {}\n            struct U {}\n            struct V {}\n            struct W {\n                a: T,\n                b: U,\n            }\n        ": "",
        "\n            struct S { a: u32 }\n            struct T { a: u64 }\n            struct U { a: u64, b: u64, c: u64, d: u64, e: u64, f: u64, g: u64, h: u64, i: u64, j: u64 }\n            struct W { a: u64, b: u64, c: u64, d: u64, e: u64, f: u64, g: u64, h: u64, i: u64, j: u64 }\n        ": "",
        "unexpected number of chunks: {chunks:?}": "",
        "chunk {ix} starts at unexpected offset {}. expected {}": "",
        "invalid expected chunk prefix {ix}: {expected_prefix:?}": "",
        "chunk ranges are not contiguous: {:?}": "",
        "chunks don't cover entire text {:?}": "",
        "a\n": "",
        "\n            (function_item name: (_) @name) @item\n            (impl_item type: (_) @name) @item\n            (struct_item name: (_) @name) @item\n            (field_declaration name: (_) @name) @item\n        ": ""
    },
    "zed/crates/semantic_index/src/embedding_index.rs": {
        "failed to create read transaction": "",
        "failed to create iterator": "",
        "scanning for embedding index: {:?}": "",
        "embedding provider returned unexpected embedding count {}, expected {}": "",
        "deleting embeddings in range {:?}": "",
        "saving embedding for file {:?}": "",
        "no such path": ""
    },
    "zed/crates/semantic_index/src/embedding.rs": {
        "Embedding(sized: {}; values: [": ""
    },
    "zed/crates/semantic_index/src/project_index_debug_view.rs": {
        "chunk {} of {}. length: {}": "",
        "prev": "",
        "next": "",
        "selected-path-name": "",
        "x": "",
        "Project Index (Debug)": ""
    },
    "zed/crates/semantic_index/src/project_index.rs": {
        "failed to create read transaction": "",
        "failed to iterate database": "",
        "Searching for {queries:?}": "",
        "The number of query embeddings does not match the number of queries": "",
        "searched {} entries in {:?}": "",
        "embedding query took {:?}": "",
        "failed to create db read transaction": "",
        "No summary found for {:?}": "",
        "Error reading from summary database: {:?}": "",
        "Error flushing summary backlog: {:?}": "",
        "Summary backlog flushed in {:?}": ""
    },
    "zed/crates/semantic_index/src/semantic_index.rs": {
        "opening database connection": "",
        "No SemanticDb, skipping project index": "",
        "garbage in": "",
        "garbage out": "",
        "garbage in, garbage out": "",
        "should have found some results, but only found {:?}": "",
        "result: {:?}": "",
        "score: {:?}": "",
        "cannot embed text containing a 'g' character": ""
    },
    "zed/crates/semantic_index/src/worktree_index.rs": {
        "digests-{}": "",
        "summaries-{}": "",
        "Updating entries...": "",
        "failed to create read transaction": ""
    },
    "zed/crates/semantic_version/src/semantic_version.rs": {
        "missing major version number": "",
        "missing minor version number": "",
        "missing patch version number": "",
        "Invalid version string \"{string}\"": ""
    },
    "zed/crates/settings/src/keymap_file.rs": {
        ", ": "",
        "KeymapAction": "",
        "Error loading built-in keymap \"{asset_path}\": {error_message}": "",
        "JSON parse error in built-in keymap \"{asset_path}\": {error}": "",
        "{error_message}": "",
        "JSON parse error: {error}": "",
        " Parse error in section `context` field: {}": "",
        "\n\n - Unrecognized fields: {}": "",
        "\n\n- In binding {}, {indented_err}": "",
        "Errors in user keymap file.\n": "",
        "\n\nIn section without context predicate:": "",
        "\n\nIn section with {}:": ""
    },
    "zed/crates/settings/src/settings_file.rs": {
        "Courier": "",
        "theme": "",
        "Courier New": "",
        "languages": ""
    },
    "zed/crates/settings/src/settings_store.rs": {
        "version": "",
        "missing default": "",
        "creating editorconfig parser": "",
        "parsing editorconfig sections": "",
        "A default setting must be added to the `default.json` file": "",
        "unregistered setting type {}": "",
        "no default value for setting type": "",
        "Failed to canonicalize settings path {:?}": "",
        "Failed to write settings to file {:?}": "",
        "settings must be an object": "",
        "Attempted to submit tasks into the settings store": "",
        "dev": "",
        "nightly": "",
        "stable": "",
        "preview": "",
        "{message}": "",
        "SettingsStore": "",
        "types": "",
        "default_settings": "",
        "user_settings": "",
        "local_settings": "",
        "no default value for setting {}": "",
        "(pair key: (string) @key value: (_) @value)": "",
        "Failed to create PAIR_QUERY": ""
    },
    "zed/crates/settings_ui/src/appearance_settings_controls.rs": {
        "Theme": "",
        "Font": "",
        "theme": "",
        "Theme Mode": "",
        "light": "",
        "Light": "",
        "system": "",
        "System": "",
        "dark": "",
        "Dark": "",
        "UI Font Family": "",
        "ui-font-family": "",
        "UI Font Size": "",
        "ui-font-size": "",
        "UI Font Weight": "",
        "ui-font-weight": "",
        "UI Font Ligatures": "",
        "calt": "",
        "ui-font-ligatures": ""
    },
    "zed/crates/settings_ui/src/settings_ui.rs": {
        "settings-ui": "",
        "Settings": "",
        "Appearance": "",
        "Editor": ""
    },
    "zed/crates/snippet/src/snippet.rs": {
        "failed to parse snippet": "",
        "expected a closing brace": "",
        "expected an integer": "",
        "Placeholder choice doesn't contain closing pipe-character '|'": "",
        "one-two-three": "",
        "one$1two": "",
        "onetwo": "",
        "one$123-$99-two": "",
        "one--two": "",
        "foo.$1": "",
        "foo.": "",
        "<div class=": "",
        ">$0</div>": "",
        "></div>": "",
        "one${1:two}three${2:four}": "",
        "onetwothreefour": "",
        "type ${1|i32, u32|} = $2": "",
        "Should be able to unpack choice placeholders": "",
        "Should be able to parse choice with escape characters": ""
    },
    "zed/crates/snippets_ui/src/snippets_ui.rs": {
        "snippets": "",
        "Global": "",
        "Select snippet scope...": ""
    },
    "zed/crates/sqlez/src/bindable.rs": {
        "Failed to bind bool at index {start_index}": "",
        "Failed to read bool at index {start_index}": "",
        "Failed to bind &[u8] at index {start_index}": "",
        "Failed to bind &[u8; C] at index {start_index}": "",
        "Failed to bind Vec<u8> at index {start_index}": "",
        "Failed to read Vec<u8> at index {start_index}": "",
        "Failed to bind f64 at index {start_index}": "",
        "Failed to parse f64 at index {start_index}": "",
        "Failed to parse f32 at index {start_index}": "",
        "Failed to bind i32 at index {start_index}": "",
        "Failed to bind i64 at index {start_index}": "",
        "Failed to bind usize at index {start_index}": ""
    },
    "zed/crates/sqlez/src/connection.rs": {
        "Could not create fallback in memory db": "",
        "CREATE TABLE {table_to_alter}({column})": "",
        "Sqlite call failed with code {} and message: {:?}": "",
        "alter": "",
        "table": "",
        "rename column": "",
        "drop column": "",
        "string_round_trips": "",
        "Some test text": "",
        "INSERT INTO text (text) VALUES (?);": "",
        "SELECT text FROM text;": "",
        "tuple_round_trips": "",
        "\n                CREATE TABLE test (\n                    text TEXT,\n                    integer INTEGER,\n                    blob BLOB\n                );": "",
        "test": "",
        "test2": "",
        "INSERT INTO test (text, integer, blob) VALUES (?, ?, ?)": "",
        "SELECT * FROM test": "",
        "bool_round_trips": "",
        "\n                CREATE TABLE bools (\n                    t INTEGER,\n                    f INTEGER\n                );": "",
        "INSERT INTO bools(t, f) VALUES (?, ?)": "",
        "SELECT * FROM bools;": "",
        "backup_works": "",
        "\n                CREATE TABLE blobs (\n                    data BLOB\n                );": "",
        "INSERT INTO blobs (data) VALUES (?);": "",
        "backup_works_other": "",
        "SELECT * FROM blobs;": "",
        "multi_step_statement_works": "",
        "\n                CREATE TABLE test (\n                    col INTEGER\n                )": "",
        "\n            INSERT INTO test(col) VALUES (2)": "",
        "test_sql_has_syntax_errors": "",
        "CREATE TABLE kv_store(key TEXT PRIMARY KEY, value TEXT NOT NULL) STRICT ;": "",
        "SELECT FROM": "",
        "{}\n{}": "",
        "test_alter_table_syntax": "",
        "ALTER TABLE test ADD x TEXT": "",
        "ALTER TABLE test AAD x TEXT": ""
    },
    "zed/crates/sqlez/src/migrations.rs": {
        "Error creating cstr": "",
        "Prepare call failed for query:\n{}": "",
        "migrating": "",
        "\n                CREATE TABLE IF NOT EXISTS migrations (\n                    domain TEXT,\n                    step INTEGER,\n                    migration TEXT\n                )": "",
        "\n                    SELECT domain, step, migration FROM migrations\n                    WHERE domain = ?\n                    ORDER BY step\n                    ": "",
        "INSERT INTO migrations (domain, step, migration) VALUES (?, ?, ?)": "",
        "\n                            Migration changed for {} at step {}\n\n                            Stored migration:\n                            {}\n\n                            Proposed migration:\n                            {}": "",
        "migrations_are_added_to_table": "",
        "test": "",
        "\n                CREATE TABLE test1 (\n                    a TEXT,\n                    b TEXT\n                )": "",
        "SELECT (migration) FROM migrations": "",
        "CREATE TABLE test1 (a TEXT, b TEXT)": "",
        "\n                    CREATE TABLE test1 (\n                        a TEXT,\n                        b TEXT\n                    )": "",
        "\n                    CREATE TABLE test2 (\n                        c TEXT,\n                        d TEXT\n                    )": "",
        "CREATE TABLE test2 (c TEXT, d TEXT)": "",
        "migration_setup_works": "",
        "\n                CREATE TABLE IF NOT EXISTS migrations (\n                    domain TEXT,\n                    step INTEGER,\n                    migration TEXT\n                );": "",
        "\n                INSERT INTO migrations (domain, step, migration)\n                VALUES (?, ?, ?)": "",
        "test_domain": "",
        "CREATE TABLE table{} ( test TEXT );": "",
        "migrations_dont_rerun": "",
        "\n                CREATE TABLE test_table (\n                    test_column INTEGER\n                );": "",
        "\n            INSERT INTO test_table (test_column) VALUES (1);": "",
        "SELECT * FROM test_table": "",
        "DELETE FROM test_table": "",
        "INSERT INTO test_table (test_column) VALUES (2)": "",
        "changed_migration_fails": "",
        "test migration": "",
        "\n                CREATE TABLE test (\n                    col INTEGER\n                )": "",
        "\n                    INSERT INTO test (col) VALUES (1)": "",
        "\n                CREATE TABLE test (\n                    color INTEGER\n                )": "",
        "\n                INSERT INTO test (color) VALUES (1)": "",
        "test_create_alter_drop": "",
        "first_migration": "",
        "CREATE TABLE table1(a TEXT) STRICT;": "",
        "INSERT INTO table1(a) VALUES (\"test text\");": "",
        "second_migration": "",
        "\n                    CREATE TABLE table2(b TEXT) STRICT;\n\n                    INSERT INTO table2 (b)\n                    SELECT a FROM table1;\n\n                    DROP TABLE table1;\n\n                    ALTER TABLE table2 RENAME TO table1;\n                ": "",
        "SELECT b FROM table1": "",
        "test text": ""
    },
    "zed/crates/sqlez/src/savepoint.rs": {
        "SAVEPOINT {name}": "",
        "RELEASE {name}": "",
        "\n                    ROLLBACK TO {name};\n                    RELEASE {name}": "",
        "nested_savepoints": "",
        "\n            CREATE TABLE text (\n                text TEXT,\n                idx INTEGER\n            );": "",
        "test save1": "",
        "test save2": "",
        "first": "",
        "INSERT INTO text(text, idx) VALUES (?, ?)": "",
        "second": "",
        "SELECT text FROM text ORDER BY text.idx ASC": "",
        "Failed second save point :(": ""
    },
    "zed/crates/sqlez/src/statement.rs": {
        "Error creating cstr": "",
        "Parsing remaining sql": "",
        "Prepare call failed for query:\n{}": "",
        "Write statement prepared with connection that is not write capable. SQL:\n{} ": "",
        "Failed to bind value at index {index}": "",
        "Failed to bind parameters": "",
        "Failed to read blob at index {index}": "",
        "Failed to read length of blob at index {index}": "",
        "Failed to read double at index {index}": "",
        "Failed to read int at index {index}": "",
        "Failed to read i64 at index {index}": "",
        "Failed to read text from column {index}": "",
        "Failed to read text length at {index}": "",
        "Column type returned was incorrect ": "",
        "Statement step returned SQLITE_MISUSE": "",
        "Step returned error code and last error failed to catch it": "",
        "single called with query that returns no rows.": "",
        "single called with a query that returns more than one row.": "",
        "Failed on step call": "",
        "Failed to parse row result": "",
        "Second step call": "",
        "maybe called with a query that returns more than one row.": "",
        "binding_multiple_statements_with_parameter_gaps": "",
        "\n            CREATE TABLE test (\n                col INTEGER\n            )": "",
        "\n                INSERT INTO test(col) VALUES (?3);\n                SELECT * FROM test WHERE col = ?1": "",
        "Could not bind parameter to first index": "",
        "Could not bind parameter to second index": "",
        "Could not bind parameter to third index": "",
        "blob_round_trips": "",
        "\n                CREATE TABLE blobs (\n                    data BLOB\n                )": "",
        "INSERT INTO blobs (data) VALUES (?)": "",
        "SELECT * FROM blobs": "",
        "DELETE FROM blobs": "",
        "maybe_returns_options": "",
        "\n                CREATE TABLE texts (\n                    text TEXT\n                )": "",
        "SELECT text FROM texts": "",
        "This is a test": "",
        "INSERT INTO texts VALUES (?)": ""
    },
    "zed/crates/sqlez/src/thread_safe_connection.rs": {
        "Db initialize query failed to execute: {}": "",
        "Migration never run": "",
        "thread_safe_multi_migration": "",
        "Queues are inserted when build is called. This should always succeed": "",
        "Write queue unexpectedly closed": "",
        "Initialize query failed to execute: {}": "",
        "Could not send write action to background thread": "",
        "test": "",
        "CREATE TABLE test(col1 TEXT, col2 TEXT) STRICT;": "",
        "PRAGMA journal_mode=WAL": "",
        "\n                                PRAGMA synchronous=NORMAL;\n                                PRAGMA busy_timeout=1;\n                                PRAGMA foreign_keys=TRUE;\n                                PRAGMA case_sensitive_like=TRUE;\n                            ": "",
        "workspace": "",
        "\n                    CREATE TABLE workspaces(\n                        workspace_id INTEGER PRIMARY KEY,\n                        dock_visible INTEGER, -- Boolean\n                        dock_anchor TEXT, -- Enum: 'Bottom' / 'Right' / 'Expanded'\n                        dock_pane INTEGER, -- NULL indicates that we don't have a dock pane yet\n                        timestamp TEXT DEFAULT CURRENT_TIMESTAMP NOT NULL,\n                        FOREIGN KEY(dock_pane) REFERENCES panes(pane_id),\n                        FOREIGN KEY(active_pane) REFERENCES panes(pane_id)\n                    ) STRICT;\n\n                    CREATE TABLE panes(\n                        pane_id INTEGER PRIMARY KEY,\n                        workspace_id INTEGER NOT NULL,\n                        active INTEGER NOT NULL, -- Boolean\n                        FOREIGN KEY(workspace_id) REFERENCES workspaces(workspace_id)\n                            ON DELETE CASCADE\n                            ON UPDATE CASCADE\n                    ) STRICT;\n                ": "",
        "wild_zed_lost_failure": "",
        "PRAGMA FOREIGN_KEYS=true": ""
    },
    "zed/crates/sqlez/src/typed_statements.rs": {
        "Bindings failed": "",
        "Maybe row failed": ""
    },
    "zed/crates/streaming_diff/src/streaming_diff.rs": {
        "column out of bounds": "",
        "row out of bounds": "",
        "{:5}": "",
        "aaaa\nbbbb": "",
        "\ncccc": "",
        "aaaa\nbbbb\ncccc": "",
        "BBBB": "",
        "aaaa\nbbbb\ncccc\ndddd": "",
        "A": "",
        "\nEEEE": "",
        "aaaabbbb": "",
        "\n\n": "",
        "aaaa\n\n\nbbbb": "",
        "line1\nline2\nline3\nline4": "",
        "inserted\n": "",
        "\nnewline": "",
        "line1\ninserted\nline3\nnewline\nline4": "",
        "        for y in 0..size.y() {\n": "",
        "            let a = 10;\n": "",
        "            let b = 20;\n": "",
        "        }": "",
        "let": "",
        " mut": "",
        " y": "",
        " =": "",
        " 0": "",
        "        while": "",
        " < size": "",
        "y": "",
        " {": "",
        "    y": "",
        " +=": "",
        " 1": "",
        "        ": "",
        "OLD_TEXT_LEN": "",
        "invalid `OLD_TEXT_LEN` variable": "",
        "old text: {:?}": "",
        "new text: {:?}": "",
        "char operations: {:?}": "",
        "line operations: {:?}": "",
        "ITERATIONS": "",
        "invalid `ITERATIONS` variable": "",
        "SEED": "",
        "invalid `SEED` variable": "",
        "Running test with {} iterations and seed {}": "",
        "Iteration {}": "",
        "Hello, world!": "",
        "Hello, Rust!": ""
    },
    "zed/crates/tab_switcher/src/tab_switcher.rs": {
        "TabSwitcher": "",
        "No tabs": "",
        "Invalid matches state: no element for index {ix}": "",
        "close-button": "",
        "close_tab": "",
        "Close": ""
    },
    "zed/crates/task/src/task_template.rs": {
        "regular": "",
        "main": "",
        "non_empty_string_vec": "",
        "non_empty_string_vec_json_schema": "",
        "default_true": "",
        "hashing task template": "",
        "hashing task variables": "",
        "{id_base}_{task_hash}_{variables_hash}": "",
        "serializing the object": "",
        "Unknown variable name: {variable_name}": "",
        "${{{var}}}": "",
        "test_base": "",
        "test_label": "",
        "test_command": "",
        "test_arg": "",
        "test_env_key": "",
        "test_env_var": "",
        "should not resolve task with blank label and/or command: {task_with_blank_property:?}": "",
        "test task": "",
        "echo 4": "",
        "failed to resolve task {task_without_cwd:?}": "",
        "failed to get resolve data for resolved task. Template: {task_without_cwd:?} Resolved: {resolved_task:?}": "",
        "When neither task nor task context have cwd, it should be None": "",
        "a": "",
        "b": "",
        "c": "",
        "TaskContext's cwd should be taken on resolve if task's cwd is None": "",
        "d": "",
        "e": "",
        "f": "",
        "TaskTemplate's cwd should be taken on resolve if TaskContext's cwd is None": "",
        "TaskTemplate's cwd should be taken on resolve if TaskContext's cwd is not None": "",
        "custom_variable_1": "",
        "custom_variable_2": "",
        "test_file": "",
        "test_selected_text": "",
        "test_custom_variable_1": "",
        "test_custom_variable_2": "",
        "test label for {} and {}": "",
        "echo {} {}": "",
        "arg1 {}": "",
        "arg2 {}": "",
        "arg3 {}": "",
        "env_key_1": "",
        "env_key_2": "",
        "env_var_2 {} {}": "",
        "env_key_3": "",
        "env_var_3 {}": "",
        "Should successfully resolve task {task_with_all_variables:?} with variables {all_variables:?}": "",
        "Step {i}, for the same task template and context, there should be the same resolved task id": "",
        "Resolved task should store its template without changes": "",
        "test label for 1234 and {long_value}": "",
        "Resolved task label should be substituted with variables and those should not be shortened": "",
        "should have resolved a spawn in terminal task": "",
        "test label for 1234 and …{}": "",
        "Human-readable label should have long substitutions trimmed": "",
        "echo test_file {long_value}": "",
        "Command should be substituted with variables and those should not be shortened": "",
        "arg1 $ZED_SELECTED_TEXT": "",
        "arg2 $ZED_COLUMN": "",
        "arg3 $ZED_SYMBOL": "",
        "Args should not be substituted with variables": "",
        "{} arg1 test_selected_text arg2 5678 arg3 {long_value}": "",
        "Command label args should be substituted with variables and those should not be shortened": "",
        "env_var_2 test_custom_variable_1 test_custom_variable_2": "",
        "env_var_3 {long_value}": "",
        "Env vars should be substituted with variables and those should not be shortened": "",
        "If any of the Zed task variables is not substituted, the task should not be resolved, but got some resolution without the variable {removed_variable:?} (index {i})": "",
        "My task": "",
        "echo": "",
        "$PATH": "",
        "$ZED_VARIABLE": "",
        "test_symbol": "",
        "test_label_{}": "",
        "test_command_{}": "",
        "test_arg_{}": "",
        "test_env_var_{}": "",
        "Failed to resolve task {symbol_dependent_task:?}": "",
        "(index {i}) Expected the task to depend on symbol task variable: {resolved:?}": "",
        "go test {}/{}": "",
        "go": "",
        "my-symbol": "",
        "base": "",
        "my symbol": "",
        "my task": "",
        "TASK_ENV_VAR1": "",
        "TASK_ENV_VAR1_VALUE": "",
        "TASK_ENV_VAR2": "",
        "PROJECT_ENV_WILL_BE_OVERWRITTEN": "",
        "overwritten": "",
        "PROJECT_ENV_VAR1": "",
        "PROJECT_ENV_VAR1_VALUE": "",
        "PROJECT_ENV_WILL_BE_OVERWRITTEN_VALUE": "",
        "env_var_2 1234 5678": ""
    },
    "zed/crates/task/src/vscode_format.rs": {
        "camelCase": "",
        "type": "",
        "${{{substitution}": "",
        "${{{var}}}": "",
        "dependsOn": "",
        "Encountered unsupported `dependsOn` key during deserialization": "",
        "Missing `type` field in task": "",
        "npm": "",
        "run": "",
        "gulp": "",
        "workspaceFolder": "",
        "file": "",
        "lineNumber": "",
        "selectedText": "",
        "Food": "",
        "$PATH is an environment variable": "",
        "${PATH}": "",
        "${PATH:food}": "",
        "PATH": "",
        "ZED_PATH": "",
        "${ZED_PATH} is an environment variable": "",
        "${ZED_PATH}": "",
        "${ZED_PATH:food}": "",
        "gulp: tests": "",
        "build:tests:notypecheck": "",
        "tsc: watch ./src": "",
        "node": "",
        "--build": "",
        "${workspaceFolder}/src": "",
        "--watch": "",
        "npm: build:compiler": "",
        "build:compiler": "",
        "npm: build:tests": "",
        "${ZED_WORKTREE_ROOT}/src": "",
        "Build Extension in Background": "",
        "watch": "",
        "Build Extension": "",
        "build": "",
        "Build Server": "",
        "cargo build --package rust-analyzer": "",
        "Build Server (Release)": "",
        "cargo build --release --package rust-analyzer": "",
        "Pretest": "",
        "pretest": "",
        "Build Server and Extension": "",
        "Build Server (Release) and Extension": ""
    },
    "zed/crates/tasks_ui/src/modal.rs": {
        "Find a task, or run a command in the central pane": "",
        "Find a task, or run a command": "",
        "TasksModal": "",
        "\n#{}": "",
        "tasks-modal-{ix}": "",
        " ": "",
        "delete": "",
        "Delete Previously Scheduled Task": "",
        "Rerun Last Task": "",
        "edit-current-task": "",
        "Spawn Oneshot Without History": "",
        "Spawn Oneshot": "",
        "spawn-onehshot": "",
        "Rerun Without History": "",
        "Spawn Without History": "",
        "spawn": "",
        "Rerun": "",
        "Spawn": "",
        ".zed": "",
        "[\n                        {\n                            ": "",
        ": ": "",
        ",\n                            ": "",
        ": [": "",
        "]\n                        },\n                        {\n                            ": "",
        "]\n                        },\n                    ]": "",
        "a": "",
        "Initial query should be empty": "",
        "another one": "",
        "example task": "",
        "With no global tasks and no open item, a single worktree should be used and its tasks listed": "",
        "Initial tasks should be listed in alphabetical order": "",
        "tas": "",
        "Only one task should match the query {query_str}": "",
        "echo 4": "",
        "Query should be set to the selected task's command": "",
        "No task should be listed": "",
        "Query should be reset after confirming": "",
        "New oneshot task should be listed first": "",
        "New oneshot should match custom command query": "",
        "Last recently used one show task should be listed first": "",
        "Query should be set to the custom task's name": "",
        "Only custom task should be listed": "",
        "echo 40": "",
        "New oneshot should not match any command query": "",
        "No query should be added to the list, as it was submitted with secondary action (that maps to omit_history = true)": "",
        ", ": "",
        "]\n                        }\n                    ]": "",
        "file_without_extension": "",
        "aaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaa": "",
        "file_with.odd_extension": "",
        "b": "",
        "opened now: ": "",
        "When no file is open for a single worktree, should autodetect all worktree-related tasks": "",
        "hello from ": "",
        "Second opened buffer should fill the context, labels should be trimmed if long enough": "",
        "Opened buffer should fill the context, labels should be trimmed if long enough": "",
        "TypeScript": "",
        "ts": "",
        "Task without variables": "",
        "npm run clean": "",
        "TypeScript task from file $ZED_FILE": "",
        "npm run build": "",
        "Another task from file $ZED_FILE": "",
        "npm run lint": "",
        "Rust task": "",
        "cargo check": "",
        "Another task from file ": "",
        "TypeScript task from file ": "",
        "Should open spawn TypeScript tasks for the opened file, tasks with most template variables above, all groups sorted alphanumerically": "",
        "After spawning the task and getting it into the history, it should be up in the sort as recently used.\n            Tasks with the same labels and context are deduplicated.": "",
        "Even when both TS files are open, should only show the history (on the top), and tasks, resolved for the current file": "",
        "Even when both TS files are open and one TS task spawned, opened file's language tasks should be displayed only": "",
        "\n        );\n    }\n\n    fn emulate_task_schedule(\n        tasks_picker: Entity<Picker<TasksModalDelegate>>,\n        project: &Entity<Project>,\n        scheduled_task_label: &str,\n        cx: &mut VisualTestContext,\n    ) {\n        let scheduled_task = tasks_picker.update(cx, |tasks_picker, _| {\n            tasks_picker\n                .delegate\n                .candidates\n                .iter()\n                .flatten()\n                .find(|(_, task)| task.resolved_label == scheduled_task_label)\n                .cloned()\n                .unwrap()\n        });\n        project.update(cx, |project, cx| {\n            if let Some(task_inventory) = project.task_store().read(cx).task_inventory().cloned() {\n                task_inventory.update(cx, |inventory, _| {\n                    let (kind, task) = scheduled_task;\n                    inventory.task_scheduled(kind, task);\n                });\n            }\n        });\n        tasks_picker.update(cx, |_, cx| {\n            cx.emit(DismissEvent);\n        });\n        drop(tasks_picker);\n        cx.executor().run_until_parked()\n    }\n\n    fn open_spawn_tasks(\n        workspace: &Entity<Workspace>,\n        cx: &mut VisualTestContext,\n    ) -> Entity<Picker<TasksModalDelegate>> {\n        cx.dispatch_action(Spawn::modal());\n        workspace.update(cx, |workspace, cx| {\n            workspace\n                .active_modal::<TasksModal>(cx)\n                .expect(": ""
    },
    "zed/crates/terminal/src/terminal.rs": {
        "<non-utf8 path> {}": "",
        "<none specified, using home directory> {}": "",
        "<none specified, could not find home directory>": "",
        "<system defined shell>": "",
        "Working directory: {} Shell command: `{}`, IOError: {}": "",
        "escape": "",
        "{process_file} — {process_name}": "",
        "Terminal": "",
        "⏵ ": "",
        "{TASK_DELIMITER}Task `{escaped_full_label}` finished successfully": "",
        "{TASK_DELIMITER}Task `{escaped_full_label}` finished with non-zero error code: {error_code}": "",
        "{TASK_DELIMITER}Task `{escaped_full_label}` finished": "",
        "{TASK_DELIMITER}Command: {escaped_command_label}": "",
        "less public": "",
        "proper": "",
        "test http://example.com test mailto:bob@example.com train": "",
        "hello, world! \"What\" is this?": "",
        "hello": "",
        "world": "",
        "What": "",
        "is": "",
        "this": "",
        "word": "",
        "a Main.cs(20) b": "",
        "a": "",
        "Main.cs(20)": "",
        "Main.cs(20,5) Error desc": "",
        "Main.cs(20,5)": "",
        "Error": "",
        "desc": ""
    },
    "zed/crates/terminal_view/src/persistence.rs": {
        "no window present": "",
        "horizontal": "",
        "vertical": "",
        "Invalid axis value: '{invalid}'": "",
        "DELETE FROM terminals WHERE workspace_id = ? AND item_id NOT IN ({placeholders})": ""
    },
    "zed/crates/terminal_view/src/terminal_panel.rs": {
        "plus": "",
        "New…": "",
        "New Terminal": "",
        "Spawn task": "",
        "terminal-pane-tab-bar-split": "",
        "terminal-pane-split": "",
        "Split Pane": "",
        "Split Right": "",
        "Split Left": "",
        "Split Up": "",
        "Split Down": "",
        "Zoom Out": "",
        "Zoom In": "",
        "terminal not yet supported for remote projects": "",
        "retrieving active terminal item in the workspace": "",
        "Terminal Panel": "",
        "Inline Assist": ""
    },
    "zed/crates/terminal_view/src/terminal_tab_tooltip.rs": {
        "Process ID (PID): {}": ""
    },
    "zed/crates/terminal_view/src/terminal_view.rs": {
        "a": "",
        "b": "",
        "New Terminal": "",
        "Copy": "",
        "Paste": "",
        "Select All": "",
        "Clear": "",
        "Inline Assist": "",
        "Close Terminal Tab": "",
        "ctrl-cmd-space": "",
        "Terminal": "",
        "vi_mode": "",
        "screen": "",
        "alt": "",
        "normal": "",
        "DECCKM": "",
        "DECPAM": "",
        "DECPNM": "",
        "DECTCEM": "",
        "DECAWM": "",
        "DECOM": "",
        "IRM": "",
        "LNM": "",
        "report_focus": "",
        "alternate_scroll": "",
        "bracketed_paste": "",
        "any_mouse_reporting": "",
        "click": "",
        "drag": "",
        "motion": "",
        "off": "",
        "mouse_reporting": "",
        "sgr": "",
        "utf8": "",
        "mouse_format": "",
        "terminal-view-scroll": "",
        "rerun-icon": "",
        "Rerun task": "",
        "workspace update": "",
        "Received {} items for one path {path_to_open:?}": ""
    },
    "zed/crates/text/src/text.rs": {
        "Failed to create LINE_SEPARATORS_REGEX": "",
        "Buffer id cannot be 0.": "",
        "gave up waiting for edits": "",
        "gave up waiting for anchors": "",
        "gave up waiting for version": "",
        "invalid edit": "",
        "fragment: {:?}\ninsertion: {:?}": "",
        "mutating buffer {} with {:?}": "",
        "undoing buffer {} transaction {:?}": "",
        "invalid insertion": "",
        "invalid anchor {:?}. buffer id: {}, version: {:?}": "",
        "invalid version": "",
        "offset {} is out of range, max allowed is {}": ""
    },
    "zed/crates/theme_importer/src/assets.rs": {
        "could not find asset at path \"{}\"": ""
    },
    "zed/crates/theme_importer/src/main.rs": {
        "theme_printer": "",
        "could not initialize logger": "",
        "Failed to open file at path: {:?}": "",
        "failed to parse theme {theme_file_path:?}": "",
        "$schema": "",
        "Done!": ""
    },
    "zed/crates/theme_selector/src/theme_selector.rs": {
        "error loading theme {}: {}": "",
        "Select Theme...": "",
        "Settings Changed": "",
        "theme": "",
        "docs": "",
        "View Theme Docs": "",
        "more-themes": "",
        "Install Themes": ""
    },
    "zed/crates/theme_selector/src/icon_theme_selector.rs": {
        "error loading icon theme {}: {err}": "",
        "Select Icon Theme...": "",
        "Settings Changed": "",
        "icon_theme": "",
        "docs": "",
        "View Icon Theme Docs": "",
        "more-icon-themes": "",
        "Install Icon Themes": ""
    },
    "zed/crates/time_format/src/time_format.rs": {
        "{} {}": "",
        "Today at {}": "",
        "Yesterday at {}": "",
        "Just now": "",
        "{} minutes ago": "",
        "1 hour ago": "",
        "{} hours ago": "",
        "Today": "",
        "Yesterday": "",
        "{} days ago": "",
        "1 week ago": "",
        "{} weeks ago": "",
        "1 month ago": "",
        "{} months ago": "",
        "1 year ago": "",
        "{} years ago": "",
        "PM": "",
        "AM": "",
        "Valid timezone offset": ""
    },
    "zed/crates/title_bar/src/application_menu.rs": {
        "Open Application Menu": "",
        "ApplicationMenu": ""
    },
    "zed/crates/title_bar/src/collab.rs": {
        "Screen Share Disabled": "",
        "Screen Share Enabled": "",
        "Sharing Screen Failed": "",
        "{:?}\n\nPlease check that you have given Zed permissions to record your screen in Settings.": "",
        "Microphone Enabled": "",
        "Microphone Disabled": "",
        "collaborator-list": "",
        "collaborator": "",
        "Follow {login}": "",
        "{} is muted": "",
        "+{extra_count}": "",
        "toggle_sharing": "",
        "Unshare": "",
        "Share": "",
        "Stop sharing project with call participants": "",
        "Share project with call participants": "",
        "leave-call": "",
        "Leave call": "",
        "mute-microphone": "",
        "Unmute Microphone": "",
        "Audio will be unmuted": "",
        "Mute Microphone": "",
        "mute-sound": "",
        "Unmute Audio": "",
        "Microphone will be unmuted": "",
        "Mute Audio": "",
        "Microphone will be muted": "",
        "screen-share": "",
        "Stop Sharing Screen": "",
        "Share Screen": ""
    },
    "zed/crates/title_bar/src/title_bar.rs": {
        "stories": "",
        "title-bar": "",
        "titlebar": "",
        "titlebar-content": "",
        "ZED_USE_CROSS_PLATFORM_MENU": "",
        "Git Onboarding": "",
        "Git Support": "",
        "Connecting to: {host}": "",
        "Connected to: {host}": "",
        "Connection attempt to {host} missed. Retrying...": "",
        "Lost connection to {host}. Reconnecting...": "",
        "Disconnected from {host}": "",
        "ssh-server-icon": "",
        "Remote Project": "",
        "disconnected": "",
        "Disconnected": "",
        "project_owner_trigger": "",
        "{} is sharing this project. Click to follow.": "",
        "Open recent project": "",
        "project_name_trigger": "",
        "Recent Projects": "",
        "project_branch_trigger": "",
        "Recent Branches": "",
        "Local branches only": "",
        "Please restart Zed to Collaborate": "",
        "Updating...": "",
        "Please update Zed to Collaborate": "",
        "connection-status": "",
        "sign_in": "",
        "Sign in": "",
        "user-menu": "",
        "Current Plan: {}": "",
        "Free": "",
        "Pro": "",
        "Settings": "",
        "Key Bindings": "",
        "Themes…": "",
        "Icon Themes…": "",
        "Extensions": "",
        "Book Onboarding": "",
        "Sign Out": "",
        "Toggle User Menu": ""
    },
    "zed/crates/title_bar/src/window_controls.rs": {
        "Use WindowControl::new_close() for close control.": ""
    },
    "zed/crates/toolchain_selector/src/active_toolchain.rs": {
        "Toolchain": "",
        "change-toolchain": "",
        "Select {}": ""
    },
    "zed/crates/toolchain_selector/src/toolchain_selector.rs": {
        "Select a {}…": "",
        "Select a toolchain…": ""
    },
    "zed/crates/util/src/paths.rs": {
        "failed to determine home directory": "",
        "Invalid WTF-8 sequence: {bytes:?}": "",
        "Path matcher should match {path:?}": ""
    },
    "zed/crates/util/src/test.rs": {
        ".git": "",
        "JSON object must contain only objects, strings, or null": "",
        "You must pass a JSON object to this helper": ""
    },
    "zed/crates/util/src/util.rs": {
        "call to getpwuid_r failed. uid: {}, status: {}": "",
        "passwd entry for uid {} not found": "",
        "passwd entry has different uid ({}) than getuid ({}) returned": "",
        "SHELL": "",
        "updating SHELL environment variable to value from passwd entry: {:?}": "",
        "ZED_LOGIN_SHELL_START": "",
        "SHELL environment variable is not assigned so we can't source login environment variables": "",
        "HOME": "",
        "cd '{home}';": "",
        "{}printf '%s' {marker}; /usr/bin/env; exit 0;": "",
        "failed to spawn login shell to source login environment variables": "",
        "login shell exited with error": "",
        "set environment variables from shell:{}, path:{}": "",
        "PATH": "",
        "ZED_MEASUREMENTS": "",
        "true": "",
        "{}: {:?}": "",
        "ProgramFiles(x86)": "",
        "ProgramFiles": "",
        "ProgramW6432": "",
        "PowerShell": "",
        "preview": "",
        "LOCALAPPDATA": "",
        "Microsoft.PowerShellPreview_": "",
        "Microsoft.PowerShell_": "",
        "USERPROFILE": "",
        "a": "",
        "A": "",
        "hello": "",
        "Hello": "",
        "WORLD": "",
        "String without numeric prefix `{numeric_prefix_less}` should not be converted into NumericPrefixWithSuffix": ""
    },
    "zed/crates/vim/src/change_list.rs": {
        "ˇ": "",
        "i 1 1 escape shift-o 2 2 escape shift-g o 3 3 escape": "",
        "22\n             11\n             3ˇ3": "",
        "g ;": "",
        "2ˇ2\n             11\n             33": "",
        "22\n             1ˇ1\n             33": "",
        "g ,": "",
        "shift-g i 4 4 escape": "",
        "22\n             11\n             34ˇ43": "",
        "2ˇ2\n             11\n             3443": "",
        "one two\n        three fˇour": "",
        "x k d i w ^ x": "",
        "ˇne•\n        three fur": "",
        "2 g ;": "",
        "ne•\n        three fˇur": "",
        "one two\n        three fˇr": "",
        "i o escape k g i": "",
        "u escape": "",
        "one two\n        three foˇur": "",
        "i o escape k ` .": "",
        "one two\n        three fˇor": ""
    },
    "zed/crates/vim/src/mode_indicator.rs": {
        "recording @{reg} ": "",
        "\"{reg}": "",
        "(insert) {}": "",
        "{} -- {} --": ""
    },
    "zed/crates/vim/src/normal.rs": {
        "Unexpected normal mode motion operator: {:?}": "",
        "[No Name]": "",
        " [modified]": "",
        "{}{} {} lines --{:.0}%--": "",
        "h": "",
        "\n            ˇThe qˇuick\n            ˇbrown": "",
        "backspace": "",
        "\n            aaˇaa\n            😃😃": "",
        "j": "",
        "\n            aaaa\n            😃ˇ😃": "",
        "\n                ˇThe qˇuick broˇwn\n                ˇfox jumps": "",
        "enter": "",
        "\n            ˇThe qˇuick broˇwn\n            ˇfox jumps": "",
        "k": "",
        "\n            ˇThe qˇuick\n            ˇbrown fˇox jumˇps": "",
        "l": "",
        "\n            ˇThe qˇuicˇk\n            ˇbrowˇn": "",
        "\n                ˇThe qˇuicˇk\n                ˇbrowˇn": "",
        "shift-g": "",
        "\n                The ˇquick\n\n                brown fox jumps\n                overˇ the lazy doˇg": "",
        "\n            The quiˇck\n\n            brown": "",
        "\n            The quiˇck\n\n            ": "",
        "w": "",
        "\n            The ˇquickˇ-ˇbrown\n            ˇ\n            ˇ\n            ˇfox_jumps ˇover\n            ˇthˇe": "",
        "shift-w": "",
        "e": "",
        "\n            Thˇe quicˇkˇ-browˇn\n\n\n            fox_jumpˇs oveˇr\n            thˇe": "",
        "shift-e": "",
        "b": "",
        "\n            ˇThe ˇquickˇ-ˇbrown\n            ˇ\n            ˇ\n            ˇfox_jumps ˇover\n            ˇthe": "",
        "shift-b": "",
        "g g": "",
        "\n                The qˇuick\n\n                brown fox jumps\n                over ˇthe laˇzy dog": "",
        "\n\n\n                brown fox jumps\n                over the laˇzy dog": "",
        "2 g g": "",
        "\n                ˇ\n\n                brown fox jumps\n                over the lazydog": "",
        "2 shift-g": "",
        "a": "",
        "The qˇuicˇk": "",
        "shift-a": "",
        "\n            ˇ\n            The qˇuick\n            brown ˇfox ": "",
        "The qˇuick": "",
        " The qˇuick": "",
        "ˇ": "",
        "\n                The qˇuick\n                brown fox": "",
        "\n                ˇ\n                The quick": "",
        "   ˇ \nThe quick": "",
        "shift-i": "",
        "shift-d": "",
        "\n                The quick\n                ˇ\n                brown fox": "",
        "x": "",
        "ˇTeˇsˇt": "",
        "\n                Tesˇt\n                test": "",
        "shift-x": "",
        "ˇTˇeˇsˇt": "",
        "\n                Test\n                ˇtest": "",
        "o": "",
        "The ˇquick": "",
        "\n                The qˇuick\n                brown ˇfox\n                jumps ˇover": "",
        "\n                fn test() {\n                    println!(ˇ);\n                }": "",
        "\n                fn test() {\n                    println!();\n                    ˇ\n                }": "",
        "\n                fn test(ˇ) {\n                    println!();\n                }": "",
        "\n                fn test() {\n                    ˇ\n                    println!();\n                }": "",
        "shift-o": "",
        "\n            The qˇuick\n            brown ˇfox\n            jumps ˇover": "",
        "\n            The quick\n            ˇ\n            brown fox": "",
        "\n                ˇ\n                fn test() {\n                    println!();\n                }": "",
        "d d": "",
        "c c": "",
        "\n                The quˇick\n                brown ˇfox\n                jumps ˇover": "",
        "{count} w": "",
        "\n                    ˇThe quˇickˇ browˇn\n                    ˇ\n                    ˇfox ˇjumpsˇ-ˇoˇver\n                    ˇthe lazy dog\n                ": "",
        "Testˇ├ˇ──ˇ┐ˇTest": "",
        "\n                ˇaaaˇbˇ ˇbˇ   ˇbˇbˇ aˇaaˇbaaa\n                ˇ    ˇbˇaaˇa ˇbˇbˇb\n                ˇ\n                ˇb\n            ": "",
        "{count} f b": "",
        "{count} t b": "",
        "\n            ˇaaaˇbˇ ˇbˇ   ˇbˇbˇ aˇaaˇbaaa\n            ˇ    ˇbˇaaˇa ˇbˇbˇb\n            ˇ•••\n            ˇb\n            ": "",
        "{count} shift-f b": "",
        "{count} shift-t b": "",
        "f l": "",
        "\n            ˇfunction print() {\n                console.log('ok')\n            }\n            ": "",
        "\n            function print() {\n                consoˇle.log('ok')\n            }\n            ": "",
        "t l": "",
        "\n            function print() {\n                consˇole.log('ok')\n            }\n            ": "",
        "shift-f p": "",
        "\n            function print() {\n                console.ˇlog('ok')\n            }\n            ": "",
        "\n            function ˇprint() {\n                console.log('ok')\n            }\n            ": "",
        "shift-t p": "",
        "\n            function pˇrint() {\n                console.log('ok')\n            }\n            ": "",
        "f p": "",
        "ˇfmt.Println(\"Hello, World!\")": "",
        "fmt.ˇPrintln(\"Hello, World!\")": "",
        "fmt.Printlnˇ(\"Hello, World!\")": "",
        "t p": "",
        "fmtˇ.Println(\"Hello, World!\")": "",
        "fmt.Pˇrintln(\"Hello, World!\")": "",
        "ˇconsole.logˇ(ˇvaˇrˇ)ˇ;": "",
        "ˇconsole.logˇ(ˇ'var', ˇ[ˇ1, ˇ2, 3ˇ]ˇ)ˇ;": "",
        "let result = curried_funˇ(ˇ)ˇ(ˇ)ˇ;": "",
        "ˇaa\nbb\ncc": "",
        "aˇa\nbb\ncc": "",
        "2 $": "",
        "aa\nbˇb\ncc": "",
        "4 $": "",
        "aa\nbb\ncˇc": "",
        "Editor && VimControl && !VimWaiting && !menu": "",
        "g e": "",
        "ˇassert_binding": "",
        "assert_ˇbinding": "",
        "c w": "",
        "ˇ_binding": "",
        "asserˇt_binding": "",
        "assert_bindinˇg": "",
        "ˇhello\n": "",
        "r -": "",
        "ˇ-ello\n": "",
        "3 r -": "",
        "--ˇ-lo\n": "",
        "r - 2 l .": "",
        "-eˇ-lo\n": "",
        "ˇhello world\n": "",
        "2 r - f w .": "",
        "--llo -ˇ-rld\n": "",
        "2 0 r - ": "",
        "textwidth=5": "",
        "ˇth th th th th th\n": "",
        "g q q": "",
        "th th\nth th\nˇth th\n": "",
        "ˇth th th th th th\nth th th th th th\n": "",
        "v j g q": "",
        "th th\nth th\nth th\nth th\nth th\nˇth th\n": "",
        "filetype=rust": "",
        "x escape shift-o": "",
        "heˇllo\n": "",
        "y y p": "",
        "hello\nˇhello\n": "",
        "heˇllo": "",
        "hello\nˇhello": "",
        "heˇllo\nhello": "",
        "2 y y p": "",
        "hello\nˇhello\nhello\nhello": "",
        "p p": "",
        "\nhello\nˇhello": "",
        "v i w shift-i": "",
        "ˇhello": "",
        "\n            The quick brown\n            fox ˇjumps over\n            the lazy dog": "",
        "shift-v shift-i": "",
        "\n            The quick brown\n            ˇfox jumps over\n            the lazy dog": "",
        "shift-v shift-a": "",
        "\n            The quick brown\n            fox jˇumps over\n            the lazy dog": ""
    },
    "zed/crates/vim/src/surrounds.rs": {
        "\n{}": "",
        " ": "",
        "hello in a word": "",
        "b": "",
        "B": "",
        "a": "",
        "r": "",
        "\n            The quˇick brown\n            fox jumps over\n            the lazy dog.": "",
        "y s i w {": "",
        "\n            The ˇ{ quick } brown\n            fox jumps over\n            the lazy dog.": "",
        "y s i w }": "",
        "\n            The ˇ{quick} brown\n            fox jumps over\n            the lazy dog.": "",
        "y s $ }": "",
        "\n            The quˇ{ick brown}\n            fox jumps over\n            the lazy dog.": "",
        "\n            The quˇick brown\n            fox jumps over\n            the laˇzy dog.": "",
        "y s i w '": "",
        "\n            The ˇ'quick' brown\n            fox jumps over\n            the ˇ'lazy' dog.": "",
        "y s $ '": "",
        "\n            The quˇ'ick brown'\n            fox jumps over\n            the laˇ'zy dog.'": "",
        "y s $ 1": "",
        "\n            The quˇ1ick brown1\n            fox jumps over\n            the laˇ1zy dog.1": "",
        "y s s {": "",
        "\n            ˇ{ The quick brown }\n            fox jumps over\n            the lazy dog.": "",
        "\n                The quˇick brown•\n            fox jumps over\n            the lazy dog.": "",
        "\n                ˇ{ The quick brown }•\n            fox jumps over\n            the lazy dog.": "",
        "2 y s s )": "",
        "\n                ˇ({ The quick brown }•\n            fox jumps over)\n            the lazy dog.": "",
        "\n            The [quˇick] brown\n            fox jumps over\n            the lazy dog.": "",
        "y s a ] )": "",
        "\n            The ˇ([quick]) brown\n            fox jumps over\n            the lazy dog.": "",
        "y s i ] )": "",
        "\n            The [ˇ(quick)] brown\n            fox jumps over\n            the lazy dog.": "",
        "shift-s": "",
        "vim_mode == visual": "",
        "v i w shift-s {": "",
        "v i w shift-s }": "",
        "v e shift-s }": "",
        "\n            The quˇ{ick} brown\n            fox jumps over\n            the lazy dog.": "",
        "v i w shift-s '": "",
        "ctrl-v i w j j shift-s '": "",
        "\n            The ˇ'quick' brown\n            fox 'jumps' over\n            the 'lazy 'dog.": "",
        "j shift-v shift-s '": "",
        "\n            The quick brown\n            ˇ'\n            fox jumps over\n            '\n            the lazy dog.": "",
        "\n            The {quˇick} brown\n            fox jumps over\n            the lazy dog.": "",
        "d s {": "",
        "\n            The ˇquick brown\n            fox jumps over\n            the lazy dog.": "",
        "d s [": "",
        "\n            The {quick} brˇown\n            fox jumps over\n            the lazy dog.": "",
        "\n            The { quick brown\n            fox jumˇps over }\n            the lazy dog.": "",
        "\n            The [quˇick] brown\n            fox jumps over\n            the [laˇzy] dog.": "",
        "d s ]": "",
        "\n            The ˇquick brown\n            fox jumps over\n            the ˇlazy dog.": "",
        "\n            Tˇhe [ quick ] brown\n            fox jumps over\n            the [laˇzy] dog.": "",
        "\n            Tˇhe [ quick ] brown\n            fox jumps over\n            the [laˇzy ] dog.": "",
        "\n            The [quˇick] brown\n            fox jumps over\n            the {laˇzy} dog.": "",
        "\n            The [quick] brown\n            fox jumps over\n            the ˇlazy dog.": "",
        "\n            fn test_surround() {\n                ifˇ 2 > 1 {\n                    ˇprintln!(\"it is fine\");\n                };\n            }": "",
        "d s }": "",
        "\n            fn test_surround() ˇ\n                if 2 > 1 ˇ\n                    println!(\"it is fine\");\n                ;\n            ": "",
        "c s { [": "",
        "\n            The ˇ[ quick ] brown\n            fox jumps over\n            the lazy dog.": "",
        "\n            The {quˇick} brown\n            fox jumps over\n            the {laˇzy} dog.": "",
        "\n            The ˇ[ quick ] brown\n            fox jumps over\n            the ˇ[ lazy ] dog.": "",
        "\n            Thˇe {quick} brown\n            fox jumps over\n            the {laˇzy} dog.": "",
        "\n            Thˇe { quick } brown\n            fox jumps over\n            the {laˇzy} dog.": "",
        "c s { ]": "",
        "\n            The ˇ[quick] brown\n            fox jumps over\n            the ˇ[lazy] dog.": "",
        "\n            The {quˇick} brown\n            fox jumps over\n            the [laˇzy] dog.": "",
        "c s [ '": "",
        "\n            The {quick} brown\n            fox jumps over\n            the ˇ'lazy' dog.": "",
        "\n            fn test_surround() {\n                ifˇ 2 > 1 {\n                    ˇprintln!(\"it is fine\");\n                }\n            };": "",
        "\n            fn test_surround() ˇ[\n                if 2 > 1 ˇ[\n                    println!(\"it is fine\");\n                ]\n            ];": "",
        "y s i w [": "",
        "c s [ }": "",
        "u": "",
        "y s i w b": "",
        "\n            The ˇ(quick) brown\n            fox jumps over\n            the lazy dog.": "",
        "y s i w B": "",
        "y s i w a": "",
        "\n            The ˇ<quick> brown\n            fox jumps over\n            the lazy dog.": "",
        "y s i w r": "",
        "\n            The ˇ[quick] brown\n            fox jumps over\n            the lazy dog.": "",
        "c s { b": "",
        "\n            The (quˇick) brown\n            fox jumps over\n            the lazy dog.": "",
        "c s ( B": "",
        "c s ( a": "",
        "\n            The <quˇick> brown\n            fox jumps over\n            the lazy dog.": "",
        "c s < b": "",
        "c s ( r": "",
        "c s [ b": "",
        "d s B": "",
        "d s b": "",
        "d s r": "",
        "d s a": ""
    },
    "zed/crates/welcome/src/base_keymap_picker.rs": {
        "Select a base keymap...": "",
        "Settings Changed": "",
        "keymap": ""
    },
    "zed/crates/welcome/src/multibuffer_hint.rs": {
        "MULTIBUFFER_HINT_SHOWN_COUNT": "",
        "Edit and save files directly in the results multibuffer!": "",
        "open_docs": "",
        "Learn More": "",
        "dismiss": "",
        "Dismiss Hint": ""
    },
    "zed/crates/welcome/src/welcome.rs": {
        "first_open": "",
        "false": "",
        "Edit Prediction Enabled": "",
        "Try Edit Prediction": "",
        "Welcome": "",
        "Welcome to Zed": "",
        "The editor for what's next": "",
        "Get Started": "",
        "choose-theme": "",
        "Choose a Theme": "",
        "Welcome Theme Changed": "",
        "choose-keymap": "",
        "Choose a Keymap": "",
        "Welcome Keymap Changed": "",
        "try-zed-edit-prediction": "",
        "Welcome Screen Try Edit Prediction clicked": "",
        "edit settings": "",
        "Edit Settings": "",
        "Welcome Settings Edited": "",
        "Resources": "",
        "install-cli": "",
        "Install the CLI": "",
        "Welcome CLI Installed": "",
        "view-docs": "",
        "View Documentation": "",
        "Welcome Documentation Viewed": "",
        "explore-extensions": "",
        "Explore Extensions": "",
        "Welcome Extensions Page Opened": "",
        "book-onboarding": "",
        "Book Onboarding": "",
        "enable-vim": "",
        "Enable Vim Mode": "",
        "Welcome Vim Mode Toggled": "",
        "vim-mode": "",
        "You can also toggle Vim Mode via the command palette or Editor Controls menu.": "",
        "enable-crash": "",
        "Send Crash Reports": "",
        "Welcome Diagnostic Telemetry Toggled": "",
        "Settings Changed": "",
        "diagnostic telemetry": "",
        "enable-telemetry": "",
        "Send Telemetry": "",
        "Welcome Metric Telemetry Toggled": "",
        "metric telemetry": "",
        "Welcome Page Closed": "",
        "Welcome Page Opened": ""
    },
    "zed/crates/workspace/src/notifications.rs": {
        "Error: {err}": "",
        "See docs": "",
        "Response already sent": "",
        "Stream already closed": "",
        "language_server_prompt_notification": "",
        "copy": "",
        "Copy Description": "",
        "close": "",
        "error_message_prompt_notification": "",
        "error_message": "",
        "error_message_prompt_notification_button": "",
        "Showing error notification in workspace: {err:?}": "",
        "{err:?}": "",
        "Showing error notification in app: {message}": "",
        "{err}. Please try again.": "",
        "Ok": ""
    },
    "zed/crates/workspace/src/pane_group.rs": {
        "Pane not found": "",
        "{} is in an unshared pane": "",
        "Follow {} to their active project": "",
        "{} is viewing an unshared Zed project": "",
        "{} is viewing a window outside of Zed": "",
        "up": "",
        "down": "",
        "left": "",
        "right": ""
    },
    "zed/crates/workspace/src/pane.rs": {
        "you have unsaved changes": "",
        "AddItem": "",
        "item": "",
        "ActivateItem": "",
        "local": "",
        "Remove": "",
        "RemoveItem": "",
        "idx": "",
        "RemovedItem": "",
        "Split": "",
        "direction": "",
        "JoinAll": "",
        "JoinIntoNext": "",
        "ChangeItemTitle": "",
        "Focus": "",
        "ZoomIn": "",
        "ZoomOut": "",
        "UserSavedItem": "",
        "save_intent": "",
        "pane-tab-bar-popover-menu": "",
        "plus": "",
        "New...": "",
        "New File": "",
        "Open File": "",
        "Search Project": "",
        "Search Symbols": "",
        "New Terminal": "",
        "pane-tab-bar-split": "",
        "split": "",
        "Split Pane": "",
        "Split Right": "",
        "Split Left": "",
        "Split Up": "",
        "Split Down": "",
        "toggle_zoom": "",
        "Zoom Out": "",
        "Zoom In": "",
        "untitled": "",
        "{}\n.. and {} more": "",
        "Do you want to save changes to the following files?": "",
        "Save all": "",
        "Discard all": "",
        "Cancel": "",
        "This file has changed on disk since you started editing it. Do you want to overwrite it?": "",
        "This file has been deleted on disk since you started editing it. Do you want to recreate it?": "",
        "Save": "",
        "Close": "",
        "Overwrite": "",
        "Discard": "",
        "Don't Save": "",
        "save modal was not present in spawned modals after awaiting for its answer": "",
        "Unpin Tab": "",
        "unpin tab": "",
        "Close Tab": "",
        "close tab": "",
        "Close Others": "",
        "Close Left": "",
        "Close Right": "",
        "Close Clean": "",
        "Close All": "",
        "Pin Tab": "",
        "Copy Path": "",
        "Copy Relative Path": "",
        "Reveal In Project Panel": "",
        "Open in Terminal": "",
        "navigate_backward": "",
        "Go Back": "",
        "navigate_forward": "",
        "Go Forward": "",
        "tab_bar": "",
        "unpinned tabs": "",
        "tab_bar_drop_target": "",
        "Cannot drop files on a remote project": "",
        "Pane": "",
        "EmptyPane": "",
        "pane_placeholder": "",
        "Open a file or project to get started.": "",
        "This buffer": "",
        "{path} contains unsaved edits. Do you want to save it?": "",
        "7*": "",
        "X": "",
        "X*": "",
        "D{}": "",
        "D0^": "",
        "D1^": "",
        "D2^": "",
        "D3^": "",
        "D4^": "",
        "D5^": "",
        "D6*^": "",
        "N{}": "",
        "D6^": "",
        "N0": "",
        "N1": "",
        "N2": "",
        "N3": "",
        "N4": "",
        "N5": "",
        "N6*": "",
        "A": "",
        "B*": "",
        "C": "",
        "D": "",
        "D*": "",
        "B": "",
        "A*": "",
        "C*": "",
        "buffer 1": "",
        "buffer 1*": "",
        "buffer 2": "",
        "buffer 2*": "",
        "multibuffer 1": "",
        "multibuffer 1*": "",
        "multibuffer 1b": "",
        "multibuffer 1b*": "",
        "1*": "",
        "E": "",
        "A^": "",
        "C^": "",
        "E*": "",
        "C*^": "",
        "B^": "",
        "AB": "",
        "AB^": "",
        "pane items do not match expectation": ""
    },
    "zed/crates/workspace/src/persistence.rs": {
        "Horizontal": "",
        "Vertical": "",
        "Stored serialized item kind is incorrect": "",
        "Windowed": "",
        "Maximized": "",
        "FullScreen": "",
        "Fixed": "",
        "Window State did not have a valid string": "",
        "Invalid BreakpointState discriminant": "",
        "Failed to read BreakPoint at index {start_index}": "",
        "No workspaces found": "",
        "Getting center group": "",
        "Breakpoints are empty after querying database for them": "",
        "Got {} breakpoints from database at path: {}": "",
        "Breakpoints query failed with msg: {msg}": "",
        "update_worktrees": "",
        "Clearing old panes": "",
        "Clearing old breakpoints": "",
        "Stored breakpoint at row: {} in path: {}": "",
        "{err}": "",
        "clearing out old locations": "",
        "Updating workspace": "",
        "save pane group in save workspace": "",
        "failed to insert ssh project": "",
        "Pane Group Child was neither a pane group or a pane": "",
        "Couldn't retrieve group_id from inserted pane_group": "",
        "Could not retrieve inserted pane_id": "",
        "Saving items": "",
        "Preparing insertion": "",
        "test_breakpoints": "",
        "Test log message": "",
        "x > 5": "",
        ">= 3": "",
        "test_remove_last_breakpoint": "",
        "test_next_id_stability": "",
        "test_table": "",
        "test-text-1": "",
        "test_workspace_id_stability": "",
        "test-text-2": "",
        "test_full_workspace_serialization": "",
        "Terminal": "",
        "test_basic_functionality": "",
        "tmp": "",
        "test_serializing_workspaces_session_id": "",
        "session-id-1": "",
        "session-id-2": "",
        "my-host": "",
        "session-id-3": "",
        "dir1": "",
        "dir2": "",
        "dir3": "",
        "dir4": "",
        "test_serializing_workspaces_last_session_workspaces": "",
        "one-session": "",
        "test_serializing_workspaces_last_session_workspaces_ssh_projects": "",
        "host-1": "",
        "my-user-1": "",
        "host-2": "",
        "my-user-2": "",
        "host-3": "",
        "my-user-3": "",
        "host-4": "",
        "my-user-4": "",
        "test_get_or_create_ssh_project": "",
        "user": "",
        "otheruser": "",
        "test_get_or_create_ssh_project_with_null_user": "",
        "test_get_ssh_projects": "",
        "user2": "",
        "simple_split": "",
        "test_cleanup_panes": ""
    },
    "zed/crates/workspace/src/theme_preview.rs": {
        "Overview": "",
        "Typography": "",
        "{} Preview": "",
        "{} ({:.2})": "",
        "Text": "",
        "Headline Sizes": "",
        "XLarge Headline": "",
        "Large Headline": "",
        "Medium Headline": "",
        "Small Headline": "",
        "XSmall Headline": "",
        "Text Colors": "",
        "Default Text": "",
        "Accent Text": "",
        "Conflict Text": "",
        "Created Text": "",
        "Deleted Text": "",
        "Disabled Text": "",
        "Error Text": "",
        "Hidden Text": "",
        "Hint Text": "",
        "Ignored Text": "",
        "Info Text": "",
        "Modified Text": "",
        "Muted Text": "",
        "Placeholder Text": "",
        "Selected Text": "",
        "Success Text": "",
        "Warning Text": "",
        "Wrapping Text": "",
        "This is a longer piece of text that should wrap to multiple lines. It demonstrates how text behaves when it exceeds the width of its container.": "",
        "Colors": "",
        "{:?}-preview": "",
        "theme-preview-overview": "",
        "Theme Preview": "",
        "This view lets you preview a range of UI elements across a theme. Use it for testing out changes to the theme.": "",
        "theme-preview-typography": "",
        "Headline 1": "",
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.": "",
        "Headline 2": "",
        "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.": "",
        "Headline 3": "",
        "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.": "",
        "Headline 4": "",
        "Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.": "",
        "Headline 5": "",
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.": "",
        "Body Text": "",
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.": "",
        "theme-preview-nav": "",
        "theme-preview": "",
        "ThemePreview": ""
    },
    "zed/crates/workspace/src/workspace.rs": {
        "ZED_WINDOW_SIZE": "",
        "ZED_WINDOW_POSITION": "",
        "default_true": "",
        "Failed to read WorkspaceId at index {start_index}": "",
        "cannot deserialize {}, descriptor not found": "",
        "cannot cleanup {}, descriptor not found": "",
        "global context": "",
        "Navigating to {project_path:?}": "",
        "Navigating to {abs_path:?}": "",
        "Failed to navigate history: {open_by_project_path_e:#} and {open_by_abs_path_e:#}": "",
        "Do you want to leave the current call?": "",
        "Close window and hang up": "",
        "Cancel": "",
        "bindings": "",
        "g z": "",
        "workspace::SendKeystrokes": "",
        ": j <enter> u": "",
        "over 100 keystrokes passed to send_keystrokes": "",
        "Do you want to save all changes in the following files?": "",
        "Save all": "",
        "Discard all": "",
        "open paths {abs_paths:?}": "",
        "You cannot add folders to someone else's project": "",
        "open abs path {abs_path:?} task spawn": "",
        "open abs path {abs_path:?} task returned incorrect number of results": "",
        "ensured single task result": "",
        "open abs path {abs_path:?} task join": "",
        "open abs path {abs_path:?} task returned None": "",
        "There must be an active pane": "",
        "pane was dropped": "",
        "cannot open file {:?}": "",
        "Could not find a focus target when in switching focus in {direction} direction for a {:?} dock": "",
        "following interrupted": "",
        ", ": "",
        "empty project": "",
        " — ": "",
        " ↙": "",
        " ↗": "",
        "invalid update": "",
        "invalid view id": "",
        "missing update view variant": "",
        "missing update view id": "",
        "workspace dropped": "",
        "no id for view": "",
        "stopped following": "",
        "missing view variant": "",
        "failed to construct view from leader (maybe from a different version of zed?)": "",
        "failed to send serializable item over channel: {}": "",
        "Failed to save": "",
        "Failed to load the database file.": "",
        "File an Issue": "",
        "Workspace": "",
        "keyboard_layout": "",
        "workspace": "",
        "creator is missing": "",
        "OpenPaths": "",
        "paths": "",
        "Do you want to switch channels?": "",
        "Leaving this call will unshare your current project.": "",
        "Yes, Join Channel": "",
        "error connecting": "",
        "failed to join channel: {}": "",
        "Please sign in to continue.": "",
        "Your are running an unsupported version of Zed. Please update to continue.": "",
        "No matching channel was found. Please check the link and try again.": "",
        "This channel is private, and you do not have access. Please ask someone to add you and try again.": "",
        "Please check your internet connection and try again.": "",
        "{}\n\nPlease try again.": "",
        "Failed to join channel": "",
        "Ok": "",
        "could not open zed": "",
        "path {path:?} is not a file": "",
        "no paths given": "",
        "SSH Project Opened": "",
        "path": "",
        "'{path}' does not exist": "",
        "not in a call": "",
        "Are you sure you want to restart?": "",
        "Restart": "",
        "window-backdrop": "",
        "c": "",
        "b1/c": "",
        "a/b1/c": "",
        "b2/c": "",
        "a/b2/c": "",
        "root1": "",
        "root2": "",
        "one": "",
        "root": "",
        "Discard": "",
        "item is in focus": "",
        "Fake Project Search": "",
        "Should select the multi buffer in the pane": "",
        "should have inactive files to close": "",
        "Closing all buffers but the multi buffer failed": "",
        "Should have only the multi buffer left in the pane": "",
        "The multi buffer containing the unsaved buffer should still be dirty": "",
        "should have the multi buffer to close": "",
        "Dirty multi buffer should prompt a save dialog": "",
        "Save": "",
        "Closing the multi buffer failed": "",
        "Multi buffer item should get be saved": "",
        "No more items should be left in the pane": "",
        "should have active multi buffer to close": "",
        "With one dirty item from the multi buffer not being in the pane, a save prompt should be shown": "",
        "All dirty items from the multi buffer are in the pane still, no save prompts should be shown": "",
        "Closing multi buffer failed": "",
        "Should have no multi buffer left in the pane": "",
        "png": "",
        "ipynb": "",
        "BINARYDATAHERE": "",
        "{ totally a notebook }": "",
        "editing text, sure why not?": ""
    },
    "zed/crates/worktree/src/worktree.rs": {
        "ephemeral": "",
        "could not relativize {:?} against {:?}": "",
        "failed to stat worktree path": "",
        "Failed to determine whether filesystem is case sensitive (falling back to true) due to error: {e:#}": "",
        "remote worktrees can't yet load files": "",
        "remote worktrees can't yet load binary files": "",
        "remote worktree can't yet write files": "",
        "absolutizing {path:?}": "",
        "Copying external entries is not supported for remote worktrees": "",
        "invalid entry": "",
        "no such entry": "",
        ".git": "",
        "refreshing entries for the following always included paths: {:?}": "",
        "Failed to determine whether filesystem is case sensitive: {e:#}": "",
        "worktree was dropped": "",
        "Loading metadata for excluded file {abs_path:?}": "",
        "Excluded file {abs_path:?} got removed during loading": "",
        "File is too large to load": "",
        "absolutizing path {path:?}": "",
        "creating directory {task_abs_path:?}": "",
        "creating file {task_abs_path:?}": "",
        "invalid path {path:?}": "",
        "worktree dropped": "",
        "Fetching metadata after saving the excluded buffer {abs_path:?}": "",
        "Excluded buffer {path:?} got removed during saving": "",
        "no entry to rename for id {entry_id:?}": "",
        "no parent for path {:?}": "",
        "absolutizing path {new_path:?}": "",
        "Renaming {abs_old_path:?} into {abs_new_path:?}": "",
        "Failed to copy file from {source:?} to {target:?}": "",
        "Dropped worktree": "",
        "Worktree is not local": "",
        "refreshed entry {path:?} in {:?}": "",
        "failed to read path after update": "",
        "waiting to resume updates": "",
        "consumer runs to completion": "",
        "absolutizing {new_path:?}": "",
        "invalid path": "",
        "applying remote worktree update. {} entries updated, {} removed": "",
        "error loading .gitignore file {:?} - {:?}": "",
        "entries_by_path and entries_by_id are inconsistent": "",
        "populating a directory {:?} that has been removed": "",
        "background scanner removing path {path:?}": "",
        "not building git repository for nested `.git` directory, `.git` path in the worktree: {dot_git_path:?}": "",
        "building git repository, `.git` path in the worktree: {dot_git_path:?}": "",
        "not building git repository for the worktree itself, `.git` path in the worktree: {dot_git_path:?}": "",
        "insert git repository for {dot_git_path:?}": "",
        "existing git repository for {work_directory:?}": "",
        "opened git repo for {dot_git_abs_path:?}": "",
        "commondir": "",
        "constructed libgit2 repo in {:?}": "",
        "inserting new local git repository": "",
        "HEAD": "",
        "config": "",
        "Snapshot": "",
        "not remote": "",
        "worktree id does not match file": "",
        "containing git repository: {containing_git_repository:?}": "",
        "adding path prefix {:?}": "",
        "rescanning paths {:?}": "",
        "failed to canonicalize root path: {}": "",
        "root renamed from {} to {}": "",
        "root path could not be canonicalized: {}": "",
        "stripping off the ancestor": "",
        "ignoring event {abs_path:?} as it's in the .git directory among skipped files or directories": "",
        "ignoring event {abs_path:?}, since it's in git dir outside of root path {root_canonical_path:?}": "",
        "ignoring event {abs_path:?} outside of root path {root_canonical_path:?}": "",
        "ignoring event {relative_path:?} within unloaded directory": "",
        "ignoring FS event for excluded path {relative_path:?}": "",
        "received fs events {:?}": "",
        "error scanning directory {:?}: {}": "",
        "skipping excluded directory {:?}": "",
        "scanning directory {:?}": "",
        "error processing entry {:?}": "",
        "skipping excluded child entry {child_path:?}": "",
        "error processing {child_abs_path:?}: {err:?}": "",
        "error reading target of symlink {:?}: {:?}": "",
        "error canonicalizing root {:?}: {:?}": "",
        "detected private file: {relative_path:?}": "",
        "defer scanning directory {:?}": "",
        "channel is unbounded": "",
        "remove path {:?}": "",
        "updating ancestor git repository": "",
        "error reading file {abs_path:?} on event: {err:#}": "",
        "remove repo path: {:?}": "",
        "update ignore status {:?}": "",
        "reloading repositories: {dot_git_paths:?}": "",
        "considering ancestor: {ancestor_dot_git:?}": "",
        "inserting parent git repo for this worktree: {location_in_repo:?}": "",
        "redundant": ""
    },
    "zed/crates/worktree/src/worktree_settings.rs": {
        "**/CVS": "",
        "**/.DS_Store": "",
        "**/.classpath": "",
        "**/.settings": "",
        ".env*": "",
        "**/.env*": "",
        "file_scan_exclusions": "",
        "private_files": "",
        "file_scan_inclusions": "",
        "Failed to parse globs from {}": ""
    },
    "zed/crates/zed/src/main.rs": {
        "mimalloc": "",
        "Zed failed to launch": "",
        "{kind} when creating directory {:?}": "",
        "match arm checks for a single entry": "",
        "{kind} when creating directories {paths:?}": "",
        ");\n                    }\n                    _ => {}\n                }\n            }\n\n            Some(error_kind_details)\n        })\n        .collect::<Vec<_>>().join(": "",
        ");\n\n    eprintln!(": "",
        ");\n    Application::new().run(move |cx| {\n        if let Ok(window) = cx.open_window(gpui::WindowOptions::default(), |_, cx| {\n            cx.new(|_| gpui::Empty)\n        }) {\n            window\n                .update(cx, |_, window, cx| {\n                    let response = window.prompt(\n                        gpui::PromptLevel::Critical,\n                        message,\n                        Some(&error_details),\n                        &[": "",
        "],\n                        cx,\n                    );\n\n                    cx.spawn_in(window, async move |_, cx| {\n                        response.await?;\n                        cx.update(|_, cx| cx.quit())\n                    })\n                    .detach_and_log_err(cx);\n                })\n                .log_err();\n        } else {\n            fail_to_open_window(anyhow::anyhow!(": "",
        "), cx)\n        }\n    })\n}\n\nfn fail_to_open_window_async(e: anyhow::Error, cx: &mut AsyncApp) {\n    cx.update(|cx| fail_to_open_window(e, cx)).log_err();\n}\n\nfn fail_to_open_window(e: anyhow::Error, _cx: &mut App) {\n    eprintln!(\n        ": "",
        "\n    );\n    #[cfg(not(any(target_os = ": "",
        ", target_os = ": "",
        ")))]\n    {\n        process::exit(1);\n    }\n\n    #[cfg(any(target_os = ": "",
        "))]\n    {\n        use ashpd::desktop::notification::{Notification, NotificationProxy, Priority};\n        _cx.spawn(async move |_cx| {\n            let Ok(proxy) = NotificationProxy::new().await else {\n                process::exit(1);\n            };\n\n            let notification_id = ": "",
        ";\n            proxy\n                .add_notification(\n                    notification_id,\n                    Notification::new(": "",
        ")\n                        .body(Some(\n                            format!(\n                                ": "",
        "\n                            )\n                            .as_str(),\n                        ))\n                        .priority(Priority::High)\n                        .icon(ashpd::desktop::Icon::with_names(&[\n                            ": "",
        ",\n                        ])),\n                )\n                .await\n                .ok();\n\n            process::exit(1);\n        })\n        .detach();\n    }\n}\n\nfn main() {\n    let args = Args::parse();\n\n    #[cfg(all(not(debug_assertions), target_os = ": "",
        "))]\n    unsafe {\n        use windows::Win32::System::Console::{ATTACH_PARENT_PROCESS, AttachConsole};\n\n        if args.foreground {\n            let _ = AttachConsole(ATTACH_PARENT_PROCESS);\n        }\n    }\n\n    menu::init();\n    zed_actions::init();\n\n    let file_errors = init_paths();\n    if !file_errors.is_empty() {\n        files_not_created_on_launch(file_errors);\n        return;\n    }\n\n    if stdout_is_a_pty() {\n        init_stdout_logger();\n    } else {\n        init_logger();\n    }\n\n    log::info!(": "",
        ");\n\n    let app = Application::new().with_assets(Assets);\n\n    let system_id = app.background_executor().block(system_id()).ok();\n    let installation_id = app.background_executor().block(installation_id()).ok();\n    let session_id = Uuid::new_v4().to_string();\n    let session = app.background_executor().block(Session::new());\n    let app_version = AppVersion::init(env!(": "",
        "));\n    let app_commit_sha =\n        option_env!(": "",
        ").map(|commit_sha| AppCommitSha(commit_sha.to_string()));\n\n    reliability::init_panic_hook(\n        app_version,\n        app_commit_sha.clone(),\n        system_id.as_ref().map(|id| id.to_string()),\n        installation_id.as_ref().map(|id| id.to_string()),\n        session_id.clone(),\n    );\n\n    if args.system_specs {\n        let system_specs = feedback::system_specs::SystemSpecs::new_stateless(\n            app_version,\n            app_commit_sha.clone(),\n            *release_channel::RELEASE_CHANNEL,\n        );\n        println!(": "",
        ", system_specs);\n        return;\n    }\n\n    let (open_listener, mut open_rx) = OpenListener::new();\n\n    let failed_single_instance_check = if *db::ZED_STATELESS\n        || *release_channel::RELEASE_CHANNEL == ReleaseChannel::Dev\n    {\n        false\n    } else {\n        #[cfg(any(target_os = ": "",
        "))]\n        {\n            crate::zed::listen_for_cli_connections(open_listener.clone()).is_err()\n        }\n\n        #[cfg(target_os = ": "",
        ")]\n        {\n            !crate::zed::windows_only_instance::check_single_instance(open_listener.clone(), &args)\n        }\n\n        #[cfg(target_os = ": "",
        ")]\n        {\n            use zed::mac_only_instance::*;\n            ensure_only_instance() != IsOnlyInstance::Yes\n        }\n    };\n    if failed_single_instance_check {\n        println!(": "",
        ");\n        return;\n    }\n\n    let git_hosting_provider_registry = Arc::new(GitHostingProviderRegistry::new());\n    let git_binary_path =\n        if cfg!(target_os = ": "",
        ") && option_env!(": "",
        ").as_deref() == Some(": "",
        ") {\n            app.path_for_auxiliary_executable(": "",
        ")\n                .context(": "",
        ")\n                .log_err()\n        } else {\n            None\n        };\n    log::info!(": "",
        ", git_binary_path);\n\n    let fs = Arc::new(RealFs::new(git_binary_path, app.background_executor()));\n    let user_settings_file_rx = watch_config_file(\n        &app.background_executor(),\n        fs.clone(),\n        paths::settings_file().clone(),\n    );\n    let user_keymap_file_rx = watch_config_file(\n        &app.background_executor(),\n        fs.clone(),\n        paths::keymap_file().clone(),\n    );\n\n    #[cfg(unix)]\n    if !stdout_is_a_pty() {\n        app.background_executor()\n            .spawn(async {\n                load_shell_from_passwd().log_err();\n                load_login_shell_environment().log_err();\n            })\n            .detach()\n    };\n\n    app.on_open_urls({\n        let open_listener = open_listener.clone();\n        move |urls| open_listener.open_urls(urls)\n    });\n    app.on_reopen(move |cx| {\n        if let Some(app_state) = AppState::try_global(cx).and_then(|app_state| app_state.upgrade())\n        {\n            cx.spawn({\n                let app_state = app_state.clone();\n                async move |mut cx| {\n                    if let Err(e) = restore_or_create_workspace(app_state, &mut cx).await {\n                        fail_to_open_window_async(e, &mut cx)\n                    }\n                }\n            })\n            .detach();\n        }\n    });\n\n    app.run(move |cx| {\n        release_channel::init(app_version, cx);\n        gpui_tokio::init(cx);\n        if let Some(app_commit_sha) = app_commit_sha {\n            AppCommitSha::set_global(app_commit_sha, cx);\n        }\n        settings::init(cx);\n        zlog_settings::init(cx);\n        handle_settings_file_changes(user_settings_file_rx, cx, handle_settings_changed);\n        handle_keymap_file_changes(user_keymap_file_rx, cx);\n        client::init_settings(cx);\n        let user_agent = format!(\n            ": "",
        ",\n            AppVersion::global(cx),\n            std::env::consts::OS,\n            std::env::consts::ARCH\n        );\n        let proxy_str = ProxySettings::get_global(cx).proxy.to_owned();\n        let proxy_url = proxy_str\n            .as_ref()\n            .and_then(|input| {\n                input\n                    .parse::<Uri>()\n                    .inspect_err(|e| log::error!(": "",
        ", e))\n                    .ok()\n            })\n            .or_else(read_proxy_from_env);\n        let http = {\n            let _guard = Tokio::handle(cx).enter();\n\n            ReqwestClient::proxy_and_user_agent(proxy_url, &user_agent)\n                .expect(": "",
        ")\n        };\n        cx.set_http_client(Arc::new(http));\n\n        <dyn Fs>::set_global(fs.clone(), cx);\n\n        GitHostingProviderRegistry::set_global(git_hosting_provider_registry, cx);\n        git_hosting_providers::init(cx);\n\n        OpenListener::set_global(cx, open_listener.clone());\n\n        extension::init(cx);\n        let extension_host_proxy = ExtensionHostProxy::global(cx);\n\n        let client = Client::production(cx);\n        cx.set_http_client(client.http_client().clone());\n        let mut languages = LanguageRegistry::new(cx.background_executor().clone());\n        languages.set_language_server_download_dir(paths::languages_dir().clone());\n        let languages = Arc::new(languages);\n        let (tx, rx) = async_watch::channel(None);\n        cx.observe_global::<SettingsStore>(move |cx| {\n            let settings = &ProjectSettings::get_global(cx).node;\n            let options = NodeBinaryOptions {\n                allow_path_lookup: !settings.ignore_system_version.unwrap_or_default(),\n                // TODO: Expose this setting\n                allow_binary_download: true,\n                use_paths: settings.path.as_ref().map(|node_path| {\n                    let node_path = PathBuf::from(shellexpand::tilde(node_path).as_ref());\n                    let npm_path = settings\n                        .npm_path\n                        .as_ref()\n                        .map(|path| PathBuf::from(shellexpand::tilde(&path).as_ref()));\n                    (\n                        node_path.clone(),\n                        npm_path.unwrap_or_else(|| {\n                            let base_path = PathBuf::new();\n                            node_path.parent().unwrap_or(&base_path).join(": "",
        ")\n                        }),\n                    )\n                }),\n            };\n            tx.send(Some(options)).log_err();\n        })\n        .detach();\n        let node_runtime = NodeRuntime::new(client.http_client(), rx);\n\n        language::init(cx);\n        language_extension::init(extension_host_proxy.clone(), languages.clone());\n        languages::init(languages.clone(), node_runtime.clone(), cx);\n        let user_store = cx.new(|cx| UserStore::new(client.clone(), cx));\n        let workspace_store = cx.new(|cx| WorkspaceStore::new(client.clone(), cx));\n\n        Client::set_global(client.clone(), cx);\n\n        zed::init(cx);\n        project::Project::init(&client, cx);\n        debugger_ui::init(cx);\n        debugger_tools::init(cx);\n        client::init(&client, cx);\n        let telemetry = client.telemetry();\n        telemetry.start(\n            system_id.as_ref().map(|id| id.to_string()),\n            installation_id.as_ref().map(|id| id.to_string()),\n            session_id.clone(),\n            cx,\n        );\n\n        // We should rename these in the future to `first app open`, `first app open for release channel`, and `app open`\n        if let (Some(system_id), Some(installation_id)) = (&system_id, &installation_id) {\n            match (&system_id, &installation_id) {\n                (IdType::New(_), IdType::New(_)) => {\n                    telemetry::event!(": "",
        ");\n                    telemetry::event!(": "",
        ");\n                }\n                (IdType::Existing(_), IdType::New(_)) => {\n                    telemetry::event!(": "",
        ");\n                }\n                (_, IdType::Existing(_)) => {\n                    telemetry::event!(": "",
        ");\n                }\n            }\n        }\n        let app_session = cx.new(|cx| AppSession::new(session, cx));\n\n        let app_state = Arc::new(AppState {\n            languages: languages.clone(),\n            debug_adapters: DapRegistry::default().into(),\n            client: client.clone(),\n            user_store: user_store.clone(),\n            fs: fs.clone(),\n            build_window_options,\n            workspace_store,\n            node_runtime: node_runtime.clone(),\n            session: app_session,\n        });\n        AppState::set_global(Arc::downgrade(&app_state), cx);\n\n        auto_update::init(client.http_client(), cx);\n        dap_adapters::init(app_state.debug_adapters.clone());\n        auto_update_ui::init(cx);\n        reliability::init(\n            client.http_client(),\n            system_id.as_ref().map(|id| id.to_string()),\n            installation_id.clone().map(|id| id.to_string()),\n            session_id.clone(),\n            cx,\n        );\n\n        SystemAppearance::init(cx);\n        theme::init(theme::LoadThemes::All(Box::new(Assets)), cx);\n        theme_extension::init(\n            extension_host_proxy.clone(),\n            ThemeRegistry::global(cx),\n            cx.background_executor().clone(),\n        );\n        command_palette::init(cx);\n        let copilot_language_server_id = app_state.languages.next_language_server_id();\n        copilot::init(\n            copilot_language_server_id,\n            app_state.fs.clone(),\n            app_state.client.http_client(),\n            app_state.node_runtime.clone(),\n            cx,\n        );\n        supermaven::init(app_state.client.clone(), cx);\n        language_model::init(app_state.client.clone(), cx);\n        language_models::init(\n            app_state.user_store.clone(),\n            app_state.client.clone(),\n            app_state.fs.clone(),\n            cx,\n        );\n        snippet_provider::init(cx);\n        inline_completion_registry::init(\n            app_state.client.clone(),\n            app_state.user_store.clone(),\n            cx,\n        );\n        let prompt_builder = PromptBuilder::load(app_state.fs.clone(), stdout_is_a_pty(), cx);\n        assistant::init(\n            app_state.fs.clone(),\n            app_state.client.clone(),\n            prompt_builder.clone(),\n            cx,\n        );\n        agent::init(\n            app_state.fs.clone(),\n            app_state.client.clone(),\n            prompt_builder.clone(),\n            cx,\n        );\n        assistant_tools::init(app_state.client.http_client(), cx);\n        repl::init(app_state.fs.clone(), cx);\n        extension_host::init(\n            extension_host_proxy,\n            app_state.fs.clone(),\n            app_state.client.clone(),\n            app_state.node_runtime.clone(),\n            cx,\n        );\n        recent_projects::init(cx);\n\n        load_embedded_fonts(cx);\n\n        app_state.languages.set_theme(cx.theme().clone());\n        editor::init(cx);\n        image_viewer::init(cx);\n        repl::notebook::init(cx);\n        diagnostics::init(cx);\n\n        audio::init(Assets, cx);\n        workspace::init(app_state.clone(), cx);\n        ui_prompt::init(cx);\n\n        go_to_line::init(cx);\n        file_finder::init(cx);\n        tab_switcher::init(cx);\n        outline::init(cx);\n        project_symbols::init(cx);\n        project_panel::init(cx);\n        outline_panel::init(cx);\n        tasks_ui::init(cx);\n        snippets_ui::init(cx);\n        channel::init(&app_state.client.clone(), app_state.user_store.clone(), cx);\n        search::init(cx);\n        vim::init(cx);\n        terminal_view::init(cx);\n        journal::init(app_state.clone(), cx);\n        language_selector::init(cx);\n        toolchain_selector::init(cx);\n        theme_selector::init(cx);\n        language_tools::init(cx);\n        call::init(app_state.client.clone(), app_state.user_store.clone(), cx);\n        notifications::init(app_state.client.clone(), app_state.user_store.clone(), cx);\n        collab_ui::init(&app_state, cx);\n        git_ui::init(cx);\n        feedback::init(cx);\n        markdown_preview::init(cx);\n        welcome::init(cx);\n        settings_ui::init(cx);\n        extensions_ui::init(cx);\n        zeta::init(cx);\n\n        cx.observe_global::<SettingsStore>({\n            let fs = fs.clone();\n            let languages = app_state.languages.clone();\n            let http = app_state.client.http_client();\n            let client = app_state.client.clone();\n            move |cx| {\n                for &mut window in cx.windows().iter_mut() {\n                    let background_appearance = cx.theme().window_background_appearance();\n                    window\n                        .update(cx, |_, window, _| {\n                            window.set_background_appearance(background_appearance)\n                        })\n                        .ok();\n                }\n\n                eager_load_active_theme_and_icon_theme(fs.clone(), cx);\n\n                languages.set_theme(cx.theme().clone());\n                let new_host = &client::ClientSettings::get_global(cx).server_url;\n                if &http.base_url() != new_host {\n                    http.set_base_url(new_host);\n                    if client.status().borrow().is_connected() {\n                        client.reconnect(&cx.to_async());\n                    }\n                }\n            }\n        })\n        .detach();\n        telemetry::event!(\n            ": "",
        ",\n            setting = ": "",
        ",\n            value = cx.theme().name.to_string()\n        );\n        telemetry::event!(\n            ": "",
        ",\n            value = BaseKeymap::get_global(cx).to_string()\n        );\n        telemetry.flush_events();\n\n        let fs = app_state.fs.clone();\n        load_user_themes_in_background(fs.clone(), cx);\n        watch_themes(fs.clone(), cx);\n        watch_languages(fs.clone(), app_state.languages.clone(), cx);\n\n        cx.set_menus(app_menus());\n        initialize_workspace(app_state.clone(), prompt_builder, cx);\n\n        cx.activate(true);\n\n        cx.spawn({\n            let client = app_state.client.clone();\n            async move |cx| authenticate(client, &cx).await\n        })\n        .detach_and_log_err(cx);\n\n        let urls: Vec<_> = args\n            .paths_or_urls\n            .iter()\n            .filter_map(|arg| parse_url_arg(arg, cx).log_err())\n            .collect();\n\n        if !urls.is_empty() {\n            open_listener.open_urls(urls)\n        }\n\n        match open_rx\n            .try_next()\n            .ok()\n            .flatten()\n            .and_then(|urls| OpenRequest::parse(urls, cx).log_err())\n        {\n            Some(request) => {\n                handle_open_request(request, app_state.clone(), cx);\n            }\n            None => {\n                cx.spawn({\n                    let app_state = app_state.clone();\n                    async move |mut cx| {\n                        if let Err(e) = restore_or_create_workspace(app_state, &mut cx).await {\n                            fail_to_open_window_async(e, &mut cx)\n                        }\n                    }\n                })\n                .detach();\n            }\n        }\n\n        let app_state = app_state.clone();\n\n        component_preview::init(app_state.clone(), cx);\n\n        cx.spawn(async move |cx| {\n            while let Some(urls) = open_rx.next().await {\n                cx.update(|cx| {\n                    if let Some(request) = OpenRequest::parse(urls, cx).log_err() {\n                        handle_open_request(request, app_state.clone(), cx);\n                    }\n                })\n                .ok();\n            }\n        })\n        .detach();\n    });\n}\n\nfn handle_open_request(request: OpenRequest, app_state: Arc<AppState>, cx: &mut App) {\n    if let Some(connection) = request.cli_connection {\n        let app_state = app_state.clone();\n        cx.spawn(async move |cx| handle_cli_connection(connection, app_state, cx).await)\n            .detach();\n        return;\n    }\n\n    if let Some(action_index) = request.dock_menu_action {\n        cx.perform_dock_menu_action(action_index);\n        return;\n    }\n\n    if let Some(connection_options) = request.ssh_connection {\n        cx.spawn(async move |mut cx| {\n            let paths_with_position =\n                derive_paths_with_position(app_state.fs.as_ref(), request.open_paths).await;\n            open_ssh_project(\n                connection_options,\n                paths_with_position.into_iter().map(|p| p.path).collect(),\n                app_state,\n                workspace::OpenOptions::default(),\n                &mut cx,\n            )\n            .await\n        })\n        .detach_and_log_err(cx);\n        return;\n    }\n\n    let mut task = None;\n    if !request.open_paths.is_empty() {\n        let app_state = app_state.clone();\n        task = Some(cx.spawn(async move |mut cx| {\n            let paths_with_position =\n                derive_paths_with_position(app_state.fs.as_ref(), request.open_paths).await;\n            let (_window, results) = open_paths_with_positions(\n                &paths_with_position,\n                app_state,\n                workspace::OpenOptions::default(),\n                &mut cx,\n            )\n            .await?;\n            for result in results.into_iter().flatten() {\n                if let Err(err) = result {\n                    log::error!(": "",
        ",);\n                }\n            }\n            anyhow::Ok(())\n        }));\n    }\n\n    if !request.open_channel_notes.is_empty() || request.join_channel.is_some() {\n        cx.spawn(async move |mut cx| {\n            let result = maybe!(async {\n                if let Some(task) = task {\n                    task.await?;\n                }\n                let client = app_state.client.clone();\n                // we continue even if authentication fails as join_channel/ open channel notes will\n                // show a visible error message.\n                authenticate(client, &cx).await.log_err();\n\n                if let Some(channel_id) = request.join_channel {\n                    cx.update(|cx| {\n                        workspace::join_channel(\n                            client::ChannelId(channel_id),\n                            app_state.clone(),\n                            None,\n                            cx,\n                        )\n                    })?\n                    .await?;\n                }\n\n                let workspace_window =\n                    workspace::get_any_active_workspace(app_state, cx.clone()).await?;\n                let workspace = workspace_window.entity(cx)?;\n\n                let mut promises = Vec::new();\n                for (channel_id, heading) in request.open_channel_notes {\n                    promises.push(cx.update_window(workspace_window.into(), |_, window, cx| {\n                        ChannelView::open(\n                            client::ChannelId(channel_id),\n                            heading,\n                            workspace.clone(),\n                            window,\n                            cx,\n                        )\n                        .log_err()\n                    })?)\n                }\n                future::join_all(promises).await;\n                anyhow::Ok(())\n            })\n            .await;\n            if let Err(err) = result {\n                fail_to_open_window_async(err, &mut cx);\n            }\n        })\n        .detach()\n    } else if let Some(task) = task {\n        cx.spawn(async move |mut cx| {\n            if let Err(err) = task.await {\n                fail_to_open_window_async(err, &mut cx);\n            }\n        })\n        .detach();\n    }\n}\n\nasync fn authenticate(client: Arc<Client>, cx: &AsyncApp) -> Result<()> {\n    if stdout_is_a_pty() {\n        if client::IMPERSONATE_LOGIN.is_some() {\n            client.authenticate_and_connect(false, cx).await?;\n        } else if client.has_credentials(cx).await {\n            client.authenticate_and_connect(true, cx).await?;\n        }\n    } else if client.has_credentials(cx).await {\n        client.authenticate_and_connect(true, cx).await?;\n    }\n    Ok::<_, anyhow::Error>(())\n}\n\nasync fn system_id() -> Result<IdType> {\n    let key_name = ": "",
        ".to_string();\n\n    if let Ok(Some(system_id)) = GLOBAL_KEY_VALUE_STORE.read_kvp(&key_name) {\n        return Ok(IdType::Existing(system_id));\n    }\n\n    let system_id = Uuid::new_v4().to_string();\n\n    GLOBAL_KEY_VALUE_STORE\n        .write_kvp(key_name, system_id.clone())\n        .await?;\n\n    Ok(IdType::New(system_id))\n}\n\nasync fn installation_id() -> Result<IdType> {\n    let legacy_key_name = ": "",
        ".to_string();\n    let key_name = ": "",
        ".to_string();\n\n    // Migrate legacy key to new key\n    if let Ok(Some(installation_id)) = KEY_VALUE_STORE.read_kvp(&legacy_key_name) {\n        KEY_VALUE_STORE\n            .write_kvp(key_name, installation_id.clone())\n            .await?;\n        KEY_VALUE_STORE.delete_kvp(legacy_key_name).await?;\n        return Ok(IdType::Existing(installation_id));\n    }\n\n    if let Ok(Some(installation_id)) = KEY_VALUE_STORE.read_kvp(&key_name) {\n        return Ok(IdType::Existing(installation_id));\n    }\n\n    let installation_id = Uuid::new_v4().to_string();\n\n    KEY_VALUE_STORE\n        .write_kvp(key_name, installation_id.clone())\n        .await?;\n\n    Ok(IdType::New(installation_id))\n}\n\nasync fn restore_or_create_workspace(app_state: Arc<AppState>, cx: &mut AsyncApp) -> Result<()> {\n    if let Some(locations) = restorable_workspace_locations(cx, &app_state).await {\n        for location in locations {\n            match location {\n                SerializedWorkspaceLocation::Local(location, _) => {\n                    let task = cx.update(|cx| {\n                        workspace::open_paths(\n                            location.paths().as_ref(),\n                            app_state.clone(),\n                            workspace::OpenOptions::default(),\n                            cx,\n                        )\n                    })?;\n                    task.await?;\n                }\n                SerializedWorkspaceLocation::Ssh(ssh) => {\n                    let connection_options = cx.update(|cx| {\n                        SshSettings::get_global(cx)\n                            .connection_options_for(ssh.host, ssh.port, ssh.user)\n                    })?;\n                    let app_state = app_state.clone();\n                    cx.spawn(async move |cx| {\n                        recent_projects::open_ssh_project(\n                            connection_options,\n                            ssh.paths.into_iter().map(PathBuf::from).collect(),\n                            app_state,\n                            workspace::OpenOptions::default(),\n                            cx,\n                        )\n                        .await\n                        .log_err();\n                    })\n                    .detach();\n                }\n            }\n        }\n    } else if matches!(KEY_VALUE_STORE.read_kvp(FIRST_OPEN), Ok(None)) {\n        cx.update(|cx| show_welcome_view(app_state, cx))?.await?;\n    } else {\n        cx.update(|cx| {\n            workspace::open_new(\n                Default::default(),\n                app_state,\n                cx,\n                |workspace, window, cx| {\n                    Editor::new_file(workspace, &Default::default(), window, cx)\n                },\n            )\n        })?\n        .await?;\n    }\n\n    Ok(())\n}\n\npub(crate) async fn restorable_workspace_locations(\n    cx: &mut AsyncApp,\n    app_state: &Arc<AppState>,\n) -> Option<Vec<SerializedWorkspaceLocation>> {\n    let mut restore_behavior = cx\n        .update(|cx| WorkspaceSettings::get(None, cx).restore_on_startup)\n        .ok()?;\n\n    let session_handle = app_state.session.clone();\n    let (last_session_id, last_session_window_stack) = cx\n        .update(|cx| {\n            let session = session_handle.read(cx);\n\n            (\n                session.last_session_id().map(|id| id.to_string()),\n                session.last_session_window_stack(),\n            )\n        })\n        .ok()?;\n\n    if last_session_id.is_none()\n        && matches!(\n            restore_behavior,\n            workspace::RestoreOnStartupBehavior::LastSession\n        )\n    {\n        restore_behavior = workspace::RestoreOnStartupBehavior::LastWorkspace;\n    }\n\n    match restore_behavior {\n        workspace::RestoreOnStartupBehavior::LastWorkspace => {\n            workspace::last_opened_workspace_location()\n                .await\n                .map(|location| vec![location])\n        }\n        workspace::RestoreOnStartupBehavior::LastSession => {\n            if let Some(last_session_id) = last_session_id {\n                let ordered = last_session_window_stack.is_some();\n\n                let mut locations = workspace::last_session_workspace_locations(\n                    &last_session_id,\n                    last_session_window_stack,\n                )\n                .filter(|locations| !locations.is_empty());\n\n                // Since last_session_window_order returns the windows ordered front-to-back\n                // we need to open the window that was frontmost last.\n                if ordered {\n                    if let Some(locations) = locations.as_mut() {\n                        locations.reverse();\n                    }\n                }\n\n                locations\n            } else {\n                None\n            }\n        }\n        _ => None,\n    }\n}\n\nfn init_paths() -> HashMap<io::ErrorKind, Vec<&'static Path>> {\n    [\n        paths::config_dir(),\n        paths::extensions_dir(),\n        paths::languages_dir(),\n        paths::database_dir(),\n        paths::logs_dir(),\n        paths::temp_dir(),\n    ]\n    .into_iter()\n    .fold(HashMap::default(), |mut errors, path| {\n        if let Err(e) = std::fs::create_dir_all(path) {\n            errors.entry(e.kind()).or_insert_with(Vec::new).push(path);\n        }\n        errors\n    })\n}\n\nfn stdout_is_a_pty() -> bool {\n    std::env::var(FORCE_CLI_MODE_ENV_VAR_NAME).ok().is_none() && io::stdout().is_terminal()\n}\n\n#[derive(Parser, Debug)]\n#[command(name = ": "",
        ", disable_version_flag = true)]\nstruct Args {\n    /// A sequence of space-separated paths or urls that you want to open.\n    ///\n    /// Use `path:line:row` syntax to open a file at a specific location.\n    /// Non-existing paths and directories will ignore `:line:row` suffix.\n    ///\n    /// URLs can either be `file://` or `zed://` scheme, or relative to <https://zed.dev>.\n    paths_or_urls: Vec<String>,\n\n    /// Instructs zed to run as a dev server on this machine. (not implemented)\n    #[arg(long)]\n    dev_server_token: Option<String>,\n\n    /// Prints system specs. Useful for submitting issues on GitHub when encountering a bug\n    /// that prevents Zed from starting, so you can't run `zed: copy system specs to clipboard`\n    #[arg(long)]\n    system_specs: bool,\n\n    /// Run zed in the foreground, only used on Windows, to match the behavior of the behavior on macOS.\n    #[arg(long)]\n    #[cfg(target_os = ": "",
        ")]\n    #[arg(hide = true)]\n    foreground: bool,\n\n    /// The dock action to perform. This is used on Windows only.\n    #[arg(long)]\n    #[cfg(target_os = ": "",
        ")]\n    #[arg(hide = true)]\n    dock_action: Option<usize>,\n}\n\n#[derive(Clone, Debug)]\nenum IdType {\n    New(String),\n    Existing(String),\n}\n\nimpl ToString for IdType {\n    fn to_string(&self) -> String {\n        match self {\n            IdType::New(id) | IdType::Existing(id) => id.clone(),\n        }\n    }\n}\n\nfn parse_url_arg(arg: &str, cx: &App) -> Result<String> {\n    match std::fs::canonicalize(Path::new(&arg)) {\n        Ok(path) => Ok(format!(": "",
        ", path.display())),\n        Err(error) => {\n            if arg.starts_with(": "",
        ")\n                || arg.starts_with(": "",
        ")\n                || parse_zed_link(arg, cx).is_some()\n            {\n                Ok(arg.into())\n            } else {\n                Err(anyhow!(": "",
        ", error))\n            }\n        }\n    }\n}\n\nfn load_embedded_fonts(cx: &App) {\n    let asset_source = cx.asset_source();\n    let font_paths = asset_source.list(": "",
        ").unwrap();\n    let embedded_fonts = Mutex::new(Vec::new());\n    let executor = cx.background_executor();\n\n    executor.block(executor.scoped(|scope| {\n        for font_path in &font_paths {\n            if !font_path.ends_with(": "",
        ") {\n                continue;\n            }\n\n            scope.spawn(async {\n                let font_bytes = asset_source.load(font_path).unwrap().unwrap();\n                embedded_fonts.lock().push(font_bytes);\n            });\n        }\n    }));\n\n    cx.text_system()\n        .add_fonts(embedded_fonts.into_inner())\n        .unwrap();\n}\n\n/// Eagerly loads the active theme and icon theme based on the selections in the\n/// theme settings.\n///\n/// This fast path exists to load these themes as soon as possible so the user\n/// doesn't see the default themes while waiting on extensions to load.\nfn eager_load_active_theme_and_icon_theme(fs: Arc<dyn Fs>, cx: &App) {\n    let extension_store = ExtensionStore::global(cx);\n    let theme_registry = ThemeRegistry::global(cx);\n    let theme_settings = ThemeSettings::get_global(cx);\n    let appearance = SystemAppearance::global(cx).0;\n\n    if let Some(theme_selection) = theme_settings.theme_selection.as_ref() {\n        let theme_name = theme_selection.theme(appearance);\n        if matches!(theme_registry.get(theme_name), Err(ThemeNotFoundError(_))) {\n            if let Some(theme_path) = extension_store.read(cx).path_to_extension_theme(theme_name) {\n                cx.spawn({\n                    let theme_registry = theme_registry.clone();\n                    let fs = fs.clone();\n                    async move |cx| {\n                        theme_registry.load_user_theme(&theme_path, fs).await?;\n\n                        cx.update(|cx| {\n                            ThemeSettings::reload_current_theme(cx);\n                        })\n                    }\n                })\n                .detach_and_log_err(cx);\n            }\n        }\n    }\n\n    if let Some(icon_theme_selection) = theme_settings.icon_theme_selection.as_ref() {\n        let icon_theme_name = icon_theme_selection.icon_theme(appearance);\n        if matches!(\n            theme_registry.get_icon_theme(icon_theme_name),\n            Err(IconThemeNotFoundError(_))\n        ) {\n            if let Some((icon_theme_path, icons_root_path)) = extension_store\n                .read(cx)\n                .path_to_extension_icon_theme(icon_theme_name)\n            {\n                cx.spawn({\n                    let theme_registry = theme_registry.clone();\n                    let fs = fs.clone();\n                    async move |cx| {\n                        theme_registry\n                            .load_icon_theme(&icon_theme_path, &icons_root_path, fs)\n                            .await?;\n\n                        cx.update(|cx| {\n                            ThemeSettings::reload_current_icon_theme(cx);\n                        })\n                    }\n                })\n                .detach_and_log_err(cx);\n            }\n        }\n    }\n}\n\n/// Spawns a background task to load the user themes from the themes directory.\nfn load_user_themes_in_background(fs: Arc<dyn fs::Fs>, cx: &mut App) {\n    cx.spawn({\n        let fs = fs.clone();\n        async move |cx| {\n            if let Some(theme_registry) =\n                cx.update(|cx| ThemeRegistry::global(cx).clone()).log_err()\n            {\n                let themes_dir = paths::themes_dir().as_ref();\n                match fs\n                    .metadata(themes_dir)\n                    .await\n                    .ok()\n                    .flatten()\n                    .map(|m| m.is_dir)\n                {\n                    Some(is_dir) => {\n                        anyhow::ensure!(is_dir, ": "",
        ")\n                    }\n                    None => {\n                        fs.create_dir(themes_dir).await.with_context(|| {\n                            format!(": "",
        ")\n                        })?;\n                    }\n                }\n                theme_registry.load_user_themes(themes_dir, fs).await?;\n                cx.update(ThemeSettings::reload_current_theme)?;\n            }\n            anyhow::Ok(())\n        }\n    })\n    .detach_and_log_err(cx);\n}\n\n/// Spawns a background task to watch the themes directory for changes.\nfn watch_themes(fs: Arc<dyn fs::Fs>, cx: &mut App) {\n    use std::time::Duration;\n    cx.spawn(async move |cx| {\n        let (mut events, _) = fs\n            .watch(paths::themes_dir(), Duration::from_millis(100))\n            .await;\n\n        while let Some(paths) = events.next().await {\n            for event in paths {\n                if fs.metadata(&event.path).await.ok().flatten().is_some() {\n                    if let Some(theme_registry) =\n                        cx.update(|cx| ThemeRegistry::global(cx).clone()).log_err()\n                    {\n                        if let Some(()) = theme_registry\n                            .load_user_theme(&event.path, fs.clone())\n                            .await\n                            .log_err()\n                        {\n                            cx.update(ThemeSettings::reload_current_theme).log_err();\n                        }\n                    }\n                }\n            }\n        }\n    })\n    .detach()\n}\n\n#[cfg(debug_assertions)]\nfn watch_languages(fs: Arc<dyn fs::Fs>, languages: Arc<LanguageRegistry>, cx: &mut App) {\n    use std::time::Duration;\n\n    let path = {\n        let p = Path::new(": "",
        ");\n        let Ok(full_path) = p.canonicalize() else {\n            return;\n        };\n        full_path\n    };\n\n    cx.spawn(async move |_| {\n        let (mut events, _) = fs.watch(path.as_path(), Duration::from_millis(100)).await;\n        while let Some(event) = events.next().await {\n            let has_language_file = event.iter().any(|event| {\n                event\n                    .path\n                    .extension()\n                    .map(|ext| ext.to_string_lossy().as_ref() == ": ""
    },
    "zed/crates/zed/src/reliability.rs": {
        "<unnamed>": "",
        "Box<Any>": "",
        "Thread {:?} panicked with {:?} at {}:{}:{}\n{}{:?}": "",
        ",\n                        commit_sha.0,\n                        location.file(),\n                        location.line()\n                    ),\n                    None => ": "",
        ".to_string(),\n                },\n                backtrace,\n            );\n            std::process::exit(-1);\n        }\n        let main_module_base_address = get_main_module_base_address();\n\n        let backtrace = Backtrace::new();\n        let mut symbols = backtrace\n            .frames()\n            .iter()\n            .flat_map(|frame| {\n                let base = frame\n                    .module_base_address()\n                    .unwrap_or(main_module_base_address);\n                frame.symbols().iter().map(move |symbol| {\n                    format!(\n                        ": "",
        ",\n                        symbol\n                            .name()\n                            .as_ref()\n                            .map_or(": "",
        ".to_owned(), <_>::to_string),\n                        (frame.ip() as isize).saturating_sub(base as isize)\n                    )\n                })\n            })\n            .collect::<Vec<_>>();\n\n        // Strip out leading stack frames for rust panic-handling.\n        if let Some(ix) = symbols\n            .iter()\n            .position(|name| name == ": "",
        " || name == ": "",
        ")\n        {\n            symbols.drain(0..=ix);\n        }\n\n        let panic_data = telemetry_events::Panic {\n            thread: thread_name.into(),\n            payload,\n            location_data: info.location().map(|location| LocationData {\n                file: location.file().into(),\n                line: location.line(),\n            }),\n            app_version: app_version.to_string(),\n            app_commit_sha: app_commit_sha.as_ref().map(|sha| sha.0.clone()),\n            release_channel: RELEASE_CHANNEL.dev_name().into(),\n            target: env!(": "",
        ").to_owned().into(),\n            os_name: telemetry::os_name(),\n            os_version: Some(telemetry::os_version()),\n            architecture: env::consts::ARCH.into(),\n            panicked_on: Utc::now().timestamp_millis(),\n            backtrace: symbols,\n            system_id: system_id.clone(),\n            installation_id: installation_id.clone(),\n            session_id: session_id.clone(),\n        };\n\n        if let Some(panic_data_json) = serde_json::to_string_pretty(&panic_data).log_err() {\n            log::error!(": "",
        ", panic_data_json);\n        }\n\n        if !is_pty {\n            if let Some(panic_data_json) = serde_json::to_string(&panic_data).log_err() {\n                let timestamp = chrono::Utc::now().format(": "",
        ").to_string();\n                let panic_file_path = paths::logs_dir().join(format!(": "",
        "));\n                let panic_file = std::fs::OpenOptions::new()\n                    .append(true)\n                    .create(true)\n                    .open(&panic_file_path)\n                    .log_err();\n                if let Some(mut panic_file) = panic_file {\n                    writeln!(&mut panic_file, ": "",
        ").log_err();\n                    panic_file.flush().log_err();\n                }\n            }\n        }\n\n        std::process::abort();\n    }));\n}\n\n#[cfg(not(target_os = ": "",
        "))]\nfn get_main_module_base_address() -> *mut c_void {\n    let mut dl_info = libc::Dl_info {\n        dli_fname: std::ptr::null(),\n        dli_fbase: std::ptr::null_mut(),\n        dli_sname: std::ptr::null(),\n        dli_saddr: std::ptr::null_mut(),\n    };\n    unsafe {\n        libc::dladdr(get_main_module_base_address as _, &mut dl_info);\n    }\n    dl_info.dli_fbase\n}\n\n#[cfg(target_os = ": "",
        ")]\nfn get_main_module_base_address() -> *mut c_void {\n    std::ptr::null_mut()\n}\n\npub fn init(\n    http_client: Arc<HttpClientWithUrl>,\n    system_id: Option<String>,\n    installation_id: Option<String>,\n    session_id: String,\n    cx: &mut App,\n) {\n    #[cfg(target_os = ": "",
        ")]\n    monitor_main_thread_hangs(http_client.clone(), installation_id.clone(), cx);\n\n    let Some(panic_report_url) = http_client\n        .build_zed_api_url(": "",
        ", &[])\n        .log_err()\n    else {\n        return;\n    };\n\n    upload_panics_and_crashes(\n        http_client.clone(),\n        panic_report_url.clone(),\n        installation_id.clone(),\n        cx,\n    );\n\n    cx.observe_new(move |project: &mut Project, _, cx| {\n        let http_client = http_client.clone();\n        let panic_report_url = panic_report_url.clone();\n        let session_id = session_id.clone();\n        let installation_id = installation_id.clone();\n        let system_id = system_id.clone();\n\n        if let Some(ssh_client) = project.ssh_client() {\n            ssh_client.update(cx, |client, cx| {\n                if TelemetrySettings::get_global(cx).diagnostics {\n                    let request = client.proto_client().request(proto::GetPanicFiles {});\n                    cx.background_spawn(async move {\n                        let panic_files = request.await?;\n                        for file in panic_files.file_contents {\n                            let panic: Option<Panic> = serde_json::from_str(&file)\n                                .log_err()\n                                .or_else(|| {\n                                    file.lines()\n                                        .next()\n                                        .and_then(|line| serde_json::from_str(line).ok())\n                                })\n                                .unwrap_or_else(|| {\n                                    log::error!(": "",
        ", file);\n                                    None\n                                });\n\n                            if let Some(mut panic) = panic {\n                                panic.session_id = session_id.clone();\n                                panic.system_id = system_id.clone();\n                                panic.installation_id = installation_id.clone();\n\n                                upload_panic(&http_client, &panic_report_url, panic, &mut None)\n                                    .await?;\n                            }\n                        }\n\n                        anyhow::Ok(())\n                    })\n                    .detach_and_log_err(cx);\n                }\n            })\n        }\n    })\n    .detach();\n}\n\n#[cfg(target_os = ": "",
        ")]\npub fn monitor_main_thread_hangs(\n    http_client: Arc<HttpClientWithUrl>,\n    installation_id: Option<String>,\n    cx: &App,\n) {\n    // This is too noisy to ship to stable for now.\n    if !matches!(\n        ReleaseChannel::global(cx),\n        ReleaseChannel::Dev | ReleaseChannel::Nightly | ReleaseChannel::Preview\n    ) {\n        return;\n    }\n\n    use nix::sys::signal::{\n        SaFlags, SigAction, SigHandler, SigSet,\n        Signal::{self, SIGUSR2},\n        sigaction,\n    };\n\n    use parking_lot::Mutex;\n\n    use http_client::Method;\n    use std::{\n        ffi::c_int,\n        sync::{OnceLock, mpsc},\n        time::Duration,\n    };\n    use telemetry_events::{BacktraceFrame, HangReport};\n\n    use nix::sys::pthread;\n\n    let foreground_executor = cx.foreground_executor();\n    let background_executor = cx.background_executor();\n    let telemetry_settings = *client::TelemetrySettings::get_global(cx);\n\n    // Initialize SIGUSR2 handler to send a backtrace to a channel.\n    let (backtrace_tx, backtrace_rx) = mpsc::channel();\n    static BACKTRACE: Mutex<Vec<backtrace::Frame>> = Mutex::new(Vec::new());\n    static BACKTRACE_SENDER: OnceLock<mpsc::Sender<()>> = OnceLock::new();\n    BACKTRACE_SENDER.get_or_init(|| backtrace_tx);\n    BACKTRACE.lock().reserve(100);\n\n    fn handle_backtrace_signal() {\n        unsafe {\n            extern ": "",
        " fn handle_sigusr2(_i: c_int) {\n                unsafe {\n                    // ASYNC SIGNAL SAFETY: This lock is only accessed one other time,\n                    // which can only be triggered by This signal handler. In addition,\n                    // this signal handler is immediately removed by SA_RESETHAND, and this\n                    // signal handler cannot be re-entrant due to to the SIGUSR2 mask defined\n                    // below\n                    let mut bt = BACKTRACE.lock();\n                    bt.clear();\n                    backtrace::trace_unsynchronized(|frame| {\n                        if bt.len() < bt.capacity() {\n                            bt.push(frame.clone());\n                            true\n                        } else {\n                            false\n                        }\n                    });\n                }\n\n                BACKTRACE_SENDER.get().unwrap().send(()).ok();\n            }\n\n            let mut mask = SigSet::empty();\n            mask.add(SIGUSR2);\n            sigaction(\n                Signal::SIGUSR2,\n                &SigAction::new(\n                    SigHandler::Handler(handle_sigusr2),\n                    SaFlags::SA_RESTART | SaFlags::SA_RESETHAND,\n                    mask,\n                ),\n            )\n            .log_err();\n        }\n    }\n\n    handle_backtrace_signal();\n    let main_thread = pthread::pthread_self();\n\n    let (mut tx, mut rx) = futures::channel::mpsc::channel(3);\n    foreground_executor\n        .spawn(async move { while (rx.next().await).is_some() {} })\n        .detach();\n\n    background_executor\n        .spawn({\n            let background_executor = background_executor.clone();\n            async move {\n                loop {\n                    background_executor.timer(Duration::from_secs(1)).await;\n                    match tx.try_send(()) {\n                        Ok(_) => continue,\n                        Err(e) => {\n                            if e.into_send_error().is_full() {\n                                pthread::pthread_kill(main_thread, SIGUSR2).log_err();\n                            }\n                            // Only detect the first hang\n                            break;\n                        }\n                    }\n                }\n            }\n        })\n        .detach();\n\n    let app_version = release_channel::AppVersion::global(cx);\n    let os_name = client::telemetry::os_name();\n\n    background_executor\n        .clone()\n        .spawn(async move {\n            let os_version = client::telemetry::os_version();\n\n            loop {\n                while backtrace_rx.recv().is_ok() {\n                    if !telemetry_settings.diagnostics {\n                        return;\n                    }\n\n                    // ASYNC SIGNAL SAFETY: This lock is only accessed _after_\n                    // the backtrace transmitter has fired, which itself is only done\n                    // by the signal handler. And due to SA_RESETHAND  the signal handler\n                    // will not run again until `handle_backtrace_signal` is called.\n                    let raw_backtrace = BACKTRACE.lock().drain(..).collect::<Vec<_>>();\n                    let backtrace: Vec<_> = raw_backtrace\n                        .into_iter()\n                        .map(|frame| {\n                            let mut btf = BacktraceFrame {\n                                ip: frame.ip() as usize,\n                                symbol_addr: frame.symbol_address() as usize,\n                                base: frame.module_base_address().map(|addr| addr as usize),\n                                symbols: vec![],\n                            };\n\n                            backtrace::resolve_frame(&frame, |symbol| {\n                                if let Some(name) = symbol.name() {\n                                    btf.symbols.push(name.to_string());\n                                }\n                            });\n\n                            btf\n                        })\n                        .collect();\n\n                    // IMPORTANT: Don't move this to before `BACKTRACE.lock()`\n                    handle_backtrace_signal();\n\n                    log::error!(\n                        ": "",
        ",\n                        backtrace\n                            .iter()\n                            .flat_map(|bt| bt.symbols.first().as_ref().map(|s| s.as_str()))\n                            .collect::<Vec<_>>()\n                            .join(": "",
        ")\n                    );\n\n                    let report = HangReport {\n                        backtrace,\n                        app_version: Some(app_version),\n                        os_name: os_name.clone(),\n                        os_version: Some(os_version.clone()),\n                        architecture: env::consts::ARCH.into(),\n                        installation_id: installation_id.clone(),\n                    };\n\n                    let Some(json_bytes) = serde_json::to_vec(&report).log_err() else {\n                        continue;\n                    };\n\n                    let Some(checksum) = client::telemetry::calculate_json_checksum(&json_bytes)\n                    else {\n                        continue;\n                    };\n\n                    let Ok(url) = http_client.build_zed_api_url(": "",
        ", &[]) else {\n                        continue;\n                    };\n\n                    let Ok(request) = http_client::Request::builder()\n                        .method(Method::POST)\n                        .uri(url.as_ref())\n                        .header(": "",
        ", checksum)\n                        .body(json_bytes.into())\n                    else {\n                        continue;\n                    };\n\n                    if let Some(response) = http_client.send(request).await.log_err() {\n                        if response.status() != 200 {\n                            log::error!(": "",
        ", response.status());\n                        }\n                    }\n                }\n            }\n        })\n        .detach()\n}\n\nfn upload_panics_and_crashes(\n    http: Arc<HttpClientWithUrl>,\n    panic_report_url: Url,\n    installation_id: Option<String>,\n    cx: &App,\n) {\n    let telemetry_settings = *client::TelemetrySettings::get_global(cx);\n    cx.background_spawn(async move {\n        let most_recent_panic =\n            upload_previous_panics(http.clone(), &panic_report_url, telemetry_settings)\n                .await\n                .log_err()\n                .flatten();\n        upload_previous_crashes(http, most_recent_panic, installation_id, telemetry_settings)\n            .await\n            .log_err()\n    })\n    .detach()\n}\n\n/// Uploads panics via `zed.dev`.\nasync fn upload_previous_panics(\n    http: Arc<HttpClientWithUrl>,\n    panic_report_url: &Url,\n    telemetry_settings: client::TelemetrySettings,\n) -> anyhow::Result<Option<(i64, String)>> {\n    let mut children = smol::fs::read_dir(paths::logs_dir()).await?;\n\n    let mut most_recent_panic = None;\n\n    while let Some(child) = children.next().await {\n        let child = child?;\n        let child_path = child.path();\n\n        if child_path.extension() != Some(OsStr::new(": "",
        ")) {\n            continue;\n        }\n        let filename = if let Some(filename) = child_path.file_name() {\n            filename.to_string_lossy()\n        } else {\n            continue;\n        };\n\n        if !filename.starts_with(": "",
        ") {\n            continue;\n        }\n\n        if telemetry_settings.diagnostics {\n            let panic_file_content = smol::fs::read_to_string(&child_path)\n                .await\n                .context(": "",
        ")?;\n\n            let panic: Option<Panic> = serde_json::from_str(&panic_file_content)\n                .log_err()\n                .or_else(|| {\n                    panic_file_content\n                        .lines()\n                        .next()\n                        .and_then(|line| serde_json::from_str(line).ok())\n                })\n                .unwrap_or_else(|| {\n                    log::error!(": "",
        ", panic_file_content);\n                    None\n                });\n\n            if let Some(panic) = panic {\n                if !upload_panic(&http, &panic_report_url, panic, &mut most_recent_panic).await? {\n                    continue;\n                }\n            }\n        }\n\n        // We've done what we can, delete the file\n        std::fs::remove_file(child_path)\n            .context(": "",
        ")\n            .log_err();\n    }\n    Ok(most_recent_panic)\n}\n\nasync fn upload_panic(\n    http: &Arc<HttpClientWithUrl>,\n    panic_report_url: &Url,\n    panic: telemetry_events::Panic,\n    most_recent_panic: &mut Option<(i64, String)>,\n) -> Result<bool> {\n    *most_recent_panic = Some((panic.panicked_on, panic.payload.clone()));\n\n    let json_bytes = serde_json::to_vec(&PanicRequest { panic }).unwrap();\n\n    let Some(checksum) = client::telemetry::calculate_json_checksum(&json_bytes) else {\n        return Ok(false);\n    };\n\n    let Ok(request) = http_client::Request::builder()\n        .method(Method::POST)\n        .uri(panic_report_url.as_ref())\n        .header(": "",
        ", checksum)\n        .body(json_bytes.into())\n    else {\n        return Ok(false);\n    };\n\n    let response = http.send(request).await.context(": "",
        ")?;\n    if !response.status().is_success() {\n        log::error!(": "",
        ", response.status());\n    }\n\n    Ok(true)\n}\nconst LAST_CRASH_UPLOADED: &str = ": "",
        ";\n\n/// upload crashes from apple's diagnostic reports to our server.\n/// (only if telemetry is enabled)\nasync fn upload_previous_crashes(\n    http: Arc<HttpClientWithUrl>,\n    most_recent_panic: Option<(i64, String)>,\n    installation_id: Option<String>,\n    telemetry_settings: client::TelemetrySettings,\n) -> Result<()> {\n    if !telemetry_settings.diagnostics {\n        return Ok(());\n    }\n    let last_uploaded = KEY_VALUE_STORE\n        .read_kvp(LAST_CRASH_UPLOADED)?\n        .unwrap_or(": "",
        ".to_string()); // don't upload old crash reports from before we had this.\n    let mut uploaded = last_uploaded.clone();\n\n    let crash_report_url = http.build_zed_api_url(": "",
        ", &[])?;\n\n    // Crash directories are only set on macOS.\n    for dir in [crashes_dir(), crashes_retired_dir()]\n        .iter()\n        .filter_map(|d| d.as_deref())\n    {\n        let mut children = smol::fs::read_dir(&dir).await?;\n        while let Some(child) = children.next().await {\n            let child = child?;\n            let Some(filename) = child\n                .path()\n                .file_name()\n                .map(|f| f.to_string_lossy().to_lowercase())\n            else {\n                continue;\n            };\n\n            if !filename.starts_with(": "",
        ") || !filename.ends_with(": "",
        ") {\n                continue;\n            }\n\n            if filename <= last_uploaded {\n                continue;\n            }\n\n            let body = smol::fs::read_to_string(&child.path())\n                .await\n                .context(": "",
        ")?;\n\n            let mut request = http_client::Request::post(&crash_report_url.to_string())\n                .follow_redirects(http_client::RedirectPolicy::FollowAll)\n                .header(": "",
        ", ": "",
        ");\n\n            if let Some((panicked_on, payload)) = most_recent_panic.as_ref() {\n                request = request\n                    .header(": "",
        ", format!(": "",
        "))\n                    .header(": "",
        ", payload)\n            }\n            if let Some(installation_id) = installation_id.as_ref() {\n                request = request.header(": "",
        ", installation_id);\n            }\n\n            let request = request.body(body.into())?;\n\n            let response = http.send(request).await.context(": "",
        ")?;\n            if !response.status().is_success() {\n                log::error!(": ""
    },
    "zed/crates/zed/src/zed.rs": {
        "ZED_WINDOW_DECORATIONS": "",
        "server": "",
        "client": "",
        "Using GPU: {:?}": "",
        "\n            inotify_init returned {}\n\n            This may be due to system-wide limits on inotify instances. For troubleshooting see: https://zed.dev/docs/linux\n            ": "",
        "Could not start inotify": "",
        "Troubleshoot and Quit": "",
        "\n            ReadDirectoryChangesW initialization failed: {}\n\n            This may occur on network filesystems and WSL paths. For troubleshooting see: https://zed.dev/docs/windows\n            ": "",
        "Could not start ReadDirectoryChangesW": "",
        "ZED_ALLOW_EMULATED_GPU": "",
        "\n            Zed uses Vulkan for rendering and requires a compatible GPU.\n\n            Currently you are using a software emulated GPU ({}) which\n            will result in awful performance.\n\n            For troubleshooting see: https://zed.dev/docs/linux\n            Set ZED_ALLOW_EMULATED_GPU=1 env var to permanently override.\n            ": "",
        "Unsupported GPU": "",
        "Skip": "",
        "Project Opened": "",
        "zed:// links will now open in {}.": "",
        "Error registering zed:// scheme": "",
        "Open Source License Attribution": "",
        "Default Key Bindings": "",
        "JSON": "",
        "Default Settings": "",
        "Settings file must have a location": "",
        "CARGO_PKG_VERSION": "",
        "(debug)": "",
        "{release_channel} {version} {debug}": "",
        "OK": "",
        "Ran the TestPanic action": "",
        "If you installed Zed from our official release add ~/.local/bin to your PATH.\n\nIf you installed Zed from a different source like your package manager, then you may need to create an alias/symlink manually.\n\nDepending on your package manager, the CLI might be named zeditor, zedit, zed-editor or something else.": "",
        "CLI should already be installed": "",
        "Ok": "",
        "error creating CLI symlink": "",
        "Installed `zed` to {}. You can launch {} from your terminal.": "",
        "Error installing zed cli": "",
        "Are you sure you want to quit?": "",
        "Quit": "",
        "Cancel": "",
        "Unable to access/open log file at path {:?}": "",
        "Log": "",
        "Last {} lines in {}": "",
        "Failed to load user settings: {err}": "",
        "JSON parse error in keymap file. Bindings not reloaded.\n\n{error}": "",
        "Open Keymap File": "",
        "New Window": "",
        "Invalid user settings file\n{error}": "",
        "Open Settings File": "",
        "Not an ssh project": "",
        "worktree was removed": "",
        "unexpected item type: expected editor item": "",
        "This project has no folders open.": "",
        "{}\n{}": "",
        "Telemetry Log": "",
        "a": "",
        "aa": "",
        "ab": "",
        "b": "",
        "ba": "",
        "bb": "",
        "c": "",
        "ca": "",
        "cb": "",
        "d": "",
        "da": "",
        "db": "",
        "e": "",
        "ea": "",
        "eb": "",
        "hey": "",
        "dir": "",
        "f": "",
        "dir1": "",
        "dir2": "",
        "EDIT": "",
        "Don't Save": "",
        "EDIThey": "",
        "the-new-name": "",
        "file1": "",
        "contents 1": "",
        "file2": "",
        "contents 2": "",
        "file3": "",
        "contents 3": "",
        "dir3": "",
        "found no project panels": "",
        "project panel should have a selected entry": "",
        "Unexpected project panel selected worktree path": "",
        "Unexpected project panel selected entry path": "",
        "excluded_dir": "",
        ".gitignore": "",
        "ignored_dir\n": "",
        ".git": "",
        "HEAD": "",
        "ref: refs/heads/main": "",
        "regular_dir": "",
        "file": "",
        "regular file contents": "",
        "ignored_dir": "",
        "ignored_subdir": "",
        "ignored subfile contents": "",
        "ignored file contents": "",
        "excluded file contents": "",
        "Excluded files in subfolders of a workspace root should be opened in the workspace": "",
        "Expect to get the same number of opened items as submitted paths to open": "",
        "Excluded file {path:?} failed to open: {e:?}": "",
        ".git/HEAD": "",
        "excluded_dir/file": "",
        "Excluded files should get opened, excluded dir should not get opened": "",
        "Workspace entries should not change after opening excluded files and directories paths": "",
        "all excluded files that got open should have a path": "",
        "Despite not being present in the worktrees, buffers for excluded files are opened and added to the pane": "",
        "x": "",
        "changed": "",
        "Overwrite": "",
        "untitled": "",
        "hi": "",
        " there": "",
        "dirt": "",
        "contents 1\n": "",
        "contents 2\n": "",
        "contents 3\n": "",
        "file4": "",
        ": ": "",
        ": {": "",
        "backspace": "",
        "k": "",
        ": null}}]": "",
        "vim::FindCommand": "",
        "vim::Literal": "",
        "vim::ResizePane": "",
        "vim::PushObject": "",
        "vim::PushFindForward": "",
        "vim::PushFindBackward": "",
        "vim::PushSneak": "",
        "vim::PushSneakBackward": "",
        "vim::PushChangeSurrounds": "",
        "vim::PushJump": "",
        "vim::PushDigraph": "",
        "vim::PushLiteral": "",
        "vim::Number": "",
        "vim::SelectRegister": "",
        "git::StageAndNext": "",
        "git::UnstageAndNext": "",
        "terminal::SendText": "",
        "terminal::SendKeystroke": "",
        "app_menu::OpenApplicationMenu": "",
        "picker::ConfirmInput": "",
        "editor::HandleInput": "",
        "editor::FoldAtLevel": "",
        "pane::ActivateItem": "",
        "workspace::ActivatePane": "",
        "workspace::MoveItemToPane": "",
        "workspace::MoveItemToPaneInDirection": "",
        "workspace::OpenTerminal": "",
        "workspace::SendKeystrokes": "",
        "zed::OpenBrowser": "",
        "zed::OpenZedUrl": "",
        "{action} failed to build: {err:?}": "",
        "Failed to build actions using {{}} as input: {:?}. Errors:\n{}": "",
        "language name {name}": "",
        "md": "",
        "On {} Failed to find {}": "",
        "On {} Failed to find {} with key binding {}": ""
    },
    "zed/crates/zed/src/zed/app_menus.rs": {
        "About Zed…": "",
        "Check for Updates": "",
        "Settings": "",
        "Open Settings": "",
        "Open Key Bindings": "",
        "Open Default Settings": "",
        "Open Default Key Bindings": "",
        "Open Project Settings": "",
        "Select Theme...": "",
        "Services": "",
        "Extensions": "",
        "Install CLI": "",
        "Hide Zed": "",
        "Hide Others": "",
        "Show All": "",
        "Quit": "",
        "File": "",
        "New": "",
        "New Window": "",
        "Open File...": "",
        "Open Folder...": "",
        "Open…": "",
        "Open Recent...": "",
        "Open Remote...": "",
        "Add Folder to Project…": "",
        "Save": "",
        "Save As…": "",
        "Save All": "",
        "Close Editor": "",
        "Close Window": "",
        "Edit": "",
        "Undo": "",
        "Redo": "",
        "Cut": "",
        "Copy": "",
        "Copy and trim": "",
        "Paste": "",
        "Find": "",
        "Find In Project": "",
        "Toggle Line Comment": "",
        "Selection": "",
        "Select All": "",
        "Expand Selection": "",
        "Shrink Selection": "",
        "Add Cursor Above": "",
        "Add Cursor Below": "",
        "Select Next Occurrence": "",
        "Move Line Up": "",
        "Move Line Down": "",
        "Duplicate Selection": "",
        "View": "",
        "Zoom In": "",
        "Zoom Out": "",
        "Reset Zoom": "",
        "Toggle Left Dock": "",
        "Toggle Right Dock": "",
        "Toggle Bottom Dock": "",
        "Close All Docks": "",
        "Editor Layout": "",
        "Split Up": "",
        "Split Down": "",
        "Split Left": "",
        "Split Right": "",
        "Project Panel": "",
        "Outline Panel": "",
        "Collab Panel": "",
        "Terminal Panel": "",
        "Diagnostics": "",
        "Go": "",
        "Back": "",
        "Forward": "",
        "Command Palette...": "",
        "Go to File...": "",
        "Go to Symbol in Project": "",
        "Go to Symbol in Editor...": "",
        "Go to Line/Column...": "",
        "Go to Definition": "",
        "Go to Declaration": "",
        "Go to Type Definition": "",
        "Find All References": "",
        "Next Problem": "",
        "Previous Problem": "",
        "Window": "",
        "Minimize": "",
        "Zoom": "",
        "Help": "",
        "View Telemetry": "",
        "View Dependency Licenses": "",
        "Show Welcome": "",
        "Give Feedback...": "",
        "Documentation": "",
        "Zed Twitter": "",
        "Join the Team": ""
    },
    "zed/crates/zed/src/zed/mac_only_instance.rs": {
        "Zed Editor Dev Instance Running": "",
        "Zed Editor Nightly Instance Running": "",
        "Zed Editor Preview Instance Running": "",
        "Zed Editor Stable Instance Running": "",
        "Error binding to single instance port: {err}": "",
        "Backup handshake request failed, continuing without handshake": "",
        "Connected to single instance port but failed to read: {err}": "",
        "Got instance handshake": "",
        "Got wrong instance handshake value": ""
    },
    "zed/crates/zed/src/zed/open_listener.rs": {
        "zed-cli://": "",
        "zed-dock-action://": "",
        "file://": "",
        "zed://file": "",
        "zed://ssh": "",
        "ssh:/": "",
        "ssh://": "",
        "unhandled url: {}": "",
        "missing host in ssh url: {}": "",
        "cannot open both local and ssh paths": "",
        "cannot open multiple ssh connections": "",
        "channel": "",
        "notes#": "",
        "notes": "",
        "invalid zed url: {}": "",
        "no listener for open requests": "",
        "error connecting to cli": "",
        "error sending ipc handshake": "",
        "{e}": "",
        "failed to open a workspace": "",
        "error opening {path:?}: {err}": "",
        "error opening {paths_with_position:?}: {error}": "",
        "dir1": "",
        "content1": "",
        "content2": "",
        "Workspace should have two items": ""
    },
    "zed/crates/zed/src/zed/quick_action_bar.rs": {
        "empty quick action bar": "",
        "toggle buffer search": "",
        "Buffer Search": "",
        "toggle inline assistant": "",
        "Inline Assist": "",
        "editor-selections-dropdown": "",
        "toggle_editor_selections_icon": "",
        "Selection Controls": "",
        "Select All": "",
        "Select Next Occurrence": "",
        "Expand Selection": "",
        "Shrink Selection": "",
        "Add Cursor Above": "",
        "Add Cursor Below": "",
        "Go to Symbol": "",
        "Go to Line/Column": "",
        "Next Problem": "",
        "Previous Problem": "",
        "Next Hunk": "",
        "Previous Hunk": "",
        "Move Line Up": "",
        "Move Line Down": "",
        "Duplicate Selection": "",
        "editor-settings": "",
        "toggle_editor_settings_icon": "",
        "Editor Controls": "",
        "Inlay Hints": "",
        "Inline Diagnostics": "",
        "Edit Predictions": "",
        "You can't toggle edit predictions for this file as it is within the excluded files list.": "",
        "Line Numbers": "",
        "Selection Menu": "",
        "Auto Signature Help": "",
        "Inline Git Blame": "",
        "Column Git Blame": "",
        "Vim Mode": "",
        "quick action bar": ""
    },
    "zed/crates/zed/src/zed/windows_only_instance.rs": {
        "Unable to create instance mutex.": "",
        "Failed to create named pipe: {:?}": "",
        "Failed to read from named pipe": "",
        "zed-dock-action://{}": "",
        "Handshake before Zed spawn": "",
        "error parsing path argument: {}": "",
        "Handshake after Zed spawn": ""
    },
    "zed/crates/zed/src/zed/quick_action_bar/markdown_preview.rs": {
        "click": "",
        "Preview Markdown": "",
        "{} to open in a split": ""
    },
    "zed/crates/zed/src/zed/quick_action_bar/repl_menu.rs": {
        "repl-menu": "",
        "menu": "",
        "kernel: {} ({})": "",
        "Run Selection": "",
        "Run Line": "",
        "Interrupt": "",
        "Clear Outputs": "",
        "Shut Down Kernel": "",
        "Restart Kernel": "",
        "View Sessions": "",
        "Shut Down all Kernels": "",
        "dropdown": "",
        "REPL Menu": "",
        "toggle_repl_icon": "",
        "Start REPL for {}": "",
        "kernel-selector": "",
        "Select Kernel": "",
        "Setup Zed REPL for {}": "",
        "{}#installation": "",
        "Nothing running": "",
        "Restarting {}": "",
        "Run code on {} ({})": "",
        "Interrupt {} ({})": "",
        "{} is starting": "",
        "Error with kernel {}: {}": "",
        "{} is shutting down": ""
    },
    "zed/crates/zeta/src/zeta.rs": {
        "id": "",
        "path": "",
        "edits": "",
        "untitled": "",
        "Events:\n{}\nExcerpt:\n{:?}": "",
        "Update Zed": "",
        "completion response: {}": "",
        "error predicting edits.\nStatus: {:?}\nBody: {}": "",
        "expected exactly one start marker, found {}": "",
        "expected exactly one end marker, found {}": "",
        "expected at most one start-of-file marker, found {}": "",
        "could not find newline": "",
        "could not find end marker": "",
        "Edit Prediction Rated": "",
        "true": "",
        "false": "",
        "unknown value in '{ZED_PREDICT_DATA_COLLECTION_CHOICE}'": "",
        "You must update to Zed version {minimum_version} or higher to continue using edit predictions.": "",
        "detected '{path:?}' as open source license": "",
        "didn't detect '{path:?}' as open source license": "",
        "didn't find a license file to check, assuming closed source": "",
        "User renamed {:?} to {:?}\n": "",
        "User edited {:?}:\n```diff\n{}\n```": "",
        "zed-predict": "",
        "Zed's Edit Predictions": "",
        "edit prediction failed": "",
        "Lorem ipsum dolor": ""
    }
}