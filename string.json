{
  "zed/crates/activity_indicator/src/activity_indicator.rs": {
    "Language server error: {}\n\n{}": "",
    ": ": "",
    " + {} more": "",
    "Downloading {}...": "",
    ", ": "",
    "Checking for updates to {}...": "",
    "Failed to run {}. Click to show error.": "",
    "Formatting failed: {}. Click to see logs.": "",
    "Checking for Zed updates…": "",
    "Downloading Zed update…": "",
    "Installing Zed update…": "",
    "Click to restart and update Zed": "",
    "Auto update failed": "",
    "Updating {extension_id} extension…": ""
  },
  "zed/crates/anthropic/src/anthropic.rs": {
    "claude-3-7-sonnet": "",
    "claude-3-7-sonnet-latest": "",
    "invalid model id": "",
    "claude-3-sonnet-20240229": "",
    "claude-3-haiku-20240307": "",
    "Claude 3.7 Sonnet": "",
    "failed to serialize request": "",
    "failed to construct request body": "",
    "failed to send request to Anthropic": "",
    "failed to read response body": "",
    "failed to deserialize response body": "",
    "failed to parse response body as UTF-8": "",
    "Failed to connect to API: {} {}": "",
    "missing header `{key}`": "",
    "data: ": "",
    "Unexpected success response while expecting an error: '{body_str}'": "",
    "tool not used": "",
    "lowercase": "",
    "type": "",
    "text": "",
    "Option::is_none": "",
    "image": "",
    "ping": "",
    "error": "",
    "an error occurred while interacting with the Anthropic API: {error_type}: {message}": ""
  },
  "zed/crates/assets/src/assets.rs": {
    "could not find asset at path \"{}\"": "",
    "fonts": "",
    ".ttf": "",
    "Assets should never return None": "",
    "fonts/plex-mono/ZedPlexMono-Regular.ttf": ""
  },
  "zed/crates/assistant/src/assistant_configuration.rs": {
    "new-context-{provider_id}": "",
    "Open New Chat": "",
    "No configuration view for {}": "",
    "assistant-configuration-view": "",
    "Configure your Assistant": "",
    "At least one LLM provider must be configured to use the Assistant.": "",
    "Configuration": ""
  },
  "zed/crates/assistant/src/assistant_panel.rs": {
    "history": "",
    "Open History": "",
    "New Chat": "",
    "menu": "",
    "Toggle Assistant Menu": "",
    "Zoom Out": "",
    "Zoom In": "",
    "History": "",
    "Prompt Library": "",
    "Configure": "",
    "no context found with ID: {}": "",
    "No language model provider configured": "",
    "Cancel": "",
    "assistant panel": "",
    "AssistantPanel": "",
    "Assistant Panel": "",
    "no Assistant panel found": ""
  },
  "zed/crates/assistant/src/inline_assistant.rs": {
    "editor was dropped": "",
    "cancel": "",
    "Cancel Assist": "",
    "start": "",
    "Transform": "",
    "stop": "",
    "Interrupt Transformation": "",
    "Changes won't be discarded": "",
    "restart": "",
    "Regenerate Transformation": "",
    "Current change will be discarded": "",
    "confirm": "",
    "Confirm Assist": "",
    "PromptEditor": "",
    "context": "",
    "Using {}": "",
    "No model selected": "",
    "Change Model": "",
    "rate-limit-error": "",
    "error": "",
    "Add a prompt…": "",
    " • {keybinding} for context": "",
    "Generate": "",
    "{action}…{context_keybinding} • ↓↑ for history": "",
    "assist not found": "",
    "inline assist": "",
    "previous": "",
    "Previous Alternative": "",
    "next": "",
    "Next Alternative": "",
    "token_count": "",
    "Tokens Used ({} from the Assistant Panel)": "",
    "Click to open the Assistant Panel": "",
    "Tokens used": "",
    "Out of Tokens": "",
    "Try Zed Pro for higher limits, a wider range of models, and more.": "",
    "dont-show-again": "",
    "Don't show again": "",
    "dismiss": "",
    "Dismiss": "",
    "more-info": "",
    "More Info": "",
    "dismissed-rate-limit-notice": "",
    "1": "",
    "Inline assistant error: {}": "",
    "no user prompt": "",
    "no active model": "",
    "delete": "",
    "invalid transformation range": "",
    "Failed to generate content prompt: {}": "",
    "assistant": "",
    "Fix with Assistant": "",
    "editor was released": "",
    "invalid range": "",
    "assistant panel was released": "",
    "Fix Diagnostics": ""
  },
  "zed/crates/assistant/src/terminal_inline_assistant.rs": {
    "invalid assist": "",
    "SHELL": "",
    "Terminal inline assistant error: {}": "",
    "cancel": "",
    "Cancel Assist": "",
    "start": "",
    "Generate": "",
    "stop": "",
    "Interrupt Generation": "",
    "Changes won't be discarded": "",
    "restart": "",
    "Restart Generation": "",
    "Changes will be discarded": "",
    "accept": "",
    "Accept Generated Command": "",
    "confirm": "",
    "Execute Generated Command": "",
    "change-model": "",
    "Using {}": "",
    "No model selected": "",
    "Change Model": "",
    "error": "",
    " • {keybinding} for context": "",
    "Generate…{context_keybinding} • ↓↑ for history": "",
    "token_count": "",
    "Tokens Used by Inline Assistant": "",
    "Click to Open Assistant Panel": "",
    "\\x03": ""
  },
  "zed/crates/assistant_context_editor/src/context_editor.rs": {
    "New Chat": "",
    "Press": "",
    "esc": "",
    "to cancel": "",
    "You": "",
    "Assistant": "",
    "pulsating-label": "",
    "System": "",
    "role": "",
    "Toggle message role": "",
    "Available roles: You (User), Assistant, System": "",
    "message_header": "",
    "cached": "",
    "Context Cached": "",
    "Large messages cached to optimize performance": "",
    "show-error": "",
    "Error": "",
    "View Details": "",
    "Canceled": "",
    "old_blocks should contain a message_id we've just removed.": "",
    "{} copied to clipboard.": "",
    "Code block": "",
    "Selection": "",
    "Generating…": "",
    "Zed AI is here! Get started by signing in →": "",
    "Sign in": "",
    "No LLM provider selected.": "",
    "LLM provider is not configured.": "",
    "LLM provider requires accepting the Terms of Service.": "",
    "open-configuration": "",
    "Configure Providers": "",
    "Token limit reached": "",
    "Token limit is close to exhaustion": "",
    "Chat": "",
    "Send": "",
    "edit_button": "",
    "Suggest Edits": "",
    "trigger": "",
    "Add Context": "",
    "Type / to insert via keyboard": "",
    "No model selected": "",
    "Change Model": "",
    "Suggest Edits needs a file to edit": "",
    "To include files, type /file or /tab in your prompt.": "",
    "Dismiss": "",
    "Free tier exceeded. Subscribe and add payment to continue using Zed LLMs. You'll be billed at cost for tokens used.": "",
    "Free Usage Exceeded": "",
    "subscribe": "",
    "Subscribe": "",
    "You have reached your maximum monthly spend. Increase your spend limit to continue using Zed LLMs.": "",
    "Max Monthly Spend Reached": "",
    "Update Monthly Spend Limit": "",
    "Error interacting with language model": "",
    "fenced_code_block": "",
    "code_fence_content": "",
    "slash-command-output-fold-indicator": "",
    "quote-selection-indicator": "",
    "slash-command-gutter-decoration": "",
    "crates-being-indexed": "",
    "Indexing {package}…": "",
    "latest-error": "",
    "Failed to index: {latest_error}": "",
    "ContextEditor": "",
    "or": "",
    "Token Limit Reached": "",
    "Token Limit is Close to Exhaustion": "",
    "Regenerate Title": "",
    "Files to scan: {}": "",
    "error: {message}": "",
    "markdown": "",
    "unexpected result on row {:?}": ""
  },
  "zed/crates/assistant_slash_commands/src/diagnostics_command.rs": {
    "Insert diagnostics": "",
    "workspace was dropped": "",
    "No diagnostics found": "",
    "diagnostics: {}": "",
    "Diagnostics": "",
    " {} errors": "",
    ",": "",
    " {} warnings": "",
    "warning": "",
    "error": ""
  },
  "zed/crates/assistant_slash_commands/src/terminal_command.rs": {
    "terminal": "",
    "Insert terminal output": "",
    "workspace was dropped": "",
    "no active terminal": "",
    "Terminal output:\n": "",
    "Terminal": ""
  },
  "zed/crates/assistant_tools/src/now_tool.rs": {
    "now": "",
    "Returns the current datetime in RFC 3339 format. Only use this tool when the user specifically asks for it or the current task would benefit from knowing the current datetime.": "",
    "The current datetime is {now}.": ""
  },
  "zed/crates/assistant2/src/active_thread.rs": {
    "```lua\n{lua_script}\n```": "",
    "EditMessageEditor": "",
    "message-container": "",
    "You": "",
    "cancel-edit-message": "",
    "Cancel": "",
    "confirm-edit-message": "",
    "Regenerate": "",
    "edit-message": "",
    "Edit": "",
    "tool-use-disclosure": "",
    "Pending": "",
    "Running": "",
    "Finished": "",
    "Error": "",
    "Input:": "",
    "Result:": "",
    "Error:": "",
    "Failed to render script input to Markdown": ""
  },
  "zed/crates/assistant2/src/assistant_model_selector.rs": {
    "No model selected": "",
    "active-model": "",
    "Change Model": ""
  },
  "zed/crates/assistant2/src/assistant_panel.rs": {
    "[assistant2-debug] initializing ThreadStore": "",
    "[assistant2-debug] finished initializing ThreadStore": "",
    "[assistant2-debug] initializing ContextStore": "",
    "[assistant2-debug] finished initializing ContextStore": "",
    "[assistant2-debug] AssistantPanel::new": "",
    "AssistantPanel2": "",
    "Assistant Panel": "",
    "Loading Summary…": "",
    "History": "",
    "Assistant Settings": "",
    "assistant-toolbar": "",
    "title": "",
    "assistant-toolbar-new-popover-menu": "",
    "new": "",
    "New…": "",
    "New Thread": "",
    "New Prompt Editor": "",
    "open-history": "",
    "configure-assistant": "",
    "Welcome to the Assistant Panel": "",
    "To start using the assistant, configure at least one LLM provider.": "",
    "open-configuration": "",
    "Configure a Provider": "",
    "Start typing to chat with your codebase": "",
    "Past Interactions": "",
    "view-history": "",
    "View All": "",
    "Free tier exceeded. Subscribe and add payment to continue using Zed LLMs. You'll be billed at cost for tokens used.": "",
    "Free Usage Exceeded": "",
    "error-message": "",
    "subscribe": "",
    "Subscribe": "",
    "dismiss": "",
    "Dismiss": "",
    "You have reached your maximum monthly spend. Increase your spend limit to continue using Zed LLMs.": "",
    "Max Monthly Spend Reached": "",
    "Update Monthly Spend Limit": "",
    "Error interacting with language model": "",
    "prompt_editor": "",
    "Assistant panel not found": "",
    "opening remote context not implemented": ""
  },
  "zed/crates/assistant2/src/buffer_codegen.rs": {
    "no active model": "",
    "delete": "",
    "invalid transformation range": "",
    "Failed to generate content prompt: {}": "",
    "failed to strip invalid spans, chunk size: {}": ""
  },
  "zed/crates/assistant2/src/context_store.rs": {
    "failed to read project": "",
    "Buffer has no path.": "",
    "no worktree found for {worktree_id:?}": "",
    "No text files found in {}": "",
    "Buffer that had a path unexpectedly no longer has a path.": "",
    "to_fenced_codeblock calculated capacity of {}, but length was {}": ""
  },
  "zed/crates/assistant2/src/context_strip.rs": {
    "Add Context": "",
    "Remove All Context": ""
  },
  "zed/crates/assistant2/src/context.rs": {
    "File": "",
    "Folder": "",
    "Fetch": "",
    "Thread": "",
    "New thread": "",
    "The following files are available:\n": "",
    "The following directories are available:\n": "",
    "The following fetched results are available:\n": "",
    "The following previous conversation threads are available:\n": "",
    "attach_context_message calculated capacity of {}, but length was {}": ""
  },
  "zed/crates/assistant2/src/inline_assistant.rs": {
    "assistant": "",
    "No language model provider configured": "",
    "Configure": "",
    "Cancel": "",
    "editor was dropped": "",
    "Inline assistant error: {}": "",
    "assistant2": "",
    "Fix with Assistant": "",
    "editor was released": "",
    "invalid range": "",
    "Fix Diagnostics": ""
  },
  "zed/crates/assistant2/src/inline_prompt_editor.rs": {
    "error": "",
    "Add a prompt…": "",
    "Generate": "",
    "Transform": "",
    "{keybinding} to chat ― ": "",
    "{action}… ({assistant_panel_keybinding}↓↑ for history)": "",
    "inline assist": "",
    "start": "",
    "stop": "",
    "Changes won't be discarded": "",
    "restart": "",
    "Changes will be discarded": "",
    "accept": "",
    "confirm": "",
    "Execute Generated Command": "",
    "cancel": "",
    "Close Assistant": "",
    "previous": "",
    "Previous Alternative": "",
    "next": "",
    "Next Alternative": "",
    "Out of Tokens": "",
    "Try Zed Pro for higher limits, a wider range of models, and more.": "",
    "dont-show-again": "",
    "Don't show again": "",
    "dismiss": "",
    "Dismiss": "",
    "more-info": "",
    "More Info": "",
    "InlineAssistEditor": "",
    "dismissed-rate-limit-notice": "",
    "1": "",
    "Interrupt Generation": "",
    "Interrupt Transform": "",
    "Restart Generation": "",
    "Restart Transform": "",
    "Accept Generation": "",
    "Accept Transform": ""
  },
  "zed/crates/assistant2/src/message_editor.rs": {
    "Ask anything, @ to mention, ↑ to select": "",
    "Generating…": "",
    "cancel-generation": "",
    "Cancel": "",
    "edits-disclosure": "",
    "Edits": "",
    "•": "",
    "file": "",
    "files": "",
    "MessageEditor": "",
    "Tools": "",
    "Submit": "",
    "Type a message to submit": "",
    "Cancel to submit a new message": "",
    "Select a model to continue": ""
  },
  "zed/crates/assistant2/src/terminal_inline_assistant.rs": {
    "invalid assist": "",
    "SHELL": "",
    "Terminal inline assistant error: {}": ""
  },
  "zed/crates/assistant2/src/thread_history.rs": {
    "thread-history-container": "",
    "ThreadHistory": "",
    "You don't have any past threads yet.": "",
    "thread-history": "",
    "Thread": "",
    "delete": "",
    "Delete Thread": "",
    "Prompt Editor": "",
    "Delete Prompt Editor": ""
  },
  "zed/crates/assistant2/src/thread_store.rs": {
    "no thread found with ID: {id:?}": "",
    "registering context server tool: {:?}": "",
    "threads/threads-db.1.mdb": "",
    "threads": ""
  },
  "zed/crates/assistant2/src/thread.rs": {
    "New Thread": "",
    "User:": "",
    "Assistant:": "",
    "System:": "",
    "Generate a concise 3-7 word title for this conversation, omitting punctuation. Go straight to the title, without any preamble and prefix like `Here's a concise suggestion:...` or `Title:`": "",
    "Script shouldn't still be running": "",
    "Here are the tool results.": ""
  },
  "zed/crates/assistant2/src/context_picker/directory_context_picker.rs": {
    "Search folders…": "",
    "Added": ""
  },
  "zed/crates/assistant2/src/context_picker/fetch_context_picker.rs": {
    "error reading response body": "",
    "status error {}, response: {text:?}": "",
    "missing Content-Type header": "",
    "invalid Content-Type header": "",
    "Enter the URL that you would like to fetch": "",
    "Enter a URL…": "",
    "Added": ""
  },
  "zed/crates/assistant2/src/context_picker/file_context_picker.rs": {
    "Search files…": "",
    "Added": "",
    "Included": "",
    "in {dir_name}": ""
  },
  "zed/crates/assistant2/src/context_picker/thread_context_picker.rs": {
    "Search threads…": "",
    "Added": ""
  },
  "zed/crates/assistant2/src/ui/context_pill.rs": {
    "remove": "",
    "Remove Context": "",
    "Active Tab": "",
    "Active": "",
    "Suggested Context": "",
    "Click to add it": ""
  },
  "zed/crates/audio/src/assets.rs": {
    "No such asset available": ""
  },
  "zed/crates/auto_update/src/auto_update.rs": {
    "Successfully unmounted the disk image": "",
    "Failed to unmount disk image: {:?}": "",
    "Error while trying to unmount disk image: {:?}": "",
    "Zed was installed via a package manager.": "",
    "Ok": "",
    "Could not check for updates": "",
    "Auto-updates disabled for non-bundled app.": "",
    "auto-update failed: error:{:?}": "",
    "auto-update not initialized": "",
    "downloading zed-remote-server {os} {arch} version {}": "",
    "stable": "",
    "failed to fetch release: {:?}": "",
    "error deserializing release {:?}": "",
    "not supported: {:?}": "",
    "rsync": "",
    "Aborting. Could not find rsync which is required for auto-updates.": "",
    "failed to download remote server release: {:?}": "",
    "remote": "",
    "local": "",
    "downloaded update. path:{:?}": "",
    "HOME": "",
    "no HOME env var set": "",
    "failed to create directory into which to extract update": "",
    "failed to extract {:?} to {:?}: {:?}": "",
    "failed to copy Zed update from {:?} to {:?}: {:?}": "",
    "invalid running app path": "",
    "attach": "",
    "failed to mount: {:?}": "",
    "failed to copy app: {:?}": ""
  },
  "zed/crates/breadcrumbs/src/breadcrumbs.rs": {
    "toggle outline view": "",
    "Show Symbol Outline": ""
  },
  "zed/crates/call/src/cross_platform/mod.rs": {
    "user was already invited": "",
    "Participant Invited": "",
    "invite failed: {:?}": "",
    "no active call": "",
    "cannot join while on another call": "",
    "no incoming call": "",
    "Incoming Call Accepted": "",
    "Incoming Call Declined": "",
    "Channel Joined": "",
    "Call Ended": "",
    "Project Shared": "",
    "Project Unshared": ""
  },
  "zed/crates/call/src/cross_platform/participant.rs": {
    "participant location was not provided": ""
  },
  "zed/crates/call/src/cross_platform/room.rs": {
    "gnu": "",
    "invalid room": "",
    "room creation failed": "",
    "room is offline": "",
    "leaving room": "",
    "detected client disconnection": "",
    "room was dropped": "",
    "client reconnected, attempting to rejoin room": "",
    "waiting for client status change, remaining attempts {}": "",
    "successfully reconnected to room": "",
    "room reconnection timeout expired": "",
    "reconnection failed, leaving room": "",
    "can't reconnect to room: client failed to re-establish connection": "",
    "client {:?}. room update: {:?}": "",
    "Follower message {follower:?} missing some state": "",
    "room is empty, leaving": "",
    "client {:?}. livekit event: {:?}": "",
    "{:?} subscribed to track by unknown participant {user_id}": "",
    "{:?}, unsubscribed from track by unknown participant {user_id}": "",
    "unpublished track {}": "",
    "published track {:?}": "",
    "disconnected from room: {reason:?}": "",
    "MinGW is not supported yet": "",
    "live-kit was not initialized": "",
    "failed to publish track: {error}": "",
    "screen was already shared": "",
    "no display found": "",
    "error publishing screen track {error:?}": "",
    "screen was not shared": ""
  },
  "zed/crates/call/src/macos/mod.rs": {
    "user was already invited": "",
    "Participant Invited": "",
    "invite failed: {:?}": "",
    "no active call": "",
    "cannot join while on another call": "",
    "no incoming call": "",
    "Incoming Call Accepted": "",
    "Incoming Call Declined": "",
    "Channel Joined": "",
    "Call Ended": "",
    "Project Shared": "",
    "Project Unshared": ""
  },
  "zed/crates/call/src/macos/participant.rs": {
    "participant location was not provided": ""
  },
  "zed/crates/call/src/macos/room.rs": {
    "invalid room": "",
    "room creation failed": "",
    "room is offline": "",
    "leaving room": "",
    "detected client disconnection": "",
    "room was dropped": "",
    "client reconnected, attempting to rejoin room": "",
    "waiting for client status change, remaining attempts {}": "",
    "successfully reconnected to room": "",
    "room reconnection timeout expired": "",
    "reconnection failed, leaving room": "",
    "can't reconnect to room: client failed to re-establish connection": "",
    "Follower message {follower:?} missing some state": "",
    "room is empty, leaving": "",
    "subscribed to track by unknown participant": "",
    "unsubscribed from track by unknown participant": "",
    "unpublished audio track {}": "",
    "unpublished video track {}": "",
    "published audio track {}": "",
    "published video track {}": "",
    "live-kit was not initialized": "",
    "screen was already shared": "",
    "no display found": "",
    "screen was not shared": ""
  },
  "zed/crates/channel/src/channel_buffer.rs": {
    "channel buffer {} disconnected": ""
  },
  "zed/crates/channel/src/channel_chat.rs": {
    "message body can't be empty": "",
    "current_user is not present": "",
    "invalid message": "",
    "empty message": "",
    "nonce is required": ""
  },
  "zed/crates/channel/src/channel_store.rs": {
    "{}/channel/{}-{}": "",
    "/notes": "",
    "#{}": "",
    "channel store dropped": "",
    "no channel for id: {}": "",
    "missing channel in response": "",
    "invite request already in progress": "",
    "member request already in progress": ""
  },
  "zed/crates/cli/src/main.rs": {
    "zed": "",
    "The Zed CLI binary.\nThis CLI is a separate binary that invokes Zed.\n\nExamples:\n    `zed`\n          Simply opens Zed\n    `zed --foreground`\n          Runs in foreground (shows all logs)\n    `zed path-to-your-project`\n          Open your project in Zed\n    `zed -n path-to-file `\n          Open file/folder in a new window": "",
    "To read from stdin, append '-', e.g. 'ps axf | zed -'": "",
    "new": "",
    "add": "",
    "no-bundled-uninstall": "",
    "retrieving current directory": "",
    "parsing as path with position {argument_str}": "",
    "Bundle detection": "",
    "sh": "",
    "ZED_CHANNEL": "",
    "Failed to execute uninstall script": "",
    "Handshake before Zed spawn": "",
    "Dev servers were removed in v0.157.x please upgrade to SSH remoting: https://zed.dev/docs/remote-development": "",
    "Handshake after Zed spawn": "",
    "no parent path for cli": "",
    "could not find any of: {}": "",
    ", ": "",
    "stable": "",
    "failed to setsid: {}": "",
    "failed to close_fd: {}": "",
    "failed to exec {:?}: {}": "",
    "failed restart cli on host: {:?}": "",
    "FLATPAK_ID": "",
    "Please use flatpak to update zed": "",
    "flatpak": "",
    "info": "",
    "files": "",
    "Unable to create instance sync event": "",
    "cannot find app bundle containing {:?}": "",
    "Args bundle path {bundle_path:?} canonicalization": "",
    "bundle autodiscovery": "",
    "Contents/Info.plist": "",
    "Reading *.app bundle plist file at {plist_path:?}": "",
    "Bundle path {bundle_path:?} has no *.app extension, attempting to locate a dev build": "",
    "Bundle path {bundle_path:?} has no parent": "",
    "WebRTC.framework/Resources/Info.plist": "",
    "Reading dev bundle plist file at {plist_path:?}": "",
    "invalid app path {app_path:?}": "",
    "cannot start app bundle {}": "",
    "Executable {executable:?} path has no parent": "",
    "Log file creation in {executable_parent:?}": "",
    "Cloning descriptor for file {subprocess_stdout_file:?}": "",
    "Spawning {command:?}": "",
    "Contents/MacOS/zed": "",
    "id of app \"{}\"": "",
    "osascript": "",
    "-e": "",
    "Could not determine app id for {}": "",
    "kMDItemCFBundleIdentifier == '{app_name}'": "",
    "mdfind": "",
    "Could not determine app path for {}": "",
    "{app_path}/Contents/MacOS/cli": ""
  },
  "zed/crates/client/src/client.rs": {
    "ZED_SERVER_URL": "",
    "ZED_RPC_URL": "",
    "ZED_IMPERSONATE": "",
    "ZED_ADMIN_API_TOKEN": "",
    "ZED_APP_PATH": "",
    "ZED_ALWAYS_ACTIVE": "",
    "upgrade required": "",
    "unauthorized": "",
    "{0}": "",
    "{} {}": "",
    "handling queued rpc message. client_id:{}, sender_id:{:?}, type:{}": "",
    "unhandled message {}": "",
    "telemetry": "",
    "set status on client {}: {:?}": "",
    "failed to connect {}": "",
    "already subscribed to entity": "",
    "{}:{} registered handler for the same message {} twice": "",
    "authentication canceled": "",
    "timed out waiting on hello message from server": "",
    "timed out trying to establish connection": "",
    "add connection to peer": "",
    "waiting for server hello": "",
    "no hello message received": "",
    "got server hello": "",
    "invalid hello message received: {:?}": "",
    "invalid peer id": "",
    "set status to connected (connection id: {:?}, peer id: {:?})": "",
    "connection error: {:?}": "",
    "invalid rpc url": "",
    "/rpc": "",
    "?": "",
    "Location": "",
    "missing location header in /rpc response": "",
    "unexpected /rpc response status {}": "",
    "https": "",
    "http": "",
    "invalid rpc url: {}": "",
    "missing host in rpc url": "",
    "connected to rpc endpoint {}": "",
    "wss": "",
    "ws": "",
    "Authorization": "",
    "x-zed-protocol-version": "",
    "x-zed-app-version": "",
    "x-zed-release-channel": "",
    "unknown": "",
    "x-zed-system-id": "",
    "x-zed-metrics-id": "",
    "failed to generate keypair for auth": "",
    "failed to serialize public key for auth": "",
    "authenticate as admin {login}, {token}": "",
    "127.0.0.1:0": "",
    "failed to find open port": "",
    "/native_app_signin?native_app_port={}&native_app_public_key={}": "",
    "impersonating user @{}": "",
    "&impersonate={}": "",
    "http://example.com{}": "",
    "failed to parse login notification url": "",
    "access_token": "",
    "user_id": "",
    "/native_app_signin_succeeded": "",
    "failed to respond to login http request": "",
    "missing user_id parameter": "",
    "missing access_token parameter": "",
    "didn't receive login redirect": "",
    "failed to decrypt access token": "",
    "https://api.github.com/users/{login}": "",
    "GITHUB_TOKEN": "",
    "Bearer {}": "",
    "error fetching GitHub user": "",
    "error reading GitHub user": "",
    "status error {}, response: {text:?}": "",
    "Error deserializing: {:?}": "",
    "GitHub API response text: {:?}": "",
    "error deserializing GitHub user": "",
    "github_login": "",
    "github_user_id": "",
    "github_user_created_at": "",
    "/user": "",
    "{}={}": "",
    "&": "",
    "token {api_token}": "",
    "admin user request failed {} - {}": "",
    "ADMIN_TOKEN:": "",
    "not connected": "",
    "rpc send. client_id:{}, name:{}": "",
    "rpc request start. client_id:{}. name:{}": "",
    "rpc request finish. client_id:{}. name:{}": "",
    "rpc message received. client_id:{}, sender_id:{:?}, type:{}": "",
    "rpc message handled. client_id:{}, sender_id:{:?}, type:{}": "",
    "error handling message. client_id:{}, sender_id:{:?}, type:{}, error:{:?}": "",
    "rpc respond. client_id:{}, name:{}": "",
    "zed": "",
    "://": "",
    "token": ""
  },
  "zed/crates/client/src/socks.rs": {
    "error connecting to socks {}": "",
    "socks4": "",
    "socks": ""
  },
  "zed/crates/client/src/telemetry.rs": {
    "ZED_CLIENT_CHECKSUM_SEED": "",
    "macOS": "",
    "Linux {}": "",
    "Windows": "",
    "/etc/os-release": "",
    "/usr/lib/os-release": "",
    "Failed to load /etc/os-release, /usr/lib/os-release": "",
    "unknown": "",
    "ID=": "",
    "').to_string();\n            }\n            if line.starts_with(": "",
    ") {\n                version = line\n                    .trim_start_matches(": "",
    ")\n                    .trim_matches('": "",
    "{} {}": "",
    "pnpm-lock.yaml": "",
    "pnpm": "",
    "yarn.lock": "",
    "yarn": "",
    "package.json": "",
    "node": "",
    "App Closed": "",
    "telemetry.log": "",
    "Assistant Responded": "",
    "Assistant Invoked": "",
    "Assistant Response Accepted": "",
    "Assistant Response Rejected": "",
    "Editor Edited": "",
    "Project Opened": "",
    "telemetry": "",
    "{:?}": "",
    "/telemetry/events": "",
    "Content-Type": "",
    "application/json": "",
    "x-zed-checksum": "",
    "Failed to send events: HTTP {:?}": "",
    "{:02x}": "",
    "system_id": "",
    "installation_id": "",
    "session_id": "",
    "test_key": "",
    "test_value": "",
    "test": ""
  },
  "zed/crates/client/src/test.rs": {
    "server dropped": "",
    "server is forbidding connections": "",
    "not connected": "",
    "other half hung up": "",
    "failed to build accepted_tos_at": "",
    "the-metrics-id": "",
    "fake server received unexpected message type: {:?}": ""
  },
  "zed/crates/client/src/user.rs": {
    "ZED_IGNORE_ACCEPTED_TOS": "",
    "can't upgrade user store handle": "",
    "can't upgrade client reference": "",
    "user {} not found": "",
    "server responded with no users": "",
    "no current user": "",
    "error accepting tos": "",
    "client not found": "",
    "error loading users": "",
    "invalid peer id": ""
  },
  "zed/crates/clock/src/clock.rs": {
    "Lamport {{{}: {}}}": "",
    "Global {{": "",
    ", ": "",
    "<branch>: {}": "",
    "{}: {}": "",
    "}}": ""
  },
  "zed/crates/command_palette_hooks/src/command_palette_hooks.rs": {
    "::": "",
    "malformed action name": ""
  },
  "zed/crates/collab/src/api/billing.rs": {
    "/billing/preferences": "",
    "/billing/subscriptions": "",
    "/billing/subscriptions/manage": "",
    "/billing/monthly_spend": "",
    "user not found": "",
    "Spend Limit Updated": "",
    "user_id": "",
    "max_monthly_llm_usage_spending_in_cents": "",
    "Zed LLM Usage": "",
    "failed to retrieve Stripe client": "",
    "not supported": "",
    "failed to retrieve Stripe billing object": "",
    "failed to retrieve LLM database": "",
    "user already has an active subscription": "",
    "user has overdue invoices": "",
    "failed to parse customer ID": "",
    "claude-3-5-sonnet": "",
    "{}/account?checkout_complete=1": "",
    "billing customer not found": "",
    "subscription not found": "",
    "failed to parse subscription ID": "",
    "{}/account": "",
    "').to_string()\n    }\n\n    let event_types = [\n        EventType::CustomerCreated,\n        EventType::CustomerUpdated,\n        EventType::CustomerSubscriptionCreated,\n        EventType::CustomerSubscriptionUpdated,\n        EventType::CustomerSubscriptionPaused,\n        EventType::CustomerSubscriptionResumed,\n        EventType::CustomerSubscriptionDeleted,\n    ]\n    .into_iter()\n    .map(event_type_to_string)\n    .collect::<Vec<_>>();\n\n    let mut pages_of_already_processed_events = 0;\n    let mut unprocessed_events = Vec::new();\n\n    log::info!(\n        ": "",
    ",\n        event_types.join(": "",
    ")\n    );\n    let mut params = ListEvents::new();\n    params.types = Some(event_types.clone());\n    params.limit = Some(EVENTS_LIMIT_PER_PAGE);\n\n    let mut event_pages = stripe::Event::list(&stripe_client, &params)\n        .await?\n        .paginate(params);\n\n    loop {\n        let processed_event_ids = {\n            let event_ids = event_pages\n                .page\n                .data\n                .iter()\n                .map(|event| event.id.as_str())\n                .collect::<Vec<_>>();\n            app.db\n                .get_processed_stripe_events_by_event_ids(&event_ids)\n                .await?\n                .into_iter()\n                .map(|event| event.stripe_event_id)\n                .collect::<Vec<_>>()\n        };\n\n        let mut processed_events_in_page = 0;\n        let events_in_page = event_pages.page.data.len();\n        for event in &event_pages.page.data {\n            if processed_event_ids.contains(&event.id.to_string()) {\n                processed_events_in_page += 1;\n                log::debug!(": "",
    ", event.id);\n            } else {\n                unprocessed_events.push(event.clone());\n            }\n        }\n\n        if processed_events_in_page == events_in_page {\n            pages_of_already_processed_events += 1;\n        }\n\n        if event_pages.page.has_more {\n            if pages_of_already_processed_events >= NUMBER_OF_ALREADY_PROCESSED_PAGES_BEFORE_WE_STOP\n            {\n                log::info!(": "",
    ");\n                break;\n            } else {\n                log::info!(": "",
    ");\n                event_pages = event_pages.next(&stripe_client).await?;\n            }\n        } else {\n            break;\n        }\n    }\n\n    log::info!(": "",
    ", unprocessed_events.len());\n\n    // Sort all of the unprocessed events in ascending order, so we can handle them in the order they occurred.\n    unprocessed_events.sort_by(|a, b| a.created.cmp(&b.created).then_with(|| a.id.cmp(&b.id)));\n\n    for event in unprocessed_events {\n        let event_id = event.id.clone();\n        let processed_event_params = CreateProcessedStripeEventParams {\n            stripe_event_id: event.id.to_string(),\n            stripe_event_type: event_type_to_string(event.type_),\n            stripe_event_created_timestamp: event.created,\n        };\n\n        // If the event has happened too far in the past, we don't want to\n        // process it and risk overwriting other more-recent updates.\n        //\n        // 1 day was chosen arbitrarily. This could be made longer or shorter.\n        let one_day = Duration::from_secs(24 * 60 * 60);\n        let a_day_ago = Utc::now() - one_day;\n        if a_day_ago.timestamp() > event.created {\n            log::info!(\n                ": "",
    ",\n                event_id\n            );\n            app.db\n                .create_processed_stripe_event(&processed_event_params)\n                .await?;\n\n            return Ok(());\n        }\n\n        let process_result = match event.type_ {\n            EventType::CustomerCreated | EventType::CustomerUpdated => {\n                handle_customer_event(app, stripe_client, event).await\n            }\n            EventType::CustomerSubscriptionCreated\n            | EventType::CustomerSubscriptionUpdated\n            | EventType::CustomerSubscriptionPaused\n            | EventType::CustomerSubscriptionResumed\n            | EventType::CustomerSubscriptionDeleted => {\n                handle_customer_subscription_event(app, rpc_server, stripe_client, event).await\n            }\n            _ => Ok(()),\n        };\n\n        if let Some(()) = process_result\n            .with_context(|| format!(": "",
    "))\n            .log_err()\n        {\n            app.db\n                .create_processed_stripe_event(&processed_event_params)\n                .await?;\n        }\n    }\n\n    Ok(())\n}\n\nasync fn handle_customer_event(\n    app: &Arc<AppState>,\n    _stripe_client: &stripe::Client,\n    event: stripe::Event,\n) -> anyhow::Result<()> {\n    let EventObject::Customer(customer) = event.data.object else {\n        bail!(": "",
    ", event.id);\n    };\n\n    log::info!(": "",
    ", event.type_, event.id);\n\n    let Some(email) = customer.email else {\n        log::info!(": "",
    ");\n        return Ok(());\n    };\n\n    let Some(user) = app.db.get_user_by_email(&email).await? else {\n        log::info!(": "",
    ");\n        return Ok(());\n    };\n\n    if let Some(existing_customer) = app\n        .db\n        .get_billing_customer_by_stripe_customer_id(&customer.id)\n        .await?\n    {\n        app.db\n            .update_billing_customer(\n                existing_customer.id,\n                &UpdateBillingCustomerParams {\n                    // For now we just leave the information as-is, as it is not\n                    // likely to change.\n                    ..Default::default()\n                },\n            )\n            .await?;\n    } else {\n        app.db\n            .create_billing_customer(&CreateBillingCustomerParams {\n                user_id: user.id,\n                stripe_customer_id: customer.id.to_string(),\n            })\n            .await?;\n    }\n\n    Ok(())\n}\n\nasync fn handle_customer_subscription_event(\n    app: &Arc<AppState>,\n    rpc_server: &Arc<Server>,\n    stripe_client: &stripe::Client,\n    event: stripe::Event,\n) -> anyhow::Result<()> {\n    let EventObject::Subscription(subscription) = event.data.object else {\n        bail!(": "",
    ", event.type_, event.id);\n\n    let billing_customer =\n        find_or_create_billing_customer(app, stripe_client, subscription.customer)\n            .await?\n            .ok_or_else(|| anyhow!(": "",
    "))?;\n\n    let was_canceled_due_to_payment_failure = subscription.status == SubscriptionStatus::Canceled\n        && subscription\n            .cancellation_details\n            .as_ref()\n            .and_then(|details| details.reason)\n            .map_or(false, |reason| {\n                reason == CancellationDetailsReason::PaymentFailed\n            });\n\n    if was_canceled_due_to_payment_failure {\n        app.db\n            .update_billing_customer(\n                billing_customer.id,\n                &UpdateBillingCustomerParams {\n                    has_overdue_invoices: ActiveValue::set(true),\n                    ..Default::default()\n                },\n            )\n            .await?;\n    }\n\n    if let Some(existing_subscription) = app\n        .db\n        .get_billing_subscription_by_stripe_subscription_id(&subscription.id)\n        .await?\n    {\n        app.db\n            .update_billing_subscription(\n                existing_subscription.id,\n                &UpdateBillingSubscriptionParams {\n                    billing_customer_id: ActiveValue::set(billing_customer.id),\n                    stripe_subscription_id: ActiveValue::set(subscription.id.to_string()),\n                    stripe_subscription_status: ActiveValue::set(subscription.status.into()),\n                    stripe_cancel_at: ActiveValue::set(\n                        subscription\n                            .cancel_at\n                            .and_then(|cancel_at| DateTime::from_timestamp(cancel_at, 0))\n                            .map(|time| time.naive_utc()),\n                    ),\n                    stripe_cancellation_reason: ActiveValue::set(\n                        subscription\n                            .cancellation_details\n                            .and_then(|details| details.reason)\n                            .map(|reason| reason.into()),\n                    ),\n                },\n            )\n            .await?;\n    } else {\n        // If the user already has an active billing subscription, ignore the\n        // event and return an `Ok` to signal that it was processed\n        // successfully.\n        //\n        // There is the possibility that this could cause us to not create a\n        // subscription in the following scenario:\n        //\n        //   1. User has an active subscription A\n        //   2. User cancels subscription A\n        //   3. User creates a new subscription B\n        //   4. We process the new subscription B before the cancellation of subscription A\n        //   5. User ends up with no subscriptions\n        //\n        // In theory this situation shouldn't arise as we try to process the events in the order they occur.\n        if app\n            .db\n            .has_active_billing_subscription(billing_customer.user_id)\n            .await?\n        {\n            log::info!(\n                ": "",
    ",\n                user_id = billing_customer.user_id,\n                subscription_id = subscription.id\n            );\n            return Ok(());\n        }\n\n        app.db\n            .create_billing_subscription(&CreateBillingSubscriptionParams {\n                billing_customer_id: billing_customer.id,\n                stripe_subscription_id: subscription.id.to_string(),\n                stripe_subscription_status: subscription.status.into(),\n                stripe_cancellation_reason: subscription\n                    .cancellation_details\n                    .and_then(|details| details.reason)\n                    .map(|reason| reason.into()),\n            })\n            .await?;\n    }\n\n    // When the user's subscription changes, we want to refresh their LLM tokens\n    // to either grant/revoke access.\n    rpc_server\n        .refresh_llm_tokens_for_user(billing_customer.user_id)\n        .await;\n\n    Ok(())\n}\n\n#[derive(Debug, Deserialize)]\nstruct GetMonthlySpendParams {\n    github_user_id: i32,\n}\n\n#[derive(Debug, Serialize)]\nstruct GetMonthlySpendResponse {\n    monthly_free_tier_spend_in_cents: u32,\n    monthly_free_tier_allowance_in_cents: u32,\n    monthly_spend_in_cents: u32,\n}\n\nasync fn get_monthly_spend(\n    Extension(app): Extension<Arc<AppState>>,\n    Query(params): Query<GetMonthlySpendParams>,\n) -> Result<Json<GetMonthlySpendResponse>> {\n    let user = app\n        .db\n        .get_user_by_github_user_id(params.github_user_id)\n        .await?\n        .ok_or_else(|| anyhow!(": "",
    "))?;\n\n    let Some(llm_db) = app.llm_db.clone() else {\n        return Err(Error::http(\n            StatusCode::NOT_IMPLEMENTED,\n            ": "",
    ".into(),\n        ));\n    };\n\n    let free_tier = user\n        .custom_llm_monthly_allowance_in_cents\n        .map(|allowance| Cents(allowance as u32))\n        .unwrap_or(FREE_TIER_MONTHLY_SPENDING_LIMIT);\n\n    let spending_for_month = llm_db\n        .get_user_spending_for_month(user.id, Utc::now())\n        .await?;\n\n    let free_tier_spend = Cents::min(spending_for_month, free_tier);\n    let monthly_spend = spending_for_month.saturating_sub(free_tier);\n\n    Ok(Json(GetMonthlySpendResponse {\n        monthly_free_tier_spend_in_cents: free_tier_spend.0,\n        monthly_free_tier_allowance_in_cents: free_tier.0,\n        monthly_spend_in_cents: monthly_spend.0,\n    }))\n}\n\nimpl From<SubscriptionStatus> for StripeSubscriptionStatus {\n    fn from(value: SubscriptionStatus) -> Self {\n        match value {\n            SubscriptionStatus::Incomplete => Self::Incomplete,\n            SubscriptionStatus::IncompleteExpired => Self::IncompleteExpired,\n            SubscriptionStatus::Trialing => Self::Trialing,\n            SubscriptionStatus::Active => Self::Active,\n            SubscriptionStatus::PastDue => Self::PastDue,\n            SubscriptionStatus::Canceled => Self::Canceled,\n            SubscriptionStatus::Unpaid => Self::Unpaid,\n            SubscriptionStatus::Paused => Self::Paused,\n        }\n    }\n}\n\nimpl From<CancellationDetailsReason> for StripeCancellationReason {\n    fn from(value: CancellationDetailsReason) -> Self {\n        match value {\n            CancellationDetailsReason::CancellationRequested => Self::CancellationRequested,\n            CancellationDetailsReason::PaymentDisputed => Self::PaymentDisputed,\n            CancellationDetailsReason::PaymentFailed => Self::PaymentFailed,\n        }\n    }\n}\n\n/// Finds or creates a billing customer using the provided customer.\nasync fn find_or_create_billing_customer(\n    app: &Arc<AppState>,\n    stripe_client: &stripe::Client,\n    customer_or_id: Expandable<Customer>,\n) -> anyhow::Result<Option<billing_customer::Model>> {\n    let customer_id = match &customer_or_id {\n        Expandable::Id(id) => id,\n        Expandable::Object(customer) => customer.id.as_ref(),\n    };\n\n    // If we already have a billing customer record associated with the Stripe customer,\n    // there's nothing more we need to do.\n    if let Some(billing_customer) = app\n        .db\n        .get_billing_customer_by_stripe_customer_id(customer_id)\n        .await?\n    {\n        return Ok(Some(billing_customer));\n    }\n\n    // If all we have is a customer ID, resolve it to a full customer record by\n    // hitting the Stripe API.\n    let customer = match customer_or_id {\n        Expandable::Id(id) => Customer::retrieve(stripe_client, &id, &[]).await?,\n        Expandable::Object(customer) => *customer,\n    };\n\n    let Some(email) = customer.email else {\n        return Ok(None);\n    };\n\n    let Some(user) = app.db.get_user_by_email(&email).await? else {\n        return Ok(None);\n    };\n\n    let billing_customer = app\n        .db\n        .create_billing_customer(&CreateBillingCustomerParams {\n            user_id: user.id,\n            stripe_customer_id: customer.id.to_string(),\n        })\n        .await?;\n\n    Ok(Some(billing_customer))\n}\n\nconst SYNC_LLM_USAGE_WITH_STRIPE_INTERVAL: Duration = Duration::from_secs(60);\n\npub fn sync_llm_usage_with_stripe_periodically(app: Arc<AppState>) {\n    let Some(stripe_billing) = app.stripe_billing.clone() else {\n        log::warn!(": "",
    ");\n        return;\n    };\n    let Some(llm_db) = app.llm_db.clone() else {\n        log::warn!(": "",
    ");\n        return;\n    };\n\n    let executor = app.executor.clone();\n    executor.spawn_detached({\n        let executor = executor.clone();\n        async move {\n            loop {\n                sync_with_stripe(&app, &llm_db, &stripe_billing)\n                    .await\n                    .context(": "",
    ")\n                    .trace_err();\n                executor.sleep(SYNC_LLM_USAGE_WITH_STRIPE_INTERVAL).await;\n            }\n        }\n    });\n}\n\nasync fn sync_with_stripe(\n    app: &Arc<AppState>,\n    llm_db: &Arc<LlmDatabase>,\n    stripe_billing: &Arc<StripeBilling>,\n) -> anyhow::Result<()> {\n    let events = llm_db.get_billing_events().await?;\n    let user_ids = events\n        .iter()\n        .map(|(event, _)| event.user_id)\n        .collect::<HashSet<UserId>>();\n    let stripe_subscriptions = app.db.get_active_billing_subscriptions(user_ids).await?;\n\n    for (event, model) in events {\n        let Some((stripe_db_customer, stripe_db_subscription)) =\n            stripe_subscriptions.get(&event.user_id)\n        else {\n            tracing::warn!(\n                user_id = event.user_id.0,\n                ": "",
    "\n            );\n            continue;\n        };\n        let stripe_subscription_id: stripe::SubscriptionId = stripe_db_subscription\n            .stripe_subscription_id\n            .parse()\n            .context(": "",
    ")?;\n        let stripe_customer_id: stripe::CustomerId = stripe_db_customer\n            .stripe_customer_id\n            .parse()\n            .context(": ""
  },
  "zed/crates/collab/src/api/contributors.rs": {
    "/contributors": "",
    "/contributor": "",
    "must be one of `github_user_id` or `github_login`.": "",
    "renovate[bot]": "",
    "2017-06-02T07:04:12Z": "",
    "failed to parse 'created_at' for 'renovate[bot]'": ""
  },
  "zed/crates/collab/src/api/events.rs": {
    "zed-crash-reports": "",
    "/telemetry/events": "",
    "/telemetry/crashes": "",
    "/telemetry/panics": "",
    "/telemetry/hangs": "",
    "x-zed-checksum": "",
    "dev.zed.Zed-Dev": "",
    "Crash uploads from {} are ignored.": "",
    ".ips": "",
    "We've already uploaded this crash": "",
    "Failed to upload crash: {}": "",
    "x-zed-panicked-on": "",
    "x-zed-installation-id": "",
    "Can't parse {}: {}": "",
    "x-zed-panic": "",
    "client": "",
    "crash report": "",
    "*Version:*\n{} ({})": "",
    "https://": "",
    "http://": "",
    "*Incident:*\n<https://{}.{}/{}.ips|{}…>": "",
    "Failed to serialize payload to JSON: {err}": "",
    "Content-Type": "",
    "application/json": "",
    "Failed to send payload to Slack: {err}": "",
    "events not enabled": "",
    "invalid checksum": "",
    ".hang.json": "",
    "can't parse report json: {err}": "",
    "Possible hang detected on main thread:": "",
    "<unknown>": "",
    "\n{}": "",
    "hang report": "",
    "invalid json": "",
    "Linux": "",
    "1.0.0": "",
    "invalid os version": "",
    ".json": "",
    "panic report": "",
    "{}\n   and {} more": "",
    "Panic request": "",
    "*Version:*\n {} ": "",
    "*{} {}:*\n<https://{}.{}/{}.json|{}…>": "",
    "macOS": "",
    "ERROR_SURFACE_LOST_KHR": "",
    "ERROR_INITIALIZATION_FAILED": "",
    "GPU has crashed, and no debug information is available": "",
    "can't parse event json: {err}": "",
    "no events": "",
    "open": "",
    "Editor Opened": "",
    "save": "",
    "Editor Saved": "",
    "Unknown Editor Event: {}": "",
    "Edit Prediction {}": "",
    "Accepted": "",
    "Discarded": "",
    "Edit Prediction Rated": "",
    "unshare project": "",
    "Project Unshared": "",
    "open channel notes": "",
    "Channel Notes Opened": "",
    "share project": "",
    "Project Shared": "",
    "join channel": "",
    "Channel Joined": "",
    "hang up": "",
    "Call Ended": "",
    "accept incoming": "",
    "Incoming Call Accepted": "",
    "invite": "",
    "Participant Invited": "",
    "disable microphone": "",
    "Microphone Disabled": "",
    "enable microphone": "",
    "Microphone Enabled": "",
    "enable screen share": "",
    "Screen Share Enabled": "",
    "disable screen share": "",
    "Screen Share Disabled": "",
    "decline incoming": "",
    "Incoming Call Declined": "",
    "Unknown Call Event: {}": "",
    "Assistant Responded": "",
    "Assistant Invoked": "",
    "Assistant Response Accepted": "",
    "Assistant Response Rejected": "",
    "App Opened": "",
    "first open": "",
    "App First Opened": "",
    "first open for release channel": "",
    "App First Opened For Release Channel": "",
    "close": "",
    "App Closed": "",
    "open project": "",
    "Project Opened": "",
    "open node project": "",
    "project_type": "",
    "node": "",
    "open pnpm project": "",
    "pnpm": "",
    "open yarn project": "",
    "yarn": "",
    "create ssh server": "",
    "SSH Server Created": "",
    "create ssh project": "",
    "SSH Project Created": "",
    "open ssh project": "",
    "SSH Project Opened": "",
    "welcome page: change keymap": "",
    "Welcome Keymap Changed": "",
    "welcome page: change theme": "",
    "Welcome Theme Changed": "",
    "welcome page: close": "",
    "Welcome Page Closed": "",
    "welcome page: edit settings": "",
    "Welcome Settings Edited": "",
    "welcome page: install cli": "",
    "Welcome CLI Installed": "",
    "welcome page: open": "",
    "Welcome Page Opened": "",
    "welcome page: open extensions": "",
    "Welcome Extensions Page Opened": "",
    "welcome page: sign in to copilot": "",
    "Welcome Copilot Signed In": "",
    "welcome page: toggle diagnostic telemetry": "",
    "Welcome Diagnostic Telemetry Toggled": "",
    "welcome page: toggle metric telemetry": "",
    "Welcome Metric Telemetry Toggled": "",
    "welcome page: toggle vim": "",
    "Welcome Vim Mode Toggled": "",
    "welcome page: view docs": "",
    "Welcome Documentation Viewed": "",
    "extensions page: open": "",
    "Extensions Page Opened": "",
    "extensions: install extension": "",
    "Extension Installed": "",
    "extensions: uninstall extension": "",
    "Extension Uninstalled": "",
    "markdown preview: open": "",
    "Markdown Preview Opened": "",
    "project diagnostics: open": "",
    "Project Diagnostics Opened": "",
    "project search: open": "",
    "Project Search Opened": "",
    "repl sessions: open": "",
    "REPL Session Started": "",
    "feature upsell: toggle vim": "",
    "source": "",
    "Feature Upsell": "",
    "Vim Mode Toggled": "",
    "feature upsell: viewed docs (": "",
    "Unknown App Event: {}": "",
    "url": "",
    "Documentation Viewed": "",
    "Settings Changed": "",
    "Extension Loaded": "",
    "Editor Edited": "",
    "Action Invoked": "",
    "Kernel Status Changed": "",
    "app_version": "",
    "os_name": "",
    "os_version": "",
    "architecture": "",
    "release_channel": "",
    "signed_in": "",
    "checksum_matched": "",
    "country": "",
    "is_staff": ""
  },
  "zed/crates/collab/src/api/extensions.rs": {
    "/extensions": "",
    "/extensions/updates": "",
    "/extensions/:extension_id": "",
    "/extensions/:extension_id/download": "",
    "/extensions/:extension_id/:version/download": "",
    "extension_search": "",
    "unknown extension": "",
    "not supported": "",
    "unknown extension version": "",
    "extensions/{extension_id}/{version}/archive.tar.gz": "",
    "failed to create presigned extension download url {e}": "",
    "no blob store client": "",
    "no blob store bucket": "",
    "fetching extensions from blob store": "",
    "extensions/": "",
    "fetched {} object(s) from blob store": "",
    "extensions": "",
    "manifest.json": "",
    "found {} published extensions": "",
    "fetched {} new extensions from blob store": "",
    "extensions/{extension_id}/{version}/manifest.json": "",
    "failed to download manifest for extension {extension_id} version {version}": "",
    "invalid manifest for extension {extension_id} version {version}: {}": "",
    "missing last modified timestamp for extension {extension_id} version {version}": "",
    "invalid version for extension {extension_id} version {version}": ""
  },
  "zed/crates/collab/src/api/ips_file.rs": {
    "No header found": "",
    "Failed to parse header: {}": "",
    "No body found": "",
    "Failed to parse body: {}": "",
    "%Y-%m-%d %H:%M:%S%.f %#z": "",
    "Abort trap: 6": "",
    "Panic `{}`": "",
    "Crash `Abort trap: 6` (possible panic)": "",
    "Exception `{}`": "",
    "Crash `{}`": "",
    " on thread {} ({})": "",
    "{:#}": "",
    "<unknown-image>": "",
    "<unknown>": "",
    "  and {} more...": "",
    "<no backtrace available>": "",
    "pthread_kill": "",
    "panic": "",
    "backtrace": "",
    "rust_begin_unwind": "",
    "abort": "",
    "bundleID": "",
    "camelCase": "",
    "userID": "",
    "coalitionID": "",
    "roots_installed": "",
    "bug_type": "",
    "codeSigningID": "",
    "codeSigningTeamID": "",
    "CFBundleShortVersionString": "",
    "CFBundleVersion": "",
    "CFBundleIdentifier": "",
    "beforePC": "",
    "atPC": "",
    "type": "",
    "libsystem_c.dylib": "",
    "thread_create": "",
    "thread_set_state": "",
    "task_for_pid": ""
  },
  "zed/crates/collab/src/bin/dotenv.rs": {
    ".": "",
    "POWERSHELL": "",
    "$env:{}=\"{}\"": "",
    "export {}=\"{}\"": ""
  },
  "zed/crates/collab/src/db/queries/access_tokens.rs": {
    "no such access token": ""
  },
  "zed/crates/collab/src/db/queries/billing_preferences.rs": {
    "billing preferences not found": ""
  },
  "zed/crates/collab/src/db/queries/buffers.rs": {
    "user is not a member of channel": "",
    "can't rejoin buffer, epoch has changed": "",
    "can't rejoin buffer, no previous collaborator found": "",
    "not a collaborator on this project": "",
    "no such buffer": "",
    "missing buffer snapshot": "",
    "no such snapshot": "",
    "2": "",
    "3": "",
    "4": "",
    "5": "",
    "6": "",
    "1": ""
  },
  "zed/crates/collab/src/db/queries/channels.rs": {
    "channel-{}": "",
    "direction": "",
    "parent": "",
    "children": "",
    "channel name can't be blank": "",
    "no such invitation": "",
    "no such member": "",
    "sqlite": "",
    "UPPER(github_login) LIKE ?": "",
    "github_login ILIKE $1": "",
    "not role = 'admin', not role = 'member', not role = 'guest', not accepted, github_login": "",
    "https://github.com/{}.png?size=128": "",
    "user is not a channel admin or channel does not exist": "",
    "user is not a channel member or channel does not exist": "",
    "user is not a channel participant or channel does not exist": "",
    "parent_path || id || '/'": "",
    "{}{}/": "",
    "\n                    UPDATE channels SET parent_path = REPLACE(parent_path, $1, $2)\n                    WHERE parent_path LIKE $3 || '%'\n                    RETURNING id\n                ": ""
  },
  "zed/crates/collab/src/db/queries/contacts.rs": {
    "user_a_participant": "",
    "user_b_participant": "",
    "user_a_busy": "",
    "user_b_busy": "",
    "contact already requested": "",
    "no such contact": "",
    "no such contact request": ""
  },
  "zed/crates/collab/src/db/queries/extensions.rs": {
    "name ILIKE $1": "",
    "no such extension: {extension_id}": "",
    "failed to insert extension": "",
    ", ": ""
  },
  "zed/crates/collab/src/db/queries/messages.rs": {
    "not a chat participant": "",
    "failed to insert message": "",
    ", ": "",
    "({})": "",
    "\n            SELECT\n                *\n            FROM (\n                SELECT\n                    *,\n                    row_number() OVER (\n                        PARTITION BY channel_id\n                        ORDER BY id DESC\n                    ) as row_number\n                FROM channel_messages\n                WHERE\n                    channel_id in ({values})\n            ) AS messages\n            WHERE\n                row_number = 1\n            ": "",
    "no such message": "",
    "operation could not be completed": "",
    "ChannelMessageMention": "",
    "Channel message not found": "",
    "Attempted to edit a message (id: {message_id}) which does not exist anymore.": ""
  },
  "zed/crates/collab/src/db/queries/notifications.rs": {
    "Unknown notification kind": "",
    "invalid notification kind {:?}": ""
  },
  "zed/crates/collab/src/db/queries/projects.rs": {
    "could not find participant": "",
    "shared project on unexpected room": "",
    "guests cannot share projects": "",
    "project not found": "",
    "cannot unshare a project hosted by another user": "",
    "no such project": "",
    "invalid worktree update. removed entries: {}, updated entries: {}": "",
    "no such project: {project_id}": "",
    "invalid summary": "",
    "can't update a project hosted by someone else": "",
    "invalid language server": "",
    "unknown worktree settings kind: {kind}": "",
    "not a collaborator on this project": "",
    "failed to read project host": "",
    "not authorized to edit projects": "",
    "not authorized to read projects": "",
    "can only send project updates to a project you're in": "",
    "not room participants": ""
  },
  "zed/crates/collab/src/db/queries/rooms.rs": {
    "user is not in the room": "",
    "banned users cannot invite": "",
    "failed to build incoming call": "",
    "could not find call to decline": "",
    "no call to cancel": "",
    "no such room": "",
    "tried to join channel call directly": "",
    "room does not exist or was already joined": "",
    "no channel for room": "",
    "project does not exist": "",
    "no such project": "",
    "host not found among collaborators": "",
    "invalid location": "",
    "could not update room participant location": "",
    "only admins can set participant role": "",
    "could not update room participant role": "",
    "could not find room": "",
    "user has not signed the Zed CLA": "",
    "not a room participant": ""
  },
  "zed/crates/collab/src/db/queries/users.rs": {
    "too many users": "",
    "could not find user": "",
    "connected_once": "",
    "accepted_tos_at": "",
    "\n                SELECT users.*\n                FROM users\n                WHERE github_login ILIKE $1\n                ORDER BY github_login <-> $2\n                LIMIT $3\n            ": "",
    "cir": "",
    "%c%i%r%": ""
  },
  "zed/crates/collab_ui/src/chat_panel/message_editor.rs": {
    "@[-_\\w]+": "",
    "@": "",
    "message editor must be singleton": "",
    "failed to load Markdown language": "",
    "Message #{channel_name}": "",
    "Message Channel": "",
    "@{}": "",
    ":{}: {}": ""
  },
  "zed/crates/collab_ui/src/collab_panel/channel_modal.rs": {
    "ChannelModal": "",
    "is-public": "",
    "Public": "",
    "copy-link": "",
    "Copy Link": "",
    "manage-members": "",
    "Manage Members": "",
    "invite-members": "",
    "Invite Members": "",
    "Search collaborator by username...": "",
    "Invited": "",
    "Admin": "",
    "Guest": "",
    "ellipsis": "",
    "You": "",
    "Member": "",
    "Failed to update role": "",
    "Failed to remove member": "",
    "Failed to invite member": "",
    "Demote to Guest": "",
    "Promote to Member": "",
    "Demote to Member": "",
    "Promote to Admin": "",
    "Remove from Channel": ""
  },
  "zed/crates/collab_ui/src/collab_panel/contact_finder.rs": {
    "Contacts": "",
    "Invite new contacts": "",
    "Search collaborator by username...": "",
    "icons/check.svg": "",
    "icons/x.svg": ""
  },
  "zed/crates/collab_ui/src/notifications/stories/collab_notification.rs": {
    "Incoming Call Notification": "",
    "https://avatars.githubusercontent.com/u/1486634?v=4": "",
    "accept": "",
    "Accept": "",
    "decline": "",
    "Decline": "",
    "maxdeviant is sharing a project in Zed": "",
    "Project Shared Notification": "",
    "https://avatars.githubusercontent.com/u/1714999?v=4": "",
    "open": "",
    "Open": "",
    "dismiss": "",
    "Dismiss": "",
    "iamnbutler": "",
    "is sharing a project in Zed:": "",
    "zed": ""
  },
  "zed/crates/collab_ui/src/notifications/incoming_call_notification.rs": {
    "accept": "",
    "Accept": "",
    "decline": "",
    "Decline": "",
    "{} is sharing a project in Zed": ""
  },
  "zed/crates/collab_ui/src/notifications/project_shared_notification.rs": {
    "open": "",
    "Open": "",
    "dismiss": "",
    "Dismiss": "",
    "is sharing a project in Zed{}": "",
    ":": "",
    ", ": ""
  },
  "zed/crates/collab_ui/src/channel_view.rs": {
    "Channel Notes Opened": "",
    "Copy link to section": "",
    "Link copied to clipboard": "",
    "read-only": "",
    "disconnected": "",
    "<unknown>": ""
  },
  "zed/crates/collab_ui/src/chat_panel.rs": {
    "ChatPanel": "",
    "Message has been deleted...": "",
    "reply-to-saved-message-container": "",
    "reply-to-pending-message-container": "",
    "composing-reply-container": "",
    "@{}": "",
    " ": "",
    "Go to message": "",
    "saved-message": "",
    "pending-message": "",
    "body": "",
    "New messages": "",
    "reply": "",
    "Reply": "",
    "edit": "",
    "message editor must be singleton": "",
    "Edit": "",
    "menu": "",
    "trigger": "",
    "more": "",
    "More": "",
    "Copy message text": "",
    "Delete message": "",
    " (edited)": "",
    "chat_header": "",
    "#{}": "",
    "Chat": "",
    "Select a channel to chat in.": "",
    "toggle-collab": "",
    "Open": "",
    "Editing message": "",
    "cancel-edit-message": "",
    "Cancel edit message": "",
    "reply-preview": "",
    "Replying to ": "",
    "close-reply-preview": "",
    "Close reply": "",
    "Chat Panel": "",
    "*hi*, «@abc», let's **call** «@fgh»": "",
    "fgh": "",
    "avatar_fgh": "",
    "'": "",
    "«hi», «@abc», let’s «call» «@fgh»": "",
    "Here is a link https://zed.dev to zeds website": "",
    "Here is a link «https://zed.dev» to zeds website": "",
    "**Here is a link https://zed.dev to zeds website**": "",
    "«Here is a link »«https://zed.dev»« to zeds website»": ""
  },
  "zed/crates/collab_ui/src/collab_panel.rs": {
    "CollaborationPanel": "",
    "Filter...": "",
    "Failed to read collaboration panel from key value store": "",
    "Follow {}": "",
    "Calling": "",
    "leave-call": "",
    "Leave Call": "",
    "Guest": "",
    "Mic only": "",
    "untitled": "",
    ", ": "",
    "Failed to join project": "",
    "Open {}": "",
    "screen": "",
    "Screen": "",
    "Open shared screen": "",
    "channel-notes": "",
    "notes": "",
    "Open Channel Notes": "",
    "channel-chat": "",
    "chat": "",
    "Open Chat": "",
    "Grant Mic Access": "",
    "Failed to grant mic access": "",
    "Grant Write Access": "",
    "Failed to grant write access": "",
    "This user has not yet signed the CLA at https://zed.dev/cla.": "",
    "Mute": "",
    "Revoke Access": "",
    "Failed to revoke access": "",
    "Expand Subchannels": "",
    "Collapse Subchannels": "",
    "Open Notes": "",
    "Copy Channel Link": "",
    "New Subchannel": "",
    "Rename": "",
    "Move '#{}' here": "",
    "Manage Members": "",
    "Move this channel": "",
    "Make Channel Private": "",
    "Make Channel Public": "",
    "Delete": "",
    "Leave Channel": "",
    "Invite {} to join": "",
    "Call {}": "",
    "Remove Contact": "",
    " ": "",
    "Failed to create channel": "",
    "Failed to hang up": "",
    "Failed to set channel visibility": "",
    "direction": "",
    "parent": "",
    "To make a channel public, its parent channel must be public.": "",
    "To make a channel private, all of its subchannels must be private.": "",
    "Failed to move channel": "",
    "Public channels must have public parents": "",
    "You cannot move a channel into itself": "",
    "You cannot move a channel into a different root channel": "",
    "Are you sure you want to leave \"#{}\"?": "",
    "Leave": "",
    "Cancel": "",
    "Failed to leave channel": "",
    "Are you sure you want to remove the channel \"{}\"?": "",
    "Remove": "",
    "Are you sure you want to remove \"{}\" from your contacts?": "",
    "Failed to remove contact": "",
    "Failed to respond to contact request": "",
    "Call failed": "",
    "Failed to join channel": "",
    "Work with your team in realtime with collaborative editing, voice, shared notes and more.": "",
    "sign_in": "",
    "Sign in": "",
    "Sign in to enable collaboration.": "",
    "icons/public.svg": "",
    "Copy public channel link.": "",
    "icons/hash.svg": "",
    "Copy private channel link.": "",
    "Current Call": "",
    "Requests": "",
    "Contacts": "",
    "Channels": "",
    "Invites": "",
    "Online": "",
    "Offline": "",
    "channel-link": "",
    "section-header": "",
    "Copy channel link": "",
    "add-contact": "",
    "Search for new contact": "",
    "add-channel": "",
    "Create a channel": "",
    "contact context menu": "",
    " {} is offline": "",
    " {} is on a call": "",
    "Invite {} to join call": "",
    "decline-contact": "",
    "Decline invite": "",
    "accept-contact": "",
    "Accept invite": "",
    "remove_contact": "",
    "Cancel invite": "",
    "reject-invite": "",
    "accept-invite": "",
    "channel-invite": "",
    "contact-placeholder": "",
    "Add a Contact": "",
    "+{extra_count}": "",
    "channel_chat": "",
    "Open channel chat": "",
    "channel_notes": "",
    "Open channel notes": "",
    "channel-editor": "",
    "CollabPanel": "",
    "Collab Panel": "",
    "Join channel": ""
  },
  "zed/crates/collab_ui/src/collab_ui.rs": {},
  "zed/crates/collab_ui/src/notification_panel.rs": {
    "NotificationPanel": "",
    "notification_timestamp": "",
    "You accepted": "",
    "You declined": "",
    "decline": "",
    "Decline": "",
    "accept": "",
    "Accept": "",
    "icons/plus.svg": "",
    "{} wants to add you as a contact": "",
    "{} accepted your contact invite": "",
    "icons/hash.svg": "",
    "{} invited you to join the #{channel_name} channel": "",
    "icons/conversations.svg": "",
    "{} mentioned you in #{}:\n{}": "",
    "Notifications": "",
    "sign_in_prompt_button": "",
    "Sign in": "",
    "Sign in to view notifications.": "",
    "You have no notifications.": "",
    "Notification Panel": "",
    "notification_panel_toast": "",
    "close": ""
  },
  "zed/crates/command_palette/src/command_palette.rs": {
    "Execute a command...": "",
    "Action Invoked": "",
    "command palette": "",
    "Command": "",
    "name": "",
    "editor::GoToDefinition": "",
    "editor: go to definition": "",
    "editor::Backspace": "",
    "editor: backspace": "",
    "go_to_line::Deploy": "",
    "go to line: deploy": "",
    "editor:  backspace": "",
    "editor:    backspace": "",
    "editor:GoToDefinition": "",
    "editor::::GoToDefinition": "",
    "editor: :GoToDefinition": "",
    "abc": "",
    "cmd-shift-p": "",
    "bcksp": "",
    "enter": "",
    "ab": "",
    "editor": "",
    "Editor::    Backspace": "",
    "cmd-n": "",
    "1\n2\n3\n4\n5\n6\n": "",
    "go to line: Toggle": "",
    "3 enter": "",
    "[\n                    {\n                        ": "",
    ": {\n                            ": "",
    ": ": "",
    ",\n                            ": "",
    "\n                        }\n                    }\n                ]": ""
  },
  "zed/crates/copilot/src/copilot_chat.rs": {
    "https://api.githubcopilot.com/chat/completions": "",
    "https://api.github.com/copilot_internal/v2/token": "",
    "lowercase": "",
    "schemars": "",
    "gpt-4o": "",
    "gpt-4o-2024-05-13": "",
    "gpt-4": "",
    "gpt-3.5-turbo": "",
    "o1": "",
    "o1-mini": "",
    "o3-mini": "",
    "claude-3-5-sonnet": "",
    "claude-3.5-sonnet": "",
    "claude-3-7-sonnet": "",
    "claude-3.7-sonnet": "",
    "gemini-2.0-flash": "",
    "gemini-2.0-flash-001": "",
    "Invalid model id: {}": "",
    "GPT-3.5": "",
    "GPT-4": "",
    "GPT-4o": "",
    "Claude 3.5 Sonnet": "",
    "Claude 3.7 Sonnet": "",
    "Gemini 2.0 Flash": "",
    "type": "",
    "invalid expires_at": "",
    "AppData": "",
    "Local": "",
    ".config": "",
    "github-copilot": "",
    "hosts.json": "",
    "apps.json": "",
    "Copilot chat is not enabled": "",
    "No OAuth token available": "",
    "token {}": "",
    "Accept": "",
    "application/json": "",
    "Failed to request API token: {}": "",
    "github.com": "",
    "oauth_token": "",
    "Editor-Version": "",
    "Zed/{}": "",
    "CARGO_PKG_VERSION": "",
    "unknown": "",
    "Copilot-Integration-Id": "",
    "vscode-chat": "",
    "Failed to connect to API: {} {}": "",
    "data: ": "",
    "[DONE]": ""
  },
  "zed/crates/copilot/src/copilot.rs": {
    "must sign in before using copilot": "",
    "copilot is still starting": "",
    "copilot is disabled": "",
    "copilot was not started because of an error: {}": "",
    "http:": "",
    "HTTP_PROXY": "",
    "https:": "",
    "HTTPS_PROXY": "",
    "Unsupported protocol scheme for language server proxy (must be http or https)": "",
    "NODE_TLS_REJECT_UNAUTHORIZED": "",
    "0": "",
    "path/to/copilot": "",
    "copilot": "",
    "--stdio": "",
    "C:/": "",
    "zed": "",
    "CARGO_PKG_VERSION": "",
    "zed-copilot": "",
    "0.0.1": "",
    "{:?}": "",
    "copilot hasn't started yet": "",
    "plaintext": "",
    "buffer://{}": "",
    "dist/language-server.js": "",
    "zed-industries/copilot": "",
    "v0.7.0": "",
    "copilot-{}": "",
    "dist": "",
    "Github release for copilot contained no assets": "",
    "error downloading copilot release": "",
    "no cached binary": "",
    "missing executable in directory {:?}": "",
    "Hello": "",
    "Goodbye": "",
    " world": "",
    "/root/child/buffer-1": "",
    "child/buffer-1": "",
    "Hello world": "",
    "user-1": ""
  },
  "zed/crates/copilot/src/sign_in.rs": {
    "https://github.com/features/copilot": "",
    "Copilot is starting...": "",
    "Copilot has started!": "",
    "Copied!": "",
    "Copy": "",
    "Waiting for connection...": "",
    "Connect to GitHub": "",
    "Use GitHub Copilot in Zed.": "",
    "Using Copilot requires an active subscription on GitHub.": "",
    "Paste this code into GitHub after clicking the button below.": "",
    "connect-button": "",
    "copilot-enable-cancel-button": "",
    "Cancel": "",
    "Copilot Enabled!": "",
    "You can update your settings or sign out from the Copilot menu in the status bar.": "",
    "copilot-enabled-done-button": "",
    "Done": "",
    "You must have an active GitHub Copilot subscription.": "",
    "You can enable Copilot by connecting your existing license once you have subscribed or renewed your subscription.": "",
    "copilot-subscribe-button": "",
    "Subscribe on GitHub": "",
    "copilot-subscribe-cancel-button": "",
    "Copilot is disabled": "",
    "You can enable Copilot in your settings.": "",
    "copilot code verification": ""
  },
  "zed/crates/db/src/db.rs": {
    "FALLBACK_MEMORY_DB": "",
    "db.sqlite": "",
    "ZED_STATELESS": "",
    "0-{}": "",
    "Could not create db directory": "",
    "Opening main db": "",
    "Opening fallback db": "",
    "Fallback in memory database failed. Likely initialization queries or migrations have fundamental errors": "",
    "global": "",
    "db_tests": "",
    "DbTests": "",
    "SELECT * FROM test2": ""
  },
  "zed/crates/db/src/query.rs": {
    "Error in {}, exec failed to execute or parse for: {}": "",
    "Error in {}, exec_bound failed to execute or parse for: {}": "",
    "Error in {}, select_row failed to execute or parse for: {}": "",
    "Error in {}, select_row_bound failed to execute or parse for: {}": "",
    "Error in {}, select_row_bound expected single row result but found none for: {}": ""
  },
  "zed/crates/diagnostics/src/diagnostics_tests.rs": {
    "/test": "",
    "consts.rs": "",
    "\n                const a: i32 = 'a';\n                const b: i32 = c;\n            ": "",
    "main.rs": "",
    "\n                fn main() {\n                    let x = vec![];\n                    let y = vec![];\n                    a(x);\n                    b(y);\n                    // comment 1\n                    // comment 2\n                    c(y);\n                    d(x);\n                }\n            ": "",
    "/test/main.rs": "",
    "move occurs because `x` has type `Vec<char>`, which does not implement the `Copy` trait": "",
    "move occurs because `y` has type `Vec<char>`, which does not implement the `Copy` trait": "",
    "value moved here": "",
    "use of moved value\nvalue used here after move": "",
    "    let x = vec![];\n": "",
    "    let y = vec![];\n": "",
    "    a(x);\n": "",
    "    b(y);\n": "",
    "    // comment 1\n": "",
    "    // comment 2\n": "",
    "    c(y);\n": "",
    "    d(x);\n": "",
    "fn main() {\n": "",
    "}": "",
    "/test/consts.rs": "",
    "mismatched types\nexpected `usize`, found `char`": "",
    "const a: i32 = 'a';\n": "",
    "const b: i32 = c;\n": "",
    "unresolved name `c`": "",
    "main.js": "",
    "\n                a();\n                b();\n                c();\n                d();\n                e();\n            ": "",
    "/test/main.js": "",
    "error 1": "",
    "a();\n": "",
    "b();": "",
    "warning 1": "",
    "b();\n": "",
    "c();": "",
    "warning 2": "",
    "c();\n": "",
    "d();": "",
    "d();\n": "",
    "e();": "",
    "OPERATIONS": "",
    "invalid `OPERATIONS` variable": "",
    "finishing diagnostic check for language server {server_id}": "",
    "/test/{}.rs": "",
    "updating diagnostics. language server {server_id} path {path:?}": "",
    "updating mutated diagnostics view": "",
    "constructing reference diagnostics view": "",
    "diagnostic not found in reference view": "",
    "  removing diagnostic group {group_id}": "",
    "  inserting diagnostic group {group_id} at index {ix}. ranges: {:?}": "",
    "diagnostic group {group_id}": "",
    "file header": "",
    "excerpt header": ""
  },
  "zed/crates/diagnostics/src/diagnostics.rs": {
    "No problems in workspace": "",
    "No errors in workspace": "",
    "EmptyPane": "",
    "s": "",
    "Show {} warning{}": "",
    "diagnostics-show-warning-label": "",
    "Diagnostics": "",
    "disk based diagnostics finished for server {language_server_id}": "",
    "diagnostics updated for server {language_server_id}, path {path:?}. recording change": "",
    "diagnostics updated for server {language_server_id}, path {path:?}. updating excerpts": "",
    "no Replace block should have been pushed to blocks_to_add": "",
    "excerpts are not sorted by path {:?}": "",
    "Project Diagnostics": "",
    "No problems": "",
    "Project Diagnostics Opened": "",
    "diagnostic header": "",
    "({code:?})": "",
    "Expanding to ancestor started on {} node exceeding row limit of {max_row_count}.": "",
    "block": "",
    "statement": "",
    "declaration": "",
    "Expanding to ancestor reached the top node, so using default context line count.": ""
  },
  "zed/crates/diagnostics/src/items.rs": {
    "diagnostic_message": "",
    "Next Diagnostic": "",
    "diagnostic-indicator": "",
    "Project Diagnostics": ""
  },
  "zed/crates/diagnostics/src/toolbar_controls.rs": {
    "Exclude Warnings": "",
    "Include Warnings": "",
    "update-excerpts": "",
    "Update excerpts": "",
    "toggle-warnings": ""
  },
  "zed/crates/docs_preprocessor/src/main.rs": {
    "zed-docs-preprocessor": "",
    "Preprocesses Zed Docs content to provide rich action & keybinding support and more": "",
    "supports": "",
    "renderer": "",
    "Check whether a renderer is supported by this preprocessor": "",
    "Failed to create ZedDocsPreprocessor": "",
    "Required argument": ""
  },
  "zed/crates/editor/src/git/blame.rs": {
    "GitRemote": "",
    "host": "",
    "owner": "",
    "repo": "",
    "Updated buffers. Regenerating blame data...": "",
    "Status of git repositories updated. Regenerating blame data...": "",
    "failed to get git blame data: {error:?}": "",
    "{:#}": "",
    "git-blame": "",
    "/my-repo": "",
    ".git": "",
    "file.txt": "",
    "\n                    irrelevant contents\n                ": "",
    "/my-repo/file.txt": "",
    "Failed to blame \"file.txt\": failed to get blame for \"file.txt\"": "",
    "\n                    AAA Line 1\n                    BBB Line 2 - Modified 1\n                    CCC Line 3 - Modified 2\n                    modified in memory 1\n                    modified in memory 1\n                    DDD Line 4 - Modified 2\n                    EEE Line 5 - Modified 1\n                    FFF Line 6 - Modified 2\n                ": "",
    "/my-repo/.git": "",
    "1b1b1b": "",
    "0d0d0d": "",
    "3a3a3a": "",
    "\n                    Line 1\n                    Line 2\n                    Line 3\n                ": "",
    "X": "",
    "OPERATIONS": "",
    "invalid `OPERATIONS` variable": "",
    "MAX_EDITS_PER_OPERATION": "",
    "invalid `MAX_EDITS_PER_OPERATION` variable": "",
    "initial buffer text: {:?}": "",
    "initial blame entries: {:?}": "",
    "quiescing": "",
    "editing buffer": "",
    "buffer text: {:?}": "",
    "regenerating blame entries: {:?}": ""
  },
  "zed/crates/editor/src/clangd_ext.rs": {
    "C++": "",
    "C": "",
    "Switch source/header LSP request for path \"{source_file}\" failed": "",
    "Clangd returned an empty string when requesting to switch source/header from \"{source_file}\"": "",
    "Parsing URL \"{}\" returned from switch source/header failed": "",
    "URL conversion to file path failed for \"{goto}\"": "",
    "Switch source/header could not open \"{goto}\" in workspace": ""
  },
  "zed/crates/editor/src/code_context_menus.rs": {
    "completions": "",
    "multiline_docs": "",
    "obvious": "",
    "code_actions_menu": ""
  },
  "zed/crates/editor/src/display_map.rs": {
    "we expect the font to be loaded because it's rendered by the editor": "",
    " ": "",
    "DisplayPoint({}, {})": "",
    "OPERATIONS": "",
    "invalid `OPERATIONS` variable": "",
    "tab size: {}": "",
    "wrap width: {:?}": "",
    "buffer text: {:?}": "",
    "fold text: {:?}": "",
    "tab text: {:?}": "",
    "wrap text: {:?}": "",
    "block text: {:?}": "",
    "display text: {:?}": "",
    "setting wrap width to {:?}": "",
    "setting tab size to {:?}": "",
    "inserting block {:?} with height {}": "",
    "removing block ids {:?}": "",
    "unfolding ranges: {:?}": "",
    "folding ranges: {:?}": "",
    "row boundary before {:?}. reported buffer row boundary: {:?}": "",
    "display row boundary after {:?}. reported buffer row boundary: {:?}": "",
    "row boundary before {:?}. reported display row boundary: {:?}": "",
    "row boundary after {:?}. reported display row boundary: {:?}": "",
    "Moving from point {:?}": "",
    "Right {:?}": "",
    "Left {:?}": "",
    "Helvetica": "",
    "\n\na": "",
    "\n\n\na": "",
    "b": "",
    "\n\n\nab": "",
    "\n            fn outer() {}\n\n            mod module {\n                fn inner() {}\n            }": "",
    "\n                (mod_item name: (identifier) body: _ @mod.body)\n                (function_item name: (identifier) @fn.name)\n                ": "",
    "\n            const A: &str = ": "",
    ";\n            const B: &str = ": "",
    ";\n        ": "",
    "\n                (string_literal) @string\n                ": "",
    " @keyword\n                [": "",
    "] @punctuation\n                ": "",
    "\"\n    one\n": "",
    "    two\n    three\n\"": "",
    "\"four\"": "",
    "\n            struct A {\n                b: usize;\n            }\n            const c: usize = 1;\n        ": "",
    "\n                ": "",
    " @operator\n                (string_literal) @string\n                ": "",
    "\"c ": "",
    "\"": ""
  },
  "zed/crates/editor/src/editor_settings_controls.rs": {
    "Font": "",
    "Editor": "",
    "Gutter": "",
    "Buffer Font Family": "",
    "buffer-font-family": "",
    "Buffer Font Size": "",
    "buffer-font-size": "",
    "Buffer Font Weight": "",
    "buffer-font-weight": "",
    "Buffer Font Ligatures": "",
    "calt": "",
    "buffer-font-ligatures": "",
    "Inline Git Blame": "",
    "inline-git-blame": "",
    "Line Numbers": "",
    "line-numbers": "",
    "Relative Line Numbers": "",
    "relative-line-numbers": "",
    "Relative": "",
    "Ascending": ""
  },
  "zed/crates/editor/src/editor_tests.rs": {
    "buffer edited": "",
    "\n            one\n            two\n            threeˇ\n            four\n            fiveˇ\n        ": "",
    "\n                impl Foo {\n                    // Hello!\n\n                    fn a() {\n                        1\n                    }\n\n                    fn b() {\n                        2\n                    }\n\n                    fn c() {\n                        3\n                    }\n                }\n            ": "",
    "\n                impl Foo {\n                    // Hello!\n\n                    fn a() {\n                        1\n                    }\n\n                    fn b() {⋯\n                    }\n\n                    fn c() {⋯\n                    }\n                }\n            ": "",
    "\n                impl Foo {⋯\n                }\n            ": "",
    "\n                class Foo:\n                    # Hello!\n\n                    def a():\n                        print(1)\n\n                    def b():\n                        print(2)\n\n                    def c():\n                        print(3)\n            ": "",
    "\n                class Foo:\n                    # Hello!\n\n                    def a():\n                        print(1)\n\n                    def b():⋯\n\n                    def c():⋯\n            ": "",
    "\n                class Foo:⋯\n            ": "",
    "\n                class Foo:\n                    # Hello!\n\n                    def a():\n                        print(1)\n\n                    def b():\n                        print(2)\n\n\n                    def c():\n                        print(3)\n\n\n            ": "",
    "\n                class Foo:\n                    # Hello!\n\n                    def a():\n                        print(1)\n\n                    def b():⋯\n\n\n                    def c():⋯\n\n\n            ": "",
    "\n                class Foo:⋯\n\n\n            ": "",
    "\n                class Foo:\n                    # Hello!\n\n                    def a():\n                        print(1)\n\n                    def b():\n                        print(2)\n\n\n                class Bar:\n                    # World!\n\n                    def a():\n                        print(1)\n\n                    def b():\n                        print(2)\n\n\n            ": "",
    "\n                class Foo:\n                    # Hello!\n\n                    def a():⋯\n\n                    def b():⋯\n\n\n                class Bar:\n                    # World!\n\n                    def a():⋯\n\n                    def b():⋯\n\n\n            ": "",
    "\n                class Foo:⋯\n\n\n                class Bar:⋯\n\n\n            ": "",
    "🟥🟧🟨🟩🟦🟪\nabcde\nαβγδε": "",
    "🟥🟧⋯🟦🟪\nab⋯e\nαβ⋯ε": "",
    "🟥": "",
    "🟥🟧": "",
    "🟥🟧⋯": "",
    "c\n  f": "",
    "ˇone\n        two\n\n        three\n        fourˇ\n        five\n\n        six": "",
    "one\n        two\n        ˇ\n        three\n        four\n        five\n        ˇ\n        six": "",
    "one\n        two\n\n        three\n        four\n        five\n        ˇ\n        sixˇ": "",
    "one\n        two\n\n        three\n        four\n        five\n\n        sixˇ": "",
    "one\n        two\n\n        three\n        four\n        five\n        ˇ\n        six": "",
    "one\n        two\n        ˇ\n        three\n        four\n        five\n\n        six": "",
    "ˇone\n        two\n\n        three\n        four\n        five\n\n        six": "",
    "ˇone\n        two\n        three\n        four\n        five\n        six\n        seven\n        eight\n        nine\n        ten\n        ": "",
    "ˇone\n            two\n            three\n            four\n            five\n            six\n            seven\n            eight\n            nine\n            ten\n        ": "",
    "\n        ˇone\n        two\n        threeˇ\n        four\n        five\n        six\n        seven\n        eight\n        nine\n        ten\n        ": "",
    "\n        one\n        two\n        three\n        ˇfour\n        five\n        sixˇ\n        seven\n        eight\n        nine\n        ten\n        ": "",
    "\n        one\n        two\n        three\n        four\n        five\n        six\n        ˇseven\n        eight\n        nineˇ\n        ten\n        ": "",
    "\n        one\n        two\n        three\n        four\n        five\n        six\n        seven\n        eight\n        nine\n        ˇten\n        ˇ": "",
    "\n                a\n                b(\n                    X\n                )\n                c(\n                    X\n                )\n            ": "",
    "\n                    a\n                    b()\n                    c()\n                ": "",
    "\n                a\n                b(\n                )\n                c(\n                )\n            ": "",
    "\n        const a: ˇA = (\n            (ˇ\n                «const_functionˇ»(ˇ),\n                so«mˇ»et«hˇ»ing_ˇelse,ˇ\n            )ˇ\n        ˇ);ˇ\n    ": "",
    "\n        ˇ\n        const a: A = (\n            ˇ\n            (\n                ˇ\n                ˇ\n                const_function(),\n                ˇ\n                ˇ\n                ˇ\n                ˇ\n                something_else,\n                ˇ\n            )\n            ˇ\n            ˇ\n        );\n    ": "",
    "\n        const a: A = (\n            ˇ\n            (\n                ˇ\n                const_function(),\n                ˇ\n                ˇ\n                something_else,\n                ˇ\n                ˇ\n                ˇ\n                ˇ\n            )\n            ˇ\n        );\n        ˇ\n        ˇ\n    ": "",
    "\n        // Fooˇ\n    ": "",
    "\n        // Foo\n        //ˇ\n    ": "",
    "\n        ˇ// Foo\n    ": "",
    "\n\n        ˇ// Foo\n    ": "",
    "\n        // Foo\n        ˇ\n    ": "",
    "\n        ˇabˇc\n        ˇ🏀ˇ🏀ˇefg\n        dˇ\n    ": "",
    "\n           ˇab ˇc\n           ˇ🏀  ˇ🏀  ˇefg\n        d  ˇ\n    ": "",
    "\n        a\n        «🏀ˇ»🏀«🏀ˇ»🏀«🏀ˇ»\n    ": "",
    "\n        a\n           «🏀ˇ»🏀«🏀ˇ»🏀«🏀ˇ»\n    ": "",
    "\n        ˇ\n        const a: B = (\n            c(\n                d(\n        ˇ\n                )\n        ˇ\n        ˇ    )\n        );\n    ": "",
    "\n            ˇ\n        const a: B = (\n            c(\n                d(\n                    ˇ\n                )\n                ˇ\n            ˇ)\n        );\n    ": "",
    "\n        const a: B = (\n            c(\n        ˇ    ˇ\n        ˇ    )\n        );\n    ": "",
    "\n        const a: B = (\n            c(\n                ˇ\n            ˇ)\n        );\n    ": "",
    "\n        fn a() {\n            if b {\n        \\t ˇc\n            }\n        }\n    ": "",
    "\n        fn a() {\n            if b {\n                ˇc\n            }\n        }\n    ": "",
    "\n          «oneˇ» «twoˇ»\n        three\n         four\n    ": "",
    "\n            «oneˇ» «twoˇ»\n        three\n         four\n    ": "",
    "\n        «oneˇ» «twoˇ»\n        three\n         four\n    ": "",
    "\n        one two\n        t«hree\n        ˇ» four\n    ": "",
    "\n        one two\n            t«hree\n        ˇ» four\n    ": "",
    "\n        one two\n        ˇthree\n            four\n    ": "",
    "\n        one two\n            ˇthree\n            four\n    ": "",
    "\n        one two\n        ˇ    three\n            four\n    ": "",
    "\n        «oneˇ» «twoˇ»\n        three\n        four\n    ": "",
    "\n        \\t«oneˇ» «twoˇ»\n        three\n        four\n    ": "",
    "\n        \\t\\t«oneˇ» «twoˇ»\n        three\n        four\n    ": "",
    "\n        one two\n        t«hree\n        ˇ»four\n    ": "",
    "\n        one two\n        \\tt«hree\n        ˇ»four\n    ": "",
    "\n        one two\n        \\t\\tt«hree\n        ˇ»four\n    ": "",
    "\n        one two\n        ˇthree\n        four\n    ": "",
    "\n        one two\n        \\tˇthree\n        four\n    ": "",
    "\n                a = 1\n                b = 2\n\n                const c: usize = 3;\n            ": "",
    "\n                «aˇ» = 1\n                b = 2\n\n                «const c:ˇ» usize = 3;\n            ": "",
    "\n                  «aˇ» = 1\n                b = 2\n\n                    «const c:ˇ» usize = 3;\n            ": "",
    "\n        onˇe two three\n        fou«rˇ» five six\n        seven «ˇeight nine\n        »ten\n    ": "",
    "\n        oˇe two three\n        fouˇ five six\n        seven ˇten\n    ": "",
    "\n        zero\n            ˇone\n                ˇtwo\n            ˇ ˇ ˇ  three\n        ˇ  ˇ  four\n    ": "",
    "\n        zero\n        ˇone\n            ˇtwo\n        ˇ  threeˇ  four\n    ": "",
    "\n        The ˇquick ˇbrown\n        fox jumps over\n        the lazy dog\n        ˇThe qu«ick bˇ»rown": "",
    "\n        ˇfox jumps over\n        the lazy dogˇ": "",
    "\n        onˇ two three\n        fouˇ five six\n        seven ˇten\n    ": "",
    "\n        The ˇquick ˇbrown\n        fox «ˇjum»ps over\n        the lazy dog\n        ˇThe qu«ick bˇ»rown": "",
    "\n        Line 0\n        Line 1\n        Line 2\n        Line 3\n        ": "",
    "\n        ˇLine 0\n        Line 1\n        Line 2\n        Line 3\n        ": "",
    "\n        Line 0ˇ Line 1\n        Line 2\n        Line 3\n        ": "",
    "\n        Line 0 Line 1ˇ Line 2\n        Line 3\n        ": "",
    "Should not have any diffs for files with custom newlines": "",
    "\n        «z\n        y\n        x\n        Z\n        Y\n        Xˇ»\n    ": "",
    "\n        «x\n        X\n        y\n        Y\n        z\n        Zˇ»\n    ": "",
    "\n        «5\n        4\n        3\n        2\n        1ˇ»\n    ": "",
    "\n        «1\n        2\n        3\n        4\n        5ˇ»\n    ": "",
    "\n        ddˇdd\n        ccc\n        bb\n        a\n    ": "",
    "\n        «ddddˇ»\n        ccc\n        bb\n        a\n    ": "",
    "\n        dd«d\n        ccc\n        bb\n        aaaaaˇ»\n    ": "",
    "\n        «aaaaa\n        bb\n        ccc\n        dddˇ»\n    ": "",
    "\n        dd«d\n        ccc\n\n        bb\n        aaaaa\n\n        ˇ»\n    ": "",
    "\n        «\n\n        aaaaa\n        bb\n        ccc\n        dddˇ»\n\n    ": "",
    "\n        aa«a\n        bbˇ»b\n    ": "",
    "\n        «aaa\n        bbb\n        added_lineˇ»\n    ": "",
    "\n        aa«a\n        bbbˇ»\n    ": "",
    "\n        «aaaˇ»\n    ": "",
    "\n        ˇ\n    ": "",
    "\n        Aaa«aa\n        cˇ»c«c\n        bb\n        aaaˇ»aa\n    ": "",
    "\n        «Aaaaa\n        ccc\n        bb\n        aaaaaˇ»\n    ": "",
    "\n        «Aaaaa\n        ccc\n        bbˇ»\n    ": "",
    "\n        «aaaaa\n        bb\n        aaaaa\n        aaaaaˇ»\n\n        aaa«aaˇ»\n    ": "",
    "\n        «aaaaa\n        bbˇ»\n\n        «aaaaaˇ»\n    ": "",
    "\n        «Aaa\n        aAa\n        Aaaˇ»\n    ": "",
    "\n        «Aaa\n        aAaˇ»\n    ": "",
    "\n        «Aaa\n        aAa\n        aaAˇ»\n    ": "",
    "\n        «Aaaˇ»\n    ": "",
    "\n        dd«dd\n        cˇ»c«c\n        bb\n        aaaˇ»aa\n    ": "",
    "\n        «aaaaa\n        bb\n        ccc\n        ddddˇ»\n    ": "",
    "\n        5«\n        4\n        3\n        2\n        1ˇ»\n\n        dd«dd\n        ccc\n        bb\n        aaaˇ»aa\n    ": "",
    "\n        «1\n        2\n        3\n        4\n        5ˇ»\n\n        «aaaaa\n        bb\n        ccc\n        ddddˇ»\n    ": "",
    "\n        2«\n        1ˇ»\n\n        bb«bb\n        aaaˇ»aa\n    ": "",
    "added line": "",
    "\n        «2\n        1\n        added lineˇ»\n\n        «bbbb\n        aaaaa\n        added lineˇ»\n    ": "",
    "\n        «2ˇ»\n\n        «bbbbˇ»\n    ": "",
    "\n        «hello worldˇ»\n    ": "",
    "\n        «HELLO WORLDˇ»\n    ": "",
    "\n        «The quick brown\n        fox jumps over\n        the lazy dogˇ»\n    ": "",
    "\n        «The Quick Brown\n        Fox Jumps Over\n        The Lazy Dogˇ»\n    ": "",
    "\n        «TheQuickBrown\n        FoxJumpsOver\n        TheLazyDogˇ»\n    ": "",
    "\n        ˇhello big beauˇtiful worldˇ\n    ": "",
    "\n        «HELLOˇ» big «BEAUTIFULˇ» «WORLDˇ»\n    ": "",
    "\n        «Theˇ» quick «brown\n        foxˇ» jumps «overˇ»\n        the «lazyˇ» dog\n    ": "",
    "\n        «THEˇ» quick «BROWN\n        FOXˇ» jumps «OVERˇ»\n        the «LAZYˇ» dog\n    ": "",
    "\n        «tschüßˇ»\n    ": "",
    "\n        «TSCHÜSSˇ»\n    ": "",
    "\n        aaa_bbbˇ\n    ": "",
    "\n        «aaaBbbˇ»\n    ": "",
    "\n        aaa_bˇbb bbˇb_ccc ˇccc_ddd\n    ": "",
    "\n        «aaaBbbˇ» «bbbCccˇ» «cccDddˇ»\n    ": "",
    "\n        «hElLo, WoRld!ˇ»\n    ": "",
    "\n        «HeLlO, wOrLD!ˇ»\n    ": "",
    "\n            ˇzero\n            one\n            two\n            three\n            four\n            five\n        ": "",
    "\n            zero\n            «one\n            two\n            threeˇ»\n            four\n            five\n        ": "",
    "\n            zero\n            one\n            two\n            three\n            ˇfour\n            five\n        ": "",
    "\n            // ˇLorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus mollis elit purus, a ornare lacus gravida vitae. Proin consectetur felis vel purus auctor, eu lacinia sapien scelerisque. Vivamus sit amet neque et quam tincidunt hendrerit. Praesent semper egestas tellus id dignissim. Pellentesque odio lectus, iaculis ac volutpat et, blandit quis urna. Sed vestibulum nisi sit amet nisl venenatis tempus. Donec molestie blandit quam, et porta nunc laoreet in. Integer sit amet scelerisque nisi. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas porta metus, eu viverra ipsum efficitur quis. Donec luctus eros turpis, id vulputate turpis porttitor id. Aliquam id accumsan eros.\n        ": "",
    "\n            // ˇLorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus mollis elit\n            // purus, a ornare lacus gravida vitae. Proin consectetur felis vel purus\n            // auctor, eu lacinia sapien scelerisque. Vivamus sit amet neque et quam\n            // tincidunt hendrerit. Praesent semper egestas tellus id dignissim.\n            // Pellentesque odio lectus, iaculis ac volutpat et, blandit quis urna. Sed\n            // vestibulum nisi sit amet nisl venenatis tempus. Donec molestie blandit quam,\n            // et porta nunc laoreet in. Integer sit amet scelerisque nisi. Lorem ipsum\n            // dolor sit amet, consectetur adipiscing elit. Cras egestas porta metus, eu\n            // viverra ipsum efficitur quis. Donec luctus eros turpis, id vulputate turpis\n            // porttitor id. Aliquam id accumsan eros.\n        ": "",
    "\n            «// Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus mollis elit purus, a ornare lacus gravida vitae. Proin consectetur felis vel purus auctor, eu lacinia sapien scelerisque. Vivamus sit amet neque et quam tincidunt hendrerit. Praesent semper egestas tellus id dignissim. Pellentesque odio lectus, iaculis ac volutpat et, blandit quis urna. Sed vestibulum nisi sit amet nisl venenatis tempus. Donec molestie blandit quam, et porta nunc laoreet in. Integer sit amet scelerisque nisi. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas porta metus, eu viverra ipsum efficitur quis. Donec luctus eros turpis, id vulputate turpis porttitor id. Aliquam id accumsan eros.ˇ»\n        ": "",
    "\n            «// Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus mollis elit\n            // purus, a ornare lacus gravida vitae. Proin consectetur felis vel purus\n            // auctor, eu lacinia sapien scelerisque. Vivamus sit amet neque et quam\n            // tincidunt hendrerit. Praesent semper egestas tellus id dignissim.\n            // Pellentesque odio lectus, iaculis ac volutpat et, blandit quis urna. Sed\n            // vestibulum nisi sit amet nisl venenatis tempus. Donec molestie blandit quam,\n            // et porta nunc laoreet in. Integer sit amet scelerisque nisi. Lorem ipsum\n            // dolor sit amet, consectetur adipiscing elit. Cras egestas porta metus, eu\n            // viverra ipsum efficitur quis. Donec luctus eros turpis, id vulputate turpis\n            // porttitor id. Aliquam id accumsan eros.ˇ»\n        ": "",
    "\n            // ˇLorem ipsum dolor sit amet, consectetur adipiscing elit.\n            // ˇVivamus mollis elit purus, a ornare lacus gravida vitae. Proin consectetur felis vel purus auctor, eu lacinia sapien scelerisque.\n            // ˇVivamus sit amet neque et quam tincidunt hendrerit. Praesent semper egestas tellus id dignissim. Pellentesque odio lectus, iaculis ac volutpat et,\n            // ˇblandit quis urna. Sed vestibulum nisi sit amet nisl venenatis tempus. Donec molestie blandit quam, et porta nunc laoreet in. Integer sit amet scelerisque nisi. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas porta metus, eu viverra ipsum efficitur quis. Donec luctus eros turpis, id vulputate turpis porttitor id. Aliquam id accumsan eros.\n        ": "",
    "\n            // ˇLorem ipsum dolor sit amet, consectetur adipiscing elit. ˇVivamus mollis elit\n            // purus, a ornare lacus gravida vitae. Proin consectetur felis vel purus\n            // auctor, eu lacinia sapien scelerisque. ˇVivamus sit amet neque et quam\n            // tincidunt hendrerit. Praesent semper egestas tellus id dignissim.\n            // Pellentesque odio lectus, iaculis ac volutpat et, ˇblandit quis urna. Sed\n            // vestibulum nisi sit amet nisl venenatis tempus. Donec molestie blandit quam,\n            // et porta nunc laoreet in. Integer sit amet scelerisque nisi. Lorem ipsum\n            // dolor sit amet, consectetur adipiscing elit. Cras egestas porta metus, eu\n            // viverra ipsum efficitur quis. Donec luctus eros turpis, id vulputate turpis\n            // porttitor id. Aliquam id accumsan eros.\n        ": "",
    "\n            // ˇLorem ipsum dolor sit amet, consectetur adipiscing elit.\n            // ˇVivamus mollis elit purus, a ornare lacus gravida vitae. Proin consectetur felis vel purus auctor, eu lacinia sapien scelerisque.\n            //\n            // ˇVivamus sit amet neque et quam tincidunt hendrerit. Praesent semper egestas tellus id dignissim. Pellentesque odio lectus, iaculis ac volutpat et,\n            // ˇblandit quis urna. Sed vestibulum nisi sit amet nisl venenatis tempus. Donec molestie blandit quam, et porta nunc laoreet in. Integer sit amet scelerisque nisi. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas porta metus, eu viverra ipsum efficitur quis. Donec luctus eros turpis, id vulputate turpis porttitor id. Aliquam id accumsan eros.\n        ": "",
    "\n            // ˇLorem ipsum dolor sit amet, consectetur adipiscing elit. ˇVivamus mollis elit\n            // purus, a ornare lacus gravida vitae. Proin consectetur felis vel purus\n            // auctor, eu lacinia sapien scelerisque.\n            //\n            // ˇVivamus sit amet neque et quam tincidunt hendrerit. Praesent semper egestas\n            // tellus id dignissim. Pellentesque odio lectus, iaculis ac volutpat et,\n            // ˇblandit quis urna. Sed vestibulum nisi sit amet nisl venenatis tempus. Donec\n            // molestie blandit quam, et porta nunc laoreet in. Integer sit amet scelerisque\n            // nisi. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas\n            // porta metus, eu viverra ipsum efficitur quis. Donec luctus eros turpis, id\n            // vulputate turpis porttitor id. Aliquam id accumsan eros.\n        ": "",
    "\n            # ˇLorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus mollis elit purus, a ornare lacus gravida vitae. Proin consectetur felis vel purus auctor, eu lacinia sapien scelerisque. Vivamus sit amet neque et quam tincidunt hendrerit. Praesent semper egestas tellus id dignissim. Pellentesque odio lectus, iaculis ac volutpat et, blandit quis urna. Sed vestibulum nisi sit amet nisl venenatis tempus. Donec molestie blandit quam, et porta nunc laoreet in. Integer sit amet scelerisque nisi. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas porta metus, eu viverra ipsum efficitur quis. Donec luctus eros turpis, id vulputate turpis porttitor id. Aliquam id accumsan eros.\n        ": "",
    "\n            # ˇLorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus mollis elit\n            # purus, a ornare lacus gravida vitae. Proin consectetur felis vel purus auctor,\n            # eu lacinia sapien scelerisque. Vivamus sit amet neque et quam tincidunt\n            # hendrerit. Praesent semper egestas tellus id dignissim. Pellentesque odio\n            # lectus, iaculis ac volutpat et, blandit quis urna. Sed vestibulum nisi sit\n            # amet nisl venenatis tempus. Donec molestie blandit quam, et porta nunc laoreet\n            # in. Integer sit amet scelerisque nisi. Lorem ipsum dolor sit amet, consectetur\n            # adipiscing elit. Cras egestas porta metus, eu viverra ipsum efficitur quis.\n            # Donec luctus eros turpis, id vulputate turpis porttitor id. Aliquam id\n            # accumsan eros.\n        ": "",
    "\n            /// Adds two numbers.\n            /// Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus mollis elit purus, a ornare lacus gravida vitae.ˇ\n            fn add(a: u32, b: u32) -> u32 {\n                a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + bˇ\n            }\n        ": "",
    "\n            /// Adds two numbers. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n            /// Vivamus mollis elit purus, a ornare lacus gravida vitae.ˇ\n            fn add(a: u32, b: u32) -> u32 {\n                a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + bˇ\n            }\n        ": "",
    "\n            # Hello\n\n            Lorem ipsum dolor sit amet, ˇconsectetur adipiscing elit. Vivamus mollis elit purus, a ornare lacus gravida vitae. Proin consectetur felis vel purus auctor, eu lacinia sapien scelerisque. Vivamus sit amet neque et quam tincidunt hendrerit. Praesent semper egestas tellus id dignissim. Pellentesque odio lectus, iaculis ac volutpat et, blandit quis urna. Sed vestibulum nisi sit amet nisl venenatis tempus. Donec molestie blandit quam, et porta nunc laoreet in. Integer sit amet scelerisque nisi.\n        ": "",
    "\n            # Hello\n\n            Lorem ipsum dolor sit amet, ˇconsectetur adipiscing elit. Vivamus mollis elit\n            purus, a ornare lacus gravida vitae. Proin consectetur felis vel purus auctor,\n            eu lacinia sapien scelerisque. Vivamus sit amet neque et quam tincidunt\n            hendrerit. Praesent semper egestas tellus id dignissim. Pellentesque odio\n            lectus, iaculis ac volutpat et, blandit quis urna. Sed vestibulum nisi sit amet\n            nisl venenatis tempus. Donec molestie blandit quam, et porta nunc laoreet in.\n            Integer sit amet scelerisque nisi.\n        ": "",
    "\n            Lorem ipsum dolor sit amet, ˇconsectetur adipiscing elit. Vivamus mollis elit purus, a ornare lacus gravida vitae. Proin consectetur felis vel purus auctor, eu lacinia sapien scelerisque. Vivamus sit amet neque et quam tincidunt hendrerit. Praesent semper egestas tellus id dignissim. Pellentesque odio lectus, iaculis ac volutpat et, blandit quis urna. Sed vestibulum nisi sit amet nisl venenatis tempus. Donec molestie blandit quam, et porta nunc laoreet in. Integer sit amet scelerisque nisi.\n        ": "",
    "\n            Lorem ipsum dolor sit amet, ˇconsectetur adipiscing elit. Vivamus mollis elit\n            purus, a ornare lacus gravida vitae. Proin consectetur felis vel purus auctor,\n            eu lacinia sapien scelerisque. Vivamus sit amet neque et quam tincidunt\n            hendrerit. Praesent semper egestas tellus id dignissim. Pellentesque odio\n            lectus, iaculis ac volutpat et, blandit quis urna. Sed vestibulum nisi sit amet\n            nisl venenatis tempus. Donec molestie blandit quam, et porta nunc laoreet in.\n            Integer sit amet scelerisque nisi.\n        ": "",
    "\n            fn foo() {\n                if true {\n            «        // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus mollis elit purus, a ornare lacus gravida vitae.\n            // Praesent semper egestas tellus id dignissim.ˇ»\n                    do_something();\n                } else {\n                    //\n                }\n            }\n        ": "",
    "\n            fn foo() {\n                if true {\n            «        // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus\n                    // mollis elit purus, a ornare lacus gravida vitae. Praesent semper\n                    // egestas tellus id dignissim.ˇ»\n                    do_something();\n                } else {\n                    //\n                }\n            }\n        ": "",
    "\n            fn foo() {\n                if true {\n            «ˇ        // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus mollis elit purus, a ornare lacus gravida vitae.\n            // Praesent semper egestas tellus id dignissim.»\n                    do_something();\n                } else {\n                    //\n                }\n\n            }\n        ": "",
    "\n            fn foo() {\n                if true {\n            «ˇ        // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus\n                    // mollis elit purus, a ornare lacus gravida vitae. Praesent semper\n                    // egestas tellus id dignissim.»\n                    do_something();\n                } else {\n                    //\n                }\n\n            }\n        ": "",
    "\n        1«2ˇ»3\n        4ˇ567\n        «8ˇ»9": "",
    "\n        1ˇ3\n        ˇ9": "",
    "\n        1ˇ3\n        9ˇ\n        «oˇ»ne": "",
    "\n        12ˇ3\n        4567\n        9ˇ\n        8ˇne": "",
    "\n        The quick brown\n        fox juˇmps over\n        the lazy dog": "",
    "\n        Tˇhe quick brown\n        «foˇ»x jumps over\n        tˇhe lazy dog": "",
    "\n        fox jumps over\n        Tˇhe quick brown\n        fox jumps over\n        ˇx jumps over\n        fox jumps over\n        tˇhe lazy dog": "",
    "\n        const a: B = (\n            c(),\n            «d(\n                e,\n                f\n            )ˇ»\n        );\n    ": "",
    "\n        const a: B = (\n            c(),\n            ˇ\n        );\n    ": "",
    "\n        const a: B = (\n            c(),\n            d(\n                e,\n                f\n            )ˇ\n        );\n    ": "",
    "\n        ˇ\n        const a: B = (\n            c(),\n        );\n    ": "",
    "\n        d(\n            e,\n            f\n        )ˇ\n        const a: B = (\n            c(),\n        );\n    ": "",
    "\n        const a: B = (\n            c(),\n        «    d(\n                e,\n                f\n            )\n        ˇ»);\n    ": "",
    "\n        const a: B = (\n            c(),\n        ˇ);\n    ": "",
    "\n        const a: B = (\n            c(),\n            d(\n                e,\n                f\n            )\n        ˇ);\n    ": "",
    "\n        const a: B = (\n            c(),\n            d(\n                e,\n                fˇ\n            )\n        );\n    ": "",
    "\n        const a: B = (\n            c(),\n            d(\n                e,\n                f    d(\n                    e,\n                    f\n                )\n        ˇ\n            )\n        );\n    ": "",
    "\n        const a: B = (\n            c(),\n            somethin«g(\n                e,\n                f\n            )ˇ»\n        );\n    ": "",
    "\n        const a: B = (\n            c(),\n            something(\n                e,\n                f\n            )\n        );\n        g(\n            e,\n            f\n        )ˇ": "",
    "    d(\n        e\n    );\n": "",
    "\n        fn a() {\n            b();\n            if c() {\n                ˇ\n            }\n        }\n    ": "",
    "\n        fn a() {\n            b();\n            if c() {\n                d(\n                    e\n                );\n        ˇ\n            }\n        }\n    ": "",
    "\n        fn a() {\n            b();\n            ˇ\n        }\n    ": "",
    "\n        fn a() {\n            b();\n            d(\n                e\n            );\n        ˇ\n        }\n    ": "",
    "aa\nb«ˇb\ncc\ndd\ne»e\nff": "",
    "aa\nbbˇ\nccˇ\nddˇ\neˇe\nff": "",
    "aa\nb«b\ncc\ndd\neˇ»e\nff": "",
    "«ˇaa\nbb\ncc\ndd\nee\nff»": "",
    "aaˇ\nbbˇ\nccˇ\nddˇ\neeˇ\nffˇ": "",
    "«aa\nbb\ncc\ndd\nee\nffˇ»": "",
    "«ˇaa\nbb\ncc\ndd\nee\nff\n»": "",
    "aaˇ\nbbˇ\nccˇ\nddˇ\neeˇ\nffˇ\n": "",
    "«aa\nbb\ncc\ndd\nee\nff\nˇ»": "",
    "aa\nbb«ˇ\ncc\ndd\nee\n»ff\n": "",
    "aa\nbbˇ\nccˇ\nddˇ\neeˇ\nff\n": "",
    "aˇaˇaaa\nbbbbb\nˇccccc\nddddd\neeeee\nfffff\nggggg\nhhhhh\niiiiiˇ": "",
    "aaaaaˇ\nbbbbbˇ\ncccccˇ\ndddddˇ\neeeeeˇ\nfffffˇ\ngggggˇ\nhhhhh\niiiii": "",
    "abc\n           defˇghi\n\n           jk\n           nlmo\n           ": "",
    "abcˇ\n           defˇghi\n\n           jk\n           nlmo\n           ": "",
    "abcˇ\n            defˇghi\n\n            jk\n            nlmo\n            ": "",
    "abc\n           defˇghi\n\n           jk\n           nlmˇo\n           ": "",
    "abc\n           def«ˇg»hi\n\n           jk\n           nlmo\n           ": "",
    "abc\n           def«ˇg»hi\n\n           jk\n           nlm«ˇo»\n           ": "",
    "a«bc\n           defgˇ»hi\n\n           jk\n           nlmo\n           ": "",
    "a«bcˇ»\n           d«efgˇ»hi\n\n           j«kˇ»\n           nlmo\n           ": "",
    "a«bcˇ»\n           d«efgˇ»hi\n\n           j«kˇ»\n           n«lmoˇ»\n           ": "",
    "abc\n           d«ˇefghi\n\n           jk\n           nlm»o\n           ": "",
    "a«ˇbc»\n           d«ˇef»ghi\n\n           j«ˇk»\n           n«ˇlm»o\n           ": "",
    "abc\n           d«ˇef»ghi\n\n           j«ˇk»\n           n«ˇlm»o\n           ": "",
    "abc\n«abcˇ»\nabc": "",
    "«abcˇ»\n«abcˇ»\n«abcˇ»": "",
    "abc\n«ˇabc»\nabc": "",
    "«ˇabc»\n«ˇabc»\n«ˇabc»": "",
    "abc\nˇ   abc\nabc": "",
    "abc\n«   ˇ»abc\nabc": "",
    "abc\n«ˇ  »abc\nabc": "",
    "abc\n«  ˇ»abc\nabc": "",
    "let foo = 2;\nlˇet foo = 2;\nlet fooˇ = 2;\nlet foo = 2;\nlet foo = ˇ2;": "",
    "let foo = 2;\n«letˇ» foo = 2;\nlet «fooˇ» = 2;\nlet foo = 2;\nlet foo = «2ˇ»;": "",
    "\n        ˇbbb\n        ccc\n\n        bbb\n        ccc\n        ": "",
    "\n                «bbbˇ»\n                ccc\n\n                bbb\n                ccc\n                ": "",
    "\n                «bbbˇ»\n                ccc\n\n                «bbbˇ»\n                ccc\n                ": "",
    "«aˇ»": "",
    "\n        use mod1::mod2::{mod3, mod4};\n\n        fn fn_1(param1: bool, param2: &str) {\n            let var1 = ": "",
    ";\n        }\n    ": "",
    "\n                use mod1::mod2::{mod3, «mod4ˇ»};\n\n                fn fn_1«ˇ(param1: bool, param2: &str)» {\n                    let var1 = ": "",
    ";\n                }\n            ": "",
    "\n                use mod1::mod2::«{mod3, mod4}ˇ»;\n\n                «ˇfn fn_1(param1: bool, param2: &str) {\n                    let var1 = ": "",
    ";\n                }»\n            ": "",
    "\n                use mod1::mod2::{mod3, mo«ˇ»d4};\n\n                fn fn_1(para«ˇm1: bool, pa»ram2: &str) {\n                    let var1 = ": "",
    "\n                use mod1::mod2::«{mod3, mod4}ˇ»;\n\n                fn fn_1«ˇ(param1: bool, param2: &str)» {\n                    «let var1 = ": "",
    ";ˇ»\n                }\n            ": "",
    "\n        impl A {\n            // this is an uncommitted comment\n\n            fn b() {\n                c();\n            }\n\n            // this is another uncommitted comment\n\n            fn d() {\n                // e\n                // f\n            }\n        }\n\n        fn g() {\n            // h\n        }\n    ": "",
    "\n        ˇimpl A {\n\n            fn b() {\n                c();\n            }\n\n            fn d() {\n                // e\n                // f\n            }\n        }\n\n        fn g() {\n            // h\n        }\n    ": "",
    "\n        ˇimpl A {\n      -     // this is an uncommitted comment\n\n            fn b() {\n                c();\n            }\n\n      -     // this is another uncommitted comment\n      -\n            fn d() {\n                // e\n                // f\n            }\n        }\n\n        fn g() {\n            // h\n        }\n    ": "",
    "\n        impl A {\n            // this is an uncommitted comment\n\n            fn b() {\n                ⋯\n            }\n\n            // this is another uncommitted comment\n\n            fn d() {\n                ⋯\n            }\n        }\n\n        fn g() {\n            ⋯\n        }\n        ": "",
    "\n                (_ ": "",
    " @end) @indent\n                (_ ": "",
    " @end) @indent\n            ": "",
    "\n            impl A {\n\n                fn b() {}\n\n            «fn c() {\n\n            }ˇ»\n            }\n        ": "",
    "\n            impl A {\n\n                fn b() {}\n\n                «fn c() {\n\n                }ˇ»\n            }\n        ": "",
    "\n                impl A {\n                «\n                // a\n                fn b(){}\n                »\n                «\n                    }\n                    fn c(){}\n                »\n            ": "",
    "\n                    impl A {\n\n                        // a\n                        fn b(){}\n\n\n                    }\n                    fn c(){}\n\n                ": "",
    "\"": "",
    "\n            🏀ˇ\n            εˇ\n            ❤️ˇ\n        ": "",
    "\n            🏀{{{ˇ}}}\n            ε{{{ˇ}}}\n            ❤️{{{ˇ}}}\n        ": "",
    "\n            🏀{{{)ˇ}}}\n            ε{{{)ˇ}}}\n            ❤️{{{)ˇ}}}\n        ": "",
    "\n            🏀{{{)}}}}ˇ\n            ε{{{)}}}}ˇ\n            ❤️{{{)}}}}ˇ\n        ": "",
    "\n            ˇ\n            ˇ\n        ": "",
    "\n            /*ˇ */\n            /*ˇ */\n        ": "",
    "\n            /ˇ\n            ˇ\n        ": "",
    "\n            /*ˇ */\n            *ˇ\n        ": "",
    "a\"ˇ\"": "",
    "a\"\"ˇ": "",
    "\n            ˇ\n            ˇ\n            ˇ\n        ": "",
    "\n            ˇ)}\n            ˇ)}\n            ˇ)}\n        ": "",
    "\n            )}ˇ\n            )}ˇ\n            )}ˇ\n        ": "",
    "\n            )}]ˇ]\n            )}]ˇ]\n            )}]ˇ]\n        ": "",
    "\n            (script_element\n                (raw_text) @injection.content\n                (#set! injection.language ": "",
    "))\n            ": "",
    "\n            <body>ˇ\n                <script>\n                    var x = 1;ˇ\n                </script>\n            </body>ˇ\n        ": "",
    "\n            <body><aˇ>\n                <script>\n                    var x = 1;<aˇ\n                </script>\n            </body><aˇ>\n        ": "",
    "\n            <body><a b={c(ˇ)}>\n                <script>\n                    var x = 1;<a b={c(ˇ)}\n                </script>\n            </body><a b={c(ˇ)}>\n        ": "",
    "\n            <body><a b={c()d}ˇ>\n                <script>\n                    var x = 1;<a b={c()d}ˇ\n                </script>\n            </body><a b={c()d}ˇ>\n        ": "",
    "\n            <body><a b={c()d}>ˇ\n                <script>\n                    var x = 1;<a b={c()d}>ˇ\n                </script>\n            </body><a b={c()d}>ˇ\n        ": "",
    "\n            <body><ˇ>\n                <script>\n                    var x = 1;<ˇ\n                </script>\n            </body><ˇ>\n        ": "",
    "\n            <body>/*ˇ\n                <script>\n                    var x = 1;/*ˇ */\n                </script>\n            </body>/*ˇ\n        ": "",
    "\n            let x = ˇ\n        ": "",
    "\n            let x = ": "",
    "\n        ": "",
    "ˇ\n        ": "",
    "ˇ ": "",
    "#\n        .unindent(),\n    );\n\n    // Inserting a closing quotation mark at the position of an automatically-inserted quotation\n    // mark. Nothing is inserted.\n    cx.update_editor(|editor, window, cx| {\n        editor.move_right(&Default::default(), window, cx);\n        editor.handle_input(": "",
    "#\n        .unindent(),\n    );\n}\n\n#[gpui::test]\nasync fn test_surround_with_pair(cx: &mut TestAppContext) {\n    init_test(cx, |_| {});\n\n    let language = Arc::new(Language::new(\n        LanguageConfig {\n            brackets: BracketPairConfig {\n                pairs: vec![\n                    BracketPair {\n                        start: ": "",
    ".to_string(),\n                        end: ": "",
    ".to_string(),\n                        close: true,\n                        surround: true,\n                        newline: true,\n                    },\n                    BracketPair {\n                        start: ": "",
    ".to_string(),\n                        close: true,\n                        surround: true,\n                        ..Default::default()\n                    },\n                ],\n                ..Default::default()\n            },\n            ..Default::default()\n        },\n        Some(tree_sitter_rust::LANGUAGE.into()),\n    ));\n\n    let text = r#": "",
    "#\n    .unindent();\n\n    let buffer = cx.new(|cx| Buffer::local(text, cx).with_language(language, cx));\n    let buffer = cx.new(|cx| MultiBuffer::singleton(buffer, cx));\n    let (editor, cx) = cx.add_window_view(|window, cx| build_editor(buffer, window, cx));\n    editor\n        .condition::<crate::EditorEvent>(cx, |editor, cx| !editor.buffer.read(cx).is_parsing(cx))\n        .await;\n\n    editor.update_in(cx, |editor, window, cx| {\n        editor.change_selections(None, window, cx, |s| {\n            s.select_display_ranges([\n                DisplayPoint::new(DisplayRow(0), 0)..DisplayPoint::new(DisplayRow(0), 1),\n                DisplayPoint::new(DisplayRow(1), 0)..DisplayPoint::new(DisplayRow(1), 1),\n                DisplayPoint::new(DisplayRow(2), 0)..DisplayPoint::new(DisplayRow(2), 1),\n            ])\n        });\n\n        editor.handle_input(": "",
    ", window, cx);\n        editor.handle_input(": "",
    ", window, cx);\n        assert_eq!(\n            editor.text(cx),\n            ": "",
    "\n            .unindent()\n        );\n        assert_eq!(\n            editor.selections.display_ranges(cx),\n            [\n                DisplayPoint::new(DisplayRow(0), 3)..DisplayPoint::new(DisplayRow(0), 4),\n                DisplayPoint::new(DisplayRow(1), 3)..DisplayPoint::new(DisplayRow(1), 4),\n                DisplayPoint::new(DisplayRow(2), 3)..DisplayPoint::new(DisplayRow(2), 4)\n            ]\n        );\n\n        editor.undo(&Undo, window, cx);\n        editor.undo(&Undo, window, cx);\n        editor.undo(&Undo, window, cx);\n        assert_eq!(\n            editor.text(cx),\n            ": "",
    "\n            .unindent()\n        );\n        assert_eq!(\n            editor.selections.display_ranges(cx),\n            [\n                DisplayPoint::new(DisplayRow(0), 0)..DisplayPoint::new(DisplayRow(0), 1),\n                DisplayPoint::new(DisplayRow(1), 0)..DisplayPoint::new(DisplayRow(1), 1),\n                DisplayPoint::new(DisplayRow(2), 0)..DisplayPoint::new(DisplayRow(2), 1)\n            ]\n        );\n\n        // Ensure inserting the first character of a multi-byte bracket pair\n        // doesn't surround the selections with the bracket.\n        editor.handle_input(": "",
    "\n            .unindent()\n        );\n        assert_eq!(\n            editor.selections.display_ranges(cx),\n            [\n                DisplayPoint::new(DisplayRow(0), 1)..DisplayPoint::new(DisplayRow(0), 1),\n                DisplayPoint::new(DisplayRow(1), 1)..DisplayPoint::new(DisplayRow(1), 1),\n                DisplayPoint::new(DisplayRow(2), 1)..DisplayPoint::new(DisplayRow(2), 1)\n            ]\n        );\n\n        editor.undo(&Undo, window, cx);\n        assert_eq!(\n            editor.text(cx),\n            ": "",
    "\n            .unindent()\n        );\n        assert_eq!(\n            editor.selections.display_ranges(cx),\n            [\n                DisplayPoint::new(DisplayRow(0), 0)..DisplayPoint::new(DisplayRow(0), 1),\n                DisplayPoint::new(DisplayRow(1), 0)..DisplayPoint::new(DisplayRow(1), 1),\n                DisplayPoint::new(DisplayRow(2), 0)..DisplayPoint::new(DisplayRow(2), 1)\n            ]\n        );\n\n        // Ensure inserting the last character of a multi-byte bracket pair\n        // doesn't surround the selections with the bracket.\n        editor.handle_input(": "",
    "\n            .unindent()\n        );\n        assert_eq!(\n            editor.selections.display_ranges(cx),\n            [\n                DisplayPoint::new(DisplayRow(0), 1)..DisplayPoint::new(DisplayRow(0), 1),\n                DisplayPoint::new(DisplayRow(1), 1)..DisplayPoint::new(DisplayRow(1), 1),\n                DisplayPoint::new(DisplayRow(2), 1)..DisplayPoint::new(DisplayRow(2), 1)\n            ]\n        );\n    });\n}\n\n#[gpui::test]\nasync fn test_delete_autoclose_pair(cx: &mut TestAppContext) {\n    init_test(cx, |_| {});\n\n    let language = Arc::new(Language::new(\n        LanguageConfig {\n            brackets: BracketPairConfig {\n                pairs: vec![BracketPair {\n                    start: ": "",
    ".to_string(),\n                    end: ": "",
    ".to_string(),\n                    close: true,\n                    surround: true,\n                    newline: true,\n                }],\n                ..Default::default()\n            },\n            autoclose_before: ": "",
    ".to_string(),\n            ..Default::default()\n        },\n        Some(tree_sitter_rust::LANGUAGE.into()),\n    ));\n\n    let text = r#": "",
    "#\n    .unindent();\n\n    let buffer = cx.new(|cx| Buffer::local(text, cx).with_language(language, cx));\n    let buffer = cx.new(|cx| MultiBuffer::singleton(buffer, cx));\n    let (editor, cx) = cx.add_window_view(|window, cx| build_editor(buffer, window, cx));\n    editor\n        .condition::<crate::EditorEvent>(cx, |editor, cx| !editor.buffer.read(cx).is_parsing(cx))\n        .await;\n\n    editor.update_in(cx, |editor, window, cx| {\n        editor.change_selections(None, window, cx, |s| {\n            s.select_ranges([\n                Point::new(0, 1)..Point::new(0, 1),\n                Point::new(1, 1)..Point::new(1, 1),\n                Point::new(2, 1)..Point::new(2, 1),\n            ])\n        });\n\n        editor.handle_input(": "",
    "\n            .unindent()\n        );\n        assert_eq!(\n            editor.selections.ranges::<Point>(cx),\n            [\n                Point::new(0, 4)..Point::new(0, 4),\n                Point::new(1, 4)..Point::new(1, 4),\n                Point::new(2, 4)..Point::new(2, 4)\n            ]\n        );\n\n        editor.backspace(&Default::default(), window, cx);\n        editor.backspace(&Default::default(), window, cx);\n        assert_eq!(\n            editor.text(cx),\n            ": "",
    "\n            .unindent()\n        );\n        assert_eq!(\n            editor.selections.ranges::<Point>(cx),\n            [\n                Point::new(0, 2)..Point::new(0, 2),\n                Point::new(1, 2)..Point::new(1, 2),\n                Point::new(2, 2)..Point::new(2, 2)\n            ]\n        );\n\n        editor.delete_to_previous_word_start(&Default::default(), window, cx);\n        assert_eq!(\n            editor.text(cx),\n            ": "",
    "\n            .unindent()\n        );\n        assert_eq!(\n            editor.selections.ranges::<Point>(cx),\n            [\n                Point::new(0, 1)..Point::new(0, 1),\n                Point::new(1, 1)..Point::new(1, 1),\n                Point::new(2, 1)..Point::new(2, 1)\n            ]\n        );\n    });\n}\n\n#[gpui::test]\nasync fn test_always_treat_brackets_as_autoclosed_delete(cx: &mut TestAppContext) {\n    init_test(cx, |settings| {\n        settings.defaults.always_treat_brackets_as_autoclosed = Some(true);\n    });\n\n    let mut cx = EditorTestContext::new(cx).await;\n\n    let language = Arc::new(Language::new(\n        LanguageConfig {\n            brackets: BracketPairConfig {\n                pairs: vec![\n                    BracketPair {\n                        start: ": "",
    ".to_string(),\n                        close: false,\n                        surround: true,\n                        newline: true,\n                    },\n                ],\n                ..Default::default()\n            },\n            autoclose_before: ": "",
    ".to_string(),\n            ..Default::default()\n        },\n        Some(tree_sitter_rust::LANGUAGE.into()),\n    ));\n\n    cx.language_registry().add(language.clone());\n    cx.update_buffer(|buffer, cx| {\n        buffer.set_language(Some(language), cx);\n    });\n\n    cx.set_state(\n        &": "",
    "\n        .unindent(),\n    );\n\n    cx.update_editor(|editor, window, cx| {\n        editor.backspace(&Default::default(), window, cx);\n        editor.backspace(&Default::default(), window, cx);\n    });\n\n    cx.assert_editor_state(\n        &": "",
    "\n        .unindent(),\n    );\n\n    cx.update_editor(|editor, window, cx| {\n        editor.handle_input(": "",
    ", window, cx);\n        editor.move_right(&MoveRight, window, cx);\n        editor.move_right(&MoveRight, window, cx);\n        editor.move_left(&MoveLeft, window, cx);\n        editor.move_left(&MoveLeft, window, cx);\n        editor.backspace(&Default::default(), window, cx);\n    });\n\n    cx.assert_editor_state(\n        &": "",
    "\n        .unindent(),\n    );\n\n    cx.update_editor(|editor, window, cx| {\n        editor.backspace(&Default::default(), window, cx);\n    });\n\n    cx.assert_editor_state(\n        &": "",
    "\n        .unindent(),\n    );\n}\n\n#[gpui::test]\nasync fn test_auto_replace_emoji_shortcode(cx: &mut TestAppContext) {\n    init_test(cx, |_| {});\n\n    let language = Arc::new(Language::new(\n        LanguageConfig::default(),\n        Some(tree_sitter_rust::LANGUAGE.into()),\n    ));\n\n    let buffer = cx.new(|cx| Buffer::local(": "",
    ", cx).with_language(language, cx));\n    let buffer = cx.new(|cx| MultiBuffer::singleton(buffer, cx));\n    let (editor, cx) = cx.add_window_view(|window, cx| build_editor(buffer, window, cx));\n    editor\n        .condition::<crate::EditorEvent>(cx, |editor, cx| !editor.buffer.read(cx).is_parsing(cx))\n        .await;\n\n    editor.update_in(cx, |editor, window, cx| {\n        editor.set_auto_replace_emoji_shortcode(true);\n\n        editor.handle_input(": "",
    ", window, cx);\n        assert_eq!(editor.text(cx), ": "",
    ".unindent());\n\n        editor.handle_input(": "",
    ".unindent());\n\n        // Ensure shortcode gets replaced when it is part of a word that only consists of emojis\n        editor.handle_input(": "",
    ".unindent());\n\n        // Ensure shortcode does not get replaced when it is part of a word\n        editor.handle_input(": "",
    ".unindent());\n\n        editor.set_auto_replace_emoji_shortcode(false);\n\n        // Ensure shortcode does not get replaced when auto replace is off\n        editor.handle_input(": "",
    ".unindent()\n        );\n\n        editor.handle_input(": "",
    ".unindent()\n        );\n    });\n}\n\n#[gpui::test]\nasync fn test_snippet_placeholder_choices(cx: &mut TestAppContext) {\n    init_test(cx, |_| {});\n\n    let (text, insertion_ranges) = marked_text_ranges(\n        indoc! {": "",
    "},\n        false,\n    );\n\n    let buffer = cx.update(|cx| MultiBuffer::build_simple(&text, cx));\n    let (editor, cx) = cx.add_window_view(|window, cx| build_editor(buffer, window, cx));\n\n    _ = editor.update_in(cx, |editor, window, cx| {\n        let snippet = Snippet::parse(": "",
    ").unwrap();\n\n        editor\n            .insert_snippet(&insertion_ranges, snippet, window, cx)\n            .unwrap();\n\n        fn assert(editor: &mut Editor, cx: &mut Context<Editor>, marked_text: &str) {\n            let (expected_text, selection_ranges) = marked_text_ranges(marked_text, false);\n            assert_eq!(editor.text(cx), expected_text);\n            assert_eq!(editor.selections.ranges::<usize>(cx), selection_ranges);\n        }\n\n        assert(\n            editor,\n            cx,\n            indoc! {": "",
    "},\n        );\n\n        assert!(editor.context_menu_visible(), ": "",
    ");\n    });\n}\n\n#[gpui::test]\nasync fn test_snippets(cx: &mut TestAppContext) {\n    init_test(cx, |_| {});\n\n    let (text, insertion_ranges) = marked_text_ranges(\n        indoc! {": "",
    "},\n        false,\n    );\n\n    let buffer = cx.update(|cx| MultiBuffer::build_simple(&text, cx));\n    let (editor, cx) = cx.add_window_view(|window, cx| build_editor(buffer, window, cx));\n\n    editor.update_in(cx, |editor, window, cx| {\n        let snippet = Snippet::parse(": "",
    "},\n        );\n\n        // Can't move earlier than the first tab stop\n        assert!(!editor.move_to_prev_snippet_tabstop(window, cx));\n        assert(\n            editor,\n            cx,\n            indoc! {": "",
    "},\n        );\n\n        assert!(editor.move_to_next_snippet_tabstop(window, cx));\n        assert(\n            editor,\n            cx,\n            indoc! {": "",
    "},\n        );\n\n        editor.move_to_prev_snippet_tabstop(window, cx);\n        assert(\n            editor,\n            cx,\n            indoc! {": "",
    "},\n        );\n        assert!(editor.move_to_next_snippet_tabstop(window, cx));\n        assert(\n            editor,\n            cx,\n            indoc! {": "",
    "},\n        );\n\n        // As soon as the last tab stop is reached, snippet state is gone\n        editor.move_to_prev_snippet_tabstop(window, cx);\n        assert(\n            editor,\n            cx,\n            indoc! {": "",
    "},\n        );\n    });\n}\n\n#[gpui::test]\nasync fn test_document_format_during_save(cx: &mut TestAppContext) {\n    init_test(cx, |_| {});\n\n    let fs = FakeFs::new(cx.executor());\n    fs.insert_file(path!(": "",
    "), Default::default()).await;\n\n    let project = Project::test(fs, [path!(": "",
    ").as_ref()], cx).await;\n\n    let language_registry = project.read_with(cx, |project, _| project.languages().clone());\n    language_registry.add(rust_lang());\n    let mut fake_servers = language_registry.register_fake_lsp(\n        ": "",
    ",\n        FakeLspAdapter {\n            capabilities: lsp::ServerCapabilities {\n                document_formatting_provider: Some(lsp::OneOf::Left(true)),\n                ..Default::default()\n            },\n            ..Default::default()\n        },\n    );\n\n    let buffer = project\n        .update(cx, |project, cx| {\n            project.open_local_buffer(path!(": "",
    "), cx)\n        })\n        .await\n        .unwrap();\n\n    let buffer = cx.new(|cx| MultiBuffer::singleton(buffer, cx));\n    let (editor, cx) = cx.add_window_view(|window, cx| {\n        build_editor_with_project(project.clone(), buffer, window, cx)\n    });\n    editor.update_in(cx, |editor, window, cx| {\n        editor.set_text(": "",
    ", window, cx)\n    });\n    assert!(cx.read(|cx| editor.is_dirty(cx)));\n\n    cx.executor().start_waiting();\n    let fake_server = fake_servers.next().await.unwrap();\n\n    let save = editor\n        .update_in(cx, |editor, window, cx| {\n            editor.save(true, project.clone(), window, cx)\n        })\n        .unwrap();\n    fake_server\n        .handle_request::<lsp::request::Formatting, _, _>(move |params, _| async move {\n            assert_eq!(\n                params.text_document.uri,\n                lsp::Url::from_file_path(path!(": "",
    ")).unwrap()\n            );\n            assert_eq!(params.options.tab_size, 4);\n            Ok(Some(vec![lsp::TextEdit::new(\n                lsp::Range::new(lsp::Position::new(0, 3), lsp::Position::new(1, 0)),\n                ": "",
    ".to_string(),\n            )]))\n        })\n        .next()\n        .await;\n    cx.executor().start_waiting();\n    save.await;\n\n    assert_eq!(\n        editor.update(cx, |editor, cx| editor.text(cx)),\n        ": "",
    "\n    );\n    assert!(!cx.read(|cx| editor.is_dirty(cx)));\n\n    editor.update_in(cx, |editor, window, cx| {\n        editor.set_text(": "",
    ", window, cx)\n    });\n    assert!(cx.read(|cx| editor.is_dirty(cx)));\n\n    // Ensure we can still save even if formatting hangs.\n    fake_server.handle_request::<lsp::request::Formatting, _, _>(move |params, _| async move {\n        assert_eq!(\n            params.text_document.uri,\n            lsp::Url::from_file_path(path!(": "",
    ")).unwrap()\n        );\n        futures::future::pending::<()>().await;\n        unreachable!()\n    });\n    let save = editor\n        .update_in(cx, |editor, window, cx| {\n            editor.save(true, project.clone(), window, cx)\n        })\n        .unwrap();\n    cx.executor().advance_clock(super::FORMAT_TIMEOUT);\n    cx.executor().start_waiting();\n    save.await;\n    assert_eq!(\n        editor.update(cx, |editor, cx| editor.text(cx)),\n        ": "",
    "\n    );\n    assert!(!cx.read(|cx| editor.is_dirty(cx)));\n\n    // For non-dirty buffer, no formatting request should be sent\n    let save = editor\n        .update_in(cx, |editor, window, cx| {\n            editor.save(true, project.clone(), window, cx)\n        })\n        .unwrap();\n    let _pending_format_request = fake_server\n        .handle_request::<lsp::request::RangeFormatting, _, _>(move |_, _| async move {\n            panic!(": "",
    ");\n        })\n        .next();\n    cx.executor().start_waiting();\n    save.await;\n\n    // Set rust language override and assert overridden tabsize is sent to language server\n    update_test_language_settings(cx, |settings| {\n        settings.languages.insert(\n            ": "",
    ".into(),\n            LanguageSettingsContent {\n                tab_size: NonZeroU32::new(8),\n                ..Default::default()\n            },\n        );\n    });\n\n    editor.update_in(cx, |editor, window, cx| {\n        editor.set_text(": "",
    ", window, cx)\n    });\n    assert!(cx.read(|cx| editor.is_dirty(cx)));\n    let save = editor\n        .update_in(cx, |editor, window, cx| {\n            editor.save(true, project.clone(), window, cx)\n        })\n        .unwrap();\n    fake_server\n        .handle_request::<lsp::request::Formatting, _, _>(move |params, _| async move {\n            assert_eq!(\n                params.text_document.uri,\n                lsp::Url::from_file_path(path!(": "",
    ")).unwrap()\n            );\n            assert_eq!(params.options.tab_size, 8);\n            Ok(Some(vec![]))\n        })\n        .next()\n        .await;\n    cx.executor().start_waiting();\n    save.await;\n}\n\n#[gpui::test]\nasync fn test_multibuffer_format_during_save(cx: &mut TestAppContext) {\n    init_test(cx, |_| {});\n\n    let cols = 4;\n    let rows = 10;\n    let sample_text_1 = sample_text(rows, cols, 'a');\n    assert_eq!(\n        sample_text_1,\n        ": "",
    "\n    );\n    let sample_text_2 = sample_text(rows, cols, 'l');\n    assert_eq!(\n        sample_text_2,\n        ": "",
    "\n    );\n    let sample_text_3 = sample_text(rows, cols, 'v');\n    assert_eq!(\n        sample_text_3,\n        ": "",
    "\n    );\n\n    let fs = FakeFs::new(cx.executor());\n    fs.insert_tree(\n        path!(": "",
    "),\n        json!({\n            ": "",
    ": sample_text_1,\n            ": "",
    ": sample_text_2,\n            ": "",
    ": sample_text_3,\n        }),\n    )\n    .await;\n\n    let project = Project::test(fs, [path!(": "",
    ").as_ref()], cx).await;\n    let workspace = cx.add_window(|window, cx| Workspace::test_new(project.clone(), window, cx));\n    let cx = &mut VisualTestContext::from_window(*workspace.deref(), cx);\n\n    let language_registry = project.read_with(cx, |project, _| project.languages().clone());\n    language_registry.add(rust_lang());\n    let mut fake_servers = language_registry.register_fake_lsp(\n        ": "",
    ",\n        FakeLspAdapter {\n            capabilities: lsp::ServerCapabilities {\n                document_formatting_provider: Some(lsp::OneOf::Left(true)),\n                ..Default::default()\n            },\n            ..Default::default()\n        },\n    );\n\n    let worktree = project.update(cx, |project, cx| {\n        let mut worktrees = project.worktrees(cx).collect::<Vec<_>>();\n        assert_eq!(worktrees.len(), 1);\n        worktrees.pop().unwrap()\n    });\n    let worktree_id = worktree.update(cx, |worktree, _| worktree.id());\n\n    let buffer_1 = project\n        .update(cx, |project, cx| {\n            project.open_buffer((worktree_id, ": "",
    "), cx)\n        })\n        .await\n        .unwrap();\n    let buffer_2 = project\n        .update(cx, |project, cx| {\n            project.open_buffer((worktree_id, ": "",
    "), cx)\n        })\n        .await\n        .unwrap();\n    let buffer_3 = project\n        .update(cx, |project, cx| {\n            project.open_buffer((worktree_id, ": "",
    "), cx)\n        })\n        .await\n        .unwrap();\n\n    let multi_buffer = cx.new(|cx| {\n        let mut multi_buffer = MultiBuffer::new(ReadWrite);\n        multi_buffer.push_excerpts(\n            buffer_1.clone(),\n            [\n                ExcerptRange {\n                    context: Point::new(0, 0)..Point::new(3, 0),\n                    primary: None,\n                },\n                ExcerptRange {\n                    context: Point::new(5, 0)..Point::new(7, 0),\n                    primary: None,\n                },\n                ExcerptRange {\n                    context: Point::new(9, 0)..Point::new(10, 4),\n                    primary: None,\n                },\n            ],\n            cx,\n        );\n        multi_buffer.push_excerpts(\n            buffer_2.clone(),\n            [\n                ExcerptRange {\n                    context: Point::new(0, 0)..Point::new(3, 0),\n                    primary: None,\n                },\n                ExcerptRange {\n                    context: Point::new(5, 0)..Point::new(7, 0),\n                    primary: None,\n                },\n                ExcerptRange {\n                    context: Point::new(9, 0)..Point::new(10, 4),\n                    primary: None,\n                },\n            ],\n            cx,\n        );\n        multi_buffer.push_excerpts(\n            buffer_3.clone(),\n            [\n                ExcerptRange {\n                    context: Point::new(0, 0)..Point::new(3, 0),\n                    primary: None,\n                },\n                ExcerptRange {\n                    context: Point::new(5, 0)..Point::new(7, 0),\n                    primary: None,\n                },\n                ExcerptRange {\n                    context: Point::new(9, 0)..Point::new(10, 4),\n                    primary: None,\n                },\n            ],\n            cx,\n        );\n        multi_buffer\n    });\n    let multi_buffer_editor = cx.new_window_entity(|window, cx| {\n        Editor::new(\n            EditorMode::Full,\n            multi_buffer,\n            Some(project.clone()),\n            true,\n            window,\n            cx,\n        )\n    });\n\n    multi_buffer_editor.update_in(cx, |editor, window, cx| {\n        editor.change_selections(Some(Autoscroll::Next), window, cx, |s| {\n            s.select_ranges(Some(1..2))\n        });\n        editor.insert(": "",
    ", window, cx);\n    });\n    assert!(cx.read(|cx| multi_buffer_editor.is_dirty(cx)));\n    multi_buffer_editor.update_in(cx, |editor, window, cx| {\n        editor.change_selections(Some(Autoscroll::Next), window, cx, |s| {\n            s.select_ranges(Some(60..70))\n        });\n        editor.insert(": "",
    ", window, cx);\n    });\n    assert!(cx.read(|cx| multi_buffer_editor.is_dirty(cx)));\n\n    // First two buffers should be edited, but not the third one.\n    assert_eq!(\n        multi_buffer_editor.update(cx, |editor, cx| editor.text(cx)),\n        ": "",
    ",\n    );\n    buffer_1.update(cx, |buffer, _| {\n        assert!(buffer.is_dirty());\n        assert_eq!(\n            buffer.text(),\n            ": "",
    ",\n        )\n    });\n    buffer_2.update(cx, |buffer, _| {\n        assert!(buffer.is_dirty());\n        assert_eq!(\n            buffer.text(),\n            ": "",
    ",\n        )\n    });\n    buffer_3.update(cx, |buffer, _| {\n        assert!(!buffer.is_dirty());\n        assert_eq!(buffer.text(), sample_text_3,)\n    });\n    cx.executor().run_until_parked();\n\n    cx.executor().start_waiting();\n    let save = multi_buffer_editor\n        .update_in(cx, |editor, window, cx| {\n            editor.save(true, project.clone(), window, cx)\n        })\n        .unwrap();\n\n    let fake_server = fake_servers.next().await.unwrap();\n    fake_server\n        .server\n        .on_request::<lsp::request::Formatting, _, _>(move |params, _| async move {\n            Ok(Some(vec![lsp::TextEdit::new(\n                lsp::Range::new(lsp::Position::new(0, 3), lsp::Position::new(1, 0)),\n                format!(": "",
    ", params.text_document.uri),\n            )]))\n        })\n        .detach();\n    save.await;\n\n    // After multibuffer saving, only first two buffers should be reformatted, but not the third one (as it was not dirty).\n    assert!(cx.read(|cx| !multi_buffer_editor.is_dirty(cx)));\n    assert_eq!(\n        multi_buffer_editor.update(cx, |editor, cx| editor.text(cx)),\n        uri!(": "",
    "),\n    );\n    buffer_1.update(cx, |buffer, _| {\n        assert!(!buffer.is_dirty());\n        assert_eq!(\n            buffer.text(),\n            uri!(": "",
    "),\n        )\n    });\n    buffer_2.update(cx, |buffer, _| {\n        assert!(!buffer.is_dirty());\n        assert_eq!(\n            buffer.text(),\n            uri!(": "",
    "),\n        )\n    });\n    buffer_3.update(cx, |buffer, _| {\n        assert!(!buffer.is_dirty());\n        assert_eq!(buffer.text(), sample_text_3,)\n    });\n}\n\n#[gpui::test]\nasync fn test_range_format_during_save(cx: &mut TestAppContext) {\n    init_test(cx, |_| {});\n\n    let fs = FakeFs::new(cx.executor());\n    fs.insert_file(path!(": "",
    ",\n        FakeLspAdapter {\n            capabilities: lsp::ServerCapabilities {\n                document_range_formatting_provider: Some(lsp::OneOf::Left(true)),\n                ..Default::default()\n            },\n            ..Default::default()\n        },\n    );\n\n    let buffer = project\n        .update(cx, |project, cx| {\n            project.open_local_buffer(path!(": "",
    ", window, cx)\n    });\n    assert!(cx.read(|cx| editor.is_dirty(cx)));\n\n    cx.executor().start_waiting();\n    let fake_server = fake_servers.next().await.unwrap();\n\n    let save = editor\n        .update_in(cx, |editor, window, cx| {\n            editor.save(true, project.clone(), window, cx)\n        })\n        .unwrap();\n    fake_server\n        .handle_request::<lsp::request::RangeFormatting, _, _>(move |params, _| async move {\n            assert_eq!(\n                params.text_document.uri,\n                lsp::Url::from_file_path(path!(": "",
    ".to_string(),\n            )]))\n        })\n        .next()\n        .await;\n    cx.executor().start_waiting();\n    save.await;\n    assert_eq!(\n        editor.update(cx, |editor, cx| editor.text(cx)),\n        ": "",
    ", window, cx)\n    });\n    assert!(cx.read(|cx| editor.is_dirty(cx)));\n\n    // Ensure we can still save even if formatting hangs.\n    fake_server.handle_request::<lsp::request::RangeFormatting, _, _>(\n        move |params, _| async move {\n            assert_eq!(\n                params.text_document.uri,\n                lsp::Url::from_file_path(path!(": "",
    ")).unwrap()\n            );\n            futures::future::pending::<()>().await;\n            unreachable!()\n        },\n    );\n    let save = editor\n        .update_in(cx, |editor, window, cx| {\n            editor.save(true, project.clone(), window, cx)\n        })\n        .unwrap();\n    cx.executor().advance_clock(super::FORMAT_TIMEOUT);\n    cx.executor().start_waiting();\n    save.await;\n    assert_eq!(\n        editor.update(cx, |editor, cx| editor.text(cx)),\n        ": "",
    ");\n        })\n        .next();\n    cx.executor().start_waiting();\n    save.await;\n\n    // Set Rust language override and assert overridden tabsize is sent to language server\n    update_test_language_settings(cx, |settings| {\n        settings.languages.insert(\n            ": "",
    ", window, cx)\n    });\n    assert!(cx.read(|cx| editor.is_dirty(cx)));\n    let save = editor\n        .update_in(cx, |editor, window, cx| {\n            editor.save(true, project.clone(), window, cx)\n        })\n        .unwrap();\n    fake_server\n        .handle_request::<lsp::request::RangeFormatting, _, _>(move |params, _| async move {\n            assert_eq!(\n                params.text_document.uri,\n                lsp::Url::from_file_path(path!(": "",
    ")).unwrap()\n            );\n            assert_eq!(params.options.tab_size, 8);\n            Ok(Some(vec![]))\n        })\n        .next()\n        .await;\n    cx.executor().start_waiting();\n    save.await;\n}\n\n#[gpui::test]\nasync fn test_document_format_manual_trigger(cx: &mut TestAppContext) {\n    init_test(cx, |settings| {\n        settings.defaults.formatter = Some(language_settings::SelectedFormatter::List(\n            FormatterList(vec![Formatter::LanguageServer { name: None }].into()),\n        ))\n    });\n\n    let fs = FakeFs::new(cx.executor());\n    fs.insert_file(path!(": "",
    ").as_ref()], cx).await;\n\n    let language_registry = project.read_with(cx, |project, _| project.languages().clone());\n    language_registry.add(Arc::new(Language::new(\n        LanguageConfig {\n            name: ": "",
    ".into(),\n            matcher: LanguageMatcher {\n                path_suffixes: vec![": "",
    ".to_string()],\n                ..Default::default()\n            },\n            ..LanguageConfig::default()\n        },\n        Some(tree_sitter_rust::LANGUAGE.into()),\n    )));\n    update_test_language_settings(cx, |settings| {\n        // Enable Prettier formatting for the same buffer, and ensure\n        // LSP is called instead of Prettier.\n        settings.defaults.prettier = Some(PrettierSettings {\n            allowed: true,\n            ..PrettierSettings::default()\n        });\n    });\n    let mut fake_servers = language_registry.register_fake_lsp(\n        ": "",
    ", window, cx)\n    });\n\n    cx.executor().start_waiting();\n    let fake_server = fake_servers.next().await.unwrap();\n\n    let format = editor\n        .update_in(cx, |editor, window, cx| {\n            editor.perform_format(\n                project.clone(),\n                FormatTrigger::Manual,\n                FormatTarget::Buffers,\n                window,\n                cx,\n            )\n        })\n        .unwrap();\n    fake_server\n        .handle_request::<lsp::request::Formatting, _, _>(move |params, _| async move {\n            assert_eq!(\n                params.text_document.uri,\n                lsp::Url::from_file_path(path!(": "",
    ".to_string(),\n            )]))\n        })\n        .next()\n        .await;\n    cx.executor().start_waiting();\n    format.await;\n    assert_eq!(\n        editor.update(cx, |editor, cx| editor.text(cx)),\n        ": "",
    "\n    );\n\n    editor.update_in(cx, |editor, window, cx| {\n        editor.set_text(": "",
    ", window, cx)\n    });\n    // Ensure we don't lock if formatting hangs.\n    fake_server.handle_request::<lsp::request::Formatting, _, _>(move |params, _| async move {\n        assert_eq!(\n            params.text_document.uri,\n            lsp::Url::from_file_path(path!(": "",
    ")).unwrap()\n        );\n        futures::future::pending::<()>().await;\n        unreachable!()\n    });\n    let format = editor\n        .update_in(cx, |editor, window, cx| {\n            editor.perform_format(\n                project,\n                FormatTrigger::Manual,\n                FormatTarget::Buffers,\n                window,\n                cx,\n            )\n        })\n        .unwrap();\n    cx.executor().advance_clock(super::FORMAT_TIMEOUT);\n    cx.executor().start_waiting();\n    format.await;\n    assert_eq!(\n        editor.update(cx, |editor, cx| editor.text(cx)),\n        ": "",
    "\n    );\n}\n\n#[gpui::test]\nasync fn test_organize_imports_manual_trigger(cx: &mut TestAppContext) {\n    init_test(cx, |settings| {\n        settings.defaults.formatter = Some(language_settings::SelectedFormatter::List(\n            FormatterList(vec![Formatter::LanguageServer { name: None }].into()),\n        ))\n    });\n\n    let fs = FakeFs::new(cx.executor());\n    fs.insert_file(path!(": "",
    ".to_string()],\n                ..Default::default()\n            },\n            ..LanguageConfig::default()\n        },\n        Some(tree_sitter_typescript::LANGUAGE_TYPESCRIPT.into()),\n    )));\n    update_test_language_settings(cx, |settings| {\n        settings.defaults.prettier = Some(PrettierSettings {\n            allowed: true,\n            ..PrettierSettings::default()\n        });\n    });\n    let mut fake_servers = language_registry.register_fake_lsp(\n        ": "",
    ",\n        FakeLspAdapter {\n            capabilities: lsp::ServerCapabilities {\n                code_action_provider: Some(lsp::CodeActionProviderCapability::Simple(true)),\n                ..Default::default()\n            },\n            ..Default::default()\n        },\n    );\n\n    let buffer = project\n        .update(cx, |project, cx| {\n            project.open_local_buffer(path!(": "",
    "), cx)\n        })\n        .await\n        .unwrap();\n\n    let buffer = cx.new(|cx| MultiBuffer::singleton(buffer, cx));\n    let (editor, cx) = cx.add_window_view(|window, cx| {\n        build_editor_with_project(project.clone(), buffer, window, cx)\n    });\n    editor.update_in(cx, |editor, window, cx| {\n        editor.set_text(\n            ": "",
    ",\n            window,\n            cx,\n        )\n    });\n\n    cx.executor().start_waiting();\n    let fake_server = fake_servers.next().await.unwrap();\n\n    let format = editor\n        .update_in(cx, |editor, window, cx| {\n            editor.perform_code_action_kind(\n                project.clone(),\n                CodeActionKind::SOURCE_ORGANIZE_IMPORTS,\n                window,\n                cx,\n            )\n        })\n        .unwrap();\n    fake_server\n        .handle_request::<lsp::request::CodeActionRequest, _, _>(move |params, _| async move {\n            assert_eq!(\n                params.text_document.uri,\n                lsp::Url::from_file_path(path!(": "",
    ")).unwrap()\n            );\n            Ok(Some(vec![lsp::CodeActionOrCommand::CodeAction(\n                lsp::CodeAction {\n                    title: ": "",
    ".to_string(),\n                    kind: Some(lsp::CodeActionKind::SOURCE_ORGANIZE_IMPORTS),\n                    edit: Some(lsp::WorkspaceEdit {\n                        changes: Some(\n                            [(\n                                params.text_document.uri.clone(),\n                                vec![lsp::TextEdit::new(\n                                    lsp::Range::new(\n                                        lsp::Position::new(1, 0),\n                                        lsp::Position::new(2, 0),\n                                    ),\n                                    ": "",
    ".to_string(),\n                                )],\n                            )]\n                            .into_iter()\n                            .collect(),\n                        ),\n                        ..Default::default()\n                    }),\n                    ..Default::default()\n                },\n            )]))\n        })\n        .next()\n        .await;\n    cx.executor().start_waiting();\n    format.await;\n    assert_eq!(\n        editor.update(cx, |editor, cx| editor.text(cx)),\n        ": "",
    "\n    );\n\n    editor.update_in(cx, |editor, window, cx| {\n        editor.set_text(\n            ": "",
    ",\n            window,\n            cx,\n        )\n    });\n    // Ensure we don't lock if code action hangs.\n    fake_server.handle_request::<lsp::request::CodeActionRequest, _, _>(\n        move |params, _| async move {\n            assert_eq!(\n                params.text_document.uri,\n                lsp::Url::from_file_path(path!(": "",
    ")).unwrap()\n            );\n            futures::future::pending::<()>().await;\n            unreachable!()\n        },\n    );\n    let format = editor\n        .update_in(cx, |editor, window, cx| {\n            editor.perform_code_action_kind(\n                project,\n                CodeActionKind::SOURCE_ORGANIZE_IMPORTS,\n                window,\n                cx,\n            )\n        })\n        .unwrap();\n    cx.executor().advance_clock(super::CODE_ACTION_TIMEOUT);\n    cx.executor().start_waiting();\n    format.await;\n    assert_eq!(\n        editor.update(cx, |editor, cx| editor.text(cx)),\n        ": "",
    "\n    );\n}\n\n#[gpui::test]\nasync fn test_concurrent_format_requests(cx: &mut TestAppContext) {\n    init_test(cx, |_| {});\n\n    let mut cx = EditorLspTestContext::new_rust(\n        lsp::ServerCapabilities {\n            document_formatting_provider: Some(lsp::OneOf::Left(true)),\n            ..Default::default()\n        },\n        cx,\n    )\n    .await;\n\n    cx.set_state(indoc! {": "",
    "});\n\n    // The format request takes a long time. When it completes, it inserts\n    // a newline and an indent before the `.`\n    cx.lsp\n        .handle_request::<lsp::request::Formatting, _, _>(move |_, cx| {\n            let executor = cx.background_executor().clone();\n            async move {\n                executor.timer(Duration::from_millis(100)).await;\n                Ok(Some(vec![lsp::TextEdit {\n                    range: lsp::Range::new(lsp::Position::new(0, 3), lsp::Position::new(0, 3)),\n                    new_text: ": "",
    ".into(),\n                }]))\n            }\n        });\n\n    // Submit a format request.\n    let format_1 = cx\n        .update_editor(|editor, window, cx| editor.format(&Format, window, cx))\n        .unwrap();\n    cx.executor().run_until_parked();\n\n    // Submit a second format request.\n    let format_2 = cx\n        .update_editor(|editor, window, cx| editor.format(&Format, window, cx))\n        .unwrap();\n    cx.executor().run_until_parked();\n\n    // Wait for both format requests to complete\n    cx.executor().advance_clock(Duration::from_millis(200));\n    cx.executor().start_waiting();\n    format_1.await.unwrap();\n    cx.executor().start_waiting();\n    format_2.await.unwrap();\n\n    // The formatting edits only happens once.\n    cx.assert_editor_state(indoc! {": "",
    "});\n}\n\n#[gpui::test]\nasync fn test_strip_whitespace_and_format_via_lsp(cx: &mut TestAppContext) {\n    init_test(cx, |settings| {\n        settings.defaults.formatter = Some(language_settings::SelectedFormatter::Auto)\n    });\n\n    let mut cx = EditorLspTestContext::new_rust(\n        lsp::ServerCapabilities {\n            document_formatting_provider: Some(lsp::OneOf::Left(true)),\n            ..Default::default()\n        },\n        cx,\n    )\n    .await;\n\n    // Set up a buffer white some trailing whitespace and no trailing newline.\n    cx.set_state(\n        &[\n            ": "",
    ",   //\n            ": "",
    ", //\n            ": "",
    ",   //\n        ]\n        .join(": "",
    "),\n    );\n\n    // Submit a format request.\n    let format = cx\n        .update_editor(|editor, window, cx| editor.format(&Format, window, cx))\n        .unwrap();\n\n    // Record which buffer changes have been sent to the language server\n    let buffer_changes = Arc::new(Mutex::new(Vec::new()));\n    cx.lsp\n        .handle_notification::<lsp::notification::DidChangeTextDocument, _>({\n            let buffer_changes = buffer_changes.clone();\n            move |params, _| {\n                buffer_changes.lock().extend(\n                    params\n                        .content_changes\n                        .into_iter()\n                        .map(|e| (e.range.unwrap(), e.text)),\n                );\n            }\n        });\n\n    // Handle formatting requests to the language server.\n    cx.lsp.handle_request::<lsp::request::Formatting, _, _>({\n        let buffer_changes = buffer_changes.clone();\n        move |_, _| {\n            // When formatting is requested, trailing whitespace has already been stripped,\n            // and the trailing newline has already been added.\n            assert_eq!(\n                &buffer_changes.lock()[1..],\n                &[\n                    (\n                        lsp::Range::new(lsp::Position::new(0, 3), lsp::Position::new(0, 4)),\n                        ": "",
    ".into()\n                    ),\n                    (\n                        lsp::Range::new(lsp::Position::new(2, 5), lsp::Position::new(2, 6)),\n                        ": "",
    ".into()\n                    ),\n                    (\n                        lsp::Range::new(lsp::Position::new(3, 4), lsp::Position::new(3, 4)),\n                        ": "",
    ".into()\n                    ),\n                ]\n            );\n\n            // Insert blank lines between each line of the buffer.\n            async move {\n                Ok(Some(vec![\n                    lsp::TextEdit {\n                        range: lsp::Range::new(lsp::Position::new(1, 0), lsp::Position::new(1, 0)),\n                        new_text: ": "",
    ".into(),\n                    },\n                    lsp::TextEdit {\n                        range: lsp::Range::new(lsp::Position::new(2, 0), lsp::Position::new(2, 0)),\n                        new_text: ": "",
    ".into(),\n                    },\n                ]))\n            }\n        }\n    });\n\n    // After formatting the buffer, the trailing whitespace is stripped,\n    // a newline is appended, and the edits provided by the language server\n    // have been applied.\n    format.await.unwrap();\n    cx.assert_editor_state(\n        &[\n            ": "",
    ",      //\n            ": "",
    ",  //\n            ": "",
    ",      //\n        ]\n        .join(": "",
    "),\n    );\n\n    // Undoing the formatting undoes the trailing whitespace removal, the\n    // trailing newline, and the LSP edits.\n    cx.update_buffer(|buffer, cx| buffer.undo(cx));\n    cx.assert_editor_state(\n        &[\n            ": "",
    "),\n    );\n}\n\n#[gpui::test]\nasync fn test_handle_input_for_show_signature_help_auto_signature_help_true(\n    cx: &mut TestAppContext,\n) {\n    init_test(cx, |_| {});\n\n    cx.update(|cx| {\n        cx.update_global::<SettingsStore, _>(|settings, cx| {\n            settings.update_user_settings::<EditorSettings>(cx, |settings| {\n                settings.auto_signature_help = Some(true);\n            });\n        });\n    });\n\n    let mut cx = EditorLspTestContext::new_rust(\n        lsp::ServerCapabilities {\n            signature_help_provider: Some(lsp::SignatureHelpOptions {\n                ..Default::default()\n            }),\n            ..Default::default()\n        },\n        cx,\n    )\n    .await;\n\n    let language = Language::new(\n        LanguageConfig {\n            name: ": "",
    ".into(),\n            brackets: BracketPairConfig {\n                pairs: vec![\n                    BracketPair {\n                        start: ": "",
    ".to_string(),\n                        close: false,\n                        surround: false,\n                        newline: true,\n                    },\n                    BracketPair {\n                        start: ": "",
    "\n            fn main() {\n                sampleˇ\n            }\n        ": "",
    "\n            fn main() {\n                sample(ˇ)\n            }\n        ": "",
    "\n        fn main() {\n            sample(ˇ);\n        }\n\n        fn sample(param1: u8, param2: u8) {}\n    ": "",
    "\n        fn main() {\n            sample(param1, param2ˇ);\n        }\n\n        fn sample(param1: u8, param2: u8) {}\n    ": "",
    "\n        fn main() {\n            sample(param1, «ˇparam2»);\n        }\n\n        fn sample(param1: u8, param2: u8) {}\n    ": "",
    "\n        fn main() {\n            sample(param1, ˇparam2);\n        }\n\n        fn sample(param1: u8, param2: u8) {}\n    ": "",
    "\n        oneˇ\n        two\n        three\n    ": "",
    "\n            one.|<>\n            two\n            three\n        ": "",
    "test signature": "",
    "No signature help was called for": "",
    "No signature help should be shown when completions menu is open": "",
    "\n        one.second_completionˇ\n        two\n        three\n    ": "",
    "\n                    one.second_ˇcompletion\n                    two\n                    threeˇ\n                ": "",
    "overlapping additional edit": "",
    "\n                    one.second_completion\n                    two\n                    threeˇ\n                ": "",
    "\n        one.second_completionˇ\n        two\n        three\n        additional edit\n    ": "",
    "\n        one.second_completion\n        twoˇ\n        threeˇ\n        additional edit\n    ": "",
    "\n        one.second_completion\n        two sˇ\n        three sˇ\n        additional edit\n    ": "",
    "\n            one.second_completion\n            two s\n            three <s|>\n            additional edit\n        ": "",
    "\n            one.second_completion\n            two si\n            three <si|>\n            additional edit\n        ": "",
    "\n        one.second_completion\n        two sixth_completionˇ\n        three sixth_completionˇ\n        additional edit\n    ": "",
    "main.ts": "",
    "{} {}": "",
    "/a/main.ts": "",
    "StickyHeaderExcerpt {\n            excerpt,\n            next_excerpt_controls_present,\n            next_buffer_row,\n        }: StickyHeaderExcerpt<'_>,": "",
    "a\nb\nc\n": "",
    "[]struct {\n\\tSignerId\\tstruct {\n\\t\\tIssuer\\t\\t\\tstring\\t`json:\"issuer\"`\n\\t\\tSubjectSerialNumber\"`\n}}": "",
    "d\ne\nf\n": "",
    "g\nh\ni\n": "",
    "new_text_1": "",
    "single line label 1": "",
    "new_text_2": "",
    "single line label 2": "",
    "new_text_3": "",
    "Label with many     spaces and \\t but without newlines": "",
    "Details with many     spaces and \\t but without newlines": "",
    "new_text_4": "",
    "StickyHeaderExcerpt { excerpt, next_excerpt_controls_present, next_buffer_row, }: StickyHeaderExcerpt<'_>,": "",
    "single line label 1 []struct { SignerId struct { Issuer string `json:\"issuer\"` SubjectSerialNumber\"` }}": "",
    "single line label 2 d e f ": "",
    "a b c g h i ": "",
    "Label with many     spaces and \\t but without newlines Details with many     spaces and \\t but without newlines": "",
    "Completion items should have their labels without newlines, also replacing excessive whitespaces. Completion items without newlines should not be altered.": "",
    "Adjusted completion items should still keep their filter ranges for the entire label. Item: {completion:?}": "",
    "expected completion menu to be open": "",
    "variableˇ": "",
    "expected PageDown to select the last item from the context menu": "",
    "expected completion menu to stay open after PageDown": "",
    "expected PageUp to select the first item from the context menu": "",
    "expected completion menu to stay open after PageUp": "",
    "Wrap the expression in an `Option::Some`": "",
    "With the completions menu open, only one LSP request should happen per input": "",
    "\n        fn a() {\n            «//b();\n            ˇ»// «c();\n            //ˇ»  d();\n        }\n    ": "",
    "\n        fn a() {\n            «b();\n            c();\n            ˇ» d();\n        }\n    ": "",
    "\n        fn a() {\n            // «b();\n            // c();\n            ˇ»//  d();\n        }\n    ": "",
    "\n        fn a() {\n            // b();\n            «// c();\n        ˇ»    //  d();\n        }\n    ": "",
    "\n        fn a() {\n            // b();\n            «c();\n        ˇ»    //  d();\n        }\n    ": "",
    "\n        fn a() {\n            a();\n            b();\n        ˇ\n        }\n    ": "",
    "\n        fn a() {\n            a();\n            b();\n        //•ˇ\n        }\n    ": "",
    "\n        fn a() {\n            «a();\n\n            c();ˇ»\n        }\n    ": "",
    "\n        fn a() {\n            // «a();\n\n            // c();ˇ»\n        }\n    ": "",
    "\n        fn a() {\n            «// a();\n            /// b();\n            //! c();ˇ»\n        }\n    ": "",
    "\n        fn a() {\n            «a();\n            b();\n            c();ˇ»\n        }\n    ": "",
    "\n        fn a() {\n        //    «b();\n        //    c();\n        //    ˇ» d();\n        }\n    ": "",
    "\n        fn a() {\n        //    b();\n        //    «c();\n        ˇ»//     d();\n        }\n    ": "",
    "\n        fn a() {\n        //    b();\n            «c();\n        ˇ»//     d();\n        }\n    ": "",
    "\n        fn a() {\n            a();\n            b();\n        //ˇ\n        }\n    ": "",
    "\n        fn a() {\n        //    «a();\n\n        //    c();ˇ»\n        }\n    ": "",
    "\n        fn a() {\n        //    «a();\n        ///    b();\n        //!    c();ˇ»\n        }\n    ": "",
    "fn a() {\n             ˇdog();\n             cat();\n        }": "",
    "fn a() {\n             // dog();\n             catˇ();\n        }": "",
    "fn a() {\n             «dog()ˇ»;\n             cat();\n        }": "",
    "fn a() {\n             // «dog()ˇ»;\n             cat();\n        }": "",
    "fn a() {\n             ˇdˇog();\n             cat();\n        }": "",
    "fn a() {\n             // dog();\n             catˇ(ˇ);\n        }": "",
    "fn a() {\n             ˇdˇog«()ˇ»;\n             cat();\n        }": "",
    "fn a() {\n             // ˇdˇog«()ˇ»;\n             cat();\n        }": "",
    "fn a() {\n             ˇdog();\n\n             cat();\n        }": "",
    "fn a() {\n             // dog();\n        ˇ\n             cat();\n        }": "",
    "fn a() {\n         ˇ    dog();\n             cat();\n        }": "",
    "fn a() {\n             // dog();\n         ˇ    cat();\n        }": "",
    "\n            <p>A</p>ˇ\n            <p>B</p>ˇ\n            <p>C</p>ˇ\n        ": "",
    "\n            <!-- <p>A</p>ˇ -->\n            <!-- <p>B</p>ˇ -->\n            <!-- <p>C</p>ˇ -->\n        ": "",
    "\n            <p>A«</p>\n            <p>ˇ»B</p>ˇ\n            <p>C«</p>\n            <p>ˇ»D</p>ˇ\n        ": "",
    "\n            <!-- <p>A«</p>\n            <p>ˇ»B</p>ˇ -->\n            <!-- <p>C«</p>\n            <p>ˇ»D</p>ˇ -->\n        ": "",
    "\n            ˇ<script>\n                ˇvar x = new Y();\n            ˇ</script>\n        ": "",
    "\n            <!-- ˇ<script> -->\n                // ˇvar x = new Y();\n            <!-- ˇ</script> -->\n        ": "",
    "\n            [aaaa\n            (bbbb]\n            cccc)": "",
    "\n                aaaa\n                bˇbbb\n                bˇbbˇb\n                cccc": "",
    "\n                aaaa\n                bXˇbbXb\n                bXˇbbXˇb\n                cccc": "",
    "\n                aaaa\n                bX\n                ˇbbX\n                b\n                bX\n                ˇbbX\n                ˇb\n                cccc": "",
    "\n        ˇfn func(abc def: i32) -> u32 {\n        }\n    ": "",
    "\n        fn func(abc def: i32) -> ˇu32 {\n        }\n    ": "",
    "\n        fn func(abc ˇdef: i32) -> u32 {\n        }\n    ": "",
    "\n        fn func(abcˇ def: i32) -> u32 {\n        }\n    ": "",
    "Something's wrong!": "",
    "Should have a diagnostics group activated": "",
    "After no diagnostics set to the editor, no diagnostics should be active": "",
    "Should be no diagnostics to go to and activate": "",
    "\n        fn func(abˇc def: i32) -> u32 {\n        }\n    ": "",
    "we've had problems with <https://link.one>, and <https://link.two> is broken": "",
    "\n        use some::mod;\n\n        const A: u32 = 42;\n\n        fn main() {\n            println!(": "",
    ");\n\n            println!(": "",
    ");\n        }\n        ": "",
    "\n        use some::modified;\n\n        ˇ\n        fn main() {\n            println!(": "",
    ");\n            println!(": "",
    "\n        ˇuse some::modified;\n\n\n        fn main() {\n            println!(": "",
    "\n        use some::modified;\n\n\n        fn main() {\n        ˇ    println!(": "",
    "\n            function test() {\n                console.log('test')ˇ\n            }": "",
    "\n            function test() {\n                console.logˇ('test')\n            }": "",
    "No extra braces from on type formatting should appear in the buffer": "",
    "test language server": "",
    "testOptionValue": "",
    "Should not restart LSP server on an unrelated change": "",
    "Some other server name": "",
    "some other init value": "",
    "Should not restart LSP server on an unrelated LSP settings change": "",
    "anotherInitValue": "",
    "Should restart LSP server on a related LSP settings change": "",
    "Should not restart LSP server on a related LSP settings change that is the same": "",
    "Should restart LSP server on another related LSP settings change": "",
    "method id()": "",
    "Should have the context menu deployed": "",
    "Should show the completions menu": "",
    "Now resolved!": "",
    "Docs": "",
    "method id() Now resolved!": "",
    "Should update first completion label, but not second as the filter text did not match.": "",
    "Unexpected completion item {unresolved_request:?}": "",
    "No task returned": "",
    "Completion failed": "",
    "Should always resolve once despite multiple selections": "",
    "Should always resolve once after multiple selections and applying the completion": "",
    "Should use resolved data when applying the completion": "",
    "should have the completions menu": "",
    "Expected to have the completions menu": "",
    "Items sent for resolve should be unchanged modulo resolve `data` filled with default if missing": "",
    "Test prettier formatting was not applied to the original buffer text": "",
    "Autoformatting (via test prettier) was not applied to the original buffer text": "",
    "\n        struct Row;\n        struct Row1;\n        struct Row2;\n\n        struct Row4;\n        struct Row5;\n        struct Row6;\n\n        struct Row8;\n        struct Row9;\n        struct Row10;": "",
    "struct Row;\n                   struct Row1;\n                   struct Row1.1;\n                   struct Row1.2;\n                   struct Row2;ˇ\n\n                   struct Row4;\n                   struct Row5;\n                   struct Row6;\n\n                   struct Row8;\n                   ˇstruct Row9;\n                   struct Row9.1;\n                   struct Row9.2;\n                   struct Row9.3;\n                   struct Row10;": "",
    "struct Row;\n                   struct Row1;\n                   struct Row2;\n                   struct Row2.1;\n                   struct Row2.2;\n                   «ˇ\n                   struct Row4;\n                   struct» Row5;\n                   «struct Row6;\n                   ˇ»\n                   struct Row9.1;\n                   struct Row9.2;\n                   struct Row9.3;\n                   struct Row8;\n                   struct Row9;\n                   struct Row10;": "",
    "struct Row;\n                   ˇ// something on the top\n                   struct Row1;\n                   struct Row2;\n                   struct Roˇw3.1;\n                   struct Row2.2;\n                   struct Row2.3;ˇ\n\n                   struct Row4;\n                   struct ˇRow5.1;\n                   struct Row5.2;\n                   struct «Rowˇ»5.3;\n                   struct Row5;\n                   struct Row6;\n                   ˇ\n                   struct Row9.1;\n                   struct «Rowˇ»9.2;\n                   struct «ˇRow»9.3;\n                   struct Row8;\n                   struct Row9;\n                   «ˇ// something on bottom»\n                   struct Row10;": "",
    "struct Row;\n                   ˇstruct Row1;\n                   struct Row2;\n                   ˇ\n                   struct Row4;\n                   ˇstruct Row5;\n                   struct Row6;\n                   ˇ\n                   ˇstruct Row8;\n                   struct Row9;\n                   ˇstruct Row10;": "",
    "struct Row;\n                   struct Row1;\n                   struct Row33;\n                   ˇ\n                   struct Row4;\n                   struct Row5;\n                   struct Row6;\n                   ˇ\n                   struct Row99;\n                   struct Row9;\n                   struct Row10;": "",
    "struct Row;\n                   struct Row1;\n                   struct Row33;\n                   «ˇ\n                   struct Row4;\n                   struct» Row5;\n                   «struct Row6;\n                   ˇ»\n                   struct Row99;\n                   struct Row9;\n                   struct Row10;": "",
    "ˇstruct Row1.1;\n                   struct Row1;\n                   «ˇstr»uct Row22;\n\n                   struct ˇRow44;\n                   struct Row5;\n                   struct «Rˇ»ow66;ˇ\n\n                   «struˇ»ct Row88;\n                   struct Row9;\n                   struct Row1011;ˇ": "",
    "struct Row;\n                   ˇstruct Row1;\n                   struct Row2;\n                   ˇ\n                   struct Row4;\n                   ˇstruct Row5;\n                   struct Row6;\n                   ˇ\n                   struct Row8;\n                   ˇstruct Row9;\n                   struct Row10;ˇ": "",
    "\n        one\n\n        two\n        three\n        ": "",
    "\nˇ\n": "",
    "\n\n        - two\n        - threeˇ\n        +\n        ": "",
    "struct Row;\nstruct Row1;\nstruct Row2;\n\nstruct Row4;\nstruct Row5;\nstruct Row6;\n\nstruct Row8;\nstruct Row9;\nstruct Row10;": "",
    "struct Row;\n                   struct Row2;\n\n                   ˇstruct Row4;\n                   struct Row5;\n                   struct Row6;\n                   ˇ\n                   struct Row8;\n                   struct Row10;": "",
    "struct Row;\n                   struct Row2;\n\n                   «ˇstruct Row4;\n                   struct» Row5;\n                   «struct Row6;\n                   ˇ»\n                   struct Row8;\n                   struct Row10;": "",
    "struct Row;\n                   ˇstruct Row2;\n\n                   struct Row4;\n                   struct Row5;\n                   struct Row6;\n\n                   struct Row8;ˇ\n                   struct Row10;": "",
    "struct Row;\n                   struct Row1;\n                   ˇstruct Row2;\n\n                   struct Row4;\n                   struct Row5;\n                   struct Row6;\n\n                   struct Row8;ˇ\n                   struct Row9;\n                   struct Row10;": "",
    "struct Row;\n                   struct Row2«ˇ;\n                   struct Row4;\n                   struct» Row5;\n                   «struct Row6;\n\n                   struct Row8;ˇ»\n                   struct Row10;": "",
    "struct Row;\n                   struct Row1;\n                   struct Row2«ˇ;\n\n                   struct Row4;\n                   struct» Row5;\n                   «struct Row6;\n\n                   struct Row8;ˇ»\n                   struct Row9;\n                   struct Row10;": "",
    "active item should be None before the first item is added": "",
    "should have an active item after adding the multi buffer": "",
    "A multi buffer was expected to active after adding": "",
    "should have an active item after navigating into the 1st buffer": "",
    "Should navigate into the 1st buffer and activate it": "",
    "New active item should be a singleton buffer": "",
    "should have navigated into an editor for the 1st buffer": "",
    "should have an active item after navigating back": "",
    "Should navigate back to the multi buffer": "",
    "should have an active item after navigating into the 2nd buffer": "",
    "Should navigate away from the multibuffer": "",
    "Should navigate into the 2nd buffer and activate it": "",
    "should have navigated into an editor": "",
    "should have an active item after navigating back from the 2nd buffer": "",
    "Should navigate back from the 2nd buffer to the multi buffer": "",
    "should have an active item after navigating into the 3rd buffer": "",
    "Should navigate into the 3rd buffer and activate it": "",
    "should have an active item after navigating back from the 3rd buffer": "",
    "Should navigate back from the 3rd buffer to the multi buffer": "",
    "\n          use some::modified;\n\n\n          fn main() {\n        -     println!(": "",
    ");\n        + ˇ    println!(": "",
    ");\n\n              println!(": "",
    ");\n              println!(": "",
    ");\n          }\n        ": "",
    "\n        - use some::mod;\n        + ˇuse some::modified;\n\n\n          fn main() {\n        -     println!(": "",
    ");\n        +     println!(": "",
    ");\n\n        +     println!(": "",
    "\n        - use some::mod;\n        + use some::modified;\n\n        - const A: u32 = 42;\n          ˇ\n          fn main() {\n        -     println!(": "",
    "\n          use some::modified;\n\n          ˇ\n          fn main() {\n              println!(": "",
    "\n        use some::mod1;\n        use some::mod2;\n\n        const A: u32 = 42;\n        const B: u32 = 42;\n        const C: u32 = 42;\n\n        fn main() {\n            println!(": "",
    "\n        use some::mod2;\n\n        const A: u32 = 42;\n        const C: u32 = 42;\n\n        fn main(ˇ) {\n            //println!(": "",
    ");\n            //\n            //\n        }\n        ": "",
    "\n        - use some::mod1;\n          use some::mod2;\n\n          const A: u32 = 42;\n        - const B: u32 = 42;\n          const C: u32 = 42;\n\n          fn main(ˇ) {\n        -     println!(": "",
    ");\n        +     //println!(": "",
    ");\n        +     //\n        +     //\n          }\n        ": "",
    "new diff base!": "",
    "\n        - new diff base!\n        + use some::mod2;\n        +\n        + const A: u32 = 42;\n        + const C: u32 = 42;\n        +\n        + fn main(ˇ) {\n        +     //println!(": "",
    ");\n        +\n        +     println!(": "",
    ");\n        +     //\n        +     //\n        + }\n        ": "",
    "\n            ˇaaa\n            ccc\n            ddd\n\n            ggg\n            hhh\n\n\n            lll\n            mmm\n            NNN\n\n            qqq\n            rrr\n\n            uuu\n            111\n            222\n            333\n\n            666\n            777\n\n            000\n            !!!": "",
    "\n            «aaa\n          - bbb\n            ccc\n            ddd\n\n            ggg\n            hhh\n\n\n            lll\n            mmm\n          - nnn\n          + NNN\n\n            qqq\n            rrr\n\n            uuu\n            111\n            222\n            333\n\n          + 666\n            777\n\n            000\n            !!!ˇ»": "",
    "aaa\nBBB\nBB2\nccc\nDDD\nEEE\nfff\nggg\nhhh\niii\n": "",
    "\n            ˇaaa\n          - bbb\n          + BBB\n\n          - ddd\n          - eee\n          + DDD\n          + EEE\n            fff\n\n            iii\n        ": "",
    "\n        use some::mod1;\n        use some::mod2;\n\n        const A: u32 = 42;\n\n        fn main() {\n            println!(": "",
    "\n        use some::mod1;\n        use some::mod2;\n\n        const A: u32 = 42;\n        const B: u32 = 42;\n        const C: u32 = 42;\n        ˇ\n\n        fn main() {\n            println!(": "",
    "\n        use some::mod1;\n        use some::mod2;\n\n        const A: u32 = 42;\n      + const B: u32 = 42;\n      + const C: u32 = 42;\n      + ˇ\n\n        fn main() {\n            println!(": "",
    ");\n        }\n      ": "",
    "\n        use some::mod1;\n        use some::mod2;\n\n        const A: u32 = 42;\n      + const B: u32 = 42;\n      + const C: u32 = 42;\n      + const D: u32 = 42;\n      + ˇ\n\n        fn main() {\n            println!(": "",
    "\n        use some::mod1;\n        use some::mod2;\n\n        const A: u32 = 42;\n      + const B: u32 = 42;\n      + const C: u32 = 42;\n      + const D: u32 = 42;\n      + const E: u32 = 42;\n      + ˇ\n\n        fn main() {\n            println!(": "",
    "\n        use some::mod1;\n        use some::mod2;\n\n        const A: u32 = 42;\n      + const B: u32 = 42;\n      + const C: u32 = 42;\n      + const D: u32 = 42;\n      + const E: u32 = 42;\n        ˇ\n        fn main() {\n            println!(": "",
    "\n        use some::mod1;\n        use some::mod2;\n\n        const A: u32 = 42;\n      + const B: u32 = 42;\n        ˇ\n        fn main() {\n            println!(": "",
    "\n        ˇ\n        fn main() {\n            println!(": "",
    "\n        one\n        two\n        three\n        four\n        five\n        ": "",
    "\n        one\n        ˇthree\n        five\n    ": "",
    "\n        one\n      - two\n        ˇthree\n      - four\n        five\n    ": "",
    "\n        one\n        ˇTWO\n        three\n        four\n        five\n    ": "",
    "\n            one\n          - two\n          + ˇTWO\n            three\n            four\n            five\n        ": "",
    "\n            one\n            ˇTWO\n            three\n            four\n            five\n        ": "",
    "\n        use some::mod1;\n        use some::mod2;\n\n        const A: u32 = 42;\n        const B: u32 = 42;\n        const C: u32 = 42;\n\n\n        fn main() {\n            println!(": "",
    ");\n        }\n    ": "",
    "\n        use some::mod1;\n        use some::mod2;\n\n        ˇconst B: u32 = 42;\n        const C: u32 = 42;\n\n\n        fn main() {\n            println!(": "",
    "\n        use some::mod1;\n        use some::mod2;\n\n      - const A: u32 = 42;\n        ˇconst B: u32 = 42;\n        const C: u32 = 42;\n\n\n        fn main() {\n            println!(": "",
    "\n        use some::mod1;\n        use some::mod2;\n\n      - const A: u32 = 42;\n      - const B: u32 = 42;\n        ˇconst C: u32 = 42;\n\n\n        fn main() {\n            println!(": "",
    "\n        use some::mod1;\n        use some::mod2;\n\n      - const A: u32 = 42;\n      - const B: u32 = 42;\n      - const C: u32 = 42;\n        ˇ\n\n        fn main() {\n            println!(": "",
    "\n        use some::mod1;\n        use some::mod2;\n\n      - const A: u32 = 42;\n      - const B: u32 = 42;\n      - const C: u32 = 42;\n      -\n      + replacementˇ\n\n        fn main() {\n            println!(": "",
    "\n        one\n        two\n        three\n        four\n        five\n    ": "",
    "\n        one\n        two\n        fˇour\n        five\n        ": "",
    "\n          one\n          two\n        - three\n          fˇour\n          five\n        ": "",
    "\n          one\n          two\n        - threeˇ\n        - four\n        + our\n          five\n        ": "",
    "\n        use some::mod1;\n        use some::mod2;\n\n        const A: u32 = 42;\n        const B: u32 = 42;\n        const C: u32 = 42;\n        const D: u32 = 42;\n\n\n        fn main() {\n            println!(": "",
    ");\n        }": "",
    "\n        use some::mod1;\n        use some::mod2;\n\n        const A: u32 = 42;\n        const B: u32 = 42;\n        const C: u32 = 43ˇ\n        const D: u32 = 42;\n\n\n        fn main() {\n            println!(": "",
    "\n        use some::mod1;\n        use some::mod2;\n\n        const A: u32 = 42;\n        const B: u32 = 42;\n      - const C: u32 = 42;\n      + const C: u32 = 43ˇ\n        const D: u32 = 42;\n\n\n        fn main() {\n            println!(": "",
    "\n        use some::mod1;\n        use some::mod2;\n\n        const A: u32 = 42;\n        const B: u32 = 42;\n      - const C: u32 = 42;\n      + const C: u32 = 43\n      + new_line\n      + ˇ\n        const D: u32 = 42;\n\n\n        fn main() {\n            println!(": "",
    "\n            ˇfn main() {\n                println!(": "",
    ");\n            }\n        ": "",
    "\n            + ˇfn main() {\n            +     println!(": "",
    ");\n            + }\n        ": "",
    "Active indent guide indices do not match": "",
    "Indent guides do not match": "",
    "\n    fn main() {\n        let a = 1;\n    }": "",
    "\n    fn main() {\n        let a = 1;\n        let b = 2;\n    }": "",
    "\n    fn main() {\n        let a = 1;\n        if a == 3 {\n            let b = 2;\n        } else {\n            let c = 3;\n        }\n    }": "",
    "\n    fn main() {\n        let a = 1;\n            let b = 2;\n        let c = 3;\n    }": "",
    "\n        fn main() {\n            let a = 1;\n\n            let c = 3;\n        }": "",
    "\n        fn main() {\n            let a = 1;\n\n            let c = 3;\n\n            if a == 3 {\n                let b = 2;\n            } else {\n                let c = 3;\n            }\n        }": "",
    "\n        block1\n            block2\n                block3\n                    block4\n            block2\n        block1\n        block1": "",
    "\n        block1\n            block2\n                block3\n\n        block1\n        block1": "",
    "\n        block1\n\n\n\n            block2\n        ": "",
    "\n        def a:\n        \\tb = 3\n        \\tif True:\n        \\t\\tc = 4\n        \\t\\td = 5\n        \\tprint(b)\n        ": "",
    "\n    fn main() {\n        if 1 == 2 {\n            let a = 1;\n        }\n    }": "",
    "\n    fn main() {\n        let a = 1;\n\n        let b = 2;\n    }": "",
    "\n    def m:\n        a = 1\n        pass": "",
    "\n        impl A {\n            fn b() {\n                0;\n                3;\n                5;\n                6;\n                7;\n            }\n        }\n        ": "",
    "\n        impl A {\n            fn b() {\n                0;\n                1;\n                2;\n                3;\n                4;\n            }\n            fn c() {\n                5;\n                6;\n                7;\n            }\n        }\n        ": "",
    "\n          impl A {\n              fn b() {\n                  0;\n        -         1;\n        -         2;\n                  3;\n        -         4;\n        -     }\n        -     fn c() {\n                  5;\n                  6;\n                  7;\n              }\n          }\n          ˇ": "",
    "\n        a\n        b\n        c\n        ": "",
    "\n        ˇA\n        b\n        C\n        ": "",
    "\n        - a\n        + ˇA\n          b\n        - c\n        + C\n        ": "",
    "\n          ˇA\n          b\n        - c\n        + C\n        ": "",
    "\n        - a\n        + ˇA\n          b\n          C\n        ": "",
    "\n        ˇA\n        b\n        ": "",
    "\n        - ˇa\n        + A\n          b\n        ": "",
    "\n            - ˇa\n            + A\n              b\n            - c\n            ": "",
    "\n        ˇb\n        c\n        ": "",
    "\n        - a\n          ˇb\n          c\n        ": "",
    "\n          ˇb\n          c\n        ": "",
    "/test": "",
    ".git": "",
    "file-1": "",
    "ONE\n": "",
    "file-2": "",
    "TWO\n": "",
    "file-3": "",
    "THREE\n": "",
    "/test/.git": "",
    "two\n": "",
    "three\n": "",
    "/test/file-{}": "",
    "\n        one\n        TWO\n        ˇTHREE\n        FOUR\n        five\n    ": "",
    "\n        one\n        TWO\n        THREE\n        FOUR\n        five\n    ": "",
    "\n        one\n        TWO\n        ˇTHREE-HUNDRED\n        FOUR\n        five\n    ": "",
    "\n        one\n        TWO\n        THREE-HUNDRED\n        FOUR\n        five\n    ": "",
    "ˇone\n        two\n\n        three\n        fourˇ\n        five\n\n        siˇx": "",
    "AAAAˇone\n        two\n\n        three\n        fourAAAAˇ\n        five\n\n        siAAAAˇx": "",
    "let foo = 1;\nlet foo = 2;\nlet foo = 3;\nlet fooˇ = 4;\nlet foo = 5;\nlet foo = 6;\nlet foo = 7;\nlet foo = 8;\nlet foo = 9;\nlet foo = 10;\nlet foo = 11;\nlet foo = 12;\nlet foo = 13;\nlet foo = 14;\nlet foo = 15;": "",
    "Default next scroll direction is center": "",
    "After center, next scroll direction should be top": "",
    "After top, next scroll direction should be bottom": "",
    "After bottom, scrolling should start over": "",
    "Scrolling continues if retriggered fast enough": "",
    "If scrolling is not triggered fast enough, it should reset": "",
    "fn one() {\n            let mut a = ˇtwo();\n        }\n\n        fn two() {}": "",
    "Failed to navigate to definition": "",
    "Should have navigated to definition from the GetDefinition response": "",
    "fn one() {\n            let mut a = two();\n        }\n\n        fn «twoˇ»() {}": "",
    "Initially, only one, test, editor should be open in the workspace": "",
    "Asserted len is 1": "",
    "Failed to navigate to lookup references": "",
    "Should have navigated to references as a fallback after empty GoToDefinition response": "",
    "After falling back to references search, we open a new editor with the results": "",
    "Should have one non-test editor now": "",
    "Should use the range from the references response and not the GoToDefinition one": "",
    "\n        #[cfg(test)]\n        mod tests() {\n            #[test]\n            fn runnable_1() {\n                let a = 1;\n            }\n\n            #[test]\n            fn runnable_2() {\n                let a = 1;\n                let b = 2;\n            }\n        }\n    ": "",
    "Should find task for cursor inside runnable_1": "",
    "Should find task when cursor is on function name": "",
    "After folding the first buffer, its text should not be displayed": "",
    "After folding the second buffer, its text should not be displayed": "",
    "After folding the third buffer, its text should not be displayed": "",
    "After unfolding the second buffer, its text should be displayed": "",
    "bbbb": "",
    "B": "",
    "\n\n\nB\n\n\n\n\n\n\n\n\n\n\nllll\nmmmm\nnnnn\n\n\n\nqqqq\nrrrr\n\n\n\nuuuu\n\n\n": "",
    "After unfolding the first buffer, its and 2nd buffer's text should be displayed": "",
    "\n\n\nB\n\n\n\n\n\n\n\n\n\n\nllll\nmmmm\nnnnn\n\n\n\nqqqq\nrrrr\n\n\n\nuuuu\n\n\n\n\nvvvv\nwwww\nxxxx\n\n\n\n1111\n2222\n\n\n\n5555\n": "",
    "After unfolding the all buffers, all original text should be displayed": "",
    "After unfolding the first buffer, its text should be displayed": "",
    "After unfolding all buffers, all original text should be displayed": "",
    "keymaps/default-linux.json": "",
    "a0\nb0\nc0\nd0\ne0\n": "",
    "a1\nb1\nc1\nd1\ne1\n": "",
    "a2\nb2\nc2\nd2\ne2\n": "",
    "a3\nb3\nc3\nd3\ne3\n": "",
    "\n        [EXCERPT]\n        ˇ[FOLDED]\n        [EXCERPT]\n        a1\n        b1\n        [EXCERPT]\n        [FOLDED]\n        [EXCERPT]\n        [FOLDED]\n        ": "",
    "down": "",
    "\n        [EXCERPT]\n        [FOLDED]\n        [EXCERPT]\n        ˇa1\n        b1\n        [EXCERPT]\n        [FOLDED]\n        [EXCERPT]\n        [FOLDED]\n        ": "",
    "\n        [EXCERPT]\n        [FOLDED]\n        [EXCERPT]\n        a1\n        ˇb1\n        [EXCERPT]\n        [FOLDED]\n        [EXCERPT]\n        [FOLDED]\n        ": "",
    "\n        [EXCERPT]\n        [FOLDED]\n        [EXCERPT]\n        a1\n        b1\n        ˇ[EXCERPT]\n        [FOLDED]\n        [EXCERPT]\n        [FOLDED]\n        ": "",
    "\n        [EXCERPT]\n        [FOLDED]\n        [EXCERPT]\n        a1\n        b1\n        [EXCERPT]\n        ˇ[FOLDED]\n        [EXCERPT]\n        [FOLDED]\n        ": "",
    "\n            [EXCERPT]\n            [FOLDED]\n            [EXCERPT]\n            a1\n            b1\n            [EXCERPT]\n            [FOLDED]\n            [EXCERPT]\n            ˇ[FOLDED]\n            ": "",
    "up": "",
    "\n            [EXCERPT]\n            ˇ[FOLDED]\n            [EXCERPT]\n            a1\n            b1\n            [EXCERPT]\n            [FOLDED]\n            [EXCERPT]\n            [FOLDED]\n            ": "",
    "Hello, world!": "",
    " beautiful": "",
    "Hello, beautiful world!": "",
    "This is a test.": "",
    "That": "",
    "That is a test.": "",
    "Greetings": "",
    " and universe": "",
    "Greetings, world and universe!": "",
    "First line\nSecond line\nThird line\nFourth line": "",
    "modified": "",
    "New third line": "",
    " updated": "",
    "Second modified\nNew third line\nFourth updated line": "",
    " digital": "",
    "\n        struct Fˇoo {}\n    ": "",
    "Prepare rename was not started": "",
    "Prepare rename failed": "",
    "FooRenamed": "",
    "Confirm rename was not started": "",
    "Confirm rename failed": "",
    "\n        struct FooRenamedˇ {}\n    ": "",
    "\n            (": "",
    " @open ": "",
    " @close)\n            (": "",
    "#,\n        )\n        .unwrap(),\n    );\n    cx.update_buffer(|buffer, cx| buffer.set_language(Some(language), cx));\n\n    cx.set_state(indoc! {": "",
    "});\n    cx.update_editor(|e, window, cx| e.newline(&Newline, window, cx));\n    cx.assert_editor_state(indoc! {": "",
    "});\n\n    cx.set_state(indoc! {": "",
    "});\n}\n\nmod autoclose_tags {\n    use super::*;\n    use language::language_settings::JsxTagAutoCloseSettings;\n    use languages::language;\n\n    async fn test_setup(cx: &mut TestAppContext) -> EditorTestContext {\n        init_test(cx, |settings| {\n            settings.defaults.jsx_tag_auto_close = Some(JsxTagAutoCloseSettings { enabled: true });\n        });\n\n        let mut cx = EditorTestContext::new(cx).await;\n        cx.update_buffer(|buffer, cx| {\n            let language = language(": "",
    ", tree_sitter_typescript::LANGUAGE_TSX.into());\n\n            buffer.set_language(Some(language), cx)\n        });\n\n        cx\n    }\n\n    macro_rules! check {\n        ($name:ident, $initial:literal + $input:literal => $expected:expr) => {\n            #[gpui::test]\n            async fn $name(cx: &mut TestAppContext) {\n                let mut cx = test_setup(cx).await;\n                cx.set_state($initial);\n                cx.run_until_parked();\n\n                cx.update_editor(|editor, window, cx| {\n                    editor.handle_input($input, window, cx);\n                });\n                cx.run_until_parked();\n                cx.assert_editor_state($expected);\n            }\n        };\n    }\n\n    check!(\n        test_basic,\n        ": "",
    " + ": "",
    " => ": "",
    "\n    );\n\n    check!(\n        test_basic_nested,\n        ": "",
    "\n    );\n\n    check!(\n        test_basic_ignore_already_closed,\n        ": "",
    "\n    );\n\n    check!(\n        test_doesnt_autoclose_closing_tag,\n        ": "",
    "\n    );\n\n    check!(\n        test_jsx_attr,\n        ": "",
    "\n    );\n\n    check!(\n        test_ignores_closing_tags_in_expr_block,\n        ": "",
    "\n    );\n\n    check!(\n        test_doesnt_autoclose_on_gt_in_expr,\n        ": "",
    "\n    );\n\n    check!(\n        test_ignores_closing_tags_with_different_tag_names,\n        ": "",
    "\n    );\n\n    check!(\n        test_autocloses_in_jsx_expression,\n        ": "",
    "\n    );\n\n    check!(\n        test_doesnt_autoclose_already_closed_in_jsx_expression,\n        ": "",
    "\n    );\n\n    check!(\n        test_autocloses_fragment,\n        ": "",
    "\n    );\n\n    check!(\n        test_does_not_include_type_argument_in_autoclose_tag_name,\n        ": "",
    "\n    );\n\n    check!(\n        test_does_not_autoclose_doctype,\n        ": "",
    "\n    );\n\n    check!(\n        test_does_not_autoclose_comment,\n        ": "",
    "\n    );\n\n    check!(\n        test_multi_cursor_autoclose_same_tag,\n        r#": "",
    "#\n        + ": "",
    " =>\n        r#": "",
    "#\n    );\n\n    check!(\n        test_multi_cursor_autoclose_different_tags,\n        r#": "",
    "#\n    );\n\n    check!(\n        test_multi_cursor_autoclose_some_dont_autoclose_others,\n        r#": "",
    "#\n    );\n\n    check!(\n        test_doesnt_mess_up_trailing_text,\n        ": "",
    "\n    );\n\n    #[gpui::test]\n    async fn test_multibuffer(cx: &mut TestAppContext) {\n        init_test(cx, |settings| {\n            settings.defaults.jsx_tag_auto_close = Some(JsxTagAutoCloseSettings { enabled: true });\n        });\n\n        let buffer_a = cx.new(|cx| {\n            let mut buf = language::Buffer::local(": "",
    ", cx);\n            buf.set_language(\n                Some(language(": "",
    ", tree_sitter_typescript::LANGUAGE_TSX.into())),\n                cx,\n            );\n            buf\n        });\n        let buffer_b = cx.new(|cx| {\n            let mut buf = language::Buffer::local(": "",
    ", tree_sitter_typescript::LANGUAGE_TSX.into())),\n                cx,\n            );\n            buf\n        });\n        let buffer_c = cx.new(|cx| {\n            let buf = language::Buffer::local(": "",
    ", cx);\n            buf\n        });\n        let buffer = cx.new(|cx| {\n            let mut buf = MultiBuffer::new(language::Capability::ReadWrite);\n            buf.push_excerpts(\n                buffer_a,\n                [ExcerptRange {\n                    context: text::Anchor::MIN..text::Anchor::MAX,\n                    primary: None,\n                }],\n                cx,\n            );\n            buf.push_excerpts(\n                buffer_b,\n                [ExcerptRange {\n                    context: text::Anchor::MIN..text::Anchor::MAX,\n                    primary: None,\n                }],\n                cx,\n            );\n            buf.push_excerpts(\n                buffer_c,\n                [ExcerptRange {\n                    context: text::Anchor::MIN..text::Anchor::MAX,\n                    primary: None,\n                }],\n                cx,\n            );\n            buf\n        });\n        let editor = cx.add_window(|window, cx| build_editor(buffer.clone(), window, cx));\n\n        let mut cx = EditorTestContext::for_editor(editor, cx).await;\n\n        cx.update_editor(|editor, window, cx| {\n            editor.change_selections(None, window, cx, |selections| {\n                selections.select(vec![\n                    Selection::from_offset(4),\n                    Selection::from_offset(9),\n                    Selection::from_offset(15),\n                ])\n            })\n        });\n        cx.run_until_parked();\n\n        cx.update_editor(|editor, window, cx| {\n            editor.handle_input(": "",
    ", window, cx);\n        });\n        cx.run_until_parked();\n\n        cx.assert_editor_state(": "",
    ");\n    }\n}\n\nfn empty_range(row: usize, column: usize) -> Range<DisplayPoint> {\n    let point = DisplayPoint::new(DisplayRow(row as u32), column as u32);\n    point..point\n}\n\nfn assert_selection_ranges(marked_text: &str, editor: &mut Editor, cx: &mut Context<Editor>) {\n    let (text, ranges) = marked_text_ranges(marked_text, true);\n    assert_eq!(editor.text(cx), text);\n    assert_eq!(\n        editor.selections.ranges(cx),\n        ranges,\n        ": ""
  },
  "zed/crates/editor/src/editor.rs": {
    "edit_prediction": "",
    "edit_prediction_conflict": "",
    "wordwise": "",
    "done": "",
    "modifiers changed": "",
    "toggle": "",
    "settings change": "",
    "new lines shown": "",
    "buffer edited": "",
    "refresh requested": "",
    "excerpts removed": "",
    "Editor Opened": "",
    "Editor": "",
    "single_line": "",
    "auto_height": "",
    "full": "",
    "jupyter": "",
    "mode": "",
    "renaming": "",
    "menu": "",
    "showing_completions": "",
    "showing_code_actions": "",
    "extension": "",
    "multibuffer": "",
    "copilot_suggestion": "",
    "selection_mode": "",
    "Failed to create buffer": "",
    "The remote instance of Zed does not support this yet. It must be upgraded to {}": "",
    "required": "",
    "the latest version": "",
    "persisting editor selections for editor {editor_id}, workspace {workspace_id:?}": "",
    "extend_selection not called with pending selection": "",
    "update_selection dispatched with no pending selection": "",
    "{}{}": "",
    " ": "",
    "\\t": "",
    "Edit Prediction Accepted": "",
    "Edit Prediction Discarded": "",
    "code_actions_indicator": "",
    "Toggle Code Actions": "",
    "multiple different run targets found on a single line, only the last target will be rendered": "",
    "run_indicator": "",
    "Accept": "",
    "Jump": "",
    "Scroll": "",
    "Jump to Edit": "",
    "edit_prediction_diff_popover_keybind": "",
    "ep-line-popover": "",
    "accept-terms": "",
    "Edit Prediction Provider ToS Clicked": "",
    "Accept Terms of Service": "",
    "Hold": "",
    "edit_prediction_cursor_popover_keybind": "",
    "...": "",
    "No Prediction": "",
    "loading-completion": "",
    "Preview": "",
    "…": "",
    "line did not start with prefix {line_prefix:?}: {line:?}": "",
    "\n                );\n            }\n            self.request_autoscroll(Autoscroll::fit(), cx);\n            self.unmark_text(window, cx);\n            self.refresh_inline_completion(true, false, window, cx);\n            cx.emit(EditorEvent::Edited { transaction_id });\n            cx.emit(EditorEvent::TransactionUndone { transaction_id });\n        }\n    }\n\n    pub fn redo(&mut self, _: &Redo, window: &mut Window, cx: &mut Context<Self>) {\n        if self.read_only(cx) {\n            return;\n        }\n\n        if let Some(transaction_id) = self.buffer.update(cx, |buffer, cx| buffer.redo(cx)) {\n            if let Some((_, Some(selections))) =\n                self.selection_history.transaction(transaction_id).cloned()\n            {\n                self.change_selections(None, window, cx, |s| {\n                    s.select_anchors(selections.to_vec());\n                });\n            } else {\n                log::error!(\n                    ": "",
    "\n                );\n            }\n            self.request_autoscroll(Autoscroll::fit(), cx);\n            self.unmark_text(window, cx);\n            self.refresh_inline_completion(true, false, window, cx);\n            cx.emit(EditorEvent::Edited { transaction_id });\n        }\n    }\n\n    pub fn finalize_last_transaction(&mut self, cx: &mut Context<Self>) {\n        self.buffer\n            .update(cx, |buffer, cx| buffer.finalize_last_transaction(cx));\n    }\n\n    pub fn group_until_transaction(&mut self, tx_id: TransactionId, cx: &mut Context<Self>) {\n        self.buffer\n            .update(cx, |buffer, cx| buffer.group_until_transaction(tx_id, cx));\n    }\n\n    pub fn move_left(&mut self, _: &MoveLeft, window: &mut Window, cx: &mut Context<Self>) {\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            let line_mode = s.line_mode;\n            s.move_with(|map, selection| {\n                let cursor = if selection.is_empty() && !line_mode {\n                    movement::left(map, selection.start)\n                } else {\n                    selection.start\n                };\n                selection.collapse_to(cursor, SelectionGoal::None);\n            });\n        })\n    }\n\n    pub fn select_left(&mut self, _: &SelectLeft, window: &mut Window, cx: &mut Context<Self>) {\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_heads_with(|map, head, _| (movement::left(map, head), SelectionGoal::None));\n        })\n    }\n\n    pub fn move_right(&mut self, _: &MoveRight, window: &mut Window, cx: &mut Context<Self>) {\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            let line_mode = s.line_mode;\n            s.move_with(|map, selection| {\n                let cursor = if selection.is_empty() && !line_mode {\n                    movement::right(map, selection.end)\n                } else {\n                    selection.end\n                };\n                selection.collapse_to(cursor, SelectionGoal::None)\n            });\n        })\n    }\n\n    pub fn select_right(&mut self, _: &SelectRight, window: &mut Window, cx: &mut Context<Self>) {\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_heads_with(|map, head, _| (movement::right(map, head), SelectionGoal::None));\n        })\n    }\n\n    pub fn move_up(&mut self, _: &MoveUp, window: &mut Window, cx: &mut Context<Self>) {\n        if self.take_rename(true, window, cx).is_some() {\n            return;\n        }\n\n        if matches!(self.mode, EditorMode::SingleLine { .. }) {\n            cx.propagate();\n            return;\n        }\n\n        let text_layout_details = &self.text_layout_details(window);\n        let selection_count = self.selections.count();\n        let first_selection = self.selections.first_anchor();\n\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            let line_mode = s.line_mode;\n            s.move_with(|map, selection| {\n                if !selection.is_empty() && !line_mode {\n                    selection.goal = SelectionGoal::None;\n                }\n                let (cursor, goal) = movement::up(\n                    map,\n                    selection.start,\n                    selection.goal,\n                    false,\n                    text_layout_details,\n                );\n                selection.collapse_to(cursor, goal);\n            });\n        });\n\n        if selection_count == 1 && first_selection.range() == self.selections.first_anchor().range()\n        {\n            cx.propagate();\n        }\n    }\n\n    pub fn move_up_by_lines(\n        &mut self,\n        action: &MoveUpByLines,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if self.take_rename(true, window, cx).is_some() {\n            return;\n        }\n\n        if matches!(self.mode, EditorMode::SingleLine { .. }) {\n            cx.propagate();\n            return;\n        }\n\n        let text_layout_details = &self.text_layout_details(window);\n\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            let line_mode = s.line_mode;\n            s.move_with(|map, selection| {\n                if !selection.is_empty() && !line_mode {\n                    selection.goal = SelectionGoal::None;\n                }\n                let (cursor, goal) = movement::up_by_rows(\n                    map,\n                    selection.start,\n                    action.lines,\n                    selection.goal,\n                    false,\n                    text_layout_details,\n                );\n                selection.collapse_to(cursor, goal);\n            });\n        })\n    }\n\n    pub fn move_down_by_lines(\n        &mut self,\n        action: &MoveDownByLines,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if self.take_rename(true, window, cx).is_some() {\n            return;\n        }\n\n        if matches!(self.mode, EditorMode::SingleLine { .. }) {\n            cx.propagate();\n            return;\n        }\n\n        let text_layout_details = &self.text_layout_details(window);\n\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            let line_mode = s.line_mode;\n            s.move_with(|map, selection| {\n                if !selection.is_empty() && !line_mode {\n                    selection.goal = SelectionGoal::None;\n                }\n                let (cursor, goal) = movement::down_by_rows(\n                    map,\n                    selection.start,\n                    action.lines,\n                    selection.goal,\n                    false,\n                    text_layout_details,\n                );\n                selection.collapse_to(cursor, goal);\n            });\n        })\n    }\n\n    pub fn select_down_by_lines(\n        &mut self,\n        action: &SelectDownByLines,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let text_layout_details = &self.text_layout_details(window);\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_heads_with(|map, head, goal| {\n                movement::down_by_rows(map, head, action.lines, goal, false, text_layout_details)\n            })\n        })\n    }\n\n    pub fn select_up_by_lines(\n        &mut self,\n        action: &SelectUpByLines,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let text_layout_details = &self.text_layout_details(window);\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_heads_with(|map, head, goal| {\n                movement::up_by_rows(map, head, action.lines, goal, false, text_layout_details)\n            })\n        })\n    }\n\n    pub fn select_page_up(\n        &mut self,\n        _: &SelectPageUp,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let Some(row_count) = self.visible_row_count() else {\n            return;\n        };\n\n        let text_layout_details = &self.text_layout_details(window);\n\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_heads_with(|map, head, goal| {\n                movement::up_by_rows(map, head, row_count, goal, false, text_layout_details)\n            })\n        })\n    }\n\n    pub fn move_page_up(\n        &mut self,\n        action: &MovePageUp,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if self.take_rename(true, window, cx).is_some() {\n            return;\n        }\n\n        if self\n            .context_menu\n            .borrow_mut()\n            .as_mut()\n            .map(|menu| menu.select_first(self.completion_provider.as_deref(), cx))\n            .unwrap_or(false)\n        {\n            return;\n        }\n\n        if matches!(self.mode, EditorMode::SingleLine { .. }) {\n            cx.propagate();\n            return;\n        }\n\n        let Some(row_count) = self.visible_row_count() else {\n            return;\n        };\n\n        let autoscroll = if action.center_cursor {\n            Autoscroll::center()\n        } else {\n            Autoscroll::fit()\n        };\n\n        let text_layout_details = &self.text_layout_details(window);\n\n        self.change_selections(Some(autoscroll), window, cx, |s| {\n            let line_mode = s.line_mode;\n            s.move_with(|map, selection| {\n                if !selection.is_empty() && !line_mode {\n                    selection.goal = SelectionGoal::None;\n                }\n                let (cursor, goal) = movement::up_by_rows(\n                    map,\n                    selection.end,\n                    row_count,\n                    selection.goal,\n                    false,\n                    text_layout_details,\n                );\n                selection.collapse_to(cursor, goal);\n            });\n        });\n    }\n\n    pub fn select_up(&mut self, _: &SelectUp, window: &mut Window, cx: &mut Context<Self>) {\n        let text_layout_details = &self.text_layout_details(window);\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_heads_with(|map, head, goal| {\n                movement::up(map, head, goal, false, text_layout_details)\n            })\n        })\n    }\n\n    pub fn move_down(&mut self, _: &MoveDown, window: &mut Window, cx: &mut Context<Self>) {\n        self.take_rename(true, window, cx);\n\n        if matches!(self.mode, EditorMode::SingleLine { .. }) {\n            cx.propagate();\n            return;\n        }\n\n        let text_layout_details = &self.text_layout_details(window);\n        let selection_count = self.selections.count();\n        let first_selection = self.selections.first_anchor();\n\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            let line_mode = s.line_mode;\n            s.move_with(|map, selection| {\n                if !selection.is_empty() && !line_mode {\n                    selection.goal = SelectionGoal::None;\n                }\n                let (cursor, goal) = movement::down(\n                    map,\n                    selection.end,\n                    selection.goal,\n                    false,\n                    text_layout_details,\n                );\n                selection.collapse_to(cursor, goal);\n            });\n        });\n\n        if selection_count == 1 && first_selection.range() == self.selections.first_anchor().range()\n        {\n            cx.propagate();\n        }\n    }\n\n    pub fn select_page_down(\n        &mut self,\n        _: &SelectPageDown,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let Some(row_count) = self.visible_row_count() else {\n            return;\n        };\n\n        let text_layout_details = &self.text_layout_details(window);\n\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_heads_with(|map, head, goal| {\n                movement::down_by_rows(map, head, row_count, goal, false, text_layout_details)\n            })\n        })\n    }\n\n    pub fn move_page_down(\n        &mut self,\n        action: &MovePageDown,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if self.take_rename(true, window, cx).is_some() {\n            return;\n        }\n\n        if self\n            .context_menu\n            .borrow_mut()\n            .as_mut()\n            .map(|menu| menu.select_last(self.completion_provider.as_deref(), cx))\n            .unwrap_or(false)\n        {\n            return;\n        }\n\n        if matches!(self.mode, EditorMode::SingleLine { .. }) {\n            cx.propagate();\n            return;\n        }\n\n        let Some(row_count) = self.visible_row_count() else {\n            return;\n        };\n\n        let autoscroll = if action.center_cursor {\n            Autoscroll::center()\n        } else {\n            Autoscroll::fit()\n        };\n\n        let text_layout_details = &self.text_layout_details(window);\n        self.change_selections(Some(autoscroll), window, cx, |s| {\n            let line_mode = s.line_mode;\n            s.move_with(|map, selection| {\n                if !selection.is_empty() && !line_mode {\n                    selection.goal = SelectionGoal::None;\n                }\n                let (cursor, goal) = movement::down_by_rows(\n                    map,\n                    selection.end,\n                    row_count,\n                    selection.goal,\n                    false,\n                    text_layout_details,\n                );\n                selection.collapse_to(cursor, goal);\n            });\n        });\n    }\n\n    pub fn select_down(&mut self, _: &SelectDown, window: &mut Window, cx: &mut Context<Self>) {\n        let text_layout_details = &self.text_layout_details(window);\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_heads_with(|map, head, goal| {\n                movement::down(map, head, goal, false, text_layout_details)\n            })\n        });\n    }\n\n    pub fn context_menu_first(\n        &mut self,\n        _: &ContextMenuFirst,\n        _window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some(context_menu) = self.context_menu.borrow_mut().as_mut() {\n            context_menu.select_first(self.completion_provider.as_deref(), cx);\n        }\n    }\n\n    pub fn context_menu_prev(\n        &mut self,\n        _: &ContextMenuPrevious,\n        _window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some(context_menu) = self.context_menu.borrow_mut().as_mut() {\n            context_menu.select_prev(self.completion_provider.as_deref(), cx);\n        }\n    }\n\n    pub fn context_menu_next(\n        &mut self,\n        _: &ContextMenuNext,\n        _window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some(context_menu) = self.context_menu.borrow_mut().as_mut() {\n            context_menu.select_next(self.completion_provider.as_deref(), cx);\n        }\n    }\n\n    pub fn context_menu_last(\n        &mut self,\n        _: &ContextMenuLast,\n        _window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some(context_menu) = self.context_menu.borrow_mut().as_mut() {\n            context_menu.select_last(self.completion_provider.as_deref(), cx);\n        }\n    }\n\n    pub fn move_to_previous_word_start(\n        &mut self,\n        _: &MoveToPreviousWordStart,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_cursors_with(|map, head, _| {\n                (\n                    movement::previous_word_start(map, head),\n                    SelectionGoal::None,\n                )\n            });\n        })\n    }\n\n    pub fn move_to_previous_subword_start(\n        &mut self,\n        _: &MoveToPreviousSubwordStart,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_cursors_with(|map, head, _| {\n                (\n                    movement::previous_subword_start(map, head),\n                    SelectionGoal::None,\n                )\n            });\n        })\n    }\n\n    pub fn select_to_previous_word_start(\n        &mut self,\n        _: &SelectToPreviousWordStart,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_heads_with(|map, head, _| {\n                (\n                    movement::previous_word_start(map, head),\n                    SelectionGoal::None,\n                )\n            });\n        })\n    }\n\n    pub fn select_to_previous_subword_start(\n        &mut self,\n        _: &SelectToPreviousSubwordStart,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_heads_with(|map, head, _| {\n                (\n                    movement::previous_subword_start(map, head),\n                    SelectionGoal::None,\n                )\n            });\n        })\n    }\n\n    pub fn delete_to_previous_word_start(\n        &mut self,\n        action: &DeleteToPreviousWordStart,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.transact(window, cx, |this, window, cx| {\n            this.select_autoclose_pair(window, cx);\n            this.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n                let line_mode = s.line_mode;\n                s.move_with(|map, selection| {\n                    if selection.is_empty() && !line_mode {\n                        let cursor = if action.ignore_newlines {\n                            movement::previous_word_start(map, selection.head())\n                        } else {\n                            movement::previous_word_start_or_newline(map, selection.head())\n                        };\n                        selection.set_head(cursor, SelectionGoal::None);\n                    }\n                });\n            });\n            this.insert(": "",
    ", window, cx);\n        });\n    }\n\n    pub fn delete_to_previous_subword_start(\n        &mut self,\n        _: &DeleteToPreviousSubwordStart,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.transact(window, cx, |this, window, cx| {\n            this.select_autoclose_pair(window, cx);\n            this.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n                let line_mode = s.line_mode;\n                s.move_with(|map, selection| {\n                    if selection.is_empty() && !line_mode {\n                        let cursor = movement::previous_subword_start(map, selection.head());\n                        selection.set_head(cursor, SelectionGoal::None);\n                    }\n                });\n            });\n            this.insert(": "",
    ", window, cx);\n        });\n    }\n\n    pub fn move_to_next_word_end(\n        &mut self,\n        _: &MoveToNextWordEnd,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_cursors_with(|map, head, _| {\n                (movement::next_word_end(map, head), SelectionGoal::None)\n            });\n        })\n    }\n\n    pub fn move_to_next_subword_end(\n        &mut self,\n        _: &MoveToNextSubwordEnd,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_cursors_with(|map, head, _| {\n                (movement::next_subword_end(map, head), SelectionGoal::None)\n            });\n        })\n    }\n\n    pub fn select_to_next_word_end(\n        &mut self,\n        _: &SelectToNextWordEnd,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_heads_with(|map, head, _| {\n                (movement::next_word_end(map, head), SelectionGoal::None)\n            });\n        })\n    }\n\n    pub fn select_to_next_subword_end(\n        &mut self,\n        _: &SelectToNextSubwordEnd,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_heads_with(|map, head, _| {\n                (movement::next_subword_end(map, head), SelectionGoal::None)\n            });\n        })\n    }\n\n    pub fn delete_to_next_word_end(\n        &mut self,\n        action: &DeleteToNextWordEnd,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.transact(window, cx, |this, window, cx| {\n            this.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n                let line_mode = s.line_mode;\n                s.move_with(|map, selection| {\n                    if selection.is_empty() && !line_mode {\n                        let cursor = if action.ignore_newlines {\n                            movement::next_word_end(map, selection.head())\n                        } else {\n                            movement::next_word_end_or_newline(map, selection.head())\n                        };\n                        selection.set_head(cursor, SelectionGoal::None);\n                    }\n                });\n            });\n            this.insert(": "",
    ", window, cx);\n        });\n    }\n\n    pub fn delete_to_next_subword_end(\n        &mut self,\n        _: &DeleteToNextSubwordEnd,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.transact(window, cx, |this, window, cx| {\n            this.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n                s.move_with(|map, selection| {\n                    if selection.is_empty() {\n                        let cursor = movement::next_subword_end(map, selection.head());\n                        selection.set_head(cursor, SelectionGoal::None);\n                    }\n                });\n            });\n            this.insert(": "",
    ", window, cx);\n        });\n    }\n\n    pub fn move_to_beginning_of_line(\n        &mut self,\n        action: &MoveToBeginningOfLine,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_cursors_with(|map, head, _| {\n                (\n                    movement::indented_line_beginning(\n                        map,\n                        head,\n                        action.stop_at_soft_wraps,\n                        action.stop_at_indent,\n                    ),\n                    SelectionGoal::None,\n                )\n            });\n        })\n    }\n\n    pub fn select_to_beginning_of_line(\n        &mut self,\n        action: &SelectToBeginningOfLine,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_heads_with(|map, head, _| {\n                (\n                    movement::indented_line_beginning(\n                        map,\n                        head,\n                        action.stop_at_soft_wraps,\n                        action.stop_at_indent,\n                    ),\n                    SelectionGoal::None,\n                )\n            });\n        });\n    }\n\n    pub fn delete_to_beginning_of_line(\n        &mut self,\n        action: &DeleteToBeginningOfLine,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.transact(window, cx, |this, window, cx| {\n            this.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n                s.move_with(|_, selection| {\n                    selection.reversed = true;\n                });\n            });\n\n            this.select_to_beginning_of_line(\n                &SelectToBeginningOfLine {\n                    stop_at_soft_wraps: false,\n                    stop_at_indent: action.stop_at_indent,\n                },\n                window,\n                cx,\n            );\n            this.backspace(&Backspace, window, cx);\n        });\n    }\n\n    pub fn move_to_end_of_line(\n        &mut self,\n        action: &MoveToEndOfLine,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_cursors_with(|map, head, _| {\n                (\n                    movement::line_end(map, head, action.stop_at_soft_wraps),\n                    SelectionGoal::None,\n                )\n            });\n        })\n    }\n\n    pub fn select_to_end_of_line(\n        &mut self,\n        action: &SelectToEndOfLine,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_heads_with(|map, head, _| {\n                (\n                    movement::line_end(map, head, action.stop_at_soft_wraps),\n                    SelectionGoal::None,\n                )\n            });\n        })\n    }\n\n    pub fn delete_to_end_of_line(\n        &mut self,\n        _: &DeleteToEndOfLine,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.transact(window, cx, |this, window, cx| {\n            this.select_to_end_of_line(\n                &SelectToEndOfLine {\n                    stop_at_soft_wraps: false,\n                },\n                window,\n                cx,\n            );\n            this.delete(&Delete, window, cx);\n        });\n    }\n\n    pub fn cut_to_end_of_line(\n        &mut self,\n        _: &CutToEndOfLine,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.transact(window, cx, |this, window, cx| {\n            this.select_to_end_of_line(\n                &SelectToEndOfLine {\n                    stop_at_soft_wraps: false,\n                },\n                window,\n                cx,\n            );\n            this.cut(&Cut, window, cx);\n        });\n    }\n\n    pub fn move_to_start_of_paragraph(\n        &mut self,\n        _: &MoveToStartOfParagraph,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if matches!(self.mode, EditorMode::SingleLine { .. }) {\n            cx.propagate();\n            return;\n        }\n\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_with(|map, selection| {\n                selection.collapse_to(\n                    movement::start_of_paragraph(map, selection.head(), 1),\n                    SelectionGoal::None,\n                )\n            });\n        })\n    }\n\n    pub fn move_to_end_of_paragraph(\n        &mut self,\n        _: &MoveToEndOfParagraph,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if matches!(self.mode, EditorMode::SingleLine { .. }) {\n            cx.propagate();\n            return;\n        }\n\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_with(|map, selection| {\n                selection.collapse_to(\n                    movement::end_of_paragraph(map, selection.head(), 1),\n                    SelectionGoal::None,\n                )\n            });\n        })\n    }\n\n    pub fn select_to_start_of_paragraph(\n        &mut self,\n        _: &SelectToStartOfParagraph,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if matches!(self.mode, EditorMode::SingleLine { .. }) {\n            cx.propagate();\n            return;\n        }\n\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_heads_with(|map, head, _| {\n                (\n                    movement::start_of_paragraph(map, head, 1),\n                    SelectionGoal::None,\n                )\n            });\n        })\n    }\n\n    pub fn select_to_end_of_paragraph(\n        &mut self,\n        _: &SelectToEndOfParagraph,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if matches!(self.mode, EditorMode::SingleLine { .. }) {\n            cx.propagate();\n            return;\n        }\n\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_heads_with(|map, head, _| {\n                (\n                    movement::end_of_paragraph(map, head, 1),\n                    SelectionGoal::None,\n                )\n            });\n        })\n    }\n\n    pub fn move_to_start_of_excerpt(\n        &mut self,\n        _: &MoveToStartOfExcerpt,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if matches!(self.mode, EditorMode::SingleLine { .. }) {\n            cx.propagate();\n            return;\n        }\n\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_with(|map, selection| {\n                selection.collapse_to(\n                    movement::start_of_excerpt(\n                        map,\n                        selection.head(),\n                        workspace::searchable::Direction::Prev,\n                    ),\n                    SelectionGoal::None,\n                )\n            });\n        })\n    }\n\n    pub fn move_to_start_of_next_excerpt(\n        &mut self,\n        _: &MoveToStartOfNextExcerpt,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if matches!(self.mode, EditorMode::SingleLine { .. }) {\n            cx.propagate();\n            return;\n        }\n\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_with(|map, selection| {\n                selection.collapse_to(\n                    movement::start_of_excerpt(\n                        map,\n                        selection.head(),\n                        workspace::searchable::Direction::Next,\n                    ),\n                    SelectionGoal::None,\n                )\n            });\n        })\n    }\n\n    pub fn move_to_end_of_excerpt(\n        &mut self,\n        _: &MoveToEndOfExcerpt,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if matches!(self.mode, EditorMode::SingleLine { .. }) {\n            cx.propagate();\n            return;\n        }\n\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_with(|map, selection| {\n                selection.collapse_to(\n                    movement::end_of_excerpt(\n                        map,\n                        selection.head(),\n                        workspace::searchable::Direction::Next,\n                    ),\n                    SelectionGoal::None,\n                )\n            });\n        })\n    }\n\n    pub fn move_to_end_of_previous_excerpt(\n        &mut self,\n        _: &MoveToEndOfPreviousExcerpt,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if matches!(self.mode, EditorMode::SingleLine { .. }) {\n            cx.propagate();\n            return;\n        }\n\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_with(|map, selection| {\n                selection.collapse_to(\n                    movement::end_of_excerpt(\n                        map,\n                        selection.head(),\n                        workspace::searchable::Direction::Prev,\n                    ),\n                    SelectionGoal::None,\n                )\n            });\n        })\n    }\n\n    pub fn select_to_start_of_excerpt(\n        &mut self,\n        _: &SelectToStartOfExcerpt,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if matches!(self.mode, EditorMode::SingleLine { .. }) {\n            cx.propagate();\n            return;\n        }\n\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_heads_with(|map, head, _| {\n                (\n                    movement::start_of_excerpt(map, head, workspace::searchable::Direction::Prev),\n                    SelectionGoal::None,\n                )\n            });\n        })\n    }\n\n    pub fn select_to_start_of_next_excerpt(\n        &mut self,\n        _: &SelectToStartOfNextExcerpt,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if matches!(self.mode, EditorMode::SingleLine { .. }) {\n            cx.propagate();\n            return;\n        }\n\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_heads_with(|map, head, _| {\n                (\n                    movement::start_of_excerpt(map, head, workspace::searchable::Direction::Next),\n                    SelectionGoal::None,\n                )\n            });\n        })\n    }\n\n    pub fn select_to_end_of_excerpt(\n        &mut self,\n        _: &SelectToEndOfExcerpt,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if matches!(self.mode, EditorMode::SingleLine { .. }) {\n            cx.propagate();\n            return;\n        }\n\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_heads_with(|map, head, _| {\n                (\n                    movement::end_of_excerpt(map, head, workspace::searchable::Direction::Next),\n                    SelectionGoal::None,\n                )\n            });\n        })\n    }\n\n    pub fn select_to_end_of_previous_excerpt(\n        &mut self,\n        _: &SelectToEndOfPreviousExcerpt,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if matches!(self.mode, EditorMode::SingleLine { .. }) {\n            cx.propagate();\n            return;\n        }\n\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_heads_with(|map, head, _| {\n                (\n                    movement::end_of_excerpt(map, head, workspace::searchable::Direction::Prev),\n                    SelectionGoal::None,\n                )\n            });\n        })\n    }\n\n    pub fn move_to_beginning(\n        &mut self,\n        _: &MoveToBeginning,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if matches!(self.mode, EditorMode::SingleLine { .. }) {\n            cx.propagate();\n            return;\n        }\n\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.select_ranges(vec![0..0]);\n        });\n    }\n\n    pub fn select_to_beginning(\n        &mut self,\n        _: &SelectToBeginning,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let mut selection = self.selections.last::<Point>(cx);\n        selection.set_head(Point::zero(), SelectionGoal::None);\n\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.select(vec![selection]);\n        });\n    }\n\n    pub fn move_to_end(&mut self, _: &MoveToEnd, window: &mut Window, cx: &mut Context<Self>) {\n        if matches!(self.mode, EditorMode::SingleLine { .. }) {\n            cx.propagate();\n            return;\n        }\n\n        let cursor = self.buffer.read(cx).read(cx).len();\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.select_ranges(vec![cursor..cursor])\n        });\n    }\n\n    pub fn set_nav_history(&mut self, nav_history: Option<ItemNavHistory>) {\n        self.nav_history = nav_history;\n    }\n\n    pub fn nav_history(&self) -> Option<&ItemNavHistory> {\n        self.nav_history.as_ref()\n    }\n\n    fn push_to_nav_history(\n        &mut self,\n        cursor_anchor: Anchor,\n        new_position: Option<Point>,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some(nav_history) = self.nav_history.as_mut() {\n            let buffer = self.buffer.read(cx).read(cx);\n            let cursor_position = cursor_anchor.to_point(&buffer);\n            let scroll_state = self.scroll_manager.anchor();\n            let scroll_top_row = scroll_state.top_row(&buffer);\n            drop(buffer);\n\n            if let Some(new_position) = new_position {\n                let row_delta = (new_position.row as i64 - cursor_position.row as i64).abs();\n                if row_delta < MIN_NAVIGATION_HISTORY_ROW_DELTA {\n                    return;\n                }\n            }\n\n            nav_history.push(\n                Some(NavigationData {\n                    cursor_anchor,\n                    cursor_position,\n                    scroll_anchor: scroll_state,\n                    scroll_top_row,\n                }),\n                cx,\n            );\n        }\n    }\n\n    pub fn select_to_end(&mut self, _: &SelectToEnd, window: &mut Window, cx: &mut Context<Self>) {\n        let buffer = self.buffer.read(cx).snapshot(cx);\n        let mut selection = self.selections.first::<usize>(cx);\n        selection.set_head(buffer.len(), SelectionGoal::None);\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.select(vec![selection]);\n        });\n    }\n\n    pub fn select_all(&mut self, _: &SelectAll, window: &mut Window, cx: &mut Context<Self>) {\n        let end = self.buffer.read(cx).read(cx).len();\n        self.change_selections(None, window, cx, |s| {\n            s.select_ranges(vec![0..end]);\n        });\n    }\n\n    pub fn select_line(&mut self, _: &SelectLine, window: &mut Window, cx: &mut Context<Self>) {\n        let display_map = self.display_map.update(cx, |map, cx| map.snapshot(cx));\n        let mut selections = self.selections.all::<Point>(cx);\n        let max_point = display_map.buffer_snapshot.max_point();\n        for selection in &mut selections {\n            let rows = selection.spanned_rows(true, &display_map);\n            selection.start = Point::new(rows.start.0, 0);\n            selection.end = cmp::min(max_point, Point::new(rows.end.0, 0));\n            selection.reversed = false;\n        }\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.select(selections);\n        });\n    }\n\n    pub fn split_selection_into_lines(\n        &mut self,\n        _: &SplitSelectionIntoLines,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let selections = self\n            .selections\n            .all::<Point>(cx)\n            .into_iter()\n            .map(|selection| selection.start..selection.end)\n            .collect::<Vec<_>>();\n        self.unfold_ranges(&selections, true, true, cx);\n\n        let mut new_selection_ranges = Vec::new();\n        {\n            let buffer = self.buffer.read(cx).read(cx);\n            for selection in selections {\n                for row in selection.start.row..selection.end.row {\n                    let cursor = Point::new(row, buffer.line_len(MultiBufferRow(row)));\n                    new_selection_ranges.push(cursor..cursor);\n                }\n\n                let is_multiline_selection = selection.start.row != selection.end.row;\n                // Don't insert last one if it's a multi-line selection ending at the start of a line,\n                // so this action feels more ergonomic when paired with other selection operations\n                let should_skip_last = is_multiline_selection && selection.end.column == 0;\n                if !should_skip_last {\n                    new_selection_ranges.push(selection.end..selection.end);\n                }\n            }\n        }\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.select_ranges(new_selection_ranges);\n        });\n    }\n\n    pub fn add_selection_above(\n        &mut self,\n        _: &AddSelectionAbove,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.add_selection(true, window, cx);\n    }\n\n    pub fn add_selection_below(\n        &mut self,\n        _: &AddSelectionBelow,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.add_selection(false, window, cx);\n    }\n\n    fn add_selection(&mut self, above: bool, window: &mut Window, cx: &mut Context<Self>) {\n        let display_map = self.display_map.update(cx, |map, cx| map.snapshot(cx));\n        let mut selections = self.selections.all::<Point>(cx);\n        let text_layout_details = self.text_layout_details(window);\n        let mut state = self.add_selections_state.take().unwrap_or_else(|| {\n            let oldest_selection = selections.iter().min_by_key(|s| s.id).unwrap().clone();\n            let range = oldest_selection.display_range(&display_map).sorted();\n\n            let start_x = display_map.x_for_display_point(range.start, &text_layout_details);\n            let end_x = display_map.x_for_display_point(range.end, &text_layout_details);\n            let positions = start_x.min(end_x)..start_x.max(end_x);\n\n            selections.clear();\n            let mut stack = Vec::new();\n            for row in range.start.row().0..=range.end.row().0 {\n                if let Some(selection) = self.selections.build_columnar_selection(\n                    &display_map,\n                    DisplayRow(row),\n                    &positions,\n                    oldest_selection.reversed,\n                    &text_layout_details,\n                ) {\n                    stack.push(selection.id);\n                    selections.push(selection);\n                }\n            }\n\n            if above {\n                stack.reverse();\n            }\n\n            AddSelectionsState { above, stack }\n        });\n\n        let last_added_selection = *state.stack.last().unwrap();\n        let mut new_selections = Vec::new();\n        if above == state.above {\n            let end_row = if above {\n                DisplayRow(0)\n            } else {\n                display_map.max_point().row()\n            };\n\n            'outer: for selection in selections {\n                if selection.id == last_added_selection {\n                    let range = selection.display_range(&display_map).sorted();\n                    debug_assert_eq!(range.start.row(), range.end.row());\n                    let mut row = range.start.row();\n                    let positions =\n                        if let SelectionGoal::HorizontalRange { start, end } = selection.goal {\n                            px(start)..px(end)\n                        } else {\n                            let start_x =\n                                display_map.x_for_display_point(range.start, &text_layout_details);\n                            let end_x =\n                                display_map.x_for_display_point(range.end, &text_layout_details);\n                            start_x.min(end_x)..start_x.max(end_x)\n                        };\n\n                    while row != end_row {\n                        if above {\n                            row.0 -= 1;\n                        } else {\n                            row.0 += 1;\n                        }\n\n                        if let Some(new_selection) = self.selections.build_columnar_selection(\n                            &display_map,\n                            row,\n                            &positions,\n                            selection.reversed,\n                            &text_layout_details,\n                        ) {\n                            state.stack.push(new_selection.id);\n                            if above {\n                                new_selections.push(new_selection);\n                                new_selections.push(selection);\n                            } else {\n                                new_selections.push(selection);\n                                new_selections.push(new_selection);\n                            }\n\n                            continue 'outer;\n                        }\n                    }\n                }\n\n                new_selections.push(selection);\n            }\n        } else {\n            new_selections = selections;\n            new_selections.retain(|s| s.id != last_added_selection);\n            state.stack.pop();\n        }\n\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.select(new_selections);\n        });\n        if state.stack.len() > 1 {\n            self.add_selections_state = Some(state);\n        }\n    }\n\n    pub fn select_next_match_internal(\n        &mut self,\n        display_map: &DisplaySnapshot,\n        replace_newest: bool,\n        autoscroll: Option<Autoscroll>,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Result<()> {\n        fn select_next_match_ranges(\n            this: &mut Editor,\n            range: Range<usize>,\n            replace_newest: bool,\n            auto_scroll: Option<Autoscroll>,\n            window: &mut Window,\n            cx: &mut Context<Editor>,\n        ) {\n            this.unfold_ranges(&[range.clone()], false, true, cx);\n            this.change_selections(auto_scroll, window, cx, |s| {\n                if replace_newest {\n                    s.delete(s.newest_anchor().id);\n                }\n                s.insert_range(range.clone());\n            });\n        }\n\n        let buffer = &display_map.buffer_snapshot;\n        let mut selections = self.selections.all::<usize>(cx);\n        if let Some(mut select_next_state) = self.select_next_state.take() {\n            let query = &select_next_state.query;\n            if !select_next_state.done {\n                let first_selection = selections.iter().min_by_key(|s| s.id).unwrap();\n                let last_selection = selections.iter().max_by_key(|s| s.id).unwrap();\n                let mut next_selected_range = None;\n\n                let bytes_after_last_selection =\n                    buffer.bytes_in_range(last_selection.end..buffer.len());\n                let bytes_before_first_selection = buffer.bytes_in_range(0..first_selection.start);\n                let query_matches = query\n                    .stream_find_iter(bytes_after_last_selection)\n                    .map(|result| (last_selection.end, result))\n                    .chain(\n                        query\n                            .stream_find_iter(bytes_before_first_selection)\n                            .map(|result| (0, result)),\n                    );\n\n                for (start_offset, query_match) in query_matches {\n                    let query_match = query_match.unwrap(); // can only fail due to I/O\n                    let offset_range =\n                        start_offset + query_match.start()..start_offset + query_match.end();\n                    let display_range = offset_range.start.to_display_point(display_map)\n                        ..offset_range.end.to_display_point(display_map);\n\n                    if !select_next_state.wordwise\n                        || (!movement::is_inside_word(display_map, display_range.start)\n                            && !movement::is_inside_word(display_map, display_range.end))\n                    {\n                        // TODO: This is n^2, because we might check all the selections\n                        if !selections\n                            .iter()\n                            .any(|selection| selection.range().overlaps(&offset_range))\n                        {\n                            next_selected_range = Some(offset_range);\n                            break;\n                        }\n                    }\n                }\n\n                if let Some(next_selected_range) = next_selected_range {\n                    select_next_match_ranges(\n                        self,\n                        next_selected_range,\n                        replace_newest,\n                        autoscroll,\n                        window,\n                        cx,\n                    );\n                } else {\n                    select_next_state.done = true;\n                }\n            }\n\n            self.select_next_state = Some(select_next_state);\n        } else {\n            let mut only_carets = true;\n            let mut same_text_selected = true;\n            let mut selected_text = None;\n\n            let mut selections_iter = selections.iter().peekable();\n            while let Some(selection) = selections_iter.next() {\n                if selection.start != selection.end {\n                    only_carets = false;\n                }\n\n                if same_text_selected {\n                    if selected_text.is_none() {\n                        selected_text =\n                            Some(buffer.text_for_range(selection.range()).collect::<String>());\n                    }\n\n                    if let Some(next_selection) = selections_iter.peek() {\n                        if next_selection.range().len() == selection.range().len() {\n                            let next_selected_text = buffer\n                                .text_for_range(next_selection.range())\n                                .collect::<String>();\n                            if Some(next_selected_text) != selected_text {\n                                same_text_selected = false;\n                                selected_text = None;\n                            }\n                        } else {\n                            same_text_selected = false;\n                            selected_text = None;\n                        }\n                    }\n                }\n            }\n\n            if only_carets {\n                for selection in &mut selections {\n                    let word_range = movement::surrounding_word(\n                        display_map,\n                        selection.start.to_display_point(display_map),\n                    );\n                    selection.start = word_range.start.to_offset(display_map, Bias::Left);\n                    selection.end = word_range.end.to_offset(display_map, Bias::Left);\n                    selection.goal = SelectionGoal::None;\n                    selection.reversed = false;\n                    select_next_match_ranges(\n                        self,\n                        selection.start..selection.end,\n                        replace_newest,\n                        autoscroll,\n                        window,\n                        cx,\n                    );\n                }\n\n                if selections.len() == 1 {\n                    let selection = selections\n                        .last()\n                        .expect(": "",
    ");\n                    let query = buffer\n                        .text_for_range(selection.start..selection.end)\n                        .collect::<String>();\n                    let is_empty = query.is_empty();\n                    let select_state = SelectNextState {\n                        query: AhoCorasick::new(&[query])?,\n                        wordwise: true,\n                        done: is_empty,\n                    };\n                    self.select_next_state = Some(select_state);\n                } else {\n                    self.select_next_state = None;\n                }\n            } else if let Some(selected_text) = selected_text {\n                self.select_next_state = Some(SelectNextState {\n                    query: AhoCorasick::new(&[selected_text])?,\n                    wordwise: false,\n                    done: false,\n                });\n                self.select_next_match_internal(\n                    display_map,\n                    replace_newest,\n                    autoscroll,\n                    window,\n                    cx,\n                )?;\n            }\n        }\n        Ok(())\n    }\n\n    pub fn select_all_matches(\n        &mut self,\n        _action: &SelectAllMatches,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Result<()> {\n        self.push_to_selection_history();\n        let display_map = self.display_map.update(cx, |map, cx| map.snapshot(cx));\n\n        self.select_next_match_internal(&display_map, false, None, window, cx)?;\n        let Some(select_next_state) = self.select_next_state.as_mut() else {\n            return Ok(());\n        };\n        if select_next_state.done {\n            return Ok(());\n        }\n\n        let mut new_selections = self.selections.all::<usize>(cx);\n\n        let buffer = &display_map.buffer_snapshot;\n        let query_matches = select_next_state\n            .query\n            .stream_find_iter(buffer.bytes_in_range(0..buffer.len()));\n\n        for query_match in query_matches {\n            let query_match = query_match.unwrap(); // can only fail due to I/O\n            let offset_range = query_match.start()..query_match.end();\n            let display_range = offset_range.start.to_display_point(&display_map)\n                ..offset_range.end.to_display_point(&display_map);\n\n            if !select_next_state.wordwise\n                || (!movement::is_inside_word(&display_map, display_range.start)\n                    && !movement::is_inside_word(&display_map, display_range.end))\n            {\n                self.selections.change_with(cx, |selections| {\n                    new_selections.push(Selection {\n                        id: selections.new_selection_id(),\n                        start: offset_range.start,\n                        end: offset_range.end,\n                        reversed: false,\n                        goal: SelectionGoal::None,\n                    });\n                });\n            }\n        }\n\n        new_selections.sort_by_key(|selection| selection.start);\n        let mut ix = 0;\n        while ix + 1 < new_selections.len() {\n            let current_selection = &new_selections[ix];\n            let next_selection = &new_selections[ix + 1];\n            if current_selection.range().overlaps(&next_selection.range()) {\n                if current_selection.id < next_selection.id {\n                    new_selections.remove(ix + 1);\n                } else {\n                    new_selections.remove(ix);\n                }\n            } else {\n                ix += 1;\n            }\n        }\n\n        let reversed = self.selections.oldest::<usize>(cx).reversed;\n\n        for selection in new_selections.iter_mut() {\n            selection.reversed = reversed;\n        }\n\n        select_next_state.done = true;\n        self.unfold_ranges(\n            &new_selections\n                .iter()\n                .map(|selection| selection.range())\n                .collect::<Vec<_>>(),\n            false,\n            false,\n            cx,\n        );\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |selections| {\n            selections.select(new_selections)\n        });\n\n        Ok(())\n    }\n\n    pub fn select_next(\n        &mut self,\n        action: &SelectNext,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Result<()> {\n        self.push_to_selection_history();\n        let display_map = self.display_map.update(cx, |map, cx| map.snapshot(cx));\n        self.select_next_match_internal(\n            &display_map,\n            action.replace_newest,\n            Some(Autoscroll::newest()),\n            window,\n            cx,\n        )?;\n        Ok(())\n    }\n\n    pub fn select_previous(\n        &mut self,\n        action: &SelectPrevious,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Result<()> {\n        self.push_to_selection_history();\n        let display_map = self.display_map.update(cx, |map, cx| map.snapshot(cx));\n        let buffer = &display_map.buffer_snapshot;\n        let mut selections = self.selections.all::<usize>(cx);\n        if let Some(mut select_prev_state) = self.select_prev_state.take() {\n            let query = &select_prev_state.query;\n            if !select_prev_state.done {\n                let first_selection = selections.iter().min_by_key(|s| s.id).unwrap();\n                let last_selection = selections.iter().max_by_key(|s| s.id).unwrap();\n                let mut next_selected_range = None;\n                // When we're iterating matches backwards, the oldest match will actually be the furthest one in the buffer.\n                let bytes_before_last_selection =\n                    buffer.reversed_bytes_in_range(0..last_selection.start);\n                let bytes_after_first_selection =\n                    buffer.reversed_bytes_in_range(first_selection.end..buffer.len());\n                let query_matches = query\n                    .stream_find_iter(bytes_before_last_selection)\n                    .map(|result| (last_selection.start, result))\n                    .chain(\n                        query\n                            .stream_find_iter(bytes_after_first_selection)\n                            .map(|result| (buffer.len(), result)),\n                    );\n                for (end_offset, query_match) in query_matches {\n                    let query_match = query_match.unwrap(); // can only fail due to I/O\n                    let offset_range =\n                        end_offset - query_match.end()..end_offset - query_match.start();\n                    let display_range = offset_range.start.to_display_point(&display_map)\n                        ..offset_range.end.to_display_point(&display_map);\n\n                    if !select_prev_state.wordwise\n                        || (!movement::is_inside_word(&display_map, display_range.start)\n                            && !movement::is_inside_word(&display_map, display_range.end))\n                    {\n                        next_selected_range = Some(offset_range);\n                        break;\n                    }\n                }\n\n                if let Some(next_selected_range) = next_selected_range {\n                    self.unfold_ranges(&[next_selected_range.clone()], false, true, cx);\n                    self.change_selections(Some(Autoscroll::newest()), window, cx, |s| {\n                        if action.replace_newest {\n                            s.delete(s.newest_anchor().id);\n                        }\n                        s.insert_range(next_selected_range);\n                    });\n                } else {\n                    select_prev_state.done = true;\n                }\n            }\n\n            self.select_prev_state = Some(select_prev_state);\n        } else {\n            let mut only_carets = true;\n            let mut same_text_selected = true;\n            let mut selected_text = None;\n\n            let mut selections_iter = selections.iter().peekable();\n            while let Some(selection) = selections_iter.next() {\n                if selection.start != selection.end {\n                    only_carets = false;\n                }\n\n                if same_text_selected {\n                    if selected_text.is_none() {\n                        selected_text =\n                            Some(buffer.text_for_range(selection.range()).collect::<String>());\n                    }\n\n                    if let Some(next_selection) = selections_iter.peek() {\n                        if next_selection.range().len() == selection.range().len() {\n                            let next_selected_text = buffer\n                                .text_for_range(next_selection.range())\n                                .collect::<String>();\n                            if Some(next_selected_text) != selected_text {\n                                same_text_selected = false;\n                                selected_text = None;\n                            }\n                        } else {\n                            same_text_selected = false;\n                            selected_text = None;\n                        }\n                    }\n                }\n            }\n\n            if only_carets {\n                for selection in &mut selections {\n                    let word_range = movement::surrounding_word(\n                        &display_map,\n                        selection.start.to_display_point(&display_map),\n                    );\n                    selection.start = word_range.start.to_offset(&display_map, Bias::Left);\n                    selection.end = word_range.end.to_offset(&display_map, Bias::Left);\n                    selection.goal = SelectionGoal::None;\n                    selection.reversed = false;\n                }\n                if selections.len() == 1 {\n                    let selection = selections\n                        .last()\n                        .expect(": "",
    ");\n                    let query = buffer\n                        .text_for_range(selection.start..selection.end)\n                        .collect::<String>();\n                    let is_empty = query.is_empty();\n                    let select_state = SelectNextState {\n                        query: AhoCorasick::new(&[query.chars().rev().collect::<String>()])?,\n                        wordwise: true,\n                        done: is_empty,\n                    };\n                    self.select_prev_state = Some(select_state);\n                } else {\n                    self.select_prev_state = None;\n                }\n\n                self.unfold_ranges(\n                    &selections.iter().map(|s| s.range()).collect::<Vec<_>>(),\n                    false,\n                    true,\n                    cx,\n                );\n                self.change_selections(Some(Autoscroll::newest()), window, cx, |s| {\n                    s.select(selections);\n                });\n            } else if let Some(selected_text) = selected_text {\n                self.select_prev_state = Some(SelectNextState {\n                    query: AhoCorasick::new(&[selected_text.chars().rev().collect::<String>()])?,\n                    wordwise: false,\n                    done: false,\n                });\n                self.select_previous(action, window, cx)?;\n            }\n        }\n        Ok(())\n    }\n\n    pub fn toggle_comments(\n        &mut self,\n        action: &ToggleComments,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if self.read_only(cx) {\n            return;\n        }\n        let text_layout_details = &self.text_layout_details(window);\n        self.transact(window, cx, |this, window, cx| {\n            let mut selections = this.selections.all::<MultiBufferPoint>(cx);\n            let mut edits = Vec::new();\n            let mut selection_edit_ranges = Vec::new();\n            let mut last_toggled_row = None;\n            let snapshot = this.buffer.read(cx).read(cx);\n            let empty_str: Arc<str> = Arc::default();\n            let mut suffixes_inserted = Vec::new();\n            let ignore_indent = action.ignore_indent;\n\n            fn comment_prefix_range(\n                snapshot: &MultiBufferSnapshot,\n                row: MultiBufferRow,\n                comment_prefix: &str,\n                comment_prefix_whitespace: &str,\n                ignore_indent: bool,\n            ) -> Range<Point> {\n                let indent_size = if ignore_indent {\n                    0\n                } else {\n                    snapshot.indent_size_for_line(row).len\n                };\n\n                let start = Point::new(row.0, indent_size);\n\n                let mut line_bytes = snapshot\n                    .bytes_in_range(start..snapshot.max_point())\n                    .flatten()\n                    .copied();\n\n                // If this line currently begins with the line comment prefix, then record\n                // the range containing the prefix.\n                if line_bytes\n                    .by_ref()\n                    .take(comment_prefix.len())\n                    .eq(comment_prefix.bytes())\n                {\n                    // Include any whitespace that matches the comment prefix.\n                    let matching_whitespace_len = line_bytes\n                        .zip(comment_prefix_whitespace.bytes())\n                        .take_while(|(a, b)| a == b)\n                        .count() as u32;\n                    let end = Point::new(\n                        start.row,\n                        start.column + comment_prefix.len() as u32 + matching_whitespace_len,\n                    );\n                    start..end\n                } else {\n                    start..start\n                }\n            }\n\n            fn comment_suffix_range(\n                snapshot: &MultiBufferSnapshot,\n                row: MultiBufferRow,\n                comment_suffix: &str,\n                comment_suffix_has_leading_space: bool,\n            ) -> Range<Point> {\n                let end = Point::new(row.0, snapshot.line_len(row));\n                let suffix_start_column = end.column.saturating_sub(comment_suffix.len() as u32);\n\n                let mut line_end_bytes = snapshot\n                    .bytes_in_range(Point::new(end.row, suffix_start_column.saturating_sub(1))..end)\n                    .flatten()\n                    .copied();\n\n                let leading_space_len = if suffix_start_column > 0\n                    && line_end_bytes.next() == Some(b' ')\n                    && comment_suffix_has_leading_space\n                {\n                    1\n                } else {\n                    0\n                };\n\n                // If this line currently begins with the line comment prefix, then record\n                // the range containing the prefix.\n                if line_end_bytes.by_ref().eq(comment_suffix.bytes()) {\n                    let start = Point::new(end.row, suffix_start_column - leading_space_len);\n                    start..end\n                } else {\n                    end..end\n                }\n            }\n\n            // TODO: Handle selections that cross excerpts\n            for selection in &mut selections {\n                let start_column = snapshot\n                    .indent_size_for_line(MultiBufferRow(selection.start.row))\n                    .len;\n                let language = if let Some(language) =\n                    snapshot.language_scope_at(Point::new(selection.start.row, start_column))\n                {\n                    language\n                } else {\n                    continue;\n                };\n\n                selection_edit_ranges.clear();\n\n                // If multiple selections contain a given row, avoid processing that\n                // row more than once.\n                let mut start_row = MultiBufferRow(selection.start.row);\n                if last_toggled_row == Some(start_row) {\n                    start_row = start_row.next_row();\n                }\n                let end_row =\n                    if selection.end.row > selection.start.row && selection.end.column == 0 {\n                        MultiBufferRow(selection.end.row - 1)\n                    } else {\n                        MultiBufferRow(selection.end.row)\n                    };\n                last_toggled_row = Some(end_row);\n\n                if start_row > end_row {\n                    continue;\n                }\n\n                // If the language has line comments, toggle those.\n                let mut full_comment_prefixes = language.line_comment_prefixes().to_vec();\n\n                // If ignore_indent is set, trim spaces from the right side of all full_comment_prefixes\n                if ignore_indent {\n                    full_comment_prefixes = full_comment_prefixes\n                        .into_iter()\n                        .map(|s| Arc::from(s.trim_end()))\n                        .collect();\n                }\n\n                if !full_comment_prefixes.is_empty() {\n                    let first_prefix = full_comment_prefixes\n                        .first()\n                        .expect(": "",
    ");\n                    let prefix_trimmed_lengths = full_comment_prefixes\n                        .iter()\n                        .map(|p| p.trim_end_matches(' ').len())\n                        .collect::<SmallVec<[usize; 4]>>();\n\n                    let mut all_selection_lines_are_comments = true;\n\n                    for row in start_row.0..=end_row.0 {\n                        let row = MultiBufferRow(row);\n                        if start_row < end_row && snapshot.is_line_blank(row) {\n                            continue;\n                        }\n\n                        let prefix_range = full_comment_prefixes\n                            .iter()\n                            .zip(prefix_trimmed_lengths.iter().copied())\n                            .map(|(prefix, trimmed_prefix_len)| {\n                                comment_prefix_range(\n                                    snapshot.deref(),\n                                    row,\n                                    &prefix[..trimmed_prefix_len],\n                                    &prefix[trimmed_prefix_len..],\n                                    ignore_indent,\n                                )\n                            })\n                            .max_by_key(|range| range.end.column - range.start.column)\n                            .expect(": "",
    ");\n\n                        if prefix_range.is_empty() {\n                            all_selection_lines_are_comments = false;\n                        }\n\n                        selection_edit_ranges.push(prefix_range);\n                    }\n\n                    if all_selection_lines_are_comments {\n                        edits.extend(\n                            selection_edit_ranges\n                                .iter()\n                                .cloned()\n                                .map(|range| (range, empty_str.clone())),\n                        );\n                    } else {\n                        let min_column = selection_edit_ranges\n                            .iter()\n                            .map(|range| range.start.column)\n                            .min()\n                            .unwrap_or(0);\n                        edits.extend(selection_edit_ranges.iter().map(|range| {\n                            let position = Point::new(range.start.row, min_column);\n                            (position..position, first_prefix.clone())\n                        }));\n                    }\n                } else if let Some((full_comment_prefix, comment_suffix)) =\n                    language.block_comment_delimiters()\n                {\n                    let comment_prefix = full_comment_prefix.trim_end_matches(' ');\n                    let comment_prefix_whitespace = &full_comment_prefix[comment_prefix.len()..];\n                    let prefix_range = comment_prefix_range(\n                        snapshot.deref(),\n                        start_row,\n                        comment_prefix,\n                        comment_prefix_whitespace,\n                        ignore_indent,\n                    );\n                    let suffix_range = comment_suffix_range(\n                        snapshot.deref(),\n                        end_row,\n                        comment_suffix.trim_start_matches(' '),\n                        comment_suffix.starts_with(' '),\n                    );\n\n                    if prefix_range.is_empty() || suffix_range.is_empty() {\n                        edits.push((\n                            prefix_range.start..prefix_range.start,\n                            full_comment_prefix.clone(),\n                        ));\n                        edits.push((suffix_range.end..suffix_range.end, comment_suffix.clone()));\n                        suffixes_inserted.push((end_row, comment_suffix.len()));\n                    } else {\n                        edits.push((prefix_range, empty_str.clone()));\n                        edits.push((suffix_range, empty_str.clone()));\n                    }\n                } else {\n                    continue;\n                }\n            }\n\n            drop(snapshot);\n            this.buffer.update(cx, |buffer, cx| {\n                buffer.edit(edits, None, cx);\n            });\n\n            // Adjust selections so that they end before any comment suffixes that\n            // were inserted.\n            let mut suffixes_inserted = suffixes_inserted.into_iter().peekable();\n            let mut selections = this.selections.all::<Point>(cx);\n            let snapshot = this.buffer.read(cx).read(cx);\n            for selection in &mut selections {\n                while let Some((row, suffix_len)) = suffixes_inserted.peek().copied() {\n                    match row.cmp(&MultiBufferRow(selection.end.row)) {\n                        Ordering::Less => {\n                            suffixes_inserted.next();\n                            continue;\n                        }\n                        Ordering::Greater => break,\n                        Ordering::Equal => {\n                            if selection.end.column == snapshot.line_len(row) {\n                                if selection.is_empty() {\n                                    selection.start.column -= suffix_len as u32;\n                                }\n                                selection.end.column -= suffix_len as u32;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n\n            drop(snapshot);\n            this.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n                s.select(selections)\n            });\n\n            let selections = this.selections.all::<Point>(cx);\n            let selections_on_single_row = selections.windows(2).all(|selections| {\n                selections[0].start.row == selections[1].start.row\n                    && selections[0].end.row == selections[1].end.row\n                    && selections[0].start.row == selections[0].end.row\n            });\n            let selections_selecting = selections\n                .iter()\n                .any(|selection| selection.start != selection.end);\n            let advance_downwards = action.advance_downwards\n                && selections_on_single_row\n                && !selections_selecting\n                && !matches!(this.mode, EditorMode::SingleLine { .. });\n\n            if advance_downwards {\n                let snapshot = this.buffer.read(cx).snapshot(cx);\n\n                this.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n                    s.move_cursors_with(|display_snapshot, display_point, _| {\n                        let mut point = display_point.to_point(display_snapshot);\n                        point.row += 1;\n                        point = snapshot.clip_point(point, Bias::Left);\n                        let display_point = point.to_display_point(display_snapshot);\n                        let goal = SelectionGoal::HorizontalPosition(\n                            display_snapshot\n                                .x_for_display_point(display_point, text_layout_details)\n                                .into(),\n                        );\n                        (display_point, goal)\n                    })\n                });\n            }\n        });\n    }\n\n    pub fn select_enclosing_symbol(\n        &mut self,\n        _: &SelectEnclosingSymbol,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let buffer = self.buffer.read(cx).snapshot(cx);\n        let old_selections = self.selections.all::<usize>(cx).into_boxed_slice();\n\n        fn update_selection(\n            selection: &Selection<usize>,\n            buffer_snap: &MultiBufferSnapshot,\n        ) -> Option<Selection<usize>> {\n            let cursor = selection.head();\n            let (_buffer_id, symbols) = buffer_snap.symbols_containing(cursor, None)?;\n            for symbol in symbols.iter().rev() {\n                let start = symbol.range.start.to_offset(buffer_snap);\n                let end = symbol.range.end.to_offset(buffer_snap);\n                let new_range = start..end;\n                if start < selection.start || end > selection.end {\n                    return Some(Selection {\n                        id: selection.id,\n                        start: new_range.start,\n                        end: new_range.end,\n                        goal: SelectionGoal::None,\n                        reversed: selection.reversed,\n                    });\n                }\n            }\n            None\n        }\n\n        let mut selected_larger_symbol = false;\n        let new_selections = old_selections\n            .iter()\n            .map(|selection| match update_selection(selection, &buffer) {\n                Some(new_selection) => {\n                    if new_selection.range() != selection.range() {\n                        selected_larger_symbol = true;\n                    }\n                    new_selection\n                }\n                None => selection.clone(),\n            })\n            .collect::<Vec<_>>();\n\n        if selected_larger_symbol {\n            self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n                s.select(new_selections);\n            });\n        }\n    }\n\n    pub fn select_larger_syntax_node(\n        &mut self,\n        _: &SelectLargerSyntaxNode,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let display_map = self.display_map.update(cx, |map, cx| map.snapshot(cx));\n        let buffer = self.buffer.read(cx).snapshot(cx);\n        let old_selections = self.selections.all::<usize>(cx).into_boxed_slice();\n\n        let mut stack = mem::take(&mut self.select_larger_syntax_node_stack);\n        let mut selected_larger_node = false;\n        let new_selections = old_selections\n            .iter()\n            .map(|selection| {\n                let old_range = selection.start..selection.end;\n                let mut new_range = old_range.clone();\n                let mut new_node = None;\n                while let Some((node, containing_range)) = buffer.syntax_ancestor(new_range.clone())\n                {\n                    new_node = Some(node);\n                    new_range = match containing_range {\n                        MultiOrSingleBufferOffsetRange::Single(_) => break,\n                        MultiOrSingleBufferOffsetRange::Multi(range) => range,\n                    };\n                    if !display_map.intersects_fold(new_range.start)\n                        && !display_map.intersects_fold(new_range.end)\n                    {\n                        break;\n                    }\n                }\n\n                if let Some(node) = new_node {\n                    // Log the ancestor, to support using this action as a way to explore TreeSitter\n                    // nodes. Parent and grandparent are also logged because this operation will not\n                    // visit nodes that have the same range as their parent.\n                    log::info!(": "",
    ");\n                    let parent = node.parent();\n                    log::info!(": "",
    ");\n                    let grandparent = parent.and_then(|x| x.parent());\n                    log::info!(": "",
    ");\n                }\n\n                selected_larger_node |= new_range != old_range;\n                Selection {\n                    id: selection.id,\n                    start: new_range.start,\n                    end: new_range.end,\n                    goal: SelectionGoal::None,\n                    reversed: selection.reversed,\n                }\n            })\n            .collect::<Vec<_>>();\n\n        if selected_larger_node {\n            stack.push(old_selections);\n            self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n                s.select(new_selections);\n            });\n        }\n        self.select_larger_syntax_node_stack = stack;\n    }\n\n    pub fn select_smaller_syntax_node(\n        &mut self,\n        _: &SelectSmallerSyntaxNode,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let mut stack = mem::take(&mut self.select_larger_syntax_node_stack);\n        if let Some(selections) = stack.pop() {\n            self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n                s.select(selections.to_vec());\n            });\n        }\n        self.select_larger_syntax_node_stack = stack;\n    }\n\n    fn refresh_runnables(&mut self, window: &mut Window, cx: &mut Context<Self>) -> Task<()> {\n        if !EditorSettings::get_global(cx).gutter.runnables {\n            self.clear_tasks();\n            return Task::ready(());\n        }\n        let project = self.project.as_ref().map(Entity::downgrade);\n        cx.spawn_in(window, |this, mut cx| async move {\n            cx.background_executor().timer(UPDATE_DEBOUNCE).await;\n            let Some(project) = project.and_then(|p| p.upgrade()) else {\n                return;\n            };\n            let Ok(display_snapshot) = this.update(&mut cx, |this, cx| {\n                this.display_map.update(cx, |map, cx| map.snapshot(cx))\n            }) else {\n                return;\n            };\n\n            let hide_runnables = project\n                .update(&mut cx, |project, cx| {\n                    // Do not display any test indicators in non-dev server remote projects.\n                    project.is_via_collab() && project.ssh_connection_string(cx).is_none()\n                })\n                .unwrap_or(true);\n            if hide_runnables {\n                return;\n            }\n            let new_rows =\n                cx.background_spawn({\n                    let snapshot = display_snapshot.clone();\n                    async move {\n                        Self::fetch_runnable_ranges(&snapshot, Anchor::min()..Anchor::max())\n                    }\n                })\n                    .await;\n\n            let rows = Self::runnable_rows(project, display_snapshot, new_rows, cx.clone());\n            this.update(&mut cx, |this, _| {\n                this.clear_tasks();\n                for (key, value) in rows {\n                    this.insert_tasks(key, value);\n                }\n            })\n            .ok();\n        })\n    }\n    fn fetch_runnable_ranges(\n        snapshot: &DisplaySnapshot,\n        range: Range<Anchor>,\n    ) -> Vec<language::RunnableRange> {\n        snapshot.buffer_snapshot.runnable_ranges(range).collect()\n    }\n\n    fn runnable_rows(\n        project: Entity<Project>,\n        snapshot: DisplaySnapshot,\n        runnable_ranges: Vec<RunnableRange>,\n        mut cx: AsyncWindowContext,\n    ) -> Vec<((BufferId, u32), RunnableTasks)> {\n        runnable_ranges\n            .into_iter()\n            .filter_map(|mut runnable| {\n                let tasks = cx\n                    .update(|_, cx| Self::templates_with_tags(&project, &mut runnable.runnable, cx))\n                    .ok()?;\n                if tasks.is_empty() {\n                    return None;\n                }\n\n                let point = runnable.run_range.start.to_point(&snapshot.buffer_snapshot);\n\n                let row = snapshot\n                    .buffer_snapshot\n                    .buffer_line_for_row(MultiBufferRow(point.row))?\n                    .1\n                    .start\n                    .row;\n\n                let context_range =\n                    BufferOffset(runnable.full_range.start)..BufferOffset(runnable.full_range.end);\n                Some((\n                    (runnable.buffer_id, row),\n                    RunnableTasks {\n                        templates: tasks,\n                        offset: snapshot\n                            .buffer_snapshot\n                            .anchor_before(runnable.run_range.start),\n                        context_range,\n                        column: point.column,\n                        extra_variables: runnable.extra_captures,\n                    },\n                ))\n            })\n            .collect()\n    }\n\n    fn templates_with_tags(\n        project: &Entity<Project>,\n        runnable: &mut Runnable,\n        cx: &mut App,\n    ) -> Vec<(TaskSourceKind, TaskTemplate)> {\n        let (inventory, worktree_id, file) = project.read_with(cx, |project, cx| {\n            let (worktree_id, file) = project\n                .buffer_for_id(runnable.buffer, cx)\n                .and_then(|buffer| buffer.read(cx).file())\n                .map(|file| (file.worktree_id(cx), file.clone()))\n                .unzip();\n\n            (\n                project.task_store().read(cx).task_inventory().cloned(),\n                worktree_id,\n                file,\n            )\n        });\n\n        let tags = mem::take(&mut runnable.tags);\n        let mut tags: Vec<_> = tags\n            .into_iter()\n            .flat_map(|tag| {\n                let tag = tag.0.clone();\n                inventory\n                    .as_ref()\n                    .into_iter()\n                    .flat_map(|inventory| {\n                        inventory.read(cx).list_tasks(\n                            file.clone(),\n                            Some(runnable.language.clone()),\n                            worktree_id,\n                            cx,\n                        )\n                    })\n                    .filter(move |(_, template)| {\n                        template.tags.iter().any(|source_tag| source_tag == &tag)\n                    })\n            })\n            .sorted_by_key(|(kind, _)| kind.to_owned())\n            .collect();\n        if let Some((leading_tag_source, _)) = tags.first() {\n            // Strongest source wins; if we have worktree tag binding, prefer that to\n            // global and language bindings;\n            // if we have a global binding, prefer that to language binding.\n            let first_mismatch = tags\n                .iter()\n                .position(|(tag_source, _)| tag_source != leading_tag_source);\n            if let Some(index) = first_mismatch {\n                tags.truncate(index);\n            }\n        }\n\n        tags\n    }\n\n    pub fn move_to_enclosing_bracket(\n        &mut self,\n        _: &MoveToEnclosingBracket,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n            s.move_offsets_with(|snapshot, selection| {\n                let Some(enclosing_bracket_ranges) =\n                    snapshot.enclosing_bracket_ranges(selection.start..selection.end)\n                else {\n                    return;\n                };\n\n                let mut best_length = usize::MAX;\n                let mut best_inside = false;\n                let mut best_in_bracket_range = false;\n                let mut best_destination = None;\n                for (open, close) in enclosing_bracket_ranges {\n                    let close = close.to_inclusive();\n                    let length = close.end() - open.start;\n                    let inside = selection.start >= open.end && selection.end <= *close.start();\n                    let in_bracket_range = open.to_inclusive().contains(&selection.head())\n                        || close.contains(&selection.head());\n\n                    // If best is next to a bracket and current isn't, skip\n                    if !in_bracket_range && best_in_bracket_range {\n                        continue;\n                    }\n\n                    // Prefer smaller lengths unless best is inside and current isn't\n                    if length > best_length && (best_inside || !inside) {\n                        continue;\n                    }\n\n                    best_length = length;\n                    best_inside = inside;\n                    best_in_bracket_range = in_bracket_range;\n                    best_destination = Some(\n                        if close.contains(&selection.start) && close.contains(&selection.end) {\n                            if inside {\n                                open.end\n                            } else {\n                                open.start\n                            }\n                        } else if inside {\n                            *close.start()\n                        } else {\n                            *close.end()\n                        },\n                    );\n                }\n\n                if let Some(destination) = best_destination {\n                    selection.collapse_to(destination, SelectionGoal::None);\n                }\n            })\n        });\n    }\n\n    pub fn undo_selection(\n        &mut self,\n        _: &UndoSelection,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.end_selection(window, cx);\n        self.selection_history.mode = SelectionHistoryMode::Undoing;\n        if let Some(entry) = self.selection_history.undo_stack.pop_back() {\n            self.change_selections(None, window, cx, |s| {\n                s.select_anchors(entry.selections.to_vec())\n            });\n            self.select_next_state = entry.select_next_state;\n            self.select_prev_state = entry.select_prev_state;\n            self.add_selections_state = entry.add_selections_state;\n            self.request_autoscroll(Autoscroll::newest(), cx);\n        }\n        self.selection_history.mode = SelectionHistoryMode::Normal;\n    }\n\n    pub fn redo_selection(\n        &mut self,\n        _: &RedoSelection,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.end_selection(window, cx);\n        self.selection_history.mode = SelectionHistoryMode::Redoing;\n        if let Some(entry) = self.selection_history.redo_stack.pop_back() {\n            self.change_selections(None, window, cx, |s| {\n                s.select_anchors(entry.selections.to_vec())\n            });\n            self.select_next_state = entry.select_next_state;\n            self.select_prev_state = entry.select_prev_state;\n            self.add_selections_state = entry.add_selections_state;\n            self.request_autoscroll(Autoscroll::newest(), cx);\n        }\n        self.selection_history.mode = SelectionHistoryMode::Normal;\n    }\n\n    pub fn expand_excerpts(\n        &mut self,\n        action: &ExpandExcerpts,\n        _: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.expand_excerpts_for_direction(action.lines, ExpandExcerptDirection::UpAndDown, cx)\n    }\n\n    pub fn expand_excerpts_down(\n        &mut self,\n        action: &ExpandExcerptsDown,\n        _: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.expand_excerpts_for_direction(action.lines, ExpandExcerptDirection::Down, cx)\n    }\n\n    pub fn expand_excerpts_up(\n        &mut self,\n        action: &ExpandExcerptsUp,\n        _: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.expand_excerpts_for_direction(action.lines, ExpandExcerptDirection::Up, cx)\n    }\n\n    pub fn expand_excerpts_for_direction(\n        &mut self,\n        lines: u32,\n        direction: ExpandExcerptDirection,\n\n        cx: &mut Context<Self>,\n    ) {\n        let selections = self.selections.disjoint_anchors();\n\n        let lines = if lines == 0 {\n            EditorSettings::get_global(cx).expand_excerpt_lines\n        } else {\n            lines\n        };\n\n        self.buffer.update(cx, |buffer, cx| {\n            let snapshot = buffer.snapshot(cx);\n            let mut excerpt_ids = selections\n                .iter()\n                .flat_map(|selection| snapshot.excerpt_ids_for_range(selection.range()))\n                .collect::<Vec<_>>();\n            excerpt_ids.sort();\n            excerpt_ids.dedup();\n            buffer.expand_excerpts(excerpt_ids, lines, direction, cx)\n        })\n    }\n\n    pub fn expand_excerpt(\n        &mut self,\n        excerpt: ExcerptId,\n        direction: ExpandExcerptDirection,\n        cx: &mut Context<Self>,\n    ) {\n        let lines = EditorSettings::get_global(cx).expand_excerpt_lines;\n        self.buffer.update(cx, |buffer, cx| {\n            buffer.expand_excerpts([excerpt], lines, direction, cx)\n        })\n    }\n\n    pub fn go_to_singleton_buffer_point(\n        &mut self,\n        point: Point,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.go_to_singleton_buffer_range(point..point, window, cx);\n    }\n\n    pub fn go_to_singleton_buffer_range(\n        &mut self,\n        range: Range<Point>,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let multibuffer = self.buffer().read(cx);\n        let Some(buffer) = multibuffer.as_singleton() else {\n            return;\n        };\n        let Some(start) = multibuffer.buffer_point_to_anchor(&buffer, range.start, cx) else {\n            return;\n        };\n        let Some(end) = multibuffer.buffer_point_to_anchor(&buffer, range.end, cx) else {\n            return;\n        };\n        self.change_selections(Some(Autoscroll::center()), window, cx, |s| {\n            s.select_anchor_ranges([start..end])\n        });\n    }\n\n    fn go_to_diagnostic(\n        &mut self,\n        _: &GoToDiagnostic,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.go_to_diagnostic_impl(Direction::Next, window, cx)\n    }\n\n    fn go_to_prev_diagnostic(\n        &mut self,\n        _: &GoToPreviousDiagnostic,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.go_to_diagnostic_impl(Direction::Prev, window, cx)\n    }\n\n    pub fn go_to_diagnostic_impl(\n        &mut self,\n        direction: Direction,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let buffer = self.buffer.read(cx).snapshot(cx);\n        let selection = self.selections.newest::<usize>(cx);\n\n        // If there is an active Diagnostic Popover jump to its diagnostic instead.\n        if direction == Direction::Next {\n            if let Some(popover) = self.hover_state.diagnostic_popover.as_ref() {\n                let Some(buffer_id) = popover.local_diagnostic.range.start.buffer_id else {\n                    return;\n                };\n                self.activate_diagnostics(\n                    buffer_id,\n                    popover.local_diagnostic.diagnostic.group_id,\n                    window,\n                    cx,\n                );\n                if let Some(active_diagnostics) = self.active_diagnostics.as_ref() {\n                    let primary_range_start = active_diagnostics.primary_range.start;\n                    self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n                        let mut new_selection = s.newest_anchor().clone();\n                        new_selection.collapse_to(primary_range_start, SelectionGoal::None);\n                        s.select_anchors(vec![new_selection.clone()]);\n                    });\n                    self.refresh_inline_completion(false, true, window, cx);\n                }\n                return;\n            }\n        }\n\n        let active_group_id = self\n            .active_diagnostics\n            .as_ref()\n            .map(|active_group| active_group.group_id);\n        let active_primary_range = self.active_diagnostics.as_ref().map(|active_diagnostics| {\n            active_diagnostics\n                .primary_range\n                .to_offset(&buffer)\n                .to_inclusive()\n        });\n        let search_start = if let Some(active_primary_range) = active_primary_range.as_ref() {\n            if active_primary_range.contains(&selection.head()) {\n                *active_primary_range.start()\n            } else {\n                selection.head()\n            }\n        } else {\n            selection.head()\n        };\n\n        let snapshot = self.snapshot(window, cx);\n        let primary_diagnostics_before = buffer\n            .diagnostics_in_range::<usize>(0..search_start)\n            .filter(|entry| entry.diagnostic.is_primary)\n            .filter(|entry| entry.range.start != entry.range.end)\n            .filter(|entry| entry.diagnostic.severity <= DiagnosticSeverity::WARNING)\n            .filter(|entry| !snapshot.intersects_fold(entry.range.start))\n            .collect::<Vec<_>>();\n        let last_same_group_diagnostic_before = active_group_id.and_then(|active_group_id| {\n            primary_diagnostics_before\n                .iter()\n                .position(|entry| entry.diagnostic.group_id == active_group_id)\n        });\n\n        let primary_diagnostics_after = buffer\n            .diagnostics_in_range::<usize>(search_start..buffer.len())\n            .filter(|entry| entry.diagnostic.is_primary)\n            .filter(|entry| entry.range.start != entry.range.end)\n            .filter(|entry| entry.diagnostic.severity <= DiagnosticSeverity::WARNING)\n            .filter(|diagnostic| !snapshot.intersects_fold(diagnostic.range.start))\n            .collect::<Vec<_>>();\n        let last_same_group_diagnostic_after = active_group_id.and_then(|active_group_id| {\n            primary_diagnostics_after\n                .iter()\n                .enumerate()\n                .rev()\n                .find_map(|(i, entry)| {\n                    if entry.diagnostic.group_id == active_group_id {\n                        Some(i)\n                    } else {\n                        None\n                    }\n                })\n        });\n\n        let next_primary_diagnostic = match direction {\n            Direction::Prev => primary_diagnostics_before\n                .iter()\n                .take(last_same_group_diagnostic_before.unwrap_or(usize::MAX))\n                .rev()\n                .next(),\n            Direction::Next => primary_diagnostics_after\n                .iter()\n                .skip(\n                    last_same_group_diagnostic_after\n                        .map(|index| index + 1)\n                        .unwrap_or(0),\n                )\n                .next(),\n        };\n\n        // Cycle around to the start of the buffer, potentially moving back to the start of\n        // the currently active diagnostic.\n        let cycle_around = || match direction {\n            Direction::Prev => primary_diagnostics_after\n                .iter()\n                .rev()\n                .chain(primary_diagnostics_before.iter().rev())\n                .next(),\n            Direction::Next => primary_diagnostics_before\n                .iter()\n                .chain(primary_diagnostics_after.iter())\n                .next(),\n        };\n\n        if let Some((primary_range, group_id)) = next_primary_diagnostic\n            .or_else(cycle_around)\n            .map(|entry| (&entry.range, entry.diagnostic.group_id))\n        {\n            let Some(buffer_id) = buffer.anchor_after(primary_range.start).buffer_id else {\n                return;\n            };\n            self.activate_diagnostics(buffer_id, group_id, window, cx);\n            if self.active_diagnostics.is_some() {\n                self.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n                    s.select(vec![Selection {\n                        id: selection.id,\n                        start: primary_range.start,\n                        end: primary_range.start,\n                        reversed: false,\n                        goal: SelectionGoal::None,\n                    }]);\n                });\n                self.refresh_inline_completion(false, true, window, cx);\n            }\n        }\n    }\n\n    fn go_to_next_hunk(&mut self, _: &GoToHunk, window: &mut Window, cx: &mut Context<Self>) {\n        let snapshot = self.snapshot(window, cx);\n        let selection = self.selections.newest::<Point>(cx);\n        self.go_to_hunk_before_or_after_position(\n            &snapshot,\n            selection.head(),\n            Direction::Next,\n            window,\n            cx,\n        );\n    }\n\n    fn go_to_hunk_before_or_after_position(\n        &mut self,\n        snapshot: &EditorSnapshot,\n        position: Point,\n        direction: Direction,\n        window: &mut Window,\n        cx: &mut Context<Editor>,\n    ) {\n        let row = if direction == Direction::Next {\n            self.hunk_after_position(snapshot, position)\n                .map(|hunk| hunk.row_range.start)\n        } else {\n            self.hunk_before_position(snapshot, position)\n        };\n\n        if let Some(row) = row {\n            let destination = Point::new(row.0, 0);\n            let autoscroll = Autoscroll::center();\n\n            self.unfold_ranges(&[destination..destination], false, false, cx);\n            self.change_selections(Some(autoscroll), window, cx, |s| {\n                s.select_ranges([destination..destination]);\n            });\n        }\n    }\n\n    fn hunk_after_position(\n        &mut self,\n        snapshot: &EditorSnapshot,\n        position: Point,\n    ) -> Option<MultiBufferDiffHunk> {\n        snapshot\n            .buffer_snapshot\n            .diff_hunks_in_range(position..snapshot.buffer_snapshot.max_point())\n            .find(|hunk| hunk.row_range.start.0 > position.row)\n            .or_else(|| {\n                snapshot\n                    .buffer_snapshot\n                    .diff_hunks_in_range(Point::zero()..position)\n                    .find(|hunk| hunk.row_range.end.0 < position.row)\n            })\n    }\n\n    fn go_to_prev_hunk(\n        &mut self,\n        _: &GoToPreviousHunk,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let snapshot = self.snapshot(window, cx);\n        let selection = self.selections.newest::<Point>(cx);\n        self.go_to_hunk_before_or_after_position(\n            &snapshot,\n            selection.head(),\n            Direction::Prev,\n            window,\n            cx,\n        );\n    }\n\n    fn hunk_before_position(\n        &mut self,\n        snapshot: &EditorSnapshot,\n        position: Point,\n    ) -> Option<MultiBufferRow> {\n        snapshot\n            .buffer_snapshot\n            .diff_hunk_before(position)\n            .or_else(|| snapshot.buffer_snapshot.diff_hunk_before(Point::MAX))\n    }\n\n    pub fn go_to_definition(\n        &mut self,\n        _: &GoToDefinition,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Task<Result<Navigated>> {\n        let definition =\n            self.go_to_definition_of_kind(GotoDefinitionKind::Symbol, false, window, cx);\n        cx.spawn_in(window, |editor, mut cx| async move {\n            if definition.await? == Navigated::Yes {\n                return Ok(Navigated::Yes);\n            }\n            match editor.update_in(&mut cx, |editor, window, cx| {\n                editor.find_all_references(&FindAllReferences, window, cx)\n            })? {\n                Some(references) => references.await,\n                None => Ok(Navigated::No),\n            }\n        })\n    }\n\n    pub fn go_to_declaration(\n        &mut self,\n        _: &GoToDeclaration,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Task<Result<Navigated>> {\n        self.go_to_definition_of_kind(GotoDefinitionKind::Declaration, false, window, cx)\n    }\n\n    pub fn go_to_declaration_split(\n        &mut self,\n        _: &GoToDeclaration,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Task<Result<Navigated>> {\n        self.go_to_definition_of_kind(GotoDefinitionKind::Declaration, true, window, cx)\n    }\n\n    pub fn go_to_implementation(\n        &mut self,\n        _: &GoToImplementation,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Task<Result<Navigated>> {\n        self.go_to_definition_of_kind(GotoDefinitionKind::Implementation, false, window, cx)\n    }\n\n    pub fn go_to_implementation_split(\n        &mut self,\n        _: &GoToImplementationSplit,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Task<Result<Navigated>> {\n        self.go_to_definition_of_kind(GotoDefinitionKind::Implementation, true, window, cx)\n    }\n\n    pub fn go_to_type_definition(\n        &mut self,\n        _: &GoToTypeDefinition,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Task<Result<Navigated>> {\n        self.go_to_definition_of_kind(GotoDefinitionKind::Type, false, window, cx)\n    }\n\n    pub fn go_to_definition_split(\n        &mut self,\n        _: &GoToDefinitionSplit,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Task<Result<Navigated>> {\n        self.go_to_definition_of_kind(GotoDefinitionKind::Symbol, true, window, cx)\n    }\n\n    pub fn go_to_type_definition_split(\n        &mut self,\n        _: &GoToTypeDefinitionSplit,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Task<Result<Navigated>> {\n        self.go_to_definition_of_kind(GotoDefinitionKind::Type, true, window, cx)\n    }\n\n    fn go_to_definition_of_kind(\n        &mut self,\n        kind: GotoDefinitionKind,\n        split: bool,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Task<Result<Navigated>> {\n        let Some(provider) = self.semantics_provider.clone() else {\n            return Task::ready(Ok(Navigated::No));\n        };\n        let head = self.selections.newest::<usize>(cx).head();\n        let buffer = self.buffer.read(cx);\n        let (buffer, head) = if let Some(text_anchor) = buffer.text_anchor_for_position(head, cx) {\n            text_anchor\n        } else {\n            return Task::ready(Ok(Navigated::No));\n        };\n\n        let Some(definitions) = provider.definitions(&buffer, head, kind, cx) else {\n            return Task::ready(Ok(Navigated::No));\n        };\n\n        cx.spawn_in(window, |editor, mut cx| async move {\n            let definitions = definitions.await?;\n            let navigated = editor\n                .update_in(&mut cx, |editor, window, cx| {\n                    editor.navigate_to_hover_links(\n                        Some(kind),\n                        definitions\n                            .into_iter()\n                            .filter(|location| {\n                                hover_links::exclude_link_to_position(&buffer, &head, location, cx)\n                            })\n                            .map(HoverLink::Text)\n                            .collect::<Vec<_>>(),\n                        split,\n                        window,\n                        cx,\n                    )\n                })?\n                .await?;\n            anyhow::Ok(navigated)\n        })\n    }\n\n    pub fn open_url(&mut self, _: &OpenUrl, window: &mut Window, cx: &mut Context<Self>) {\n        let selection = self.selections.newest_anchor();\n        let head = selection.head();\n        let tail = selection.tail();\n\n        let Some((buffer, start_position)) =\n            self.buffer.read(cx).text_anchor_for_position(head, cx)\n        else {\n            return;\n        };\n\n        let end_position = if head != tail {\n            let Some((_, pos)) = self.buffer.read(cx).text_anchor_for_position(tail, cx) else {\n                return;\n            };\n            Some(pos)\n        } else {\n            None\n        };\n\n        let url_finder = cx.spawn_in(window, |editor, mut cx| async move {\n            let url = if let Some(end_pos) = end_position {\n                find_url_from_range(&buffer, start_position..end_pos, cx.clone())\n            } else {\n                find_url(&buffer, start_position, cx.clone()).map(|(_, url)| url)\n            };\n\n            if let Some(url) = url {\n                editor.update(&mut cx, |_, cx| {\n                    cx.open_url(&url);\n                })\n            } else {\n                Ok(())\n            }\n        });\n\n        url_finder.detach();\n    }\n\n    pub fn open_selected_filename(\n        &mut self,\n        _: &OpenSelectedFilename,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let Some(workspace) = self.workspace() else {\n            return;\n        };\n\n        let position = self.selections.newest_anchor().head();\n\n        let Some((buffer, buffer_position)) =\n            self.buffer.read(cx).text_anchor_for_position(position, cx)\n        else {\n            return;\n        };\n\n        let project = self.project.clone();\n\n        cx.spawn_in(window, |_, mut cx| async move {\n            let result = find_file(&buffer, project, buffer_position, &mut cx).await;\n\n            if let Some((_, path)) = result {\n                workspace\n                    .update_in(&mut cx, |workspace, window, cx| {\n                        workspace.open_resolved_path(path, window, cx)\n                    })?\n                    .await?;\n            }\n            anyhow::Ok(())\n        })\n        .detach();\n    }\n\n    pub(crate) fn navigate_to_hover_links(\n        &mut self,\n        kind: Option<GotoDefinitionKind>,\n        mut definitions: Vec<HoverLink>,\n        split: bool,\n        window: &mut Window,\n        cx: &mut Context<Editor>,\n    ) -> Task<Result<Navigated>> {\n        // If there is one definition, just open it directly\n        if definitions.len() == 1 {\n            let definition = definitions.pop().unwrap();\n\n            enum TargetTaskResult {\n                Location(Option<Location>),\n                AlreadyNavigated,\n            }\n\n            let target_task = match definition {\n                HoverLink::Text(link) => {\n                    Task::ready(anyhow::Ok(TargetTaskResult::Location(Some(link.target))))\n                }\n                HoverLink::InlayHint(lsp_location, server_id) => {\n                    let computation =\n                        self.compute_target_location(lsp_location, server_id, window, cx);\n                    cx.background_spawn(async move {\n                        let location = computation.await?;\n                        Ok(TargetTaskResult::Location(location))\n                    })\n                }\n                HoverLink::Url(url) => {\n                    cx.open_url(&url);\n                    Task::ready(Ok(TargetTaskResult::AlreadyNavigated))\n                }\n                HoverLink::File(path) => {\n                    if let Some(workspace) = self.workspace() {\n                        cx.spawn_in(window, |_, mut cx| async move {\n                            workspace\n                                .update_in(&mut cx, |workspace, window, cx| {\n                                    workspace.open_resolved_path(path, window, cx)\n                                })?\n                                .await\n                                .map(|_| TargetTaskResult::AlreadyNavigated)\n                        })\n                    } else {\n                        Task::ready(Ok(TargetTaskResult::Location(None)))\n                    }\n                }\n            };\n            cx.spawn_in(window, |editor, mut cx| async move {\n                let target = match target_task.await.context(": "",
    ")? {\n                    TargetTaskResult::AlreadyNavigated => return Ok(Navigated::Yes),\n                    TargetTaskResult::Location(None) => return Ok(Navigated::No),\n                    TargetTaskResult::Location(Some(target)) => target,\n                };\n\n                editor.update_in(&mut cx, |editor, window, cx| {\n                    let Some(workspace) = editor.workspace() else {\n                        return Navigated::No;\n                    };\n                    let pane = workspace.read(cx).active_pane().clone();\n\n                    let range = target.range.to_point(target.buffer.read(cx));\n                    let range = editor.range_for_match(&range);\n                    let range = collapse_multiline_range(range);\n\n                    if !split\n                        && Some(&target.buffer) == editor.buffer.read(cx).as_singleton().as_ref()\n                    {\n                        editor.go_to_singleton_buffer_range(range.clone(), window, cx);\n                    } else {\n                        window.defer(cx, move |window, cx| {\n                            let target_editor: Entity<Self> =\n                                workspace.update(cx, |workspace, cx| {\n                                    let pane = if split {\n                                        workspace.adjacent_pane(window, cx)\n                                    } else {\n                                        workspace.active_pane().clone()\n                                    };\n\n                                    workspace.open_project_item(\n                                        pane,\n                                        target.buffer.clone(),\n                                        true,\n                                        true,\n                                        window,\n                                        cx,\n                                    )\n                                });\n                            target_editor.update(cx, |target_editor, cx| {\n                                // When selecting a definition in a different buffer, disable the nav history\n                                // to avoid creating a history entry at the previous cursor location.\n                                pane.update(cx, |pane, _| pane.disable_history());\n                                target_editor.go_to_singleton_buffer_range(range, window, cx);\n                                pane.update(cx, |pane, _| pane.enable_history());\n                            });\n                        });\n                    }\n                    Navigated::Yes\n                })\n            })\n        } else if !definitions.is_empty() {\n            cx.spawn_in(window, |editor, mut cx| async move {\n                let (title, location_tasks, workspace) = editor\n                    .update_in(&mut cx, |editor, window, cx| {\n                        let tab_kind = match kind {\n                            Some(GotoDefinitionKind::Implementation) => ": "",
    ",\n                            _ => ": "",
    ",\n                        };\n                        let title = definitions\n                            .iter()\n                            .find_map(|definition| match definition {\n                                HoverLink::Text(link) => link.origin.as_ref().map(|origin| {\n                                    let buffer = origin.buffer.read(cx);\n                                    format!(\n                                        ": "",
    ",\n                                        tab_kind,\n                                        buffer\n                                            .text_for_range(origin.range.clone())\n                                            .collect::<String>()\n                                    )\n                                }),\n                                HoverLink::InlayHint(_, _) => None,\n                                HoverLink::Url(_) => None,\n                                HoverLink::File(_) => None,\n                            })\n                            .unwrap_or(tab_kind.to_string());\n                        let location_tasks = definitions\n                            .into_iter()\n                            .map(|definition| match definition {\n                                HoverLink::Text(link) => Task::ready(Ok(Some(link.target))),\n                                HoverLink::InlayHint(lsp_location, server_id) => editor\n                                    .compute_target_location(lsp_location, server_id, window, cx),\n                                HoverLink::Url(_) => Task::ready(Ok(None)),\n                                HoverLink::File(_) => Task::ready(Ok(None)),\n                            })\n                            .collect::<Vec<_>>();\n                        (title, location_tasks, editor.workspace().clone())\n                    })\n                    .context(": "",
    ")?;\n\n                let locations = future::join_all(location_tasks)\n                    .await\n                    .into_iter()\n                    .filter_map(|location| location.transpose())\n                    .collect::<Result<_>>()\n                    .context(": "",
    ")?;\n\n                let Some(workspace) = workspace else {\n                    return Ok(Navigated::No);\n                };\n                let opened = workspace\n                    .update_in(&mut cx, |workspace, window, cx| {\n                        Self::open_locations_in_multibuffer(\n                            workspace,\n                            locations,\n                            title,\n                            split,\n                            MultibufferSelectionMode::First,\n                            window,\n                            cx,\n                        )\n                    })\n                    .ok();\n\n                anyhow::Ok(Navigated::from_bool(opened.is_some()))\n            })\n        } else {\n            Task::ready(Ok(Navigated::No))\n        }\n    }\n\n    fn compute_target_location(\n        &self,\n        lsp_location: lsp::Location,\n        server_id: LanguageServerId,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Task<anyhow::Result<Option<Location>>> {\n        let Some(project) = self.project.clone() else {\n            return Task::ready(Ok(None));\n        };\n\n        cx.spawn_in(window, move |editor, mut cx| async move {\n            let location_task = editor.update(&mut cx, |_, cx| {\n                project.update(cx, |project, cx| {\n                    let language_server_name = project\n                        .language_server_statuses(cx)\n                        .find(|(id, _)| server_id == *id)\n                        .map(|(_, status)| LanguageServerName::from(status.name.as_str()));\n                    language_server_name.map(|language_server_name| {\n                        project.open_local_buffer_via_lsp(\n                            lsp_location.uri.clone(),\n                            server_id,\n                            language_server_name,\n                            cx,\n                        )\n                    })\n                })\n            })?;\n            let location = match location_task {\n                Some(task) => Some({\n                    let target_buffer_handle = task.await.context(": "",
    ")?;\n                    let range = target_buffer_handle.update(&mut cx, |target_buffer, _| {\n                        let target_start = target_buffer\n                            .clip_point_utf16(point_from_lsp(lsp_location.range.start), Bias::Left);\n                        let target_end = target_buffer\n                            .clip_point_utf16(point_from_lsp(lsp_location.range.end), Bias::Left);\n                        target_buffer.anchor_after(target_start)\n                            ..target_buffer.anchor_before(target_end)\n                    })?;\n                    Location {\n                        buffer: target_buffer_handle,\n                        range,\n                    }\n                }),\n                None => None,\n            };\n            Ok(location)\n        })\n    }\n\n    pub fn find_all_references(\n        &mut self,\n        _: &FindAllReferences,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Option<Task<Result<Navigated>>> {\n        let selection = self.selections.newest::<usize>(cx);\n        let multi_buffer = self.buffer.read(cx);\n        let head = selection.head();\n\n        let multi_buffer_snapshot = multi_buffer.snapshot(cx);\n        let head_anchor = multi_buffer_snapshot.anchor_at(\n            head,\n            if head < selection.tail() {\n                Bias::Right\n            } else {\n                Bias::Left\n            },\n        );\n\n        match self\n            .find_all_references_task_sources\n            .binary_search_by(|anchor| anchor.cmp(&head_anchor, &multi_buffer_snapshot))\n        {\n            Ok(_) => {\n                log::info!(\n                    ": "",
    "\n                );\n                return None;\n            }\n            Err(i) => {\n                self.find_all_references_task_sources.insert(i, head_anchor);\n            }\n        }\n\n        let (buffer, head) = multi_buffer.text_anchor_for_position(head, cx)?;\n        let workspace = self.workspace()?;\n        let project = workspace.read(cx).project().clone();\n        let references = project.update(cx, |project, cx| project.references(&buffer, head, cx));\n        Some(cx.spawn_in(window, |editor, mut cx| async move {\n            let _cleanup = defer({\n                let mut cx = cx.clone();\n                move || {\n                    let _ = editor.update(&mut cx, |editor, _| {\n                        if let Ok(i) =\n                            editor\n                                .find_all_references_task_sources\n                                .binary_search_by(|anchor| {\n                                    anchor.cmp(&head_anchor, &multi_buffer_snapshot)\n                                })\n                        {\n                            editor.find_all_references_task_sources.remove(i);\n                        }\n                    });\n                }\n            });\n\n            let locations = references.await?;\n            if locations.is_empty() {\n                return anyhow::Ok(Navigated::No);\n            }\n\n            workspace.update_in(&mut cx, |workspace, window, cx| {\n                let title = locations\n                    .first()\n                    .as_ref()\n                    .map(|location| {\n                        let buffer = location.buffer.read(cx);\n                        format!(\n                            ": "",
    ",\n                            buffer\n                                .text_for_range(location.range.clone())\n                                .collect::<String>()\n                        )\n                    })\n                    .unwrap();\n                Self::open_locations_in_multibuffer(\n                    workspace,\n                    locations,\n                    title,\n                    false,\n                    MultibufferSelectionMode::First,\n                    window,\n                    cx,\n                );\n                Navigated::Yes\n            })\n        }))\n    }\n\n    /// Opens a multibuffer with the given project locations in it\n    pub fn open_locations_in_multibuffer(\n        workspace: &mut Workspace,\n        mut locations: Vec<Location>,\n        title: String,\n        split: bool,\n        multibuffer_selection_mode: MultibufferSelectionMode,\n        window: &mut Window,\n        cx: &mut Context<Workspace>,\n    ) {\n        // If there are multiple definitions, open them in a multibuffer\n        locations.sort_by_key(|location| location.buffer.read(cx).remote_id());\n        let mut locations = locations.into_iter().peekable();\n        let mut ranges = Vec::new();\n        let capability = workspace.project().read(cx).capability();\n\n        let excerpt_buffer = cx.new(|cx| {\n            let mut multibuffer = MultiBuffer::new(capability);\n            while let Some(location) = locations.next() {\n                let buffer = location.buffer.read(cx);\n                let mut ranges_for_buffer = Vec::new();\n                let range = location.range.to_offset(buffer);\n                ranges_for_buffer.push(range.clone());\n\n                while let Some(next_location) = locations.peek() {\n                    if next_location.buffer == location.buffer {\n                        ranges_for_buffer.push(next_location.range.to_offset(buffer));\n                        locations.next();\n                    } else {\n                        break;\n                    }\n                }\n\n                ranges_for_buffer.sort_by_key(|range| (range.start, Reverse(range.end)));\n                ranges.extend(multibuffer.push_excerpts_with_context_lines(\n                    location.buffer.clone(),\n                    ranges_for_buffer,\n                    DEFAULT_MULTIBUFFER_CONTEXT,\n                    cx,\n                ))\n            }\n\n            multibuffer.with_title(title)\n        });\n\n        let editor = cx.new(|cx| {\n            Editor::for_multibuffer(\n                excerpt_buffer,\n                Some(workspace.project().clone()),\n                true,\n                window,\n                cx,\n            )\n        });\n        editor.update(cx, |editor, cx| {\n            match multibuffer_selection_mode {\n                MultibufferSelectionMode::First => {\n                    if let Some(first_range) = ranges.first() {\n                        editor.change_selections(None, window, cx, |selections| {\n                            selections.clear_disjoint();\n                            selections.select_anchor_ranges(std::iter::once(first_range.clone()));\n                        });\n                    }\n                    editor.highlight_background::<Self>(\n                        &ranges,\n                        |theme| theme.editor_highlighted_line_background,\n                        cx,\n                    );\n                }\n                MultibufferSelectionMode::All => {\n                    editor.change_selections(None, window, cx, |selections| {\n                        selections.clear_disjoint();\n                        selections.select_anchor_ranges(ranges);\n                    });\n                }\n            }\n            editor.register_buffers_with_language_servers(cx);\n        });\n\n        let item = Box::new(editor);\n        let item_id = item.item_id();\n\n        if split {\n            workspace.split_item(SplitDirection::Right, item.clone(), window, cx);\n        } else {\n            let destination_index = workspace.active_pane().update(cx, |pane, cx| {\n                if PreviewTabsSettings::get_global(cx).enable_preview_from_code_navigation {\n                    pane.close_current_preview_item(window, cx)\n                } else {\n                    None\n                }\n            });\n            workspace.add_item_to_active_pane(item.clone(), destination_index, true, window, cx);\n        }\n        workspace.active_pane().update(cx, |pane, cx| {\n            pane.set_preview_item_id(Some(item_id), cx);\n        });\n    }\n\n    pub fn rename(\n        &mut self,\n        _: &Rename,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Option<Task<Result<()>>> {\n        use language::ToOffset as _;\n\n        let provider = self.semantics_provider.clone()?;\n        let selection = self.selections.newest_anchor().clone();\n        let (cursor_buffer, cursor_buffer_position) = self\n            .buffer\n            .read(cx)\n            .text_anchor_for_position(selection.head(), cx)?;\n        let (tail_buffer, cursor_buffer_position_end) = self\n            .buffer\n            .read(cx)\n            .text_anchor_for_position(selection.tail(), cx)?;\n        if tail_buffer != cursor_buffer {\n            return None;\n        }\n\n        let snapshot = cursor_buffer.read(cx).snapshot();\n        let cursor_buffer_offset = cursor_buffer_position.to_offset(&snapshot);\n        let cursor_buffer_offset_end = cursor_buffer_position_end.to_offset(&snapshot);\n        let prepare_rename = provider\n            .range_for_rename(&cursor_buffer, cursor_buffer_position, cx)\n            .unwrap_or_else(|| Task::ready(Ok(None)));\n        drop(snapshot);\n\n        Some(cx.spawn_in(window, |this, mut cx| async move {\n            let rename_range = if let Some(range) = prepare_rename.await? {\n                Some(range)\n            } else {\n                this.update(&mut cx, |this, cx| {\n                    let buffer = this.buffer.read(cx).snapshot(cx);\n                    let mut buffer_highlights = this\n                        .document_highlights_for_position(selection.head(), &buffer)\n                        .filter(|highlight| {\n                            highlight.start.excerpt_id == selection.head().excerpt_id\n                                && highlight.end.excerpt_id == selection.head().excerpt_id\n                        });\n                    buffer_highlights\n                        .next()\n                        .map(|highlight| highlight.start.text_anchor..highlight.end.text_anchor)\n                })?\n            };\n            if let Some(rename_range) = rename_range {\n                this.update_in(&mut cx, |this, window, cx| {\n                    let snapshot = cursor_buffer.read(cx).snapshot();\n                    let rename_buffer_range = rename_range.to_offset(&snapshot);\n                    let cursor_offset_in_rename_range =\n                        cursor_buffer_offset.saturating_sub(rename_buffer_range.start);\n                    let cursor_offset_in_rename_range_end =\n                        cursor_buffer_offset_end.saturating_sub(rename_buffer_range.start);\n\n                    this.take_rename(false, window, cx);\n                    let buffer = this.buffer.read(cx).read(cx);\n                    let cursor_offset = selection.head().to_offset(&buffer);\n                    let rename_start = cursor_offset.saturating_sub(cursor_offset_in_rename_range);\n                    let rename_end = rename_start + rename_buffer_range.len();\n                    let range = buffer.anchor_before(rename_start)..buffer.anchor_after(rename_end);\n                    let mut old_highlight_id = None;\n                    let old_name: Arc<str> = buffer\n                        .chunks(rename_start..rename_end, true)\n                        .map(|chunk| {\n                            if old_highlight_id.is_none() {\n                                old_highlight_id = chunk.syntax_highlight_id;\n                            }\n                            chunk.text\n                        })\n                        .collect::<String>()\n                        .into();\n\n                    drop(buffer);\n\n                    // Position the selection in the rename editor so that it matches the current selection.\n                    this.show_local_selections = false;\n                    let rename_editor = cx.new(|cx| {\n                        let mut editor = Editor::single_line(window, cx);\n                        editor.buffer.update(cx, |buffer, cx| {\n                            buffer.edit([(0..0, old_name.clone())], None, cx)\n                        });\n                        let rename_selection_range = match cursor_offset_in_rename_range\n                            .cmp(&cursor_offset_in_rename_range_end)\n                        {\n                            Ordering::Equal => {\n                                editor.select_all(&SelectAll, window, cx);\n                                return editor;\n                            }\n                            Ordering::Less => {\n                                cursor_offset_in_rename_range..cursor_offset_in_rename_range_end\n                            }\n                            Ordering::Greater => {\n                                cursor_offset_in_rename_range_end..cursor_offset_in_rename_range\n                            }\n                        };\n                        if rename_selection_range.end > old_name.len() {\n                            editor.select_all(&SelectAll, window, cx);\n                        } else {\n                            editor.change_selections(Some(Autoscroll::fit()), window, cx, |s| {\n                                s.select_ranges([rename_selection_range]);\n                            });\n                        }\n                        editor\n                    });\n                    cx.subscribe(&rename_editor, |_, _, e: &EditorEvent, cx| {\n                        if e == &EditorEvent::Focused {\n                            cx.emit(EditorEvent::FocusedIn)\n                        }\n                    })\n                    .detach();\n\n                    let write_highlights =\n                        this.clear_background_highlights::<DocumentHighlightWrite>(cx);\n                    let read_highlights =\n                        this.clear_background_highlights::<DocumentHighlightRead>(cx);\n                    let ranges = write_highlights\n                        .iter()\n                        .flat_map(|(_, ranges)| ranges.iter())\n                        .chain(read_highlights.iter().flat_map(|(_, ranges)| ranges.iter()))\n                        .cloned()\n                        .collect();\n\n                    this.highlight_text::<Rename>(\n                        ranges,\n                        HighlightStyle {\n                            fade_out: Some(0.6),\n                            ..Default::default()\n                        },\n                        cx,\n                    );\n                    let rename_focus_handle = rename_editor.focus_handle(cx);\n                    window.focus(&rename_focus_handle);\n                    let block_id = this.insert_blocks(\n                        [BlockProperties {\n                            style: BlockStyle::Flex,\n                            placement: BlockPlacement::Below(range.start),\n                            height: 1,\n                            render: Arc::new({\n                                let rename_editor = rename_editor.clone();\n                                move |cx: &mut BlockContext| {\n                                    let mut text_style = cx.editor_style.text.clone();\n                                    if let Some(highlight_style) = old_highlight_id\n                                        .and_then(|h| h.style(&cx.editor_style.syntax))\n                                    {\n                                        text_style = text_style.highlight(highlight_style);\n                                    }\n                                    div()\n                                        .block_mouse_down()\n                                        .pl(cx.anchor_x)\n                                        .child(EditorElement::new(\n                                            &rename_editor,\n                                            EditorStyle {\n                                                background: cx.theme().system().transparent,\n                                                local_player: cx.editor_style.local_player,\n                                                text: text_style,\n                                                scrollbar_width: cx.editor_style.scrollbar_width,\n                                                syntax: cx.editor_style.syntax.clone(),\n                                                status: cx.editor_style.status.clone(),\n                                                inlay_hints_style: HighlightStyle {\n                                                    font_weight: Some(FontWeight::BOLD),\n                                                    ..make_inlay_hints_style(cx.app)\n                                                },\n                                                inline_completion_styles: make_suggestion_styles(\n                                                    cx.app,\n                                                ),\n                                                ..EditorStyle::default()\n                                            },\n                                        ))\n                                        .into_any_element()\n                                }\n                            }),\n                            priority: 0,\n                        }],\n                        Some(Autoscroll::fit()),\n                        cx,\n                    )[0];\n                    this.pending_rename = Some(RenameState {\n                        range,\n                        old_name,\n                        editor: rename_editor,\n                        block_id,\n                    });\n                })?;\n            }\n\n            Ok(())\n        }))\n    }\n\n    pub fn confirm_rename(\n        &mut self,\n        _: &ConfirmRename,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Option<Task<Result<()>>> {\n        let rename = self.take_rename(false, window, cx)?;\n        let workspace = self.workspace()?.downgrade();\n        let (buffer, start) = self\n            .buffer\n            .read(cx)\n            .text_anchor_for_position(rename.range.start, cx)?;\n        let (end_buffer, _) = self\n            .buffer\n            .read(cx)\n            .text_anchor_for_position(rename.range.end, cx)?;\n        if buffer != end_buffer {\n            return None;\n        }\n\n        let old_name = rename.old_name;\n        let new_name = rename.editor.read(cx).text(cx);\n\n        let rename = self.semantics_provider.as_ref()?.perform_rename(\n            &buffer,\n            start,\n            new_name.clone(),\n            cx,\n        )?;\n\n        Some(cx.spawn_in(window, |editor, mut cx| async move {\n            let project_transaction = rename.await?;\n            Self::open_project_transaction(\n                &editor,\n                workspace,\n                project_transaction,\n                format!(": "",
    ", old_name, new_name),\n                cx.clone(),\n            )\n            .await?;\n\n            editor.update(&mut cx, |editor, cx| {\n                editor.refresh_document_highlights(cx);\n            })?;\n            Ok(())\n        }))\n    }\n\n    fn take_rename(\n        &mut self,\n        moving_cursor: bool,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Option<RenameState> {\n        let rename = self.pending_rename.take()?;\n        if rename.editor.focus_handle(cx).is_focused(window) {\n            window.focus(&self.focus_handle);\n        }\n\n        self.remove_blocks(\n            [rename.block_id].into_iter().collect(),\n            Some(Autoscroll::fit()),\n            cx,\n        );\n        self.clear_highlights::<Rename>(cx);\n        self.show_local_selections = true;\n\n        if moving_cursor {\n            let cursor_in_rename_editor = rename.editor.update(cx, |editor, cx| {\n                editor.selections.newest::<usize>(cx).head()\n            });\n\n            // Update the selection to match the position of the selection inside\n            // the rename editor.\n            let snapshot = self.buffer.read(cx).read(cx);\n            let rename_range = rename.range.to_offset(&snapshot);\n            let cursor_in_editor = snapshot\n                .clip_offset(rename_range.start + cursor_in_rename_editor, Bias::Left)\n                .min(rename_range.end);\n            drop(snapshot);\n\n            self.change_selections(None, window, cx, |s| {\n                s.select_ranges(vec![cursor_in_editor..cursor_in_editor])\n            });\n        } else {\n            self.refresh_document_highlights(cx);\n        }\n\n        Some(rename)\n    }\n\n    pub fn pending_rename(&self) -> Option<&RenameState> {\n        self.pending_rename.as_ref()\n    }\n\n    fn format(\n        &mut self,\n        _: &Format,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Option<Task<Result<()>>> {\n        let project = match &self.project {\n            Some(project) => project.clone(),\n            None => return None,\n        };\n\n        Some(self.perform_format(\n            project,\n            FormatTrigger::Manual,\n            FormatTarget::Buffers,\n            window,\n            cx,\n        ))\n    }\n\n    fn format_selections(\n        &mut self,\n        _: &FormatSelections,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Option<Task<Result<()>>> {\n        let project = match &self.project {\n            Some(project) => project.clone(),\n            None => return None,\n        };\n\n        let ranges = self\n            .selections\n            .all_adjusted(cx)\n            .into_iter()\n            .map(|selection| selection.range())\n            .collect_vec();\n\n        Some(self.perform_format(\n            project,\n            FormatTrigger::Manual,\n            FormatTarget::Ranges(ranges),\n            window,\n            cx,\n        ))\n    }\n\n    fn perform_format(\n        &mut self,\n        project: Entity<Project>,\n        trigger: FormatTrigger,\n        target: FormatTarget,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Task<Result<()>> {\n        let buffer = self.buffer.clone();\n        let (buffers, target) = match target {\n            FormatTarget::Buffers => {\n                let mut buffers = buffer.read(cx).all_buffers();\n                if trigger == FormatTrigger::Save {\n                    buffers.retain(|buffer| buffer.read(cx).is_dirty());\n                }\n                (buffers, LspFormatTarget::Buffers)\n            }\n            FormatTarget::Ranges(selection_ranges) => {\n                let multi_buffer = buffer.read(cx);\n                let snapshot = multi_buffer.read(cx);\n                let mut buffers = HashSet::default();\n                let mut buffer_id_to_ranges: BTreeMap<BufferId, Vec<Range<text::Anchor>>> =\n                    BTreeMap::new();\n                for selection_range in selection_ranges {\n                    for (buffer, buffer_range, _) in\n                        snapshot.range_to_buffer_ranges(selection_range)\n                    {\n                        let buffer_id = buffer.remote_id();\n                        let start = buffer.anchor_before(buffer_range.start);\n                        let end = buffer.anchor_after(buffer_range.end);\n                        buffers.insert(multi_buffer.buffer(buffer_id).unwrap());\n                        buffer_id_to_ranges\n                            .entry(buffer_id)\n                            .and_modify(|buffer_ranges| buffer_ranges.push(start..end))\n                            .or_insert_with(|| vec![start..end]);\n                    }\n                }\n                (buffers, LspFormatTarget::Ranges(buffer_id_to_ranges))\n            }\n        };\n\n        let mut timeout = cx.background_executor().timer(FORMAT_TIMEOUT).fuse();\n        let format = project.update(cx, |project, cx| {\n            project.format(buffers, target, true, trigger, cx)\n        });\n\n        cx.spawn_in(window, |_, mut cx| async move {\n            let transaction = futures::select_biased! {\n                () = timeout => {\n                    log::warn!(": "",
    ");\n                    None\n                }\n                transaction = format.log_err().fuse() => transaction,\n            };\n\n            buffer\n                .update(&mut cx, |buffer, cx| {\n                    if let Some(transaction) = transaction {\n                        if !buffer.is_singleton() {\n                            buffer.push_transaction(&transaction.0, cx);\n                        }\n                    }\n                    cx.notify();\n                })\n                .ok();\n\n            Ok(())\n        })\n    }\n\n    fn organize_imports(\n        &mut self,\n        _: &OrganizeImports,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Option<Task<Result<()>>> {\n        let project = match &self.project {\n            Some(project) => project.clone(),\n            None => return None,\n        };\n        Some(self.perform_code_action_kind(\n            project,\n            CodeActionKind::SOURCE_ORGANIZE_IMPORTS,\n            window,\n            cx,\n        ))\n    }\n\n    fn perform_code_action_kind(\n        &mut self,\n        project: Entity<Project>,\n        kind: CodeActionKind,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Task<Result<()>> {\n        let buffer = self.buffer.clone();\n        let buffers = buffer.read(cx).all_buffers();\n        let mut timeout = cx.background_executor().timer(CODE_ACTION_TIMEOUT).fuse();\n        let apply_action = project.update(cx, |project, cx| {\n            project.apply_code_action_kind(buffers, kind, true, cx)\n        });\n        cx.spawn_in(window, |_, mut cx| async move {\n            let transaction = futures::select_biased! {\n                () = timeout => {\n                    log::warn!(": "",
    ");\n                    None\n                }\n                transaction = apply_action.log_err().fuse() => transaction,\n            };\n            buffer\n                .update(&mut cx, |buffer, cx| {\n                    // check if we need this\n                    if let Some(transaction) = transaction {\n                        if !buffer.is_singleton() {\n                            buffer.push_transaction(&transaction.0, cx);\n                        }\n                    }\n                    cx.notify();\n                })\n                .ok();\n            Ok(())\n        })\n    }\n\n    fn restart_language_server(\n        &mut self,\n        _: &RestartLanguageServer,\n        _: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some(project) = self.project.clone() {\n            self.buffer.update(cx, |multi_buffer, cx| {\n                project.update(cx, |project, cx| {\n                    project.restart_language_servers_for_buffers(\n                        multi_buffer.all_buffers().into_iter().collect(),\n                        cx,\n                    );\n                });\n            })\n        }\n    }\n\n    fn cancel_language_server_work(\n        workspace: &mut Workspace,\n        _: &actions::CancelLanguageServerWork,\n        _: &mut Window,\n        cx: &mut Context<Workspace>,\n    ) {\n        let project = workspace.project();\n        let buffers = workspace\n            .active_item(cx)\n            .and_then(|item| item.act_as::<Editor>(cx))\n            .map_or(HashSet::default(), |editor| {\n                editor.read(cx).buffer.read(cx).all_buffers()\n            });\n        project.update(cx, |project, cx| {\n            project.cancel_language_server_work_for_buffers(buffers, cx);\n        });\n    }\n\n    fn show_character_palette(\n        &mut self,\n        _: &ShowCharacterPalette,\n        window: &mut Window,\n        _: &mut Context<Self>,\n    ) {\n        window.show_character_palette();\n    }\n\n    fn refresh_active_diagnostics(&mut self, cx: &mut Context<Editor>) {\n        if let Some(active_diagnostics) = self.active_diagnostics.as_mut() {\n            let buffer = self.buffer.read(cx).snapshot(cx);\n            let primary_range_start = active_diagnostics.primary_range.start.to_offset(&buffer);\n            let primary_range_end = active_diagnostics.primary_range.end.to_offset(&buffer);\n            let is_valid = buffer\n                .diagnostics_in_range::<usize>(primary_range_start..primary_range_end)\n                .any(|entry| {\n                    entry.diagnostic.is_primary\n                        && !entry.range.is_empty()\n                        && entry.range.start == primary_range_start\n                        && entry.diagnostic.message == active_diagnostics.primary_message\n                });\n\n            if is_valid != active_diagnostics.is_valid {\n                active_diagnostics.is_valid = is_valid;\n                if is_valid {\n                    let mut new_styles = HashMap::default();\n                    for (block_id, diagnostic) in &active_diagnostics.blocks {\n                        new_styles.insert(\n                            *block_id,\n                            diagnostic_block_renderer(diagnostic.clone(), None, true),\n                        );\n                    }\n                    self.display_map.update(cx, |display_map, _cx| {\n                        display_map.replace_blocks(new_styles);\n                    });\n                } else {\n                    self.dismiss_diagnostics(cx);\n                }\n            }\n        }\n    }\n\n    fn activate_diagnostics(\n        &mut self,\n        buffer_id: BufferId,\n        group_id: usize,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.dismiss_diagnostics(cx);\n        let snapshot = self.snapshot(window, cx);\n        self.active_diagnostics = self.display_map.update(cx, |display_map, cx| {\n            let buffer = self.buffer.read(cx).snapshot(cx);\n\n            let mut primary_range = None;\n            let mut primary_message = None;\n            let diagnostic_group = buffer\n                .diagnostic_group(buffer_id, group_id)\n                .filter_map(|entry| {\n                    let start = entry.range.start;\n                    let end = entry.range.end;\n                    if snapshot.is_line_folded(MultiBufferRow(start.row))\n                        && (start.row == end.row\n                            || snapshot.is_line_folded(MultiBufferRow(end.row)))\n                    {\n                        return None;\n                    }\n                    if entry.diagnostic.is_primary {\n                        primary_range = Some(entry.range.clone());\n                        primary_message = Some(entry.diagnostic.message.clone());\n                    }\n                    Some(entry)\n                })\n                .collect::<Vec<_>>();\n            let primary_range = primary_range?;\n            let primary_message = primary_message?;\n\n            let blocks = display_map\n                .insert_blocks(\n                    diagnostic_group.iter().map(|entry| {\n                        let diagnostic = entry.diagnostic.clone();\n                        let message_height = diagnostic.message.matches('\n').count() as u32 + 1;\n                        BlockProperties {\n                            style: BlockStyle::Fixed,\n                            placement: BlockPlacement::Below(\n                                buffer.anchor_after(entry.range.start),\n                            ),\n                            height: message_height,\n                            render: diagnostic_block_renderer(diagnostic, None, true),\n                            priority: 0,\n                        }\n                    }),\n                    cx,\n                )\n                .into_iter()\n                .zip(diagnostic_group.into_iter().map(|entry| entry.diagnostic))\n                .collect();\n\n            Some(ActiveDiagnosticGroup {\n                primary_range: buffer.anchor_before(primary_range.start)\n                    ..buffer.anchor_after(primary_range.end),\n                primary_message,\n                group_id,\n                blocks,\n                is_valid: true,\n            })\n        });\n    }\n\n    fn dismiss_diagnostics(&mut self, cx: &mut Context<Self>) {\n        if let Some(active_diagnostic_group) = self.active_diagnostics.take() {\n            self.display_map.update(cx, |display_map, cx| {\n                display_map.remove_blocks(active_diagnostic_group.blocks.into_keys().collect(), cx);\n            });\n            cx.notify();\n        }\n    }\n\n    /// Disable inline diagnostics rendering for this editor.\n    pub fn disable_inline_diagnostics(&mut self) {\n        self.inline_diagnostics_enabled = false;\n        self.inline_diagnostics_update = Task::ready(());\n        self.inline_diagnostics.clear();\n    }\n\n    pub fn inline_diagnostics_enabled(&self) -> bool {\n        self.inline_diagnostics_enabled\n    }\n\n    pub fn show_inline_diagnostics(&self) -> bool {\n        self.show_inline_diagnostics\n    }\n\n    pub fn toggle_inline_diagnostics(\n        &mut self,\n        _: &ToggleInlineDiagnostics,\n        window: &mut Window,\n        cx: &mut Context<'_, Editor>,\n    ) {\n        self.show_inline_diagnostics = !self.show_inline_diagnostics;\n        self.refresh_inline_diagnostics(false, window, cx);\n    }\n\n    fn refresh_inline_diagnostics(\n        &mut self,\n        debounce: bool,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if !self.inline_diagnostics_enabled || !self.show_inline_diagnostics {\n            self.inline_diagnostics_update = Task::ready(());\n            self.inline_diagnostics.clear();\n            return;\n        }\n\n        let debounce_ms = ProjectSettings::get_global(cx)\n            .diagnostics\n            .inline\n            .update_debounce_ms;\n        let debounce = if debounce && debounce_ms > 0 {\n            Some(Duration::from_millis(debounce_ms))\n        } else {\n            None\n        };\n        self.inline_diagnostics_update = cx.spawn_in(window, |editor, mut cx| async move {\n            if let Some(debounce) = debounce {\n                cx.background_executor().timer(debounce).await;\n            }\n            let Some(snapshot) = editor\n                .update(&mut cx, |editor, cx| editor.buffer().read(cx).snapshot(cx))\n                .ok()\n            else {\n                return;\n            };\n\n            let new_inline_diagnostics = cx\n                .background_spawn(async move {\n                    let mut inline_diagnostics = Vec::<(Anchor, InlineDiagnostic)>::new();\n                    for diagnostic_entry in snapshot.diagnostics_in_range(0..snapshot.len()) {\n                        let message = diagnostic_entry\n                            .diagnostic\n                            .message\n                            .split_once('\n')\n                            .map(|(line, _)| line)\n                            .map(SharedString::new)\n                            .unwrap_or_else(|| {\n                                SharedString::from(diagnostic_entry.diagnostic.message)\n                            });\n                        let start_anchor = snapshot.anchor_before(diagnostic_entry.range.start);\n                        let (Ok(i) | Err(i)) = inline_diagnostics\n                            .binary_search_by(|(probe, _)| probe.cmp(&start_anchor, &snapshot));\n                        inline_diagnostics.insert(\n                            i,\n                            (\n                                start_anchor,\n                                InlineDiagnostic {\n                                    message,\n                                    group_id: diagnostic_entry.diagnostic.group_id,\n                                    start: diagnostic_entry.range.start.to_point(&snapshot),\n                                    is_primary: diagnostic_entry.diagnostic.is_primary,\n                                    severity: diagnostic_entry.diagnostic.severity,\n                                },\n                            ),\n                        );\n                    }\n                    inline_diagnostics\n                })\n                .await;\n\n            editor\n                .update(&mut cx, |editor, cx| {\n                    editor.inline_diagnostics = new_inline_diagnostics;\n                    cx.notify();\n                })\n                .ok();\n        });\n    }\n\n    pub fn set_selections_from_remote(\n        &mut self,\n        selections: Vec<Selection<Anchor>>,\n        pending_selection: Option<Selection<Anchor>>,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let old_cursor_position = self.selections.newest_anchor().head();\n        self.selections.change_with(cx, |s| {\n            s.select_anchors(selections);\n            if let Some(pending_selection) = pending_selection {\n                s.set_pending(pending_selection, SelectMode::Character);\n            } else {\n                s.clear_pending();\n            }\n        });\n        self.selections_did_change(false, &old_cursor_position, true, window, cx);\n    }\n\n    fn push_to_selection_history(&mut self) {\n        self.selection_history.push(SelectionHistoryEntry {\n            selections: self.selections.disjoint_anchors(),\n            select_next_state: self.select_next_state.clone(),\n            select_prev_state: self.select_prev_state.clone(),\n            add_selections_state: self.add_selections_state.clone(),\n        });\n    }\n\n    pub fn transact(\n        &mut self,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n        update: impl FnOnce(&mut Self, &mut Window, &mut Context<Self>),\n    ) -> Option<TransactionId> {\n        self.start_transaction_at(Instant::now(), window, cx);\n        update(self, window, cx);\n        self.end_transaction_at(Instant::now(), cx)\n    }\n\n    pub fn start_transaction_at(\n        &mut self,\n        now: Instant,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.end_selection(window, cx);\n        if let Some(tx_id) = self\n            .buffer\n            .update(cx, |buffer, cx| buffer.start_transaction_at(now, cx))\n        {\n            self.selection_history\n                .insert_transaction(tx_id, self.selections.disjoint_anchors());\n            cx.emit(EditorEvent::TransactionBegun {\n                transaction_id: tx_id,\n            })\n        }\n    }\n\n    pub fn end_transaction_at(\n        &mut self,\n        now: Instant,\n        cx: &mut Context<Self>,\n    ) -> Option<TransactionId> {\n        if let Some(transaction_id) = self\n            .buffer\n            .update(cx, |buffer, cx| buffer.end_transaction_at(now, cx))\n        {\n            if let Some((_, end_selections)) =\n                self.selection_history.transaction_mut(transaction_id)\n            {\n                *end_selections = Some(self.selections.disjoint_anchors());\n            } else {\n                log::error!(": "",
    ");\n            }\n\n            cx.emit(EditorEvent::Edited { transaction_id });\n            Some(transaction_id)\n        } else {\n            None\n        }\n    }\n\n    pub fn set_mark(&mut self, _: &actions::SetMark, window: &mut Window, cx: &mut Context<Self>) {\n        if self.selection_mark_mode {\n            self.change_selections(None, window, cx, |s| {\n                s.move_with(|_, sel| {\n                    sel.collapse_to(sel.head(), SelectionGoal::None);\n                });\n            })\n        }\n        self.selection_mark_mode = true;\n        cx.notify();\n    }\n\n    pub fn swap_selection_ends(\n        &mut self,\n        _: &actions::SwapSelectionEnds,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.change_selections(None, window, cx, |s| {\n            s.move_with(|_, sel| {\n                if sel.start != sel.end {\n                    sel.reversed = !sel.reversed\n                }\n            });\n        });\n        self.request_autoscroll(Autoscroll::newest(), cx);\n        cx.notify();\n    }\n\n    pub fn toggle_fold(\n        &mut self,\n        _: &actions::ToggleFold,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if self.is_singleton(cx) {\n            let selection = self.selections.newest::<Point>(cx);\n\n            let display_map = self.display_map.update(cx, |map, cx| map.snapshot(cx));\n            let range = if selection.is_empty() {\n                let point = selection.head().to_display_point(&display_map);\n                let start = DisplayPoint::new(point.row(), 0).to_point(&display_map);\n                let end = DisplayPoint::new(point.row(), display_map.line_len(point.row()))\n                    .to_point(&display_map);\n                start..end\n            } else {\n                selection.range()\n            };\n            if display_map.folds_in_range(range).next().is_some() {\n                self.unfold_lines(&Default::default(), window, cx)\n            } else {\n                self.fold(&Default::default(), window, cx)\n            }\n        } else {\n            let multi_buffer_snapshot = self.buffer.read(cx).snapshot(cx);\n            let buffer_ids: HashSet<_> = self\n                .selections\n                .disjoint_anchor_ranges()\n                .flat_map(|range| multi_buffer_snapshot.buffer_ids_for_range(range))\n                .collect();\n\n            let should_unfold = buffer_ids\n                .iter()\n                .any(|buffer_id| self.is_buffer_folded(*buffer_id, cx));\n\n            for buffer_id in buffer_ids {\n                if should_unfold {\n                    self.unfold_buffer(buffer_id, cx);\n                } else {\n                    self.fold_buffer(buffer_id, cx);\n                }\n            }\n        }\n    }\n\n    pub fn toggle_fold_recursive(\n        &mut self,\n        _: &actions::ToggleFoldRecursive,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let selection = self.selections.newest::<Point>(cx);\n\n        let display_map = self.display_map.update(cx, |map, cx| map.snapshot(cx));\n        let range = if selection.is_empty() {\n            let point = selection.head().to_display_point(&display_map);\n            let start = DisplayPoint::new(point.row(), 0).to_point(&display_map);\n            let end = DisplayPoint::new(point.row(), display_map.line_len(point.row()))\n                .to_point(&display_map);\n            start..end\n        } else {\n            selection.range()\n        };\n        if display_map.folds_in_range(range).next().is_some() {\n            self.unfold_recursive(&Default::default(), window, cx)\n        } else {\n            self.fold_recursive(&Default::default(), window, cx)\n        }\n    }\n\n    pub fn fold(&mut self, _: &actions::Fold, window: &mut Window, cx: &mut Context<Self>) {\n        if self.is_singleton(cx) {\n            let mut to_fold = Vec::new();\n            let display_map = self.display_map.update(cx, |map, cx| map.snapshot(cx));\n            let selections = self.selections.all_adjusted(cx);\n\n            for selection in selections {\n                let range = selection.range().sorted();\n                let buffer_start_row = range.start.row;\n\n                if range.start.row != range.end.row {\n                    let mut found = false;\n                    let mut row = range.start.row;\n                    while row <= range.end.row {\n                        if let Some(crease) = display_map.crease_for_buffer_row(MultiBufferRow(row))\n                        {\n                            found = true;\n                            row = crease.range().end.row + 1;\n                            to_fold.push(crease);\n                        } else {\n                            row += 1\n                        }\n                    }\n                    if found {\n                        continue;\n                    }\n                }\n\n                for row in (0..=range.start.row).rev() {\n                    if let Some(crease) = display_map.crease_for_buffer_row(MultiBufferRow(row)) {\n                        if crease.range().end.row >= buffer_start_row {\n                            to_fold.push(crease);\n                            if row <= range.start.row {\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n\n            self.fold_creases(to_fold, true, window, cx);\n        } else {\n            let multi_buffer_snapshot = self.buffer.read(cx).snapshot(cx);\n            let buffer_ids = self\n                .selections\n                .disjoint_anchor_ranges()\n                .flat_map(|range| multi_buffer_snapshot.buffer_ids_for_range(range))\n                .collect::<HashSet<_>>();\n            for buffer_id in buffer_ids {\n                self.fold_buffer(buffer_id, cx);\n            }\n        }\n    }\n\n    fn fold_at_level(\n        &mut self,\n        fold_at: &FoldAtLevel,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if !self.buffer.read(cx).is_singleton() {\n            return;\n        }\n\n        let fold_at_level = fold_at.0;\n        let snapshot = self.buffer.read(cx).snapshot(cx);\n        let mut to_fold = Vec::new();\n        let mut stack = vec![(0, snapshot.max_row().0, 1)];\n\n        while let Some((mut start_row, end_row, current_level)) = stack.pop() {\n            while start_row < end_row {\n                match self\n                    .snapshot(window, cx)\n                    .crease_for_buffer_row(MultiBufferRow(start_row))\n                {\n                    Some(crease) => {\n                        let nested_start_row = crease.range().start.row + 1;\n                        let nested_end_row = crease.range().end.row;\n\n                        if current_level < fold_at_level {\n                            stack.push((nested_start_row, nested_end_row, current_level + 1));\n                        } else if current_level == fold_at_level {\n                            to_fold.push(crease);\n                        }\n\n                        start_row = nested_end_row + 1;\n                    }\n                    None => start_row += 1,\n                }\n            }\n        }\n\n        self.fold_creases(to_fold, true, window, cx);\n    }\n\n    pub fn fold_all(&mut self, _: &actions::FoldAll, window: &mut Window, cx: &mut Context<Self>) {\n        if self.buffer.read(cx).is_singleton() {\n            let mut fold_ranges = Vec::new();\n            let snapshot = self.buffer.read(cx).snapshot(cx);\n\n            for row in 0..snapshot.max_row().0 {\n                if let Some(foldable_range) = self\n                    .snapshot(window, cx)\n                    .crease_for_buffer_row(MultiBufferRow(row))\n                {\n                    fold_ranges.push(foldable_range);\n                }\n            }\n\n            self.fold_creases(fold_ranges, true, window, cx);\n        } else {\n            self.toggle_fold_multiple_buffers = cx.spawn_in(window, |editor, mut cx| async move {\n                editor\n                    .update_in(&mut cx, |editor, _, cx| {\n                        for buffer_id in editor.buffer.read(cx).excerpt_buffer_ids() {\n                            editor.fold_buffer(buffer_id, cx);\n                        }\n                    })\n                    .ok();\n            });\n        }\n    }\n\n    pub fn fold_function_bodies(\n        &mut self,\n        _: &actions::FoldFunctionBodies,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let snapshot = self.buffer.read(cx).snapshot(cx);\n\n        let ranges = snapshot\n            .text_object_ranges(0..snapshot.len(), TreeSitterOptions::default())\n            .filter_map(|(range, obj)| (obj == TextObject::InsideFunction).then_some(range))\n            .collect::<Vec<_>>();\n\n        let creases = ranges\n            .into_iter()\n            .map(|range| Crease::simple(range, self.display_map.read(cx).fold_placeholder.clone()))\n            .collect();\n\n        self.fold_creases(creases, true, window, cx);\n    }\n\n    pub fn fold_recursive(\n        &mut self,\n        _: &actions::FoldRecursive,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let mut to_fold = Vec::new();\n        let display_map = self.display_map.update(cx, |map, cx| map.snapshot(cx));\n        let selections = self.selections.all_adjusted(cx);\n\n        for selection in selections {\n            let range = selection.range().sorted();\n            let buffer_start_row = range.start.row;\n\n            if range.start.row != range.end.row {\n                let mut found = false;\n                for row in range.start.row..=range.end.row {\n                    if let Some(crease) = display_map.crease_for_buffer_row(MultiBufferRow(row)) {\n                        found = true;\n                        to_fold.push(crease);\n                    }\n                }\n                if found {\n                    continue;\n                }\n            }\n\n            for row in (0..=range.start.row).rev() {\n                if let Some(crease) = display_map.crease_for_buffer_row(MultiBufferRow(row)) {\n                    if crease.range().end.row >= buffer_start_row {\n                        to_fold.push(crease);\n                    } else {\n                        break;\n                    }\n                }\n            }\n        }\n\n        self.fold_creases(to_fold, true, window, cx);\n    }\n\n    pub fn fold_at(&mut self, fold_at: &FoldAt, window: &mut Window, cx: &mut Context<Self>) {\n        let buffer_row = fold_at.buffer_row;\n        let display_map = self.display_map.update(cx, |map, cx| map.snapshot(cx));\n\n        if let Some(crease) = display_map.crease_for_buffer_row(buffer_row) {\n            let autoscroll = self\n                .selections\n                .all::<Point>(cx)\n                .iter()\n                .any(|selection| crease.range().overlaps(&selection.range()));\n\n            self.fold_creases(vec![crease], autoscroll, window, cx);\n        }\n    }\n\n    pub fn unfold_lines(&mut self, _: &UnfoldLines, _window: &mut Window, cx: &mut Context<Self>) {\n        if self.is_singleton(cx) {\n            let display_map = self.display_map.update(cx, |map, cx| map.snapshot(cx));\n            let buffer = &display_map.buffer_snapshot;\n            let selections = self.selections.all::<Point>(cx);\n            let ranges = selections\n                .iter()\n                .map(|s| {\n                    let range = s.display_range(&display_map).sorted();\n                    let mut start = range.start.to_point(&display_map);\n                    let mut end = range.end.to_point(&display_map);\n                    start.column = 0;\n                    end.column = buffer.line_len(MultiBufferRow(end.row));\n                    start..end\n                })\n                .collect::<Vec<_>>();\n\n            self.unfold_ranges(&ranges, true, true, cx);\n        } else {\n            let multi_buffer_snapshot = self.buffer.read(cx).snapshot(cx);\n            let buffer_ids = self\n                .selections\n                .disjoint_anchor_ranges()\n                .flat_map(|range| multi_buffer_snapshot.buffer_ids_for_range(range))\n                .collect::<HashSet<_>>();\n            for buffer_id in buffer_ids {\n                self.unfold_buffer(buffer_id, cx);\n            }\n        }\n    }\n\n    pub fn unfold_recursive(\n        &mut self,\n        _: &UnfoldRecursive,\n        _window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let display_map = self.display_map.update(cx, |map, cx| map.snapshot(cx));\n        let selections = self.selections.all::<Point>(cx);\n        let ranges = selections\n            .iter()\n            .map(|s| {\n                let mut range = s.display_range(&display_map).sorted();\n                *range.start.column_mut() = 0;\n                *range.end.column_mut() = display_map.line_len(range.end.row());\n                let start = range.start.to_point(&display_map);\n                let end = range.end.to_point(&display_map);\n                start..end\n            })\n            .collect::<Vec<_>>();\n\n        self.unfold_ranges(&ranges, true, true, cx);\n    }\n\n    pub fn unfold_at(\n        &mut self,\n        unfold_at: &UnfoldAt,\n        _window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let display_map = self.display_map.update(cx, |map, cx| map.snapshot(cx));\n\n        let intersection_range = Point::new(unfold_at.buffer_row.0, 0)\n            ..Point::new(\n                unfold_at.buffer_row.0,\n                display_map.buffer_snapshot.line_len(unfold_at.buffer_row),\n            );\n\n        let autoscroll = self\n            .selections\n            .all::<Point>(cx)\n            .iter()\n            .any(|selection| RangeExt::overlaps(&selection.range(), &intersection_range));\n\n        self.unfold_ranges(&[intersection_range], true, autoscroll, cx);\n    }\n\n    pub fn unfold_all(\n        &mut self,\n        _: &actions::UnfoldAll,\n        _window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if self.buffer.read(cx).is_singleton() {\n            let display_map = self.display_map.update(cx, |map, cx| map.snapshot(cx));\n            self.unfold_ranges(&[0..display_map.buffer_snapshot.len()], true, true, cx);\n        } else {\n            self.toggle_fold_multiple_buffers = cx.spawn(|editor, mut cx| async move {\n                editor\n                    .update(&mut cx, |editor, cx| {\n                        for buffer_id in editor.buffer.read(cx).excerpt_buffer_ids() {\n                            editor.unfold_buffer(buffer_id, cx);\n                        }\n                    })\n                    .ok();\n            });\n        }\n    }\n\n    pub fn fold_selected_ranges(\n        &mut self,\n        _: &FoldSelectedRanges,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let selections = self.selections.all::<Point>(cx);\n        let display_map = self.display_map.update(cx, |map, cx| map.snapshot(cx));\n        let line_mode = self.selections.line_mode;\n        let ranges = selections\n            .into_iter()\n            .map(|s| {\n                if line_mode {\n                    let start = Point::new(s.start.row, 0);\n                    let end = Point::new(\n                        s.end.row,\n                        display_map\n                            .buffer_snapshot\n                            .line_len(MultiBufferRow(s.end.row)),\n                    );\n                    Crease::simple(start..end, display_map.fold_placeholder.clone())\n                } else {\n                    Crease::simple(s.start..s.end, display_map.fold_placeholder.clone())\n                }\n            })\n            .collect::<Vec<_>>();\n        self.fold_creases(ranges, true, window, cx);\n    }\n\n    pub fn fold_ranges<T: ToOffset + Clone>(\n        &mut self,\n        ranges: Vec<Range<T>>,\n        auto_scroll: bool,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let display_map = self.display_map.update(cx, |map, cx| map.snapshot(cx));\n        let ranges = ranges\n            .into_iter()\n            .map(|r| Crease::simple(r, display_map.fold_placeholder.clone()))\n            .collect::<Vec<_>>();\n        self.fold_creases(ranges, auto_scroll, window, cx);\n    }\n\n    pub fn fold_creases<T: ToOffset + Clone>(\n        &mut self,\n        creases: Vec<Crease<T>>,\n        auto_scroll: bool,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if creases.is_empty() {\n            return;\n        }\n\n        let mut buffers_affected = HashSet::default();\n        let multi_buffer = self.buffer().read(cx);\n        for crease in &creases {\n            if let Some((_, buffer, _)) =\n                multi_buffer.excerpt_containing(crease.range().start.clone(), cx)\n            {\n                buffers_affected.insert(buffer.read(cx).remote_id());\n            };\n        }\n\n        self.display_map.update(cx, |map, cx| map.fold(creases, cx));\n\n        if auto_scroll {\n            self.request_autoscroll(Autoscroll::fit(), cx);\n        }\n\n        cx.notify();\n\n        if let Some(active_diagnostics) = self.active_diagnostics.take() {\n            // Clear diagnostics block when folding a range that contains it.\n            let snapshot = self.snapshot(window, cx);\n            if snapshot.intersects_fold(active_diagnostics.primary_range.start) {\n                drop(snapshot);\n                self.active_diagnostics = Some(active_diagnostics);\n                self.dismiss_diagnostics(cx);\n            } else {\n                self.active_diagnostics = Some(active_diagnostics);\n            }\n        }\n\n        self.scrollbar_marker_state.dirty = true;\n    }\n\n    /// Removes any folds whose ranges intersect any of the given ranges.\n    pub fn unfold_ranges<T: ToOffset + Clone>(\n        &mut self,\n        ranges: &[Range<T>],\n        inclusive: bool,\n        auto_scroll: bool,\n        cx: &mut Context<Self>,\n    ) {\n        self.remove_folds_with(ranges, auto_scroll, cx, |map, cx| {\n            map.unfold_intersecting(ranges.iter().cloned(), inclusive, cx)\n        });\n    }\n\n    pub fn fold_buffer(&mut self, buffer_id: BufferId, cx: &mut Context<Self>) {\n        if self.buffer().read(cx).is_singleton() || self.is_buffer_folded(buffer_id, cx) {\n            return;\n        }\n        let folded_excerpts = self.buffer().read(cx).excerpts_for_buffer(buffer_id, cx);\n        self.display_map.update(cx, |display_map, cx| {\n            display_map.fold_buffers([buffer_id], cx)\n        });\n        cx.emit(EditorEvent::BufferFoldToggled {\n            ids: folded_excerpts.iter().map(|&(id, _)| id).collect(),\n            folded: true,\n        });\n        cx.notify();\n    }\n\n    pub fn unfold_buffer(&mut self, buffer_id: BufferId, cx: &mut Context<Self>) {\n        if self.buffer().read(cx).is_singleton() || !self.is_buffer_folded(buffer_id, cx) {\n            return;\n        }\n        let unfolded_excerpts = self.buffer().read(cx).excerpts_for_buffer(buffer_id, cx);\n        self.display_map.update(cx, |display_map, cx| {\n            display_map.unfold_buffers([buffer_id], cx);\n        });\n        cx.emit(EditorEvent::BufferFoldToggled {\n            ids: unfolded_excerpts.iter().map(|&(id, _)| id).collect(),\n            folded: false,\n        });\n        cx.notify();\n    }\n\n    pub fn is_buffer_folded(&self, buffer: BufferId, cx: &App) -> bool {\n        self.display_map.read(cx).is_buffer_folded(buffer)\n    }\n\n    pub fn folded_buffers<'a>(&self, cx: &'a App) -> &'a HashSet<BufferId> {\n        self.display_map.read(cx).folded_buffers()\n    }\n\n    /// Removes any folds with the given ranges.\n    pub fn remove_folds_with_type<T: ToOffset + Clone>(\n        &mut self,\n        ranges: &[Range<T>],\n        type_id: TypeId,\n        auto_scroll: bool,\n        cx: &mut Context<Self>,\n    ) {\n        self.remove_folds_with(ranges, auto_scroll, cx, |map, cx| {\n            map.remove_folds_with_type(ranges.iter().cloned(), type_id, cx)\n        });\n    }\n\n    fn remove_folds_with<T: ToOffset + Clone>(\n        &mut self,\n        ranges: &[Range<T>],\n        auto_scroll: bool,\n        cx: &mut Context<Self>,\n        update: impl FnOnce(&mut DisplayMap, &mut Context<DisplayMap>),\n    ) {\n        if ranges.is_empty() {\n            return;\n        }\n\n        let mut buffers_affected = HashSet::default();\n        let multi_buffer = self.buffer().read(cx);\n        for range in ranges {\n            if let Some((_, buffer, _)) = multi_buffer.excerpt_containing(range.start.clone(), cx) {\n                buffers_affected.insert(buffer.read(cx).remote_id());\n            };\n        }\n\n        self.display_map.update(cx, update);\n\n        if auto_scroll {\n            self.request_autoscroll(Autoscroll::fit(), cx);\n        }\n\n        cx.notify();\n        self.scrollbar_marker_state.dirty = true;\n        self.active_indent_guides_state.dirty = true;\n    }\n\n    pub fn default_fold_placeholder(&self, cx: &App) -> FoldPlaceholder {\n        self.display_map.read(cx).fold_placeholder.clone()\n    }\n\n    pub fn set_expand_all_diff_hunks(&mut self, cx: &mut App) {\n        self.buffer.update(cx, |buffer, cx| {\n            buffer.set_all_diff_hunks_expanded(cx);\n        });\n    }\n\n    pub fn expand_all_diff_hunks(\n        &mut self,\n        _: &ExpandAllDiffHunks,\n        _window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.buffer.update(cx, |buffer, cx| {\n            buffer.expand_diff_hunks(vec![Anchor::min()..Anchor::max()], cx)\n        });\n    }\n\n    pub fn toggle_selected_diff_hunks(\n        &mut self,\n        _: &ToggleSelectedDiffHunks,\n        _window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let ranges: Vec<_> = self.selections.disjoint.iter().map(|s| s.range()).collect();\n        self.toggle_diff_hunks_in_ranges(ranges, cx);\n    }\n\n    pub fn diff_hunks_in_ranges<'a>(\n        &'a self,\n        ranges: &'a [Range<Anchor>],\n        buffer: &'a MultiBufferSnapshot,\n    ) -> impl 'a + Iterator<Item = MultiBufferDiffHunk> {\n        ranges.iter().flat_map(move |range| {\n            let end_excerpt_id = range.end.excerpt_id;\n            let range = range.to_point(buffer);\n            let mut peek_end = range.end;\n            if range.end.row < buffer.max_row().0 {\n                peek_end = Point::new(range.end.row + 1, 0);\n            }\n            buffer\n                .diff_hunks_in_range(range.start..peek_end)\n                .filter(move |hunk| hunk.excerpt_id.cmp(&end_excerpt_id, buffer).is_le())\n        })\n    }\n\n    pub fn has_stageable_diff_hunks_in_ranges(\n        &self,\n        ranges: &[Range<Anchor>],\n        snapshot: &MultiBufferSnapshot,\n    ) -> bool {\n        let mut hunks = self.diff_hunks_in_ranges(ranges, &snapshot);\n        hunks.any(|hunk| hunk.status().has_secondary_hunk())\n    }\n\n    pub fn toggle_staged_selected_diff_hunks(\n        &mut self,\n        _: &::git::ToggleStaged,\n        _: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let snapshot = self.buffer.read(cx).snapshot(cx);\n        let ranges: Vec<_> = self.selections.disjoint.iter().map(|s| s.range()).collect();\n        let stage = self.has_stageable_diff_hunks_in_ranges(&ranges, &snapshot);\n        self.stage_or_unstage_diff_hunks(stage, ranges, cx);\n    }\n\n    pub fn stage_and_next(\n        &mut self,\n        _: &::git::StageAndNext,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.do_stage_or_unstage_and_next(true, window, cx);\n    }\n\n    pub fn unstage_and_next(\n        &mut self,\n        _: &::git::UnstageAndNext,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.do_stage_or_unstage_and_next(false, window, cx);\n    }\n\n    pub fn stage_or_unstage_diff_hunks(\n        &mut self,\n        stage: bool,\n        ranges: Vec<Range<Anchor>>,\n        cx: &mut Context<Self>,\n    ) {\n        let task = self.save_buffers_for_ranges_if_needed(&ranges, cx);\n        cx.spawn(|this, mut cx| async move {\n            task.await?;\n            this.update(&mut cx, |this, cx| {\n                let snapshot = this.buffer.read(cx).snapshot(cx);\n                let chunk_by = this\n                    .diff_hunks_in_ranges(&ranges, &snapshot)\n                    .chunk_by(|hunk| hunk.buffer_id);\n                for (buffer_id, hunks) in &chunk_by {\n                    this.do_stage_or_unstage(stage, buffer_id, hunks, cx);\n                }\n            })\n        })\n        .detach_and_log_err(cx);\n    }\n\n    fn save_buffers_for_ranges_if_needed(\n        &mut self,\n        ranges: &[Range<Anchor>],\n        cx: &mut Context<'_, Editor>,\n    ) -> Task<Result<()>> {\n        let multibuffer = self.buffer.read(cx);\n        let snapshot = multibuffer.read(cx);\n        let buffer_ids: HashSet<_> = ranges\n            .iter()\n            .flat_map(|range| snapshot.buffer_ids_for_range(range.clone()))\n            .collect();\n        drop(snapshot);\n\n        let mut buffers = HashSet::default();\n        for buffer_id in buffer_ids {\n            if let Some(buffer_entity) = multibuffer.buffer(buffer_id) {\n                let buffer = buffer_entity.read(cx);\n                if buffer.file().is_some_and(|file| file.disk_state().exists()) && buffer.is_dirty()\n                {\n                    buffers.insert(buffer_entity);\n                }\n            }\n        }\n\n        if let Some(project) = &self.project {\n            project.update(cx, |project, cx| project.save_buffers(buffers, cx))\n        } else {\n            Task::ready(Ok(()))\n        }\n    }\n\n    fn do_stage_or_unstage_and_next(\n        &mut self,\n        stage: bool,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let ranges = self.selections.disjoint_anchor_ranges().collect::<Vec<_>>();\n\n        if ranges.iter().any(|range| range.start != range.end) {\n            self.stage_or_unstage_diff_hunks(stage, ranges, cx);\n            return;\n        }\n\n        self.stage_or_unstage_diff_hunks(stage, ranges, cx);\n        self.go_to_next_hunk(&GoToHunk, window, cx);\n    }\n\n    fn do_stage_or_unstage(\n        &self,\n        stage: bool,\n        buffer_id: BufferId,\n        hunks: impl Iterator<Item = MultiBufferDiffHunk>,\n        cx: &mut App,\n    ) -> Option<()> {\n        let project = self.project.as_ref()?;\n        let buffer = project.read(cx).buffer_for_id(buffer_id, cx)?;\n        let diff = self.buffer.read(cx).diff_for(buffer_id)?;\n        let buffer_snapshot = buffer.read(cx).snapshot();\n        let file_exists = buffer_snapshot\n            .file()\n            .is_some_and(|file| file.disk_state().exists());\n        diff.update(cx, |diff, cx| {\n            diff.stage_or_unstage_hunks(\n                stage,\n                &hunks\n                    .map(|hunk| buffer_diff::DiffHunk {\n                        buffer_range: hunk.buffer_range,\n                        diff_base_byte_range: hunk.diff_base_byte_range,\n                        secondary_status: hunk.secondary_status,\n                        range: Point::zero()..Point::zero(), // unused\n                    })\n                    .collect::<Vec<_>>(),\n                &buffer_snapshot,\n                file_exists,\n                cx,\n            )\n        });\n        None\n    }\n\n    pub fn expand_selected_diff_hunks(&mut self, cx: &mut Context<Self>) {\n        let ranges: Vec<_> = self.selections.disjoint.iter().map(|s| s.range()).collect();\n        self.buffer\n            .update(cx, |buffer, cx| buffer.expand_diff_hunks(ranges, cx))\n    }\n\n    pub fn clear_expanded_diff_hunks(&mut self, cx: &mut Context<Self>) -> bool {\n        self.buffer.update(cx, |buffer, cx| {\n            let ranges = vec![Anchor::min()..Anchor::max()];\n            if !buffer.all_diff_hunks_expanded()\n                && buffer.has_expanded_diff_hunks_in_ranges(&ranges, cx)\n            {\n                buffer.collapse_diff_hunks(ranges, cx);\n                true\n            } else {\n                false\n            }\n        })\n    }\n\n    fn toggle_diff_hunks_in_ranges(\n        &mut self,\n        ranges: Vec<Range<Anchor>>,\n        cx: &mut Context<'_, Editor>,\n    ) {\n        self.buffer.update(cx, |buffer, cx| {\n            let expand = !buffer.has_expanded_diff_hunks_in_ranges(&ranges, cx);\n            buffer.expand_or_collapse_diff_hunks(ranges, expand, cx);\n        })\n    }\n\n    fn toggle_single_diff_hunk(&mut self, range: Range<Anchor>, cx: &mut Context<Self>) {\n        self.buffer.update(cx, |buffer, cx| {\n            let snapshot = buffer.snapshot(cx);\n            let excerpt_id = range.end.excerpt_id;\n            let point_range = range.to_point(&snapshot);\n            let expand = !buffer.single_hunk_is_expanded(range, cx);\n            buffer.expand_or_collapse_diff_hunks_inner([(point_range, excerpt_id)], expand, cx);\n        })\n    }\n\n    pub(crate) fn apply_all_diff_hunks(\n        &mut self,\n        _: &ApplyAllDiffHunks,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let buffers = self.buffer.read(cx).all_buffers();\n        for branch_buffer in buffers {\n            branch_buffer.update(cx, |branch_buffer, cx| {\n                branch_buffer.merge_into_base(Vec::new(), cx);\n            });\n        }\n\n        if let Some(project) = self.project.clone() {\n            self.save(true, project, window, cx).detach_and_log_err(cx);\n        }\n    }\n\n    pub(crate) fn apply_selected_diff_hunks(\n        &mut self,\n        _: &ApplyDiffHunk,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let snapshot = self.snapshot(window, cx);\n        let hunks = snapshot.hunks_for_ranges(self.selections.ranges(cx));\n        let mut ranges_by_buffer = HashMap::default();\n        self.transact(window, cx, |editor, _window, cx| {\n            for hunk in hunks {\n                if let Some(buffer) = editor.buffer.read(cx).buffer(hunk.buffer_id) {\n                    ranges_by_buffer\n                        .entry(buffer.clone())\n                        .or_insert_with(Vec::new)\n                        .push(hunk.buffer_range.to_offset(buffer.read(cx)));\n                }\n            }\n\n            for (buffer, ranges) in ranges_by_buffer {\n                buffer.update(cx, |buffer, cx| {\n                    buffer.merge_into_base(ranges, cx);\n                });\n            }\n        });\n\n        if let Some(project) = self.project.clone() {\n            self.save(true, project, window, cx).detach_and_log_err(cx);\n        }\n    }\n\n    pub fn set_gutter_hovered(&mut self, hovered: bool, cx: &mut Context<Self>) {\n        if hovered != self.gutter_hovered {\n            self.gutter_hovered = hovered;\n            cx.notify();\n        }\n    }\n\n    pub fn insert_blocks(\n        &mut self,\n        blocks: impl IntoIterator<Item = BlockProperties<Anchor>>,\n        autoscroll: Option<Autoscroll>,\n        cx: &mut Context<Self>,\n    ) -> Vec<CustomBlockId> {\n        let blocks = self\n            .display_map\n            .update(cx, |display_map, cx| display_map.insert_blocks(blocks, cx));\n        if let Some(autoscroll) = autoscroll {\n            self.request_autoscroll(autoscroll, cx);\n        }\n        cx.notify();\n        blocks\n    }\n\n    pub fn resize_blocks(\n        &mut self,\n        heights: HashMap<CustomBlockId, u32>,\n        autoscroll: Option<Autoscroll>,\n        cx: &mut Context<Self>,\n    ) {\n        self.display_map\n            .update(cx, |display_map, cx| display_map.resize_blocks(heights, cx));\n        if let Some(autoscroll) = autoscroll {\n            self.request_autoscroll(autoscroll, cx);\n        }\n        cx.notify();\n    }\n\n    pub fn replace_blocks(\n        &mut self,\n        renderers: HashMap<CustomBlockId, RenderBlock>,\n        autoscroll: Option<Autoscroll>,\n        cx: &mut Context<Self>,\n    ) {\n        self.display_map\n            .update(cx, |display_map, _cx| display_map.replace_blocks(renderers));\n        if let Some(autoscroll) = autoscroll {\n            self.request_autoscroll(autoscroll, cx);\n        }\n        cx.notify();\n    }\n\n    pub fn remove_blocks(\n        &mut self,\n        block_ids: HashSet<CustomBlockId>,\n        autoscroll: Option<Autoscroll>,\n        cx: &mut Context<Self>,\n    ) {\n        self.display_map.update(cx, |display_map, cx| {\n            display_map.remove_blocks(block_ids, cx)\n        });\n        if let Some(autoscroll) = autoscroll {\n            self.request_autoscroll(autoscroll, cx);\n        }\n        cx.notify();\n    }\n\n    pub fn row_for_block(\n        &self,\n        block_id: CustomBlockId,\n        cx: &mut Context<Self>,\n    ) -> Option<DisplayRow> {\n        self.display_map\n            .update(cx, |map, cx| map.row_for_block(block_id, cx))\n    }\n\n    pub(crate) fn set_focused_block(&mut self, focused_block: FocusedBlock) {\n        self.focused_block = Some(focused_block);\n    }\n\n    pub(crate) fn take_focused_block(&mut self) -> Option<FocusedBlock> {\n        self.focused_block.take()\n    }\n\n    pub fn insert_creases(\n        &mut self,\n        creases: impl IntoIterator<Item = Crease<Anchor>>,\n        cx: &mut Context<Self>,\n    ) -> Vec<CreaseId> {\n        self.display_map\n            .update(cx, |map, cx| map.insert_creases(creases, cx))\n    }\n\n    pub fn remove_creases(\n        &mut self,\n        ids: impl IntoIterator<Item = CreaseId>,\n        cx: &mut Context<Self>,\n    ) {\n        self.display_map\n            .update(cx, |map, cx| map.remove_creases(ids, cx));\n    }\n\n    pub fn longest_row(&self, cx: &mut App) -> DisplayRow {\n        self.display_map\n            .update(cx, |map, cx| map.snapshot(cx))\n            .longest_row()\n    }\n\n    pub fn max_point(&self, cx: &mut App) -> DisplayPoint {\n        self.display_map\n            .update(cx, |map, cx| map.snapshot(cx))\n            .max_point()\n    }\n\n    pub fn text(&self, cx: &App) -> String {\n        self.buffer.read(cx).read(cx).text()\n    }\n\n    pub fn is_empty(&self, cx: &App) -> bool {\n        self.buffer.read(cx).read(cx).is_empty()\n    }\n\n    pub fn text_option(&self, cx: &App) -> Option<String> {\n        let text = self.text(cx);\n        let text = text.trim();\n\n        if text.is_empty() {\n            return None;\n        }\n\n        Some(text.to_string())\n    }\n\n    pub fn set_text(\n        &mut self,\n        text: impl Into<Arc<str>>,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.transact(window, cx, |this, _, cx| {\n            this.buffer\n                .read(cx)\n                .as_singleton()\n                .expect(": "",
    ")\n                .update(cx, |buffer, cx| buffer.set_text(text, cx));\n        });\n    }\n\n    pub fn display_text(&self, cx: &mut App) -> String {\n        self.display_map\n            .update(cx, |map, cx| map.snapshot(cx))\n            .text()\n    }\n\n    pub fn wrap_guides(&self, cx: &App) -> SmallVec<[(usize, bool); 2]> {\n        let mut wrap_guides = smallvec::smallvec![];\n\n        if self.show_wrap_guides == Some(false) {\n            return wrap_guides;\n        }\n\n        let settings = self.buffer.read(cx).language_settings(cx);\n        if settings.show_wrap_guides {\n            match self.soft_wrap_mode(cx) {\n                SoftWrap::Column(soft_wrap) => {\n                    wrap_guides.push((soft_wrap as usize, true));\n                }\n                SoftWrap::Bounded(soft_wrap) => {\n                    wrap_guides.push((soft_wrap as usize, true));\n                }\n                SoftWrap::GitDiff | SoftWrap::None | SoftWrap::EditorWidth => {}\n            }\n            wrap_guides.extend(settings.wrap_guides.iter().map(|guide| (*guide, false)))\n        }\n\n        wrap_guides\n    }\n\n    pub fn soft_wrap_mode(&self, cx: &App) -> SoftWrap {\n        let settings = self.buffer.read(cx).language_settings(cx);\n        let mode = self.soft_wrap_mode_override.unwrap_or(settings.soft_wrap);\n        match mode {\n            language_settings::SoftWrap::PreferLine | language_settings::SoftWrap::None => {\n                SoftWrap::None\n            }\n            language_settings::SoftWrap::EditorWidth => SoftWrap::EditorWidth,\n            language_settings::SoftWrap::PreferredLineLength => {\n                SoftWrap::Column(settings.preferred_line_length)\n            }\n            language_settings::SoftWrap::Bounded => {\n                SoftWrap::Bounded(settings.preferred_line_length)\n            }\n        }\n    }\n\n    pub fn set_soft_wrap_mode(\n        &mut self,\n        mode: language_settings::SoftWrap,\n\n        cx: &mut Context<Self>,\n    ) {\n        self.soft_wrap_mode_override = Some(mode);\n        cx.notify();\n    }\n\n    pub fn set_text_style_refinement(&mut self, style: TextStyleRefinement) {\n        self.text_style_refinement = Some(style);\n    }\n\n    /// called by the Element so we know what style we were most recently rendered with.\n    pub(crate) fn set_style(\n        &mut self,\n        style: EditorStyle,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let rem_size = window.rem_size();\n        self.display_map.update(cx, |map, cx| {\n            map.set_font(\n                style.text.font(),\n                style.text.font_size.to_pixels(rem_size),\n                cx,\n            )\n        });\n        self.style = Some(style);\n    }\n\n    pub fn style(&self) -> Option<&EditorStyle> {\n        self.style.as_ref()\n    }\n\n    // Called by the element. This method is not designed to be called outside of the editor\n    // element's layout code because it does not notify when rewrapping is computed synchronously.\n    pub(crate) fn set_wrap_width(&self, width: Option<Pixels>, cx: &mut App) -> bool {\n        self.display_map\n            .update(cx, |map, cx| map.set_wrap_width(width, cx))\n    }\n\n    pub fn set_soft_wrap(&mut self) {\n        self.soft_wrap_mode_override = Some(language_settings::SoftWrap::EditorWidth)\n    }\n\n    pub fn toggle_soft_wrap(&mut self, _: &ToggleSoftWrap, _: &mut Window, cx: &mut Context<Self>) {\n        if self.soft_wrap_mode_override.is_some() {\n            self.soft_wrap_mode_override.take();\n        } else {\n            let soft_wrap = match self.soft_wrap_mode(cx) {\n                SoftWrap::GitDiff => return,\n                SoftWrap::None => language_settings::SoftWrap::EditorWidth,\n                SoftWrap::EditorWidth | SoftWrap::Column(_) | SoftWrap::Bounded(_) => {\n                    language_settings::SoftWrap::None\n                }\n            };\n            self.soft_wrap_mode_override = Some(soft_wrap);\n        }\n        cx.notify();\n    }\n\n    pub fn toggle_tab_bar(&mut self, _: &ToggleTabBar, _: &mut Window, cx: &mut Context<Self>) {\n        let Some(workspace) = self.workspace() else {\n            return;\n        };\n        let fs = workspace.read(cx).app_state().fs.clone();\n        let current_show = TabBarSettings::get_global(cx).show;\n        update_settings_file::<TabBarSettings>(fs, cx, move |setting, _| {\n            setting.show = Some(!current_show);\n        });\n    }\n\n    pub fn toggle_indent_guides(\n        &mut self,\n        _: &ToggleIndentGuides,\n        _: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let currently_enabled = self.should_show_indent_guides().unwrap_or_else(|| {\n            self.buffer\n                .read(cx)\n                .language_settings(cx)\n                .indent_guides\n                .enabled\n        });\n        self.show_indent_guides = Some(!currently_enabled);\n        cx.notify();\n    }\n\n    fn should_show_indent_guides(&self) -> Option<bool> {\n        self.show_indent_guides\n    }\n\n    pub fn toggle_line_numbers(\n        &mut self,\n        _: &ToggleLineNumbers,\n        _: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let mut editor_settings = EditorSettings::get_global(cx).clone();\n        editor_settings.gutter.line_numbers = !editor_settings.gutter.line_numbers;\n        EditorSettings::override_global(editor_settings, cx);\n    }\n\n    pub fn line_numbers_enabled(&self, cx: &App) -> bool {\n        if let Some(show_line_numbers) = self.show_line_numbers {\n            return show_line_numbers;\n        }\n        EditorSettings::get_global(cx).gutter.line_numbers\n    }\n\n    pub fn should_use_relative_line_numbers(&self, cx: &mut App) -> bool {\n        self.use_relative_line_numbers\n            .unwrap_or(EditorSettings::get_global(cx).relative_line_numbers)\n    }\n\n    pub fn toggle_relative_line_numbers(\n        &mut self,\n        _: &ToggleRelativeLineNumbers,\n        _: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let is_relative = self.should_use_relative_line_numbers(cx);\n        self.set_relative_line_number(Some(!is_relative), cx)\n    }\n\n    pub fn set_relative_line_number(&mut self, is_relative: Option<bool>, cx: &mut Context<Self>) {\n        self.use_relative_line_numbers = is_relative;\n        cx.notify();\n    }\n\n    pub fn set_show_gutter(&mut self, show_gutter: bool, cx: &mut Context<Self>) {\n        self.show_gutter = show_gutter;\n        cx.notify();\n    }\n\n    pub fn set_show_scrollbars(&mut self, show_scrollbars: bool, cx: &mut Context<Self>) {\n        self.show_scrollbars = show_scrollbars;\n        cx.notify();\n    }\n\n    pub fn set_show_line_numbers(&mut self, show_line_numbers: bool, cx: &mut Context<Self>) {\n        self.show_line_numbers = Some(show_line_numbers);\n        cx.notify();\n    }\n\n    pub fn set_show_git_diff_gutter(&mut self, show_git_diff_gutter: bool, cx: &mut Context<Self>) {\n        self.show_git_diff_gutter = Some(show_git_diff_gutter);\n        cx.notify();\n    }\n\n    pub fn set_show_code_actions(&mut self, show_code_actions: bool, cx: &mut Context<Self>) {\n        self.show_code_actions = Some(show_code_actions);\n        cx.notify();\n    }\n\n    pub fn set_show_runnables(&mut self, show_runnables: bool, cx: &mut Context<Self>) {\n        self.show_runnables = Some(show_runnables);\n        cx.notify();\n    }\n\n    pub fn set_masked(&mut self, masked: bool, cx: &mut Context<Self>) {\n        if self.display_map.read(cx).masked != masked {\n            self.display_map.update(cx, |map, _| map.masked = masked);\n        }\n        cx.notify()\n    }\n\n    pub fn set_show_wrap_guides(&mut self, show_wrap_guides: bool, cx: &mut Context<Self>) {\n        self.show_wrap_guides = Some(show_wrap_guides);\n        cx.notify();\n    }\n\n    pub fn set_show_indent_guides(&mut self, show_indent_guides: bool, cx: &mut Context<Self>) {\n        self.show_indent_guides = Some(show_indent_guides);\n        cx.notify();\n    }\n\n    pub fn working_directory(&self, cx: &App) -> Option<PathBuf> {\n        if let Some(buffer) = self.buffer().read(cx).as_singleton() {\n            if let Some(file) = buffer.read(cx).file().and_then(|f| f.as_local()) {\n                if let Some(dir) = file.abs_path(cx).parent() {\n                    return Some(dir.to_owned());\n                }\n            }\n\n            if let Some(project_path) = buffer.read(cx).project_path(cx) {\n                return Some(project_path.path.to_path_buf());\n            }\n        }\n\n        None\n    }\n\n    fn target_file<'a>(&self, cx: &'a App) -> Option<&'a dyn language::LocalFile> {\n        self.active_excerpt(cx)?\n            .1\n            .read(cx)\n            .file()\n            .and_then(|f| f.as_local())\n    }\n\n    pub fn target_file_abs_path(&self, cx: &mut Context<Self>) -> Option<PathBuf> {\n        self.active_excerpt(cx).and_then(|(_, buffer, _)| {\n            let buffer = buffer.read(cx);\n            if let Some(project_path) = buffer.project_path(cx) {\n                let project = self.project.as_ref()?.read(cx);\n                project.absolute_path(&project_path, cx)\n            } else {\n                buffer\n                    .file()\n                    .and_then(|file| file.as_local().map(|file| file.abs_path(cx)))\n            }\n        })\n    }\n\n    fn target_file_path(&self, cx: &mut Context<Self>) -> Option<PathBuf> {\n        self.active_excerpt(cx).and_then(|(_, buffer, _)| {\n            let project_path = buffer.read(cx).project_path(cx)?;\n            let project = self.project.as_ref()?.read(cx);\n            let entry = project.entry_for_path(&project_path, cx)?;\n            let path = entry.path.to_path_buf();\n            Some(path)\n        })\n    }\n\n    pub fn reveal_in_finder(\n        &mut self,\n        _: &RevealInFileManager,\n        _window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some(target) = self.target_file(cx) {\n            cx.reveal_path(&target.abs_path(cx));\n        }\n    }\n\n    pub fn copy_path(\n        &mut self,\n        _: &zed_actions::workspace::CopyPath,\n        _window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some(path) = self.target_file_abs_path(cx) {\n            if let Some(path) = path.to_str() {\n                cx.write_to_clipboard(ClipboardItem::new_string(path.to_string()));\n            }\n        }\n    }\n\n    pub fn copy_relative_path(\n        &mut self,\n        _: &zed_actions::workspace::CopyRelativePath,\n        _window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some(path) = self.target_file_path(cx) {\n            if let Some(path) = path.to_str() {\n                cx.write_to_clipboard(ClipboardItem::new_string(path.to_string()));\n            }\n        }\n    }\n\n    pub fn copy_file_name_without_extension(\n        &mut self,\n        _: &CopyFileNameWithoutExtension,\n        _: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some(file) = self.target_file(cx) {\n            if let Some(file_stem) = file.path().file_stem() {\n                if let Some(name) = file_stem.to_str() {\n                    cx.write_to_clipboard(ClipboardItem::new_string(name.to_string()));\n                }\n            }\n        }\n    }\n\n    pub fn copy_file_name(&mut self, _: &CopyFileName, _: &mut Window, cx: &mut Context<Self>) {\n        if let Some(file) = self.target_file(cx) {\n            if let Some(file_name) = file.path().file_name() {\n                if let Some(name) = file_name.to_str() {\n                    cx.write_to_clipboard(ClipboardItem::new_string(name.to_string()));\n                }\n            }\n        }\n    }\n\n    pub fn toggle_git_blame(\n        &mut self,\n        _: &ToggleGitBlame,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.show_git_blame_gutter = !self.show_git_blame_gutter;\n\n        if self.show_git_blame_gutter && !self.has_blame_entries(cx) {\n            self.start_git_blame(true, window, cx);\n        }\n\n        cx.notify();\n    }\n\n    pub fn toggle_git_blame_inline(\n        &mut self,\n        _: &ToggleGitBlameInline,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.toggle_git_blame_inline_internal(true, window, cx);\n        cx.notify();\n    }\n\n    pub fn git_blame_inline_enabled(&self) -> bool {\n        self.git_blame_inline_enabled\n    }\n\n    pub fn toggle_selection_menu(\n        &mut self,\n        _: &ToggleSelectionMenu,\n        _: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.show_selection_menu = self\n            .show_selection_menu\n            .map(|show_selections_menu| !show_selections_menu)\n            .or_else(|| Some(!EditorSettings::get_global(cx).toolbar.selections_menu));\n\n        cx.notify();\n    }\n\n    pub fn selection_menu_enabled(&self, cx: &App) -> bool {\n        self.show_selection_menu\n            .unwrap_or_else(|| EditorSettings::get_global(cx).toolbar.selections_menu)\n    }\n\n    fn start_git_blame(\n        &mut self,\n        user_triggered: bool,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some(project) = self.project.as_ref() {\n            let Some(buffer) = self.buffer().read(cx).as_singleton() else {\n                return;\n            };\n\n            if buffer.read(cx).file().is_none() {\n                return;\n            }\n\n            let focused = self.focus_handle(cx).contains_focused(window, cx);\n\n            let project = project.clone();\n            let blame = cx.new(|cx| GitBlame::new(buffer, project, user_triggered, focused, cx));\n            self.blame_subscription =\n                Some(cx.observe_in(&blame, window, |_, _, _, cx| cx.notify()));\n            self.blame = Some(blame);\n        }\n    }\n\n    fn toggle_git_blame_inline_internal(\n        &mut self,\n        user_triggered: bool,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if self.git_blame_inline_enabled {\n            self.git_blame_inline_enabled = false;\n            self.show_git_blame_inline = false;\n            self.show_git_blame_inline_delay_task.take();\n        } else {\n            self.git_blame_inline_enabled = true;\n            self.start_git_blame_inline(user_triggered, window, cx);\n        }\n\n        cx.notify();\n    }\n\n    fn start_git_blame_inline(\n        &mut self,\n        user_triggered: bool,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.start_git_blame(user_triggered, window, cx);\n\n        if ProjectSettings::get_global(cx)\n            .git\n            .inline_blame_delay()\n            .is_some()\n        {\n            self.start_inline_blame_timer(window, cx);\n        } else {\n            self.show_git_blame_inline = true\n        }\n    }\n\n    pub fn blame(&self) -> Option<&Entity<GitBlame>> {\n        self.blame.as_ref()\n    }\n\n    pub fn show_git_blame_gutter(&self) -> bool {\n        self.show_git_blame_gutter\n    }\n\n    pub fn render_git_blame_gutter(&self, cx: &App) -> bool {\n        self.show_git_blame_gutter && self.has_blame_entries(cx)\n    }\n\n    pub fn render_git_blame_inline(&self, window: &Window, cx: &App) -> bool {\n        self.show_git_blame_inline\n            && (self.focus_handle.is_focused(window)\n                || self\n                    .git_blame_inline_tooltip\n                    .as_ref()\n                    .and_then(|t| t.upgrade())\n                    .is_some())\n            && !self.newest_selection_head_on_empty_line(cx)\n            && self.has_blame_entries(cx)\n    }\n\n    fn has_blame_entries(&self, cx: &App) -> bool {\n        self.blame()\n            .map_or(false, |blame| blame.read(cx).has_generated_entries())\n    }\n\n    fn newest_selection_head_on_empty_line(&self, cx: &App) -> bool {\n        let cursor_anchor = self.selections.newest_anchor().head();\n\n        let snapshot = self.buffer.read(cx).snapshot(cx);\n        let buffer_row = MultiBufferRow(cursor_anchor.to_point(&snapshot).row);\n\n        snapshot.line_len(buffer_row) == 0\n    }\n\n    fn get_permalink_to_line(&self, cx: &mut Context<Self>) -> Task<Result<url::Url>> {\n        let buffer_and_selection = maybe!({\n            let selection = self.selections.newest::<Point>(cx);\n            let selection_range = selection.range();\n\n            let multi_buffer = self.buffer().read(cx);\n            let multi_buffer_snapshot = multi_buffer.snapshot(cx);\n            let buffer_ranges = multi_buffer_snapshot.range_to_buffer_ranges(selection_range);\n\n            let (buffer, range, _) = if selection.reversed {\n                buffer_ranges.first()\n            } else {\n                buffer_ranges.last()\n            }?;\n\n            let selection = text::ToPoint::to_point(&range.start, &buffer).row\n                ..text::ToPoint::to_point(&range.end, &buffer).row;\n            Some((\n                multi_buffer.buffer(buffer.remote_id()).unwrap().clone(),\n                selection,\n            ))\n        });\n\n        let Some((buffer, selection)) = buffer_and_selection else {\n            return Task::ready(Err(anyhow!(": "",
    ")));\n        };\n\n        let Some(project) = self.project.as_ref() else {\n            return Task::ready(Err(anyhow!(": "",
    ")));\n        };\n\n        project.update(cx, |project, cx| {\n            project.get_permalink_to_line(&buffer, selection, cx)\n        })\n    }\n\n    pub fn copy_permalink_to_line(\n        &mut self,\n        _: &CopyPermalinkToLine,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let permalink_task = self.get_permalink_to_line(cx);\n        let workspace = self.workspace();\n\n        cx.spawn_in(window, |_, mut cx| async move {\n            match permalink_task.await {\n                Ok(permalink) => {\n                    cx.update(|_, cx| {\n                        cx.write_to_clipboard(ClipboardItem::new_string(permalink.to_string()));\n                    })\n                    .ok();\n                }\n                Err(err) => {\n                    let message = format!(": "",
    ");\n\n                    Err::<(), anyhow::Error>(err).log_err();\n\n                    if let Some(workspace) = workspace {\n                        workspace\n                            .update_in(&mut cx, |workspace, _, cx| {\n                                struct CopyPermalinkToLine;\n\n                                workspace.show_toast(\n                                    Toast::new(\n                                        NotificationId::unique::<CopyPermalinkToLine>(),\n                                        message,\n                                    ),\n                                    cx,\n                                )\n                            })\n                            .ok();\n                    }\n                }\n            }\n        })\n        .detach();\n    }\n\n    pub fn copy_file_location(\n        &mut self,\n        _: &CopyFileLocation,\n        _: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let selection = self.selections.newest::<Point>(cx).start.row + 1;\n        if let Some(file) = self.target_file(cx) {\n            if let Some(path) = file.path().to_str() {\n                cx.write_to_clipboard(ClipboardItem::new_string(format!(": "",
    ")));\n            }\n        }\n    }\n\n    pub fn open_permalink_to_line(\n        &mut self,\n        _: &OpenPermalinkToLine,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let permalink_task = self.get_permalink_to_line(cx);\n        let workspace = self.workspace();\n\n        cx.spawn_in(window, |_, mut cx| async move {\n            match permalink_task.await {\n                Ok(permalink) => {\n                    cx.update(|_, cx| {\n                        cx.open_url(permalink.as_ref());\n                    })\n                    .ok();\n                }\n                Err(err) => {\n                    let message = format!(": "",
    ");\n\n                    Err::<(), anyhow::Error>(err).log_err();\n\n                    if let Some(workspace) = workspace {\n                        workspace\n                            .update(&mut cx, |workspace, cx| {\n                                struct OpenPermalinkToLine;\n\n                                workspace.show_toast(\n                                    Toast::new(\n                                        NotificationId::unique::<OpenPermalinkToLine>(),\n                                        message,\n                                    ),\n                                    cx,\n                                )\n                            })\n                            .ok();\n                    }\n                }\n            }\n        })\n        .detach();\n    }\n\n    pub fn insert_uuid_v4(\n        &mut self,\n        _: &InsertUuidV4,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.insert_uuid(UuidVersion::V4, window, cx);\n    }\n\n    pub fn insert_uuid_v7(\n        &mut self,\n        _: &InsertUuidV7,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.insert_uuid(UuidVersion::V7, window, cx);\n    }\n\n    fn insert_uuid(&mut self, version: UuidVersion, window: &mut Window, cx: &mut Context<Self>) {\n        self.transact(window, cx, |this, window, cx| {\n            let edits = this\n                .selections\n                .all::<Point>(cx)\n                .into_iter()\n                .map(|selection| {\n                    let uuid = match version {\n                        UuidVersion::V4 => uuid::Uuid::new_v4(),\n                        UuidVersion::V7 => uuid::Uuid::now_v7(),\n                    };\n\n                    (selection.range(), uuid.to_string())\n                });\n            this.edit(edits, cx);\n            this.refresh_inline_completion(true, false, window, cx);\n        });\n    }\n\n    pub fn open_selections_in_multibuffer(\n        &mut self,\n        _: &OpenSelectionsInMultibuffer,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let multibuffer = self.buffer.read(cx);\n\n        let Some(buffer) = multibuffer.as_singleton() else {\n            return;\n        };\n\n        let Some(workspace) = self.workspace() else {\n            return;\n        };\n\n        let locations = self\n            .selections\n            .disjoint_anchors()\n            .iter()\n            .map(|range| Location {\n                buffer: buffer.clone(),\n                range: range.start.text_anchor..range.end.text_anchor,\n            })\n            .collect::<Vec<_>>();\n\n        let title = multibuffer.title(cx).to_string();\n\n        cx.spawn_in(window, |_, mut cx| async move {\n            workspace.update_in(&mut cx, |workspace, window, cx| {\n                Self::open_locations_in_multibuffer(\n                    workspace,\n                    locations,\n                    format!(": "",
    "),\n                    false,\n                    MultibufferSelectionMode::All,\n                    window,\n                    cx,\n                );\n            })\n        })\n        .detach();\n    }\n\n    /// Adds a row highlight for the given range. If a row has multiple highlights, the\n    /// last highlight added will be used.\n    ///\n    /// If the range ends at the beginning of a line, then that line will not be highlighted.\n    pub fn highlight_rows<T: 'static>(\n        &mut self,\n        range: Range<Anchor>,\n        color: Hsla,\n        should_autoscroll: bool,\n        cx: &mut Context<Self>,\n    ) {\n        let snapshot = self.buffer().read(cx).snapshot(cx);\n        let row_highlights = self.highlighted_rows.entry(TypeId::of::<T>()).or_default();\n        let ix = row_highlights.binary_search_by(|highlight| {\n            Ordering::Equal\n                .then_with(|| highlight.range.start.cmp(&range.start, &snapshot))\n                .then_with(|| highlight.range.end.cmp(&range.end, &snapshot))\n        });\n\n        if let Err(mut ix) = ix {\n            let index = post_inc(&mut self.highlight_order);\n\n            // If this range intersects with the preceding highlight, then merge it with\n            // the preceding highlight. Otherwise insert a new highlight.\n            let mut merged = false;\n            if ix > 0 {\n                let prev_highlight = &mut row_highlights[ix - 1];\n                if prev_highlight\n                    .range\n                    .end\n                    .cmp(&range.start, &snapshot)\n                    .is_ge()\n                {\n                    ix -= 1;\n                    if prev_highlight.range.end.cmp(&range.end, &snapshot).is_lt() {\n                        prev_highlight.range.end = range.end;\n                    }\n                    merged = true;\n                    prev_highlight.index = index;\n                    prev_highlight.color = color;\n                    prev_highlight.should_autoscroll = should_autoscroll;\n                }\n            }\n\n            if !merged {\n                row_highlights.insert(\n                    ix,\n                    RowHighlight {\n                        range: range.clone(),\n                        index,\n                        color,\n                        should_autoscroll,\n                    },\n                );\n            }\n\n            // If any of the following highlights intersect with this one, merge them.\n            while let Some(next_highlight) = row_highlights.get(ix + 1) {\n                let highlight = &row_highlights[ix];\n                if next_highlight\n                    .range\n                    .start\n                    .cmp(&highlight.range.end, &snapshot)\n                    .is_le()\n                {\n                    if next_highlight\n                        .range\n                        .end\n                        .cmp(&highlight.range.end, &snapshot)\n                        .is_gt()\n                    {\n                        row_highlights[ix].range.end = next_highlight.range.end;\n                    }\n                    row_highlights.remove(ix + 1);\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n\n    /// Remove any highlighted row ranges of the given type that intersect the\n    /// given ranges.\n    pub fn remove_highlighted_rows<T: 'static>(\n        &mut self,\n        ranges_to_remove: Vec<Range<Anchor>>,\n        cx: &mut Context<Self>,\n    ) {\n        let snapshot = self.buffer().read(cx).snapshot(cx);\n        let row_highlights = self.highlighted_rows.entry(TypeId::of::<T>()).or_default();\n        let mut ranges_to_remove = ranges_to_remove.iter().peekable();\n        row_highlights.retain(|highlight| {\n            while let Some(range_to_remove) = ranges_to_remove.peek() {\n                match range_to_remove.end.cmp(&highlight.range.start, &snapshot) {\n                    Ordering::Less | Ordering::Equal => {\n                        ranges_to_remove.next();\n                    }\n                    Ordering::Greater => {\n                        match range_to_remove.start.cmp(&highlight.range.end, &snapshot) {\n                            Ordering::Less | Ordering::Equal => {\n                                return false;\n                            }\n                            Ordering::Greater => break,\n                        }\n                    }\n                }\n            }\n\n            true\n        })\n    }\n\n    /// Clear all anchor ranges for a certain highlight context type, so no corresponding rows will be highlighted.\n    pub fn clear_row_highlights<T: 'static>(&mut self) {\n        self.highlighted_rows.remove(&TypeId::of::<T>());\n    }\n\n    /// For a highlight given context type, gets all anchor ranges that will be used for row highlighting.\n    pub fn highlighted_rows<T: 'static>(&self) -> impl '_ + Iterator<Item = (Range<Anchor>, Hsla)> {\n        self.highlighted_rows\n            .get(&TypeId::of::<T>())\n            .map_or(&[] as &[_], |vec| vec.as_slice())\n            .iter()\n            .map(|highlight| (highlight.range.clone(), highlight.color))\n    }\n\n    /// Merges all anchor ranges for all context types ever set, picking the last highlight added in case of a row conflict.\n    /// Returns a map of display rows that are highlighted and their corresponding highlight color.\n    /// Allows to ignore certain kinds of highlights.\n    pub fn highlighted_display_rows(\n        &self,\n        window: &mut Window,\n        cx: &mut App,\n    ) -> BTreeMap<DisplayRow, LineHighlight> {\n        let snapshot = self.snapshot(window, cx);\n        let mut used_highlight_orders = HashMap::default();\n        self.highlighted_rows\n            .iter()\n            .flat_map(|(_, highlighted_rows)| highlighted_rows.iter())\n            .fold(\n                BTreeMap::<DisplayRow, LineHighlight>::new(),\n                |mut unique_rows, highlight| {\n                    let start = highlight.range.start.to_display_point(&snapshot);\n                    let end = highlight.range.end.to_display_point(&snapshot);\n                    let start_row = start.row().0;\n                    let end_row = if highlight.range.end.text_anchor != text::Anchor::MAX\n                        && end.column() == 0\n                    {\n                        end.row().0.saturating_sub(1)\n                    } else {\n                        end.row().0\n                    };\n                    for row in start_row..=end_row {\n                        let used_index =\n                            used_highlight_orders.entry(row).or_insert(highlight.index);\n                        if highlight.index >= *used_index {\n                            *used_index = highlight.index;\n                            unique_rows.insert(DisplayRow(row), highlight.color.into());\n                        }\n                    }\n                    unique_rows\n                },\n            )\n    }\n\n    pub fn highlighted_display_row_for_autoscroll(\n        &self,\n        snapshot: &DisplaySnapshot,\n    ) -> Option<DisplayRow> {\n        self.highlighted_rows\n            .values()\n            .flat_map(|highlighted_rows| highlighted_rows.iter())\n            .filter_map(|highlight| {\n                if highlight.should_autoscroll {\n                    Some(highlight.range.start.to_display_point(snapshot).row())\n                } else {\n                    None\n                }\n            })\n            .min()\n    }\n\n    pub fn set_search_within_ranges(&mut self, ranges: &[Range<Anchor>], cx: &mut Context<Self>) {\n        self.highlight_background::<SearchWithinRange>(\n            ranges,\n            |colors| colors.editor_document_highlight_read_background,\n            cx,\n        )\n    }\n\n    pub fn set_breadcrumb_header(&mut self, new_header: String) {\n        self.breadcrumb_header = Some(new_header);\n    }\n\n    pub fn clear_search_within_ranges(&mut self, cx: &mut Context<Self>) {\n        self.clear_background_highlights::<SearchWithinRange>(cx);\n    }\n\n    pub fn highlight_background<T: 'static>(\n        &mut self,\n        ranges: &[Range<Anchor>],\n        color_fetcher: fn(&ThemeColors) -> Hsla,\n        cx: &mut Context<Self>,\n    ) {\n        self.background_highlights\n            .insert(TypeId::of::<T>(), (color_fetcher, Arc::from(ranges)));\n        self.scrollbar_marker_state.dirty = true;\n        cx.notify();\n    }\n\n    pub fn clear_background_highlights<T: 'static>(\n        &mut self,\n        cx: &mut Context<Self>,\n    ) -> Option<BackgroundHighlight> {\n        let text_highlights = self.background_highlights.remove(&TypeId::of::<T>())?;\n        if !text_highlights.1.is_empty() {\n            self.scrollbar_marker_state.dirty = true;\n            cx.notify();\n        }\n        Some(text_highlights)\n    }\n\n    pub fn highlight_gutter<T: 'static>(\n        &mut self,\n        ranges: &[Range<Anchor>],\n        color_fetcher: fn(&App) -> Hsla,\n        cx: &mut Context<Self>,\n    ) {\n        self.gutter_highlights\n            .insert(TypeId::of::<T>(), (color_fetcher, Arc::from(ranges)));\n        cx.notify();\n    }\n\n    pub fn clear_gutter_highlights<T: 'static>(\n        &mut self,\n        cx: &mut Context<Self>,\n    ) -> Option<GutterHighlight> {\n        cx.notify();\n        self.gutter_highlights.remove(&TypeId::of::<T>())\n    }\n\n    #[cfg(feature = ": "",
    ")]\n    pub fn all_text_background_highlights(\n        &self,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Vec<(Range<DisplayPoint>, Hsla)> {\n        let snapshot = self.snapshot(window, cx);\n        let buffer = &snapshot.buffer_snapshot;\n        let start = buffer.anchor_before(0);\n        let end = buffer.anchor_after(buffer.len());\n        let theme = cx.theme().colors();\n        self.background_highlights_in_range(start..end, &snapshot, theme)\n    }\n\n    #[cfg(feature = ": "",
    ")]\n    pub fn search_background_highlights(&mut self, cx: &mut Context<Self>) -> Vec<Range<Point>> {\n        let snapshot = self.buffer().read(cx).snapshot(cx);\n\n        let highlights = self\n            .background_highlights\n            .get(&TypeId::of::<items::BufferSearchHighlights>());\n\n        if let Some((_color, ranges)) = highlights {\n            ranges\n                .iter()\n                .map(|range| range.start.to_point(&snapshot)..range.end.to_point(&snapshot))\n                .collect_vec()\n        } else {\n            vec![]\n        }\n    }\n\n    fn document_highlights_for_position<'a>(\n        &'a self,\n        position: Anchor,\n        buffer: &'a MultiBufferSnapshot,\n    ) -> impl 'a + Iterator<Item = &'a Range<Anchor>> {\n        let read_highlights = self\n            .background_highlights\n            .get(&TypeId::of::<DocumentHighlightRead>())\n            .map(|h| &h.1);\n        let write_highlights = self\n            .background_highlights\n            .get(&TypeId::of::<DocumentHighlightWrite>())\n            .map(|h| &h.1);\n        let left_position = position.bias_left(buffer);\n        let right_position = position.bias_right(buffer);\n        read_highlights\n            .into_iter()\n            .chain(write_highlights)\n            .flat_map(move |ranges| {\n                let start_ix = match ranges.binary_search_by(|probe| {\n                    let cmp = probe.end.cmp(&left_position, buffer);\n                    if cmp.is_ge() {\n                        Ordering::Greater\n                    } else {\n                        Ordering::Less\n                    }\n                }) {\n                    Ok(i) | Err(i) => i,\n                };\n\n                ranges[start_ix..]\n                    .iter()\n                    .take_while(move |range| range.start.cmp(&right_position, buffer).is_le())\n            })\n    }\n\n    pub fn has_background_highlights<T: 'static>(&self) -> bool {\n        self.background_highlights\n            .get(&TypeId::of::<T>())\n            .map_or(false, |(_, highlights)| !highlights.is_empty())\n    }\n\n    pub fn background_highlights_in_range(\n        &self,\n        search_range: Range<Anchor>,\n        display_snapshot: &DisplaySnapshot,\n        theme: &ThemeColors,\n    ) -> Vec<(Range<DisplayPoint>, Hsla)> {\n        let mut results = Vec::new();\n        for (color_fetcher, ranges) in self.background_highlights.values() {\n            let color = color_fetcher(theme);\n            let start_ix = match ranges.binary_search_by(|probe| {\n                let cmp = probe\n                    .end\n                    .cmp(&search_range.start, &display_snapshot.buffer_snapshot);\n                if cmp.is_gt() {\n                    Ordering::Greater\n                } else {\n                    Ordering::Less\n                }\n            }) {\n                Ok(i) | Err(i) => i,\n            };\n            for range in &ranges[start_ix..] {\n                if range\n                    .start\n                    .cmp(&search_range.end, &display_snapshot.buffer_snapshot)\n                    .is_ge()\n                {\n                    break;\n                }\n\n                let start = range.start.to_display_point(display_snapshot);\n                let end = range.end.to_display_point(display_snapshot);\n                results.push((start..end, color))\n            }\n        }\n        results\n    }\n\n    pub fn background_highlight_row_ranges<T: 'static>(\n        &self,\n        search_range: Range<Anchor>,\n        display_snapshot: &DisplaySnapshot,\n        count: usize,\n    ) -> Vec<RangeInclusive<DisplayPoint>> {\n        let mut results = Vec::new();\n        let Some((_, ranges)) = self.background_highlights.get(&TypeId::of::<T>()) else {\n            return vec![];\n        };\n\n        let start_ix = match ranges.binary_search_by(|probe| {\n            let cmp = probe\n                .end\n                .cmp(&search_range.start, &display_snapshot.buffer_snapshot);\n            if cmp.is_gt() {\n                Ordering::Greater\n            } else {\n                Ordering::Less\n            }\n        }) {\n            Ok(i) | Err(i) => i,\n        };\n        let mut push_region = |start: Option<Point>, end: Option<Point>| {\n            if let (Some(start_display), Some(end_display)) = (start, end) {\n                results.push(\n                    start_display.to_display_point(display_snapshot)\n                        ..=end_display.to_display_point(display_snapshot),\n                );\n            }\n        };\n        let mut start_row: Option<Point> = None;\n        let mut end_row: Option<Point> = None;\n        if ranges.len() > count {\n            return Vec::new();\n        }\n        for range in &ranges[start_ix..] {\n            if range\n                .start\n                .cmp(&search_range.end, &display_snapshot.buffer_snapshot)\n                .is_ge()\n            {\n                break;\n            }\n            let end = range.end.to_point(&display_snapshot.buffer_snapshot);\n            if let Some(current_row) = &end_row {\n                if end.row == current_row.row {\n                    continue;\n                }\n            }\n            let start = range.start.to_point(&display_snapshot.buffer_snapshot);\n            if start_row.is_none() {\n                assert_eq!(end_row, None);\n                start_row = Some(start);\n                end_row = Some(end);\n                continue;\n            }\n            if let Some(current_end) = end_row.as_mut() {\n                if start.row > current_end.row + 1 {\n                    push_region(start_row, end_row);\n                    start_row = Some(start);\n                    end_row = Some(end);\n                } else {\n                    // Merge two hunks.\n                    *current_end = end;\n                }\n            } else {\n                unreachable!();\n            }\n        }\n        // We might still have a hunk that was not rendered (if there was a search hit on the last line)\n        push_region(start_row, end_row);\n        results\n    }\n\n    pub fn gutter_highlights_in_range(\n        &self,\n        search_range: Range<Anchor>,\n        display_snapshot: &DisplaySnapshot,\n        cx: &App,\n    ) -> Vec<(Range<DisplayPoint>, Hsla)> {\n        let mut results = Vec::new();\n        for (color_fetcher, ranges) in self.gutter_highlights.values() {\n            let color = color_fetcher(cx);\n            let start_ix = match ranges.binary_search_by(|probe| {\n                let cmp = probe\n                    .end\n                    .cmp(&search_range.start, &display_snapshot.buffer_snapshot);\n                if cmp.is_gt() {\n                    Ordering::Greater\n                } else {\n                    Ordering::Less\n                }\n            }) {\n                Ok(i) | Err(i) => i,\n            };\n            for range in &ranges[start_ix..] {\n                if range\n                    .start\n                    .cmp(&search_range.end, &display_snapshot.buffer_snapshot)\n                    .is_ge()\n                {\n                    break;\n                }\n\n                let start = range.start.to_display_point(display_snapshot);\n                let end = range.end.to_display_point(display_snapshot);\n                results.push((start..end, color))\n            }\n        }\n        results\n    }\n\n    /// Get the text ranges corresponding to the redaction query\n    pub fn redacted_ranges(\n        &self,\n        search_range: Range<Anchor>,\n        display_snapshot: &DisplaySnapshot,\n        cx: &App,\n    ) -> Vec<Range<DisplayPoint>> {\n        display_snapshot\n            .buffer_snapshot\n            .redacted_ranges(search_range, |file| {\n                if let Some(file) = file {\n                    file.is_private()\n                        && EditorSettings::get(\n                            Some(SettingsLocation {\n                                worktree_id: file.worktree_id(cx),\n                                path: file.path().as_ref(),\n                            }),\n                            cx,\n                        )\n                        .redact_private_values\n                } else {\n                    false\n                }\n            })\n            .map(|range| {\n                range.start.to_display_point(display_snapshot)\n                    ..range.end.to_display_point(display_snapshot)\n            })\n            .collect()\n    }\n\n    pub fn highlight_text<T: 'static>(\n        &mut self,\n        ranges: Vec<Range<Anchor>>,\n        style: HighlightStyle,\n        cx: &mut Context<Self>,\n    ) {\n        self.display_map.update(cx, |map, _| {\n            map.highlight_text(TypeId::of::<T>(), ranges, style)\n        });\n        cx.notify();\n    }\n\n    pub(crate) fn highlight_inlays<T: 'static>(\n        &mut self,\n        highlights: Vec<InlayHighlight>,\n        style: HighlightStyle,\n        cx: &mut Context<Self>,\n    ) {\n        self.display_map.update(cx, |map, _| {\n            map.highlight_inlays(TypeId::of::<T>(), highlights, style)\n        });\n        cx.notify();\n    }\n\n    pub fn text_highlights<'a, T: 'static>(\n        &'a self,\n        cx: &'a App,\n    ) -> Option<(HighlightStyle, &'a [Range<Anchor>])> {\n        self.display_map.read(cx).text_highlights(TypeId::of::<T>())\n    }\n\n    pub fn clear_highlights<T: 'static>(&mut self, cx: &mut Context<Self>) {\n        let cleared = self\n            .display_map\n            .update(cx, |map, _| map.clear_highlights(TypeId::of::<T>()));\n        if cleared {\n            cx.notify();\n        }\n    }\n\n    pub fn show_local_cursors(&self, window: &mut Window, cx: &mut App) -> bool {\n        (self.read_only(cx) || self.blink_manager.read(cx).visible())\n            && self.focus_handle.is_focused(window)\n    }\n\n    pub fn set_show_cursor_when_unfocused(&mut self, is_enabled: bool, cx: &mut Context<Self>) {\n        self.show_cursor_when_unfocused = is_enabled;\n        cx.notify();\n    }\n\n    fn on_buffer_changed(&mut self, _: Entity<MultiBuffer>, cx: &mut Context<Self>) {\n        cx.notify();\n    }\n\n    fn on_buffer_event(\n        &mut self,\n        multibuffer: &Entity<MultiBuffer>,\n        event: &multi_buffer::Event,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        match event {\n            multi_buffer::Event::Edited {\n                singleton_buffer_edited,\n                edited_buffer: buffer_edited,\n            } => {\n                self.scrollbar_marker_state.dirty = true;\n                self.active_indent_guides_state.dirty = true;\n                self.refresh_active_diagnostics(cx);\n                self.refresh_code_actions(window, cx);\n                if self.has_active_inline_completion() {\n                    self.update_visible_inline_completion(window, cx);\n                }\n                if let Some(buffer) = buffer_edited {\n                    let buffer_id = buffer.read(cx).remote_id();\n                    if !self.registered_buffers.contains_key(&buffer_id) {\n                        if let Some(project) = self.project.as_ref() {\n                            project.update(cx, |project, cx| {\n                                self.registered_buffers.insert(\n                                    buffer_id,\n                                    project.register_buffer_with_language_servers(&buffer, cx),\n                                );\n                            })\n                        }\n                    }\n                }\n                cx.emit(EditorEvent::BufferEdited);\n                cx.emit(SearchEvent::MatchesInvalidated);\n                if *singleton_buffer_edited {\n                    if let Some(project) = &self.project {\n                        #[allow(clippy::mutable_key_type)]\n                        let languages_affected = multibuffer.update(cx, |multibuffer, cx| {\n                            multibuffer\n                                .all_buffers()\n                                .into_iter()\n                                .filter_map(|buffer| {\n                                    buffer.update(cx, |buffer, cx| {\n                                        let language = buffer.language()?;\n                                        let should_discard = project.update(cx, |project, cx| {\n                                            project.is_local()\n                                                && !project.has_language_servers_for(buffer, cx)\n                                        });\n                                        should_discard.not().then_some(language.clone())\n                                    })\n                                })\n                                .collect::<HashSet<_>>()\n                        });\n                        if !languages_affected.is_empty() {\n                            self.refresh_inlay_hints(\n                                InlayHintRefreshReason::BufferEdited(languages_affected),\n                                cx,\n                            );\n                        }\n                    }\n                }\n\n                let Some(project) = &self.project else { return };\n                let (telemetry, is_via_ssh) = {\n                    let project = project.read(cx);\n                    let telemetry = project.client().telemetry().clone();\n                    let is_via_ssh = project.is_via_ssh();\n                    (telemetry, is_via_ssh)\n                };\n                refresh_linked_ranges(self, window, cx);\n                telemetry.log_edit_event(": "",
    ", is_via_ssh);\n            }\n            multi_buffer::Event::ExcerptsAdded {\n                buffer,\n                predecessor,\n                excerpts,\n            } => {\n                self.tasks_update_task = Some(self.refresh_runnables(window, cx));\n                let buffer_id = buffer.read(cx).remote_id();\n                if self.buffer.read(cx).diff_for(buffer_id).is_none() {\n                    if let Some(project) = &self.project {\n                        get_uncommitted_diff_for_buffer(\n                            project,\n                            [buffer.clone()],\n                            self.buffer.clone(),\n                            cx,\n                        )\n                        .detach();\n                    }\n                }\n                cx.emit(EditorEvent::ExcerptsAdded {\n                    buffer: buffer.clone(),\n                    predecessor: *predecessor,\n                    excerpts: excerpts.clone(),\n                });\n                self.refresh_inlay_hints(InlayHintRefreshReason::NewLinesShown, cx);\n            }\n            multi_buffer::Event::ExcerptsRemoved { ids } => {\n                self.refresh_inlay_hints(InlayHintRefreshReason::ExcerptsRemoved(ids.clone()), cx);\n                let buffer = self.buffer.read(cx);\n                self.registered_buffers\n                    .retain(|buffer_id, _| buffer.buffer(*buffer_id).is_some());\n                jsx_tag_auto_close::refresh_enabled_in_any_buffer(self, multibuffer, cx);\n                cx.emit(EditorEvent::ExcerptsRemoved { ids: ids.clone() })\n            }\n            multi_buffer::Event::ExcerptsEdited {\n                excerpt_ids,\n                buffer_ids,\n            } => {\n                self.display_map.update(cx, |map, cx| {\n                    map.unfold_buffers(buffer_ids.iter().copied(), cx)\n                });\n                cx.emit(EditorEvent::ExcerptsEdited {\n                    ids: excerpt_ids.clone(),\n                })\n            }\n            multi_buffer::Event::ExcerptsExpanded { ids } => {\n                self.refresh_inlay_hints(InlayHintRefreshReason::NewLinesShown, cx);\n                cx.emit(EditorEvent::ExcerptsExpanded { ids: ids.clone() })\n            }\n            multi_buffer::Event::Reparsed(buffer_id) => {\n                self.tasks_update_task = Some(self.refresh_runnables(window, cx));\n                jsx_tag_auto_close::refresh_enabled_in_any_buffer(self, multibuffer, cx);\n\n                cx.emit(EditorEvent::Reparsed(*buffer_id));\n            }\n            multi_buffer::Event::DiffHunksToggled => {\n                self.tasks_update_task = Some(self.refresh_runnables(window, cx));\n            }\n            multi_buffer::Event::LanguageChanged(buffer_id) => {\n                linked_editing_ranges::refresh_linked_ranges(self, window, cx);\n                jsx_tag_auto_close::refresh_enabled_in_any_buffer(self, multibuffer, cx);\n                cx.emit(EditorEvent::Reparsed(*buffer_id));\n                cx.notify();\n            }\n            multi_buffer::Event::DirtyChanged => cx.emit(EditorEvent::DirtyChanged),\n            multi_buffer::Event::Saved => cx.emit(EditorEvent::Saved),\n            multi_buffer::Event::FileHandleChanged\n            | multi_buffer::Event::Reloaded\n            | multi_buffer::Event::BufferDiffChanged => cx.emit(EditorEvent::TitleChanged),\n            multi_buffer::Event::Closed => cx.emit(EditorEvent::Closed),\n            multi_buffer::Event::DiagnosticsUpdated => {\n                self.refresh_active_diagnostics(cx);\n                self.refresh_inline_diagnostics(true, window, cx);\n                self.scrollbar_marker_state.dirty = true;\n                cx.notify();\n            }\n            _ => {}\n        };\n    }\n\n    fn on_display_map_changed(\n        &mut self,\n        _: Entity<DisplayMap>,\n        _: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        cx.notify();\n    }\n\n    fn settings_changed(&mut self, window: &mut Window, cx: &mut Context<Self>) {\n        self.tasks_update_task = Some(self.refresh_runnables(window, cx));\n        self.update_edit_prediction_settings(cx);\n        self.refresh_inline_completion(true, false, window, cx);\n        self.refresh_inlay_hints(\n            InlayHintRefreshReason::SettingsChange(inlay_hint_settings(\n                self.selections.newest_anchor().head(),\n                &self.buffer.read(cx).snapshot(cx),\n                cx,\n            )),\n            cx,\n        );\n\n        let old_cursor_shape = self.cursor_shape;\n\n        {\n            let editor_settings = EditorSettings::get_global(cx);\n            self.scroll_manager.vertical_scroll_margin = editor_settings.vertical_scroll_margin;\n            self.show_breadcrumbs = editor_settings.toolbar.breadcrumbs;\n            self.cursor_shape = editor_settings.cursor_shape.unwrap_or_default();\n        }\n\n        if old_cursor_shape != self.cursor_shape {\n            cx.emit(EditorEvent::CursorShapeChanged);\n        }\n\n        let project_settings = ProjectSettings::get_global(cx);\n        self.serialize_dirty_buffers = project_settings.session.restore_unsaved_buffers;\n\n        if self.mode == EditorMode::Full {\n            let show_inline_diagnostics = project_settings.diagnostics.inline.enabled;\n            let inline_blame_enabled = project_settings.git.inline_blame_enabled();\n            if self.show_inline_diagnostics != show_inline_diagnostics {\n                self.show_inline_diagnostics = show_inline_diagnostics;\n                self.refresh_inline_diagnostics(false, window, cx);\n            }\n\n            if self.git_blame_inline_enabled != inline_blame_enabled {\n                self.toggle_git_blame_inline_internal(false, window, cx);\n            }\n        }\n\n        cx.notify();\n    }\n\n    pub fn set_searchable(&mut self, searchable: bool) {\n        self.searchable = searchable;\n    }\n\n    pub fn searchable(&self) -> bool {\n        self.searchable\n    }\n\n    fn open_proposed_changes_editor(\n        &mut self,\n        _: &OpenProposedChangesEditor,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let Some(workspace) = self.workspace() else {\n            cx.propagate();\n            return;\n        };\n\n        let selections = self.selections.all::<usize>(cx);\n        let multi_buffer = self.buffer.read(cx);\n        let multi_buffer_snapshot = multi_buffer.snapshot(cx);\n        let mut new_selections_by_buffer = HashMap::default();\n        for selection in selections {\n            for (buffer, range, _) in\n                multi_buffer_snapshot.range_to_buffer_ranges(selection.start..selection.end)\n            {\n                let mut range = range.to_point(buffer);\n                range.start.column = 0;\n                range.end.column = buffer.line_len(range.end.row);\n                new_selections_by_buffer\n                    .entry(multi_buffer.buffer(buffer.remote_id()).unwrap())\n                    .or_insert(Vec::new())\n                    .push(range)\n            }\n        }\n\n        let proposed_changes_buffers = new_selections_by_buffer\n            .into_iter()\n            .map(|(buffer, ranges)| ProposedChangeLocation { buffer, ranges })\n            .collect::<Vec<_>>();\n        let proposed_changes_editor = cx.new(|cx| {\n            ProposedChangesEditor::new(\n                ": "",
    ",\n                proposed_changes_buffers,\n                self.project.clone(),\n                window,\n                cx,\n            )\n        });\n\n        window.defer(cx, move |window, cx| {\n            workspace.update(cx, |workspace, cx| {\n                workspace.active_pane().update(cx, |pane, cx| {\n                    pane.add_item(\n                        Box::new(proposed_changes_editor),\n                        true,\n                        true,\n                        None,\n                        window,\n                        cx,\n                    );\n                });\n            });\n        });\n    }\n\n    pub fn open_excerpts_in_split(\n        &mut self,\n        _: &OpenExcerptsSplit,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.open_excerpts_common(None, true, window, cx)\n    }\n\n    pub fn open_excerpts(&mut self, _: &OpenExcerpts, window: &mut Window, cx: &mut Context<Self>) {\n        self.open_excerpts_common(None, false, window, cx)\n    }\n\n    fn open_excerpts_common(\n        &mut self,\n        jump_data: Option<JumpData>,\n        split: bool,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let Some(workspace) = self.workspace() else {\n            cx.propagate();\n            return;\n        };\n\n        if self.buffer.read(cx).is_singleton() {\n            cx.propagate();\n            return;\n        }\n\n        let mut new_selections_by_buffer = HashMap::default();\n        match &jump_data {\n            Some(JumpData::MultiBufferPoint {\n                excerpt_id,\n                position,\n                anchor,\n                line_offset_from_top,\n            }) => {\n                let multi_buffer_snapshot = self.buffer.read(cx).snapshot(cx);\n                if let Some(buffer) = multi_buffer_snapshot\n                    .buffer_id_for_excerpt(*excerpt_id)\n                    .and_then(|buffer_id| self.buffer.read(cx).buffer(buffer_id))\n                {\n                    let buffer_snapshot = buffer.read(cx).snapshot();\n                    let jump_to_point = if buffer_snapshot.can_resolve(anchor) {\n                        language::ToPoint::to_point(anchor, &buffer_snapshot)\n                    } else {\n                        buffer_snapshot.clip_point(*position, Bias::Left)\n                    };\n                    let jump_to_offset = buffer_snapshot.point_to_offset(jump_to_point);\n                    new_selections_by_buffer.insert(\n                        buffer,\n                        (\n                            vec![jump_to_offset..jump_to_offset],\n                            Some(*line_offset_from_top),\n                        ),\n                    );\n                }\n            }\n            Some(JumpData::MultiBufferRow {\n                row,\n                line_offset_from_top,\n            }) => {\n                let point = MultiBufferPoint::new(row.0, 0);\n                if let Some((buffer, buffer_point, _)) =\n                    self.buffer.read(cx).point_to_buffer_point(point, cx)\n                {\n                    let buffer_offset = buffer.read(cx).point_to_offset(buffer_point);\n                    new_selections_by_buffer\n                        .entry(buffer)\n                        .or_insert((Vec::new(), Some(*line_offset_from_top)))\n                        .0\n                        .push(buffer_offset..buffer_offset)\n                }\n            }\n            None => {\n                let selections = self.selections.all::<usize>(cx);\n                let multi_buffer = self.buffer.read(cx);\n                for selection in selections {\n                    for (snapshot, range, _, anchor) in multi_buffer\n                        .snapshot(cx)\n                        .range_to_buffer_ranges_with_deleted_hunks(selection.range())\n                    {\n                        if let Some(anchor) = anchor {\n                            // selection is in a deleted hunk\n                            let Some(buffer_id) = anchor.buffer_id else {\n                                continue;\n                            };\n                            let Some(buffer_handle) = multi_buffer.buffer(buffer_id) else {\n                                continue;\n                            };\n                            let offset = text::ToOffset::to_offset(\n                                &anchor.text_anchor,\n                                &buffer_handle.read(cx).snapshot(),\n                            );\n                            let range = offset..offset;\n                            new_selections_by_buffer\n                                .entry(buffer_handle)\n                                .or_insert((Vec::new(), None))\n                                .0\n                                .push(range)\n                        } else {\n                            let Some(buffer_handle) = multi_buffer.buffer(snapshot.remote_id())\n                            else {\n                                continue;\n                            };\n                            new_selections_by_buffer\n                                .entry(buffer_handle)\n                                .or_insert((Vec::new(), None))\n                                .0\n                                .push(range)\n                        }\n                    }\n                }\n            }\n        }\n\n        if new_selections_by_buffer.is_empty() {\n            return;\n        }\n\n        // We defer the pane interaction because we ourselves are a workspace item\n        // and activating a new item causes the pane to call a method on us reentrantly,\n        // which panics if we're on the stack.\n        window.defer(cx, move |window, cx| {\n            workspace.update(cx, |workspace, cx| {\n                let pane = if split {\n                    workspace.adjacent_pane(window, cx)\n                } else {\n                    workspace.active_pane().clone()\n                };\n\n                for (buffer, (ranges, scroll_offset)) in new_selections_by_buffer {\n                    let editor = buffer\n                        .read(cx)\n                        .file()\n                        .is_none()\n                        .then(|| {\n                            // Handle file-less buffers separately: those are not really the project items, so won't have a project path or entity id,\n                            // so `workspace.open_project_item` will never find them, always opening a new editor.\n                            // Instead, we try to activate the existing editor in the pane first.\n                            let (editor, pane_item_index) =\n                                pane.read(cx).items().enumerate().find_map(|(i, item)| {\n                                    let editor = item.downcast::<Editor>()?;\n                                    let singleton_buffer =\n                                        editor.read(cx).buffer().read(cx).as_singleton()?;\n                                    if singleton_buffer == buffer {\n                                        Some((editor, i))\n                                    } else {\n                                        None\n                                    }\n                                })?;\n                            pane.update(cx, |pane, cx| {\n                                pane.activate_item(pane_item_index, true, true, window, cx)\n                            });\n                            Some(editor)\n                        })\n                        .flatten()\n                        .unwrap_or_else(|| {\n                            workspace.open_project_item::<Self>(\n                                pane.clone(),\n                                buffer,\n                                true,\n                                true,\n                                window,\n                                cx,\n                            )\n                        });\n\n                    editor.update(cx, |editor, cx| {\n                        let autoscroll = match scroll_offset {\n                            Some(scroll_offset) => Autoscroll::top_relative(scroll_offset as usize),\n                            None => Autoscroll::newest(),\n                        };\n                        let nav_history = editor.nav_history.take();\n                        editor.change_selections(Some(autoscroll), window, cx, |s| {\n                            s.select_ranges(ranges);\n                        });\n                        editor.nav_history = nav_history;\n                    });\n                }\n            })\n        });\n    }\n\n    fn marked_text_ranges(&self, cx: &App) -> Option<Vec<Range<OffsetUtf16>>> {\n        let snapshot = self.buffer.read(cx).read(cx);\n        let (_, ranges) = self.text_highlights::<InputComposition>(cx)?;\n        Some(\n            ranges\n                .iter()\n                .map(move |range| {\n                    range.start.to_offset_utf16(&snapshot)..range.end.to_offset_utf16(&snapshot)\n                })\n                .collect(),\n        )\n    }\n\n    fn selection_replacement_ranges(\n        &self,\n        range: Range<OffsetUtf16>,\n        cx: &mut App,\n    ) -> Vec<Range<OffsetUtf16>> {\n        let selections = self.selections.all::<OffsetUtf16>(cx);\n        let newest_selection = selections\n            .iter()\n            .max_by_key(|selection| selection.id)\n            .unwrap();\n        let start_delta = range.start.0 as isize - newest_selection.start.0 as isize;\n        let end_delta = range.end.0 as isize - newest_selection.end.0 as isize;\n        let snapshot = self.buffer.read(cx).read(cx);\n        selections\n            .into_iter()\n            .map(|mut selection| {\n                selection.start.0 =\n                    (selection.start.0 as isize).saturating_add(start_delta) as usize;\n                selection.end.0 = (selection.end.0 as isize).saturating_add(end_delta) as usize;\n                snapshot.clip_offset_utf16(selection.start, Bias::Left)\n                    ..snapshot.clip_offset_utf16(selection.end, Bias::Right)\n            })\n            .collect()\n    }\n\n    fn report_editor_event(\n        &self,\n        event_type: &'static str,\n        file_extension: Option<String>,\n        cx: &App,\n    ) {\n        if cfg!(any(test, feature = ": "",
    ")) {\n            return;\n        }\n\n        let Some(project) = &self.project else { return };\n\n        // If None, we are in a file without an extension\n        let file = self\n            .buffer\n            .read(cx)\n            .as_singleton()\n            .and_then(|b| b.read(cx).file());\n        let file_extension = file_extension.or(file\n            .as_ref()\n            .and_then(|file| Path::new(file.file_name(cx)).extension())\n            .and_then(|e| e.to_str())\n            .map(|a| a.to_string()));\n\n        let vim_mode = cx\n            .global::<SettingsStore>()\n            .raw_user_settings()\n            .get(": "",
    ")\n            == Some(&serde_json::Value::Bool(true));\n\n        let edit_predictions_provider = all_language_settings(file, cx).edit_predictions.provider;\n        let copilot_enabled = edit_predictions_provider\n            == language::language_settings::EditPredictionProvider::Copilot;\n        let copilot_enabled_for_language = self\n            .buffer\n            .read(cx)\n            .language_settings(cx)\n            .show_edit_predictions;\n\n        let project = project.read(cx);\n        telemetry::event!(\n            event_type,\n            file_extension,\n            vim_mode,\n            copilot_enabled,\n            copilot_enabled_for_language,\n            edit_predictions_provider,\n            is_via_ssh = project.is_via_ssh(),\n        );\n    }\n\n    /// Copy the highlighted chunks to the clipboard as JSON. The format is an array of lines,\n    /// with each line being an array of {text, highlight} objects.\n    fn copy_highlight_json(\n        &mut self,\n        _: &CopyHighlightJson,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        #[derive(Serialize)]\n        struct Chunk<'a> {\n            text: String,\n            highlight: Option<&'a str>,\n        }\n\n        let snapshot = self.buffer.read(cx).snapshot(cx);\n        let range = self\n            .selected_text_range(false, window, cx)\n            .and_then(|selection| {\n                if selection.range.is_empty() {\n                    None\n                } else {\n                    Some(selection.range)\n                }\n            })\n            .unwrap_or_else(|| 0..snapshot.len());\n\n        let chunks = snapshot.chunks(range, true);\n        let mut lines = Vec::new();\n        let mut line: VecDeque<Chunk> = VecDeque::new();\n\n        let Some(style) = self.style.as_ref() else {\n            return;\n        };\n\n        for chunk in chunks {\n            let highlight = chunk\n                .syntax_highlight_id\n                .and_then(|id| id.name(&style.syntax));\n            let mut chunk_lines = chunk.text.split('\n').peekable();\n            while let Some(text) = chunk_lines.next() {\n                let mut merged_with_last_token = false;\n                if let Some(last_token) = line.back_mut() {\n                    if last_token.highlight == highlight {\n                        last_token.text.push_str(text);\n                        merged_with_last_token = true;\n                    }\n                }\n\n                if !merged_with_last_token {\n                    line.push_back(Chunk {\n                        text: text.into(),\n                        highlight,\n                    });\n                }\n\n                if chunk_lines.peek().is_some() {\n                    if line.len() > 1 && line.front().unwrap().text.is_empty() {\n                        line.pop_front();\n                    }\n                    if line.len() > 1 && line.back().unwrap().text.is_empty() {\n                        line.pop_back();\n                    }\n\n                    lines.push(mem::take(&mut line));\n                }\n            }\n        }\n\n        let Some(lines) = serde_json::to_string_pretty(&lines).log_err() else {\n            return;\n        };\n        cx.write_to_clipboard(ClipboardItem::new_string(lines));\n    }\n\n    pub fn open_context_menu(\n        &mut self,\n        _: &OpenContextMenu,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        self.request_autoscroll(Autoscroll::newest(), cx);\n        let position = self.selections.newest_display(cx).start;\n        mouse_context_menu::deploy_context_menu(self, None, position, window, cx);\n    }\n\n    pub fn inlay_hint_cache(&self) -> &InlayHintCache {\n        &self.inlay_hint_cache\n    }\n\n    pub fn replay_insert_event(\n        &mut self,\n        text: &str,\n        relative_utf16_range: Option<Range<isize>>,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if !self.input_enabled {\n            cx.emit(EditorEvent::InputIgnored { text: text.into() });\n            return;\n        }\n        if let Some(relative_utf16_range) = relative_utf16_range {\n            let selections = self.selections.all::<OffsetUtf16>(cx);\n            self.change_selections(None, window, cx, |s| {\n                let new_ranges = selections.into_iter().map(|range| {\n                    let start = OffsetUtf16(\n                        range\n                            .head()\n                            .0\n                            .saturating_add_signed(relative_utf16_range.start),\n                    );\n                    let end = OffsetUtf16(\n                        range\n                            .head()\n                            .0\n                            .saturating_add_signed(relative_utf16_range.end),\n                    );\n                    start..end\n                });\n                s.select_ranges(new_ranges);\n            });\n        }\n\n        self.handle_input(text, window, cx);\n    }\n\n    pub fn supports_inlay_hints(&self, cx: &mut App) -> bool {\n        let Some(provider) = self.semantics_provider.as_ref() else {\n            return false;\n        };\n\n        let mut supports = false;\n        self.buffer().update(cx, |this, cx| {\n            this.for_each_buffer(|buffer| {\n                supports |= provider.supports_inlay_hints(buffer, cx);\n            });\n        });\n\n        supports\n    }\n\n    pub fn is_focused(&self, window: &Window) -> bool {\n        self.focus_handle.is_focused(window)\n    }\n\n    fn handle_focus(&mut self, window: &mut Window, cx: &mut Context<Self>) {\n        cx.emit(EditorEvent::Focused);\n\n        if let Some(descendant) = self\n            .last_focused_descendant\n            .take()\n            .and_then(|descendant| descendant.upgrade())\n        {\n            window.focus(&descendant);\n        } else {\n            if let Some(blame) = self.blame.as_ref() {\n                blame.update(cx, GitBlame::focus)\n            }\n\n            self.blink_manager.update(cx, BlinkManager::enable);\n            self.show_cursor_names(window, cx);\n            self.buffer.update(cx, |buffer, cx| {\n                buffer.finalize_last_transaction(cx);\n                if self.leader_peer_id.is_none() {\n                    buffer.set_active_selections(\n                        &self.selections.disjoint_anchors(),\n                        self.selections.line_mode,\n                        self.cursor_shape,\n                        cx,\n                    );\n                }\n            });\n        }\n    }\n\n    fn handle_focus_in(&mut self, _: &mut Window, cx: &mut Context<Self>) {\n        cx.emit(EditorEvent::FocusedIn)\n    }\n\n    fn handle_focus_out(\n        &mut self,\n        event: FocusOutEvent,\n        _window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if event.blurred != self.focus_handle {\n            self.last_focused_descendant = Some(event.blurred);\n        }\n        self.refresh_inlay_hints(InlayHintRefreshReason::ModifiersChanged(false), cx);\n    }\n\n    pub fn handle_blur(&mut self, window: &mut Window, cx: &mut Context<Self>) {\n        self.blink_manager.update(cx, BlinkManager::disable);\n        self.buffer\n            .update(cx, |buffer, cx| buffer.remove_active_selections(cx));\n\n        if let Some(blame) = self.blame.as_ref() {\n            blame.update(cx, GitBlame::blur)\n        }\n        if !self.hover_state.focused(window, cx) {\n            hide_hover(self, cx);\n        }\n        if !self\n            .context_menu\n            .borrow()\n            .as_ref()\n            .is_some_and(|context_menu| context_menu.focused(window, cx))\n        {\n            self.hide_context_menu(window, cx);\n        }\n        self.discard_inline_completion(false, cx);\n        cx.emit(EditorEvent::Blurred);\n        cx.notify();\n    }\n\n    pub fn register_action<A: Action>(\n        &mut self,\n        listener: impl Fn(&A, &mut Window, &mut App) + 'static,\n    ) -> Subscription {\n        let id = self.next_editor_action_id.post_inc();\n        let listener = Arc::new(listener);\n        self.editor_actions.borrow_mut().insert(\n            id,\n            Box::new(move |window, _| {\n                let listener = listener.clone();\n                window.on_action(TypeId::of::<A>(), move |action, phase, window, cx| {\n                    let action = action.downcast_ref().unwrap();\n                    if phase == DispatchPhase::Bubble {\n                        listener(action, window, cx)\n                    }\n                })\n            }),\n        );\n\n        let editor_actions = self.editor_actions.clone();\n        Subscription::new(move || {\n            editor_actions.borrow_mut().remove(&id);\n        })\n    }\n\n    pub fn file_header_size(&self) -> u32 {\n        FILE_HEADER_HEIGHT\n    }\n\n    pub fn restore(\n        &mut self,\n        revert_changes: HashMap<BufferId, Vec<(Range<text::Anchor>, Rope)>>,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let workspace = self.workspace();\n        let project = self.project.as_ref();\n        let save_tasks = self.buffer().update(cx, |multi_buffer, cx| {\n            let mut tasks = Vec::new();\n            for (buffer_id, changes) in revert_changes {\n                if let Some(buffer) = multi_buffer.buffer(buffer_id) {\n                    buffer.update(cx, |buffer, cx| {\n                        buffer.edit(\n                            changes\n                                .into_iter()\n                                .map(|(range, text)| (range, text.to_string())),\n                            None,\n                            cx,\n                        );\n                    });\n\n                    if let Some(project) =\n                        project.filter(|_| multi_buffer.all_diff_hunks_expanded())\n                    {\n                        project.update(cx, |project, cx| {\n                            tasks.push((buffer.clone(), project.save_buffer(buffer, cx)));\n                        })\n                    }\n                }\n            }\n            tasks\n        });\n        cx.spawn_in(window, |_, mut cx| async move {\n            for (buffer, task) in save_tasks {\n                let result = task.await;\n                if result.is_err() {\n                    let Some(path) = buffer\n                        .read_with(&cx, |buffer, cx| buffer.project_path(cx))\n                        .ok()\n                    else {\n                        continue;\n                    };\n                    if let Some((workspace, path)) = workspace.as_ref().zip(path) {\n                        let Some(task) = cx\n                            .update_window_entity(&workspace, |workspace, window, cx| {\n                                workspace\n                                    .open_path_preview(path, None, false, false, false, window, cx)\n                            })\n                            .ok()\n                        else {\n                            continue;\n                        };\n                        task.await.log_err();\n                    }\n                }\n            }\n        })\n        .detach();\n        self.change_selections(None, window, cx, |selections| selections.refresh());\n    }\n\n    pub fn to_pixel_point(\n        &self,\n        source: multi_buffer::Anchor,\n        editor_snapshot: &EditorSnapshot,\n        window: &mut Window,\n    ) -> Option<gpui::Point<Pixels>> {\n        let source_point = source.to_display_point(editor_snapshot);\n        self.display_to_pixel_point(source_point, editor_snapshot, window)\n    }\n\n    pub fn display_to_pixel_point(\n        &self,\n        source: DisplayPoint,\n        editor_snapshot: &EditorSnapshot,\n        window: &mut Window,\n    ) -> Option<gpui::Point<Pixels>> {\n        let line_height = self.style()?.text.line_height_in_pixels(window.rem_size());\n        let text_layout_details = self.text_layout_details(window);\n        let scroll_top = text_layout_details\n            .scroll_anchor\n            .scroll_position(editor_snapshot)\n            .y;\n\n        if source.row().as_f32() < scroll_top.floor() {\n            return None;\n        }\n        let source_x = editor_snapshot.x_for_display_point(source, &text_layout_details);\n        let source_y = line_height * (source.row().as_f32() - scroll_top);\n        Some(gpui::Point::new(source_x, source_y))\n    }\n\n    pub fn has_visible_completions_menu(&self) -> bool {\n        !self.edit_prediction_preview_is_active()\n            && self.context_menu.borrow().as_ref().map_or(false, |menu| {\n                menu.visible() && matches!(menu, CodeContextMenu::Completions(_))\n            })\n    }\n\n    pub fn register_addon<T: Addon>(&mut self, instance: T) {\n        self.addons\n            .insert(std::any::TypeId::of::<T>(), Box::new(instance));\n    }\n\n    pub fn unregister_addon<T: Addon>(&mut self) {\n        self.addons.remove(&std::any::TypeId::of::<T>());\n    }\n\n    pub fn addon<T: Addon>(&self) -> Option<&T> {\n        let type_id = std::any::TypeId::of::<T>();\n        self.addons\n            .get(&type_id)\n            .and_then(|item| item.to_any().downcast_ref::<T>())\n    }\n\n    fn character_size(&self, window: &mut Window) -> gpui::Size<Pixels> {\n        let text_layout_details = self.text_layout_details(window);\n        let style = &text_layout_details.editor_style;\n        let font_id = window.text_system().resolve_font(&style.text.font());\n        let font_size = style.text.font_size.to_pixels(window.rem_size());\n        let line_height = style.text.line_height_in_pixels(window.rem_size());\n        let em_width = window.text_system().em_width(font_id, font_size).unwrap();\n\n        gpui::Size::new(em_width, line_height)\n    }\n\n    pub fn wait_for_diff_to_load(&self) -> Option<Shared<Task<()>>> {\n        self.load_diff_task.clone()\n    }\n\n    fn read_selections_from_db(\n        &mut self,\n        item_id: u64,\n        workspace_id: WorkspaceId,\n        window: &mut Window,\n        cx: &mut Context<Editor>,\n    ) {\n        if !self.is_singleton(cx)\n            || WorkspaceSettings::get(None, cx).restore_on_startup == RestoreOnStartupBehavior::None\n        {\n            return;\n        }\n        let Some(selections) = DB.get_editor_selections(item_id, workspace_id).log_err() else {\n            return;\n        };\n        if selections.is_empty() {\n            return;\n        }\n\n        let snapshot = self.buffer.read(cx).snapshot(cx);\n        self.change_selections(None, window, cx, |s| {\n            s.select_ranges(selections.into_iter().map(|(start, end)| {\n                snapshot.clip_offset(start, Bias::Left)..snapshot.clip_offset(end, Bias::Right)\n            }));\n        });\n    }\n}\n\nfn insert_extra_newline_brackets(\n    buffer: &MultiBufferSnapshot,\n    range: Range<usize>,\n    language: &language::LanguageScope,\n) -> bool {\n    let leading_whitespace_len = buffer\n        .reversed_chars_at(range.start)\n        .take_while(|c| c.is_whitespace() && *c != '\n')\n        .map(|c| c.len_utf8())\n        .sum::<usize>();\n    let trailing_whitespace_len = buffer\n        .chars_at(range.end)\n        .take_while(|c| c.is_whitespace() && *c != '\n')\n        .map(|c| c.len_utf8())\n        .sum::<usize>();\n    let range = range.start - leading_whitespace_len..range.end + trailing_whitespace_len;\n\n    language.brackets().any(|(pair, enabled)| {\n        let pair_start = pair.start.trim_end();\n        let pair_end = pair.end.trim_start();\n\n        enabled\n            && pair.newline\n            && buffer.contains_str_at(range.end, pair_end)\n            && buffer.contains_str_at(range.start.saturating_sub(pair_start.len()), pair_start)\n    })\n}\n\nfn insert_extra_newline_tree_sitter(buffer: &MultiBufferSnapshot, range: Range<usize>) -> bool {\n    let (buffer, range) = match buffer.range_to_buffer_ranges(range).as_slice() {\n        [(buffer, range, _)] => (*buffer, range.clone()),\n        _ => return false,\n    };\n    let pair = {\n        let mut result: Option<BracketMatch> = None;\n\n        for pair in buffer\n            .all_bracket_ranges(range.clone())\n            .filter(move |pair| {\n                pair.open_range.start <= range.start && pair.close_range.end >= range.end\n            })\n        {\n            let len = pair.close_range.end - pair.open_range.start;\n\n            if let Some(existing) = &result {\n                let existing_len = existing.close_range.end - existing.open_range.start;\n                if len > existing_len {\n                    continue;\n                }\n            }\n\n            result = Some(pair);\n        }\n\n        result\n    };\n    let Some(pair) = pair else {\n        return false;\n    };\n    pair.newline_only\n        && buffer\n            .chars_for_range(pair.open_range.end..range.start)\n            .chain(buffer.chars_for_range(range.end..pair.close_range.start))\n            .all(|c| c.is_whitespace() && c != '\n')\n}\n\nfn get_uncommitted_diff_for_buffer(\n    project: &Entity<Project>,\n    buffers: impl IntoIterator<Item = Entity<Buffer>>,\n    buffer: Entity<MultiBuffer>,\n    cx: &mut App,\n) -> Task<()> {\n    let mut tasks = Vec::new();\n    project.update(cx, |project, cx| {\n        for buffer in buffers {\n            tasks.push(project.open_uncommitted_diff(buffer.clone(), cx))\n        }\n    });\n    cx.spawn(|mut cx| async move {\n        let diffs = future::join_all(tasks).await;\n        buffer\n            .update(&mut cx, |buffer, cx| {\n                for diff in diffs.into_iter().flatten() {\n                    buffer.add_diff(diff, cx);\n                }\n            })\n            .ok();\n    })\n}\n\nfn char_len_with_expanded_tabs(offset: usize, text: &str, tab_size: NonZeroU32) -> usize {\n    let tab_size = tab_size.get() as usize;\n    let mut width = offset;\n\n    for ch in text.chars() {\n        width += if ch == '\\t' {\n            tab_size - (width % tab_size)\n        } else {\n            1\n        };\n    }\n\n    width - offset\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_string_size_with_expanded_tabs() {\n        let nz = |val| NonZeroU32::new(val).unwrap();\n        assert_eq!(char_len_with_expanded_tabs(0, ": "",
    ", nz(4)), 0);\n        assert_eq!(char_len_with_expanded_tabs(0, ": "",
    ", nz(4)), 5);\n        assert_eq!(char_len_with_expanded_tabs(0, ": "",
    ", nz(4)), 9);\n        assert_eq!(char_len_with_expanded_tabs(0, ": "",
    ", nz(4)), 6);\n        assert_eq!(char_len_with_expanded_tabs(0, ": "",
    ", nz(4)), 8);\n        assert_eq!(char_len_with_expanded_tabs(0, ": "",
    ", nz(8)), 16);\n        assert_eq!(char_len_with_expanded_tabs(0, ": "",
    ", nz(8)), 8);\n        assert_eq!(char_len_with_expanded_tabs(7, ": "",
    ", nz(8)), 9);\n    }\n}\n\n/// Tokenizes a string into runs of text that should stick together, or that is whitespace.\nstruct WordBreakingTokenizer<'a> {\n    input: &'a str,\n}\n\nimpl<'a> WordBreakingTokenizer<'a> {\n    fn new(input: &'a str) -> Self {\n        Self { input }\n    }\n}\n\nfn is_char_ideographic(ch: char) -> bool {\n    use unicode_script::Script::*;\n    use unicode_script::UnicodeScript;\n    matches!(ch.script(), Han | Tangut | Yi)\n}\n\nfn is_grapheme_ideographic(text: &str) -> bool {\n    text.chars().any(is_char_ideographic)\n}\n\nfn is_grapheme_whitespace(text: &str) -> bool {\n    text.chars().any(|x| x.is_whitespace())\n}\n\nfn should_stay_with_preceding_ideograph(text: &str) -> bool {\n    text.chars().next().map_or(false, |ch| {\n        matches!(ch, '。' | '、' | '，' | '？' | '！' | '：' | '；' | '…')\n    })\n}\n\n#[derive(PartialEq, Eq, Debug, Clone, Copy)]\nstruct WordBreakToken<'a> {\n    token: &'a str,\n    grapheme_len: usize,\n    is_whitespace: bool,\n}\n\nimpl<'a> Iterator for WordBreakingTokenizer<'a> {\n    /// Yields a span, the count of graphemes in the token, and whether it was\n    /// whitespace. Note that it also breaks at word boundaries.\n    type Item = WordBreakToken<'a>;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        use unicode_segmentation::UnicodeSegmentation;\n        if self.input.is_empty() {\n            return None;\n        }\n\n        let mut iter = self.input.graphemes(true).peekable();\n        let mut offset = 0;\n        let mut graphemes = 0;\n        if let Some(first_grapheme) = iter.next() {\n            let is_whitespace = is_grapheme_whitespace(first_grapheme);\n            offset += first_grapheme.len();\n            graphemes += 1;\n            if is_grapheme_ideographic(first_grapheme) && !is_whitespace {\n                if let Some(grapheme) = iter.peek().copied() {\n                    if should_stay_with_preceding_ideograph(grapheme) {\n                        offset += grapheme.len();\n                        graphemes += 1;\n                    }\n                }\n            } else {\n                let mut words = self.input[offset..].split_word_bound_indices().peekable();\n                let mut next_word_bound = words.peek().copied();\n                if next_word_bound.map_or(false, |(i, _)| i == 0) {\n                    next_word_bound = words.next();\n                }\n                while let Some(grapheme) = iter.peek().copied() {\n                    if next_word_bound.map_or(false, |(i, _)| i == offset) {\n                        break;\n                    };\n                    if is_grapheme_whitespace(grapheme) != is_whitespace {\n                        break;\n                    };\n                    offset += grapheme.len();\n                    graphemes += 1;\n                    iter.next();\n                }\n            }\n            let token = &self.input[..offset];\n            self.input = &self.input[offset..];\n            if is_whitespace {\n                Some(WordBreakToken {\n                    token: ": "",
    ",\n                    grapheme_len: 1,\n                    is_whitespace: true,\n                })\n            } else {\n                Some(WordBreakToken {\n                    token,\n                    grapheme_len: graphemes,\n                    is_whitespace: false,\n                })\n            }\n        } else {\n            None\n        }\n    }\n}\n\n#[test]\nfn test_word_breaking_tokenizer() {\n    let tests: &[(&str, &[(&str, usize, bool)])] = &[\n        (": "",
    ", &[]),\n        (": "",
    ", &[(": "",
    ", 1, true)]),\n        (": "",
    ", 1, false)]),\n        (": "",
    ", 2, false)]),\n        (\n            ": "",
    ",\n            &[\n                (": "",
    ", 1, false),\n                (": "",
    ", 2, false),\n                (": "",
    ", 1, false),\n            ],\n        ),\n        (\n            ": "",
    ",\n            &[(": "",
    ", 5, false), (": "",
    ", 1, true), (": "",
    ", 5, false)],\n        ),\n        (\n            ": "",
    ", 6, false), (": "",
    ", 1, true),\n                (": "",
    ", 5, false),\n                (": "",
    ", 5, false),\n            ],\n        ),\n        (\n            ": "",
    ", 1, false),\n            ],\n        ),\n        (": "",
    ", 6, false)]),\n    ];\n\n    for (input, result) in tests {\n        assert_eq!(\n            WordBreakingTokenizer::new(input).collect::<Vec<_>>(),\n            result\n                .iter()\n                .copied()\n                .map(|(token, grapheme_len, is_whitespace)| WordBreakToken {\n                    token,\n                    grapheme_len,\n                    is_whitespace,\n                })\n                .collect::<Vec<_>>()\n        );\n    }\n}\n\nfn wrap_with_prefix(\n    line_prefix: String,\n    unwrapped_text: String,\n    wrap_column: usize,\n    tab_size: NonZeroU32,\n) -> String {\n    let line_prefix_len = char_len_with_expanded_tabs(0, &line_prefix, tab_size);\n    let mut wrapped_text = String::new();\n    let mut current_line = line_prefix.clone();\n\n    let tokenizer = WordBreakingTokenizer::new(&unwrapped_text);\n    let mut current_line_len = line_prefix_len;\n    for WordBreakToken {\n        token,\n        grapheme_len,\n        is_whitespace,\n    } in tokenizer\n    {\n        if current_line_len + grapheme_len > wrap_column && current_line_len != line_prefix_len {\n            wrapped_text.push_str(current_line.trim_end());\n            wrapped_text.push('\n');\n            current_line.truncate(line_prefix.len());\n            current_line_len = line_prefix_len;\n            if !is_whitespace {\n                current_line.push_str(token);\n                current_line_len += grapheme_len;\n            }\n        } else if !is_whitespace {\n            current_line.push_str(token);\n            current_line_len += grapheme_len;\n        } else if current_line_len != line_prefix_len {\n            current_line.push(' ');\n            current_line_len += 1;\n        }\n    }\n\n    if !current_line.is_empty() {\n        wrapped_text.push_str(&current_line);\n    }\n    wrapped_text\n}\n\n#[test]\nfn test_wrap_with_prefix() {\n    assert_eq!(\n        wrap_with_prefix(\n            ": "",
    ".to_string(),\n            ": "",
    ".to_string(),\n            4,\n            NonZeroU32::new(4).unwrap()\n        ),\n        ": "",
    "\n    );\n    assert_eq!(\n        wrap_with_prefix(\n            ": "",
    ".to_string(),\n            8,\n            NonZeroU32::new(4).unwrap()\n        ),\n        ": "",
    ".to_string(),\n            12,\n            NonZeroU32::new(4).unwrap()\n        ),\n        ": "",
    "\n    );\n    assert_eq!(\n        wrap_with_prefix(\n            String::new(),\n            ": "",
    ".to_string(),\n            3,\n            NonZeroU32::new(4).unwrap()\n        ),\n        ": "",
    "\n    );\n}\n\npub trait CollaborationHub {\n    fn collaborators<'a>(&self, cx: &'a App) -> &'a HashMap<PeerId, Collaborator>;\n    fn user_participant_indices<'a>(&self, cx: &'a App) -> &'a HashMap<u64, ParticipantIndex>;\n    fn user_names(&self, cx: &App) -> HashMap<u64, SharedString>;\n}\n\nimpl CollaborationHub for Entity<Project> {\n    fn collaborators<'a>(&self, cx: &'a App) -> &'a HashMap<PeerId, Collaborator> {\n        self.read(cx).collaborators()\n    }\n\n    fn user_participant_indices<'a>(&self, cx: &'a App) -> &'a HashMap<u64, ParticipantIndex> {\n        self.read(cx).user_store().read(cx).participant_indices()\n    }\n\n    fn user_names(&self, cx: &App) -> HashMap<u64, SharedString> {\n        let this = self.read(cx);\n        let user_ids = this.collaborators().values().map(|c| c.user_id);\n        this.user_store().read_with(cx, |user_store, cx| {\n            user_store.participant_names(user_ids, cx)\n        })\n    }\n}\n\npub trait SemanticsProvider {\n    fn hover(\n        &self,\n        buffer: &Entity<Buffer>,\n        position: text::Anchor,\n        cx: &mut App,\n    ) -> Option<Task<Vec<project::Hover>>>;\n\n    fn inlay_hints(\n        &self,\n        buffer_handle: Entity<Buffer>,\n        range: Range<text::Anchor>,\n        cx: &mut App,\n    ) -> Option<Task<anyhow::Result<Vec<InlayHint>>>>;\n\n    fn resolve_inlay_hint(\n        &self,\n        hint: InlayHint,\n        buffer_handle: Entity<Buffer>,\n        server_id: LanguageServerId,\n        cx: &mut App,\n    ) -> Option<Task<anyhow::Result<InlayHint>>>;\n\n    fn supports_inlay_hints(&self, buffer: &Entity<Buffer>, cx: &mut App) -> bool;\n\n    fn document_highlights(\n        &self,\n        buffer: &Entity<Buffer>,\n        position: text::Anchor,\n        cx: &mut App,\n    ) -> Option<Task<Result<Vec<DocumentHighlight>>>>;\n\n    fn definitions(\n        &self,\n        buffer: &Entity<Buffer>,\n        position: text::Anchor,\n        kind: GotoDefinitionKind,\n        cx: &mut App,\n    ) -> Option<Task<Result<Vec<LocationLink>>>>;\n\n    fn range_for_rename(\n        &self,\n        buffer: &Entity<Buffer>,\n        position: text::Anchor,\n        cx: &mut App,\n    ) -> Option<Task<Result<Option<Range<text::Anchor>>>>>;\n\n    fn perform_rename(\n        &self,\n        buffer: &Entity<Buffer>,\n        position: text::Anchor,\n        new_name: String,\n        cx: &mut App,\n    ) -> Option<Task<Result<ProjectTransaction>>>;\n}\n\npub trait CompletionProvider {\n    fn completions(\n        &self,\n        buffer: &Entity<Buffer>,\n        buffer_position: text::Anchor,\n        trigger: CompletionContext,\n        window: &mut Window,\n        cx: &mut Context<Editor>,\n    ) -> Task<Result<Vec<Completion>>>;\n\n    fn resolve_completions(\n        &self,\n        buffer: Entity<Buffer>,\n        completion_indices: Vec<usize>,\n        completions: Rc<RefCell<Box<[Completion]>>>,\n        cx: &mut Context<Editor>,\n    ) -> Task<Result<bool>>;\n\n    fn apply_additional_edits_for_completion(\n        &self,\n        _buffer: Entity<Buffer>,\n        _completions: Rc<RefCell<Box<[Completion]>>>,\n        _completion_index: usize,\n        _push_to_history: bool,\n        _cx: &mut Context<Editor>,\n    ) -> Task<Result<Option<language::Transaction>>> {\n        Task::ready(Ok(None))\n    }\n\n    fn is_completion_trigger(\n        &self,\n        buffer: &Entity<Buffer>,\n        position: language::Anchor,\n        text: &str,\n        trigger_in_words: bool,\n        cx: &mut Context<Editor>,\n    ) -> bool;\n\n    fn sort_completions(&self) -> bool {\n        true\n    }\n}\n\npub trait CodeActionProvider {\n    fn id(&self) -> Arc<str>;\n\n    fn code_actions(\n        &self,\n        buffer: &Entity<Buffer>,\n        range: Range<text::Anchor>,\n        window: &mut Window,\n        cx: &mut App,\n    ) -> Task<Result<Vec<CodeAction>>>;\n\n    fn apply_code_action(\n        &self,\n        buffer_handle: Entity<Buffer>,\n        action: CodeAction,\n        excerpt_id: ExcerptId,\n        push_to_history: bool,\n        window: &mut Window,\n        cx: &mut App,\n    ) -> Task<Result<ProjectTransaction>>;\n}\n\nimpl CodeActionProvider for Entity<Project> {\n    fn id(&self) -> Arc<str> {\n        ": "",
    ".into()\n    }\n\n    fn code_actions(\n        &self,\n        buffer: &Entity<Buffer>,\n        range: Range<text::Anchor>,\n        _window: &mut Window,\n        cx: &mut App,\n    ) -> Task<Result<Vec<CodeAction>>> {\n        self.update(cx, |project, cx| {\n            project.code_actions(buffer, range, None, cx)\n        })\n    }\n\n    fn apply_code_action(\n        &self,\n        buffer_handle: Entity<Buffer>,\n        action: CodeAction,\n        _excerpt_id: ExcerptId,\n        push_to_history: bool,\n        _window: &mut Window,\n        cx: &mut App,\n    ) -> Task<Result<ProjectTransaction>> {\n        self.update(cx, |project, cx| {\n            project.apply_code_action(buffer_handle, action, push_to_history, cx)\n        })\n    }\n}\n\nfn snippet_completions(\n    project: &Project,\n    buffer: &Entity<Buffer>,\n    buffer_position: text::Anchor,\n    cx: &mut App,\n) -> Task<Result<Vec<Completion>>> {\n    let language = buffer.read(cx).language_at(buffer_position);\n    let language_name = language.as_ref().map(|language| language.lsp_id());\n    let snippet_store = project.snippets().read(cx);\n    let snippets = snippet_store.snippets_for(language_name, cx);\n\n    if snippets.is_empty() {\n        return Task::ready(Ok(vec![]));\n    }\n    let snapshot = buffer.read(cx).text_snapshot();\n    let chars: String = snapshot\n        .reversed_chars_for_range(text::Anchor::MIN..buffer_position)\n        .collect();\n\n    let scope = language.map(|language| language.default_scope());\n    let executor = cx.background_executor().clone();\n\n    cx.background_spawn(async move {\n        let classifier = CharClassifier::new(scope).for_completion(true);\n        let mut last_word = chars\n            .chars()\n            .take_while(|c| classifier.is_word(*c))\n            .collect::<String>();\n        last_word = last_word.chars().rev().collect();\n\n        if last_word.is_empty() {\n            return Ok(vec![]);\n        }\n\n        let as_offset = text::ToOffset::to_offset(&buffer_position, &snapshot);\n        let to_lsp = |point: &text::Anchor| {\n            let end = text::ToPointUtf16::to_point_utf16(point, &snapshot);\n            point_to_lsp(end)\n        };\n        let lsp_end = to_lsp(&buffer_position);\n\n        let candidates = snippets\n            .iter()\n            .enumerate()\n            .flat_map(|(ix, snippet)| {\n                snippet\n                    .prefix\n                    .iter()\n                    .map(move |prefix| StringMatchCandidate::new(ix, &prefix))\n            })\n            .collect::<Vec<StringMatchCandidate>>();\n\n        let mut matches = fuzzy::match_strings(\n            &candidates,\n            &last_word,\n            last_word.chars().any(|c| c.is_uppercase()),\n            100,\n            &Default::default(),\n            executor,\n        )\n        .await;\n\n        // Remove all candidates where the query's start does not match the start of any word in the candidate\n        if let Some(query_start) = last_word.chars().next() {\n            matches.retain(|string_match| {\n                split_words(&string_match.string).any(|word| {\n                    // Check that the first codepoint of the word as lowercase matches the first\n                    // codepoint of the query as lowercase\n                    word.chars()\n                        .flat_map(|codepoint| codepoint.to_lowercase())\n                        .zip(query_start.to_lowercase())\n                        .all(|(word_cp, query_cp)| word_cp == query_cp)\n                })\n            });\n        }\n\n        let matched_strings = matches\n            .into_iter()\n            .map(|m| m.string)\n            .collect::<HashSet<_>>();\n\n        let result: Vec<Completion> = snippets\n            .into_iter()\n            .filter_map(|snippet| {\n                let matching_prefix = snippet\n                    .prefix\n                    .iter()\n                    .find(|prefix| matched_strings.contains(*prefix))?;\n                let start = as_offset - last_word.len();\n                let start = snapshot.anchor_before(start);\n                let range = start..buffer_position;\n                let lsp_start = to_lsp(&start);\n                let lsp_range = lsp::Range {\n                    start: lsp_start,\n                    end: lsp_end,\n                };\n                Some(Completion {\n                    old_range: range,\n                    new_text: snippet.body.clone(),\n                    source: CompletionSource::Lsp {\n                        server_id: LanguageServerId(usize::MAX),\n                        resolved: true,\n                        lsp_completion: Box::new(lsp::CompletionItem {\n                            label: snippet.prefix.first().unwrap().clone(),\n                            kind: Some(CompletionItemKind::SNIPPET),\n                            label_details: snippet.description.as_ref().map(|description| {\n                                lsp::CompletionItemLabelDetails {\n                                    detail: Some(description.clone()),\n                                    description: None,\n                                }\n                            }),\n                            insert_text_format: Some(InsertTextFormat::SNIPPET),\n                            text_edit: Some(lsp::CompletionTextEdit::InsertAndReplace(\n                                lsp::InsertReplaceEdit {\n                                    new_text: snippet.body.clone(),\n                                    insert: lsp_range,\n                                    replace: lsp_range,\n                                },\n                            )),\n                            filter_text: Some(snippet.body.clone()),\n                            sort_text: Some(char::MAX.to_string()),\n                            ..lsp::CompletionItem::default()\n                        }),\n                        lsp_defaults: None,\n                    },\n                    label: CodeLabel {\n                        text: matching_prefix.clone(),\n                        runs: Vec::new(),\n                        filter_range: 0..matching_prefix.len(),\n                    },\n                    documentation: snippet\n                        .description\n                        .clone()\n                        .map(|description| CompletionDocumentation::SingleLine(description.into())),\n                    confirm: None,\n                })\n            })\n            .collect();\n\n        Ok(result)\n    })\n}\n\nimpl CompletionProvider for Entity<Project> {\n    fn completions(\n        &self,\n        buffer: &Entity<Buffer>,\n        buffer_position: text::Anchor,\n        options: CompletionContext,\n        _window: &mut Window,\n        cx: &mut Context<Editor>,\n    ) -> Task<Result<Vec<Completion>>> {\n        self.update(cx, |project, cx| {\n            let snippets = snippet_completions(project, buffer, buffer_position, cx);\n            let project_completions = project.completions(buffer, buffer_position, options, cx);\n            cx.background_spawn(async move {\n                let mut completions = project_completions.await?;\n                let snippets_completions = snippets.await?;\n                completions.extend(snippets_completions);\n                Ok(completions)\n            })\n        })\n    }\n\n    fn resolve_completions(\n        &self,\n        buffer: Entity<Buffer>,\n        completion_indices: Vec<usize>,\n        completions: Rc<RefCell<Box<[Completion]>>>,\n        cx: &mut Context<Editor>,\n    ) -> Task<Result<bool>> {\n        self.update(cx, |project, cx| {\n            project.lsp_store().update(cx, |lsp_store, cx| {\n                lsp_store.resolve_completions(buffer, completion_indices, completions, cx)\n            })\n        })\n    }\n\n    fn apply_additional_edits_for_completion(\n        &self,\n        buffer: Entity<Buffer>,\n        completions: Rc<RefCell<Box<[Completion]>>>,\n        completion_index: usize,\n        push_to_history: bool,\n        cx: &mut Context<Editor>,\n    ) -> Task<Result<Option<language::Transaction>>> {\n        self.update(cx, |project, cx| {\n            project.lsp_store().update(cx, |lsp_store, cx| {\n                lsp_store.apply_additional_edits_for_completion(\n                    buffer,\n                    completions,\n                    completion_index,\n                    push_to_history,\n                    cx,\n                )\n            })\n        })\n    }\n\n    fn is_completion_trigger(\n        &self,\n        buffer: &Entity<Buffer>,\n        position: language::Anchor,\n        text: &str,\n        trigger_in_words: bool,\n        cx: &mut Context<Editor>,\n    ) -> bool {\n        let mut chars = text.chars();\n        let char = if let Some(char) = chars.next() {\n            char\n        } else {\n            return false;\n        };\n        if chars.next().is_some() {\n            return false;\n        }\n\n        let buffer = buffer.read(cx);\n        let snapshot = buffer.snapshot();\n        if !snapshot.settings_at(position, cx).show_completions_on_input {\n            return false;\n        }\n        let classifier = snapshot.char_classifier_at(position).for_completion(true);\n        if trigger_in_words && classifier.is_word(char) {\n            return true;\n        }\n\n        buffer.completion_triggers().contains(text)\n    }\n}\n\nimpl SemanticsProvider for Entity<Project> {\n    fn hover(\n        &self,\n        buffer: &Entity<Buffer>,\n        position: text::Anchor,\n        cx: &mut App,\n    ) -> Option<Task<Vec<project::Hover>>> {\n        Some(self.update(cx, |project, cx| project.hover(buffer, position, cx)))\n    }\n\n    fn document_highlights(\n        &self,\n        buffer: &Entity<Buffer>,\n        position: text::Anchor,\n        cx: &mut App,\n    ) -> Option<Task<Result<Vec<DocumentHighlight>>>> {\n        Some(self.update(cx, |project, cx| {\n            project.document_highlights(buffer, position, cx)\n        }))\n    }\n\n    fn definitions(\n        &self,\n        buffer: &Entity<Buffer>,\n        position: text::Anchor,\n        kind: GotoDefinitionKind,\n        cx: &mut App,\n    ) -> Option<Task<Result<Vec<LocationLink>>>> {\n        Some(self.update(cx, |project, cx| match kind {\n            GotoDefinitionKind::Symbol => project.definition(&buffer, position, cx),\n            GotoDefinitionKind::Declaration => project.declaration(&buffer, position, cx),\n            GotoDefinitionKind::Type => project.type_definition(&buffer, position, cx),\n            GotoDefinitionKind::Implementation => project.implementation(&buffer, position, cx),\n        }))\n    }\n\n    fn supports_inlay_hints(&self, buffer: &Entity<Buffer>, cx: &mut App) -> bool {\n        // TODO: make this work for remote projects\n        self.update(cx, |this, cx| {\n            buffer.update(cx, |buffer, cx| {\n                this.any_language_server_supports_inlay_hints(buffer, cx)\n            })\n        })\n    }\n\n    fn inlay_hints(\n        &self,\n        buffer_handle: Entity<Buffer>,\n        range: Range<text::Anchor>,\n        cx: &mut App,\n    ) -> Option<Task<anyhow::Result<Vec<InlayHint>>>> {\n        Some(self.update(cx, |project, cx| {\n            project.inlay_hints(buffer_handle, range, cx)\n        }))\n    }\n\n    fn resolve_inlay_hint(\n        &self,\n        hint: InlayHint,\n        buffer_handle: Entity<Buffer>,\n        server_id: LanguageServerId,\n        cx: &mut App,\n    ) -> Option<Task<anyhow::Result<InlayHint>>> {\n        Some(self.update(cx, |project, cx| {\n            project.resolve_inlay_hint(hint, buffer_handle, server_id, cx)\n        }))\n    }\n\n    fn range_for_rename(\n        &self,\n        buffer: &Entity<Buffer>,\n        position: text::Anchor,\n        cx: &mut App,\n    ) -> Option<Task<Result<Option<Range<text::Anchor>>>>> {\n        Some(self.update(cx, |project, cx| {\n            let buffer = buffer.clone();\n            let task = project.prepare_rename(buffer.clone(), position, cx);\n            cx.spawn(|_, mut cx| async move {\n                Ok(match task.await? {\n                    PrepareRenameResponse::Success(range) => Some(range),\n                    PrepareRenameResponse::InvalidPosition => None,\n                    PrepareRenameResponse::OnlyUnpreparedRenameSupported => {\n                        // Fallback on using TreeSitter info to determine identifier range\n                        buffer.update(&mut cx, |buffer, _| {\n                            let snapshot = buffer.snapshot();\n                            let (range, kind) = snapshot.surrounding_word(position);\n                            if kind != Some(CharKind::Word) {\n                                return None;\n                            }\n                            Some(\n                                snapshot.anchor_before(range.start)\n                                    ..snapshot.anchor_after(range.end),\n                            )\n                        })?\n                    }\n                })\n            })\n        }))\n    }\n\n    fn perform_rename(\n        &self,\n        buffer: &Entity<Buffer>,\n        position: text::Anchor,\n        new_name: String,\n        cx: &mut App,\n    ) -> Option<Task<Result<ProjectTransaction>>> {\n        Some(self.update(cx, |project, cx| {\n            project.perform_rename(buffer.clone(), position, new_name, cx)\n        }))\n    }\n}\n\nfn inlay_hint_settings(\n    location: Anchor,\n    snapshot: &MultiBufferSnapshot,\n    cx: &mut Context<Editor>,\n) -> InlayHintSettings {\n    let file = snapshot.file_at(location);\n    let language = snapshot.language_at(location).map(|l| l.name());\n    language_settings(language, file, cx).inlay_hints\n}\n\nfn consume_contiguous_rows(\n    contiguous_row_selections: &mut Vec<Selection<Point>>,\n    selection: &Selection<Point>,\n    display_map: &DisplaySnapshot,\n    selections: &mut Peekable<std::slice::Iter<Selection<Point>>>,\n) -> (MultiBufferRow, MultiBufferRow) {\n    contiguous_row_selections.push(selection.clone());\n    let start_row = MultiBufferRow(selection.start.row);\n    let mut end_row = ending_row(selection, display_map);\n\n    while let Some(next_selection) = selections.peek() {\n        if next_selection.start.row <= end_row.0 {\n            end_row = ending_row(next_selection, display_map);\n            contiguous_row_selections.push(selections.next().unwrap().clone());\n        } else {\n            break;\n        }\n    }\n    (start_row, end_row)\n}\n\nfn ending_row(next_selection: &Selection<Point>, display_map: &DisplaySnapshot) -> MultiBufferRow {\n    if next_selection.end.column > 0 || next_selection.is_empty() {\n        MultiBufferRow(display_map.next_line_boundary(next_selection.end).0.row + 1)\n    } else {\n        MultiBufferRow(next_selection.end.row)\n    }\n}\n\nimpl EditorSnapshot {\n    pub fn remote_selections_in_range<'a>(\n        &'a self,\n        range: &'a Range<Anchor>,\n        collaboration_hub: &dyn CollaborationHub,\n        cx: &'a App,\n    ) -> impl 'a + Iterator<Item = RemoteSelection> {\n        let participant_names = collaboration_hub.user_names(cx);\n        let participant_indices = collaboration_hub.user_participant_indices(cx);\n        let collaborators_by_peer_id = collaboration_hub.collaborators(cx);\n        let collaborators_by_replica_id = collaborators_by_peer_id\n            .iter()\n            .map(|(_, collaborator)| (collaborator.replica_id, collaborator))\n            .collect::<HashMap<_, _>>();\n        self.buffer_snapshot\n            .selections_in_range(range, false)\n            .filter_map(move |(replica_id, line_mode, cursor_shape, selection)| {\n                let collaborator = collaborators_by_replica_id.get(&replica_id)?;\n                let participant_index = participant_indices.get(&collaborator.user_id).copied();\n                let user_name = participant_names.get(&collaborator.user_id).cloned();\n                Some(RemoteSelection {\n                    replica_id,\n                    selection,\n                    cursor_shape,\n                    line_mode,\n                    participant_index,\n                    peer_id: collaborator.peer_id,\n                    user_name,\n                })\n            })\n    }\n\n    pub fn hunks_for_ranges(\n        &self,\n        ranges: impl IntoIterator<Item = Range<Point>>,\n    ) -> Vec<MultiBufferDiffHunk> {\n        let mut hunks = Vec::new();\n        let mut processed_buffer_rows: HashMap<BufferId, HashSet<Range<text::Anchor>>> =\n            HashMap::default();\n        for query_range in ranges {\n            let query_rows =\n                MultiBufferRow(query_range.start.row)..MultiBufferRow(query_range.end.row + 1);\n            for hunk in self.buffer_snapshot.diff_hunks_in_range(\n                Point::new(query_rows.start.0, 0)..Point::new(query_rows.end.0, 0),\n            ) {\n                // Include deleted hunks that are adjacent to the query range, because\n                // otherwise they would be missed.\n                let mut intersects_range = hunk.row_range.overlaps(&query_rows);\n                if hunk.status().is_deleted() {\n                    intersects_range |= hunk.row_range.start == query_rows.end;\n                    intersects_range |= hunk.row_range.end == query_rows.start;\n                }\n                if intersects_range {\n                    if !processed_buffer_rows\n                        .entry(hunk.buffer_id)\n                        .or_default()\n                        .insert(hunk.buffer_range.start..hunk.buffer_range.end)\n                    {\n                        continue;\n                    }\n                    hunks.push(hunk);\n                }\n            }\n        }\n\n        hunks\n    }\n\n    fn display_diff_hunks_for_rows<'a>(\n        &'a self,\n        display_rows: Range<DisplayRow>,\n        folded_buffers: &'a HashSet<BufferId>,\n    ) -> impl 'a + Iterator<Item = DisplayDiffHunk> {\n        let buffer_start = DisplayPoint::new(display_rows.start, 0).to_point(self);\n        let buffer_end = DisplayPoint::new(display_rows.end, 0).to_point(self);\n\n        self.buffer_snapshot\n            .diff_hunks_in_range(buffer_start..buffer_end)\n            .filter_map(|hunk| {\n                if folded_buffers.contains(&hunk.buffer_id) {\n                    return None;\n                }\n\n                let hunk_start_point = Point::new(hunk.row_range.start.0, 0);\n                let hunk_end_point = Point::new(hunk.row_range.end.0, 0);\n\n                let hunk_display_start = self.point_to_display_point(hunk_start_point, Bias::Left);\n                let hunk_display_end = self.point_to_display_point(hunk_end_point, Bias::Right);\n\n                let display_hunk = if hunk_display_start.column() != 0 {\n                    DisplayDiffHunk::Folded {\n                        display_row: hunk_display_start.row(),\n                    }\n                } else {\n                    let mut end_row = hunk_display_end.row();\n                    if hunk_display_end.column() > 0 {\n                        end_row.0 += 1;\n                    }\n                    let is_created_file = hunk.is_created_file();\n                    DisplayDiffHunk::Unfolded {\n                        status: hunk.status(),\n                        diff_base_byte_range: hunk.diff_base_byte_range,\n                        display_row_range: hunk_display_start.row()..end_row,\n                        multi_buffer_range: Anchor::range_in_buffer(\n                            hunk.excerpt_id,\n                            hunk.buffer_id,\n                            hunk.buffer_range,\n                        ),\n                        is_created_file,\n                    }\n                };\n\n                Some(display_hunk)\n            })\n    }\n\n    pub fn language_at<T: ToOffset>(&self, position: T) -> Option<&Arc<Language>> {\n        self.display_snapshot.buffer_snapshot.language_at(position)\n    }\n\n    pub fn is_focused(&self) -> bool {\n        self.is_focused\n    }\n\n    pub fn placeholder_text(&self) -> Option<&Arc<str>> {\n        self.placeholder_text.as_ref()\n    }\n\n    pub fn scroll_position(&self) -> gpui::Point<f32> {\n        self.scroll_anchor.scroll_position(&self.display_snapshot)\n    }\n\n    fn gutter_dimensions(\n        &self,\n        font_id: FontId,\n        font_size: Pixels,\n        max_line_number_width: Pixels,\n        cx: &App,\n    ) -> Option<GutterDimensions> {\n        if !self.show_gutter {\n            return None;\n        }\n\n        let descent = cx.text_system().descent(font_id, font_size);\n        let em_width = cx.text_system().em_width(font_id, font_size).log_err()?;\n        let em_advance = cx.text_system().em_advance(font_id, font_size).log_err()?;\n\n        let show_git_gutter = self.show_git_diff_gutter.unwrap_or_else(|| {\n            matches!(\n                ProjectSettings::get_global(cx).git.git_gutter,\n                Some(GitGutterSetting::TrackedFiles)\n            )\n        });\n        let gutter_settings = EditorSettings::get_global(cx).gutter;\n        let show_line_numbers = self\n            .show_line_numbers\n            .unwrap_or(gutter_settings.line_numbers);\n        let line_gutter_width = if show_line_numbers {\n            // Avoid flicker-like gutter resizes when the line number gains another digit and only resize the gutter on files with N*10^5 lines.\n            let min_width_for_number_on_gutter = em_advance * 4.0;\n            max_line_number_width.max(min_width_for_number_on_gutter)\n        } else {\n            0.0.into()\n        };\n\n        let show_code_actions = self\n            .show_code_actions\n            .unwrap_or(gutter_settings.code_actions);\n\n        let show_runnables = self.show_runnables.unwrap_or(gutter_settings.runnables);\n\n        let git_blame_entries_width =\n            self.git_blame_gutter_max_author_length\n                .map(|max_author_length| {\n                    const MAX_RELATIVE_TIMESTAMP: &str = ": "",
    ";\n\n                    /// The number of characters to dedicate to gaps and margins.\n                    const SPACING_WIDTH: usize = 4;\n\n                    let max_char_count = max_author_length\n                        .min(GIT_BLAME_MAX_AUTHOR_CHARS_DISPLAYED)\n                        + ::git::SHORT_SHA_LENGTH\n                        + MAX_RELATIVE_TIMESTAMP.len()\n                        + SPACING_WIDTH;\n\n                    em_advance * max_char_count\n                });\n\n        let mut left_padding = git_blame_entries_width.unwrap_or(Pixels::ZERO);\n        left_padding += if show_code_actions || show_runnables {\n            em_width * 3.0\n        } else if show_git_gutter && show_line_numbers {\n            em_width * 2.0\n        } else if show_git_gutter || show_line_numbers {\n            em_width\n        } else {\n            px(0.)\n        };\n\n        let right_padding = if gutter_settings.folds && show_line_numbers {\n            em_width * 4.0\n        } else if gutter_settings.folds {\n            em_width * 3.0\n        } else if show_line_numbers {\n            em_width\n        } else {\n            px(0.)\n        };\n\n        Some(GutterDimensions {\n            left_padding,\n            right_padding,\n            width: line_gutter_width + left_padding + right_padding,\n            margin: -descent,\n            git_blame_entries_width,\n        })\n    }\n\n    pub fn render_crease_toggle(\n        &self,\n        buffer_row: MultiBufferRow,\n        row_contains_cursor: bool,\n        editor: Entity<Editor>,\n        window: &mut Window,\n        cx: &mut App,\n    ) -> Option<AnyElement> {\n        let folded = self.is_line_folded(buffer_row);\n        let mut is_foldable = false;\n\n        if let Some(crease) = self\n            .crease_snapshot\n            .query_row(buffer_row, &self.buffer_snapshot)\n        {\n            is_foldable = true;\n            match crease {\n                Crease::Inline { render_toggle, .. } | Crease::Block { render_toggle, .. } => {\n                    if let Some(render_toggle) = render_toggle {\n                        let toggle_callback =\n                            Arc::new(move |folded, window: &mut Window, cx: &mut App| {\n                                if folded {\n                                    editor.update(cx, |editor, cx| {\n                                        editor.fold_at(&crate::FoldAt { buffer_row }, window, cx)\n                                    });\n                                } else {\n                                    editor.update(cx, |editor, cx| {\n                                        editor.unfold_at(\n                                            &crate::UnfoldAt { buffer_row },\n                                            window,\n                                            cx,\n                                        )\n                                    });\n                                }\n                            });\n                        return Some((render_toggle)(\n                            buffer_row,\n                            folded,\n                            toggle_callback,\n                            window,\n                            cx,\n                        ));\n                    }\n                }\n            }\n        }\n\n        is_foldable |= self.starts_indent(buffer_row);\n\n        if folded || (is_foldable && (row_contains_cursor || self.gutter_hovered)) {\n            Some(\n                Disclosure::new((": "",
    ", buffer_row.0), !folded)\n                    .toggle_state(folded)\n                    .on_click(window.listener_for(&editor, move |this, _e, window, cx| {\n                        if folded {\n                            this.unfold_at(&UnfoldAt { buffer_row }, window, cx);\n                        } else {\n                            this.fold_at(&FoldAt { buffer_row }, window, cx);\n                        }\n                    }))\n                    .into_any_element(),\n            )\n        } else {\n            None\n        }\n    }\n\n    pub fn render_crease_trailer(\n        &self,\n        buffer_row: MultiBufferRow,\n        window: &mut Window,\n        cx: &mut App,\n    ) -> Option<AnyElement> {\n        let folded = self.is_line_folded(buffer_row);\n        if let Crease::Inline { render_trailer, .. } = self\n            .crease_snapshot\n            .query_row(buffer_row, &self.buffer_snapshot)?\n        {\n            let render_trailer = render_trailer.as_ref()?;\n            Some(render_trailer(buffer_row, folded, window, cx))\n        } else {\n            None\n        }\n    }\n}\n\nimpl Deref for EditorSnapshot {\n    type Target = DisplaySnapshot;\n\n    fn deref(&self) -> &Self::Target {\n        &self.display_snapshot\n    }\n}\n\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum EditorEvent {\n    InputIgnored {\n        text: Arc<str>,\n    },\n    InputHandled {\n        utf16_range_to_replace: Option<Range<isize>>,\n        text: Arc<str>,\n    },\n    ExcerptsAdded {\n        buffer: Entity<Buffer>,\n        predecessor: ExcerptId,\n        excerpts: Vec<(ExcerptId, ExcerptRange<language::Anchor>)>,\n    },\n    ExcerptsRemoved {\n        ids: Vec<ExcerptId>,\n    },\n    BufferFoldToggled {\n        ids: Vec<ExcerptId>,\n        folded: bool,\n    },\n    ExcerptsEdited {\n        ids: Vec<ExcerptId>,\n    },\n    ExcerptsExpanded {\n        ids: Vec<ExcerptId>,\n    },\n    BufferEdited,\n    Edited {\n        transaction_id: clock::Lamport,\n    },\n    Reparsed(BufferId),\n    Focused,\n    FocusedIn,\n    Blurred,\n    DirtyChanged,\n    Saved,\n    TitleChanged,\n    DiffBaseChanged,\n    SelectionsChanged {\n        local: bool,\n    },\n    ScrollPositionChanged {\n        local: bool,\n        autoscroll: bool,\n    },\n    Closed,\n    TransactionUndone {\n        transaction_id: clock::Lamport,\n    },\n    TransactionBegun {\n        transaction_id: clock::Lamport,\n    },\n    Reloaded,\n    CursorShapeChanged,\n}\n\nimpl EventEmitter<EditorEvent> for Editor {}\n\nimpl Focusable for Editor {\n    fn focus_handle(&self, _cx: &App) -> FocusHandle {\n        self.focus_handle.clone()\n    }\n}\n\nimpl Render for Editor {\n    fn render(&mut self, _: &mut Window, cx: &mut Context<'_, Self>) -> impl IntoElement {\n        let settings = ThemeSettings::get_global(cx);\n\n        let mut text_style = match self.mode {\n            EditorMode::SingleLine { .. } | EditorMode::AutoHeight { .. } => TextStyle {\n                color: cx.theme().colors().editor_foreground,\n                font_family: settings.ui_font.family.clone(),\n                font_features: settings.ui_font.features.clone(),\n                font_fallbacks: settings.ui_font.fallbacks.clone(),\n                font_size: rems(0.875).into(),\n                font_weight: settings.ui_font.weight,\n                line_height: relative(settings.buffer_line_height.value()),\n                ..Default::default()\n            },\n            EditorMode::Full => TextStyle {\n                color: cx.theme().colors().editor_foreground,\n                font_family: settings.buffer_font.family.clone(),\n                font_features: settings.buffer_font.features.clone(),\n                font_fallbacks: settings.buffer_font.fallbacks.clone(),\n                font_size: settings.buffer_font_size(cx).into(),\n                font_weight: settings.buffer_font.weight,\n                line_height: relative(settings.buffer_line_height.value()),\n                ..Default::default()\n            },\n        };\n        if let Some(text_style_refinement) = &self.text_style_refinement {\n            text_style.refine(text_style_refinement)\n        }\n\n        let background = match self.mode {\n            EditorMode::SingleLine { .. } => cx.theme().system().transparent,\n            EditorMode::AutoHeight { max_lines: _ } => cx.theme().system().transparent,\n            EditorMode::Full => cx.theme().colors().editor_background,\n        };\n\n        EditorElement::new(\n            &cx.entity(),\n            EditorStyle {\n                background,\n                local_player: cx.theme().players().local(),\n                text: text_style,\n                scrollbar_width: EditorElement::SCROLLBAR_WIDTH,\n                syntax: cx.theme().syntax().clone(),\n                status: cx.theme().status().clone(),\n                inlay_hints_style: make_inlay_hints_style(cx),\n                inline_completion_styles: make_suggestion_styles(cx),\n                unnecessary_code_fade: ThemeSettings::get_global(cx).unnecessary_code_fade,\n            },\n        )\n    }\n}\n\nimpl EntityInputHandler for Editor {\n    fn text_for_range(\n        &mut self,\n        range_utf16: Range<usize>,\n        adjusted_range: &mut Option<Range<usize>>,\n        _: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Option<String> {\n        let snapshot = self.buffer.read(cx).read(cx);\n        let start = snapshot.clip_offset_utf16(OffsetUtf16(range_utf16.start), Bias::Left);\n        let end = snapshot.clip_offset_utf16(OffsetUtf16(range_utf16.end), Bias::Right);\n        if (start.0..end.0) != range_utf16 {\n            adjusted_range.replace(start.0..end.0);\n        }\n        Some(snapshot.text_for_range(start..end).collect())\n    }\n\n    fn selected_text_range(\n        &mut self,\n        ignore_disabled_input: bool,\n        _: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Option<UTF16Selection> {\n        // Prevent the IME menu from appearing when holding down an alphabetic key\n        // while input is disabled.\n        if !ignore_disabled_input && !self.input_enabled {\n            return None;\n        }\n\n        let selection = self.selections.newest::<OffsetUtf16>(cx);\n        let range = selection.range();\n\n        Some(UTF16Selection {\n            range: range.start.0..range.end.0,\n            reversed: selection.reversed,\n        })\n    }\n\n    fn marked_text_range(&self, _: &mut Window, cx: &mut Context<Self>) -> Option<Range<usize>> {\n        let snapshot = self.buffer.read(cx).read(cx);\n        let range = self.text_highlights::<InputComposition>(cx)?.1.first()?;\n        Some(range.start.to_offset_utf16(&snapshot).0..range.end.to_offset_utf16(&snapshot).0)\n    }\n\n    fn unmark_text(&mut self, _: &mut Window, cx: &mut Context<Self>) {\n        self.clear_highlights::<InputComposition>(cx);\n        self.ime_transaction.take();\n    }\n\n    fn replace_text_in_range(\n        &mut self,\n        range_utf16: Option<Range<usize>>,\n        text: &str,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if !self.input_enabled {\n            cx.emit(EditorEvent::InputIgnored { text: text.into() });\n            return;\n        }\n\n        self.transact(window, cx, |this, window, cx| {\n            let new_selected_ranges = if let Some(range_utf16) = range_utf16 {\n                let range_utf16 = OffsetUtf16(range_utf16.start)..OffsetUtf16(range_utf16.end);\n                Some(this.selection_replacement_ranges(range_utf16, cx))\n            } else {\n                this.marked_text_ranges(cx)\n            };\n\n            let range_to_replace = new_selected_ranges.as_ref().and_then(|ranges_to_replace| {\n                let newest_selection_id = this.selections.newest_anchor().id;\n                this.selections\n                    .all::<OffsetUtf16>(cx)\n                    .iter()\n                    .zip(ranges_to_replace.iter())\n                    .find_map(|(selection, range)| {\n                        if selection.id == newest_selection_id {\n                            Some(\n                                (range.start.0 as isize - selection.head().0 as isize)\n                                    ..(range.end.0 as isize - selection.head().0 as isize),\n                            )\n                        } else {\n                            None\n                        }\n                    })\n            });\n\n            cx.emit(EditorEvent::InputHandled {\n                utf16_range_to_replace: range_to_replace,\n                text: text.into(),\n            });\n\n            if let Some(new_selected_ranges) = new_selected_ranges {\n                this.change_selections(None, window, cx, |selections| {\n                    selections.select_ranges(new_selected_ranges)\n                });\n                this.backspace(&Default::default(), window, cx);\n            }\n\n            this.handle_input(text, window, cx);\n        });\n\n        if let Some(transaction) = self.ime_transaction {\n            self.buffer.update(cx, |buffer, cx| {\n                buffer.group_until_transaction(transaction, cx);\n            });\n        }\n\n        self.unmark_text(window, cx);\n    }\n\n    fn replace_and_mark_text_in_range(\n        &mut self,\n        range_utf16: Option<Range<usize>>,\n        text: &str,\n        new_selected_range_utf16: Option<Range<usize>>,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if !self.input_enabled {\n            return;\n        }\n\n        let transaction = self.transact(window, cx, |this, window, cx| {\n            let ranges_to_replace = if let Some(mut marked_ranges) = this.marked_text_ranges(cx) {\n                let snapshot = this.buffer.read(cx).read(cx);\n                if let Some(relative_range_utf16) = range_utf16.as_ref() {\n                    for marked_range in &mut marked_ranges {\n                        marked_range.end.0 = marked_range.start.0 + relative_range_utf16.end;\n                        marked_range.start.0 += relative_range_utf16.start;\n                        marked_range.start =\n                            snapshot.clip_offset_utf16(marked_range.start, Bias::Left);\n                        marked_range.end =\n                            snapshot.clip_offset_utf16(marked_range.end, Bias::Right);\n                    }\n                }\n                Some(marked_ranges)\n            } else if let Some(range_utf16) = range_utf16 {\n                let range_utf16 = OffsetUtf16(range_utf16.start)..OffsetUtf16(range_utf16.end);\n                Some(this.selection_replacement_ranges(range_utf16, cx))\n            } else {\n                None\n            };\n\n            let range_to_replace = ranges_to_replace.as_ref().and_then(|ranges_to_replace| {\n                let newest_selection_id = this.selections.newest_anchor().id;\n                this.selections\n                    .all::<OffsetUtf16>(cx)\n                    .iter()\n                    .zip(ranges_to_replace.iter())\n                    .find_map(|(selection, range)| {\n                        if selection.id == newest_selection_id {\n                            Some(\n                                (range.start.0 as isize - selection.head().0 as isize)\n                                    ..(range.end.0 as isize - selection.head().0 as isize),\n                            )\n                        } else {\n                            None\n                        }\n                    })\n            });\n\n            cx.emit(EditorEvent::InputHandled {\n                utf16_range_to_replace: range_to_replace,\n                text: text.into(),\n            });\n\n            if let Some(ranges) = ranges_to_replace {\n                this.change_selections(None, window, cx, |s| s.select_ranges(ranges));\n            }\n\n            let marked_ranges = {\n                let snapshot = this.buffer.read(cx).read(cx);\n                this.selections\n                    .disjoint_anchors()\n                    .iter()\n                    .map(|selection| {\n                        selection.start.bias_left(&snapshot)..selection.end.bias_right(&snapshot)\n                    })\n                    .collect::<Vec<_>>()\n            };\n\n            if text.is_empty() {\n                this.unmark_text(window, cx);\n            } else {\n                this.highlight_text::<InputComposition>(\n                    marked_ranges.clone(),\n                    HighlightStyle {\n                        underline: Some(UnderlineStyle {\n                            thickness: px(1.),\n                            color: None,\n                            wavy: false,\n                        }),\n                        ..Default::default()\n                    },\n                    cx,\n                );\n            }\n\n            // Disable auto-closing when composing text (i.e. typing a `": "",
    "close-block": "",
    "Close Diagnostics": "",
    "copy-block": "",
    "Copy diagnostic message": "",
    ": ": "",
    "Conflict with Accept Keybinding": "",
    "Your keymap currently overrides the default accept keybinding. To continue, assign one keybinding for the `editor::AcceptEditPrediction` action.": "",
    "open-keymap": "",
    "Assign Keybinding": "",
    "see-docs": "",
    "See Docs": "",
    "https://zed.dev/docs/completions#edit-predictions-missing-keybinding": ""
  },
  "zed/crates/editor/src/element.rs": {
    "diagnostic": "",
    "{number}": "",
    "toggle-buffer-fold": "",
    "Toggle Excerpt Fold": "",
    "path header block": "",
    "untitled": "",
    "jump-to-file-button": "",
    "Jump To File": "",
    "expand-down": "",
    "expand-up": "",
    "Expand Excerpt": "",
    "block-{}-{}": "",
    "down": "",
    "up": "",
    "expand-icon": "",
    "Visible context menu should always render.": "",
    "crease_toggles": "",
    "crease_trailers": "",
    " ": "",
    "{}, {} - {}": "",
    "{}, {}": "",
    "inline-blame": "",
    "<no name>": "",
    "blame": "",
    "Copy commit SHA": "",
    "Open permalink": "",
    "Text": "",
    "Element": "",
    "size": "",
    "len": "",
    "you can't prepaint LineWithInvisibles twice": "",
    "modified diff status for row info": "",
    "blocks": "",
    "→": "",
    "•": "",
    "hello": "",
    "1": "",
    "\\t \\t|\\t| a b": "",
    "Hardcoded expected invisibles differ from the actual ones in '{input_text}'": "",
    "\\t\\t\\t| | a b": "",
    "For editor mode {editor_mode_without_invisibles:?} no invisibles was expected but got {invisibles:?}": "",
    "a\\tbcd     ": "",
    "Expected invisibles: {expected_invisibles:?}": "",
    "At index {i}, expected invisible {expected_invisible:?} does not match actual {actual_invisible:?} by kind. Actual invisibles: {actual_invisibles:?}": "",
    "Unexpected extra invisible {actual_invisible:?} at index {i}": "",
    "Missing expected invisibles after index {i}: {missing_expected_invisibles:?}": "",
    "Creating editor with mode {editor_mode:?}, width {}px and text '{input_text}'": "",
    "stage": "",
    "Stage": "",
    "Stage Hunk": "",
    "unstage": "",
    "Unstage": "",
    "Unstage Hunk": "",
    "restore": "",
    "Restore": "",
    "Restore Hunk": "",
    "next-hunk": "",
    "Next Hunk": "",
    "prev-hunk": "",
    "Previous Hunk": ""
  },
  "zed/crates/editor/src/git.rs": {},
  "zed/crates/editor/src/hover_links.rs": {
    "When no cmd is pressed, should have no hint label selected, but got: {actual_ranges:?}": "",
    "Failed to find file path: {}": "",
    "Incorrect file path for input: {}": "",
    "Expected no result, but got one: {:?}": "",
    "This is file2.rs": ""
  },
  "zed/crates/editor/src/hover_popover.rs": {
    "Unicode character U+{:02X}": "",
    "Expected no hovers but got but got: {:?}": "",
    "some other basic docs": "",
    "regular text for hover to show": "",
    "No empty string hovers should be shown": "",
    "Should not have extra line breaks at end of rendered hover": "",
    "A test diagnostic message.": "",
    "some new docs": "",
    "Function to read a file": "",
    "Hint {hint_to_resolve:?} was resolved twice": "",
    "A tooltip for `{new_type_label}`": "",
    "A tooltip for `{struct_label}`": "",
    "Popover range should match the new type label part": "",
    "A tooltip for {new_type_label}": "",
    "Popover range should match the struct label part": "",
    "A tooltip for {struct_label}": "",
    "Rendered markdown element should remove backticks from text": ""
  },
  "zed/crates/editor/src/indent_guides.rs": {
    "offscreen": ""
  },
  "zed/crates/editor/src/inlay_hint_cache.rs": {
    "Visible": "",
    "jumps": "",
    "hint resolve task": "",
    "inlay hint update task for range failed: {e:#?}": "",
    "Fetching inlay hints for range {fetch_range_to_log:?} got throttled and fell off the current visible range, skipping.": "",
    "Fetching inlay hints for range {fetch_range_to_log:?}, reason: {query_reason}, invalidate: {invalidate}": "",
    "Currently visible hints: {visible_hints:?}, cached hints present: {}": "",
    "inlay hint fetch task": "",
    "Fetched {} hints for range {fetch_range_to_log:?}": "",
    "Fetched hints: {new_hints:?}": "",
    "Applying update for range {fetch_range_to_log:?}: remove from editor: {}, remove from cache: {}, add to cache: {}": "",
    "New update: {new_update:?}": "",
    "Should get its first hints when opening the editor": "",
    "Cache should use editor settings to get the allowed hint kinds": "",
    "some change": "",
    "Should get new hints after an edit": "",
    "inlay refresh request failed": "",
    "Should get new hints after hint refresh/ request": "",
    "test_progress_token": "",
    "work done progress create request failed": "",
    "Should not update hints while the work task is running": "",
    "New hints should be queried after the work task is done": "",
    "fn main() { a } // and some long comment to ensure inlays are not trimmed out": "",
    "other.md": "",
    "Test md file with some text": "",
    "Unexpected language: {unexpected}": "",
    "Markdown editor should have a separate version, repeating Rust editor rules": "",
    "some rs change": "",
    "Rust inlay cache should change after the edit": "",
    "Markdown editor should not be affected by Rust editor changes": "",
    "some md change": "",
    "Rust editor should not be affected by Markdown editor changes": "",
    "Markdown editor should also change independently": "",
    "type hint": "",
    "parameter hint": "",
    "other hint": "",
    "Should query new hints once": "",
    "Should load new hints twice": "",
    "Cached hints should not change due to allowed hint kinds settings update": "",
    "Should not load new hints on allowed hint kinds change for hint kinds {new_allowed_hint_kinds:?}": "",
    "Should get its cached hints unchanged after the settings change for hint kinds {new_allowed_hint_kinds:?}": "",
    "Should get its visible hints filtered after the settings change for hint kinds {new_allowed_hint_kinds:?}": "",
    "Cache should use editor settings to get the allowed hint kinds for hint kinds {new_allowed_hint_kinds:?}": "",
    "Should not load new hints when hints got disabled": "",
    "Should clear the cache when hints got disabled": "",
    "Should clear visible hints when hints got disabled": "",
    "Should update its allowed hint kinds even when hints got disabled": "",
    "Should not load new hints when they got disabled": "",
    "Should query for new hints when they got re-enabled": "",
    "Should get its cached hints fully repopulated after the hints got re-enabled": "",
    "Should get its visible hints repopulated and filtered after the h": "",
    "Cache should update editor settings when hints got re-enabled": "",
    "Should query for new hints again": "",
    "initial change #1": "",
    "initial change #2": "",
    "initial change #3": "",
    "Should apply all changes made": "",
    "Should query new hints twice: for editor init and for the last edit that interrupted all others": "",
    "Should get hints from the last edit landed only": "",
    "another change #1": "",
    "another change #2": "",
    "another change #3": "",
    "Should query new hints one more time, for the last edit only": "",
    "fn main() {{\n{}\n}}": "",
    "let i = 5;\n": "",
    "other.rs": "",
    "// Test file": "",
    "When scroll is at the edge of a big document, its visible part and the same range further should be queried in order, but got: {ranges:?}": "",
    "Should initially query visible edge of the document": "",
    "Visible + invisible request": "",
    "47": "",
    "94": "",
    "Should have hints from both LSP requests made for a big file": "",
    "Should display only hints from the visible range": "",
    "Should query 2 ranges after both scrolls, but got: {ranges:?}": "",
    "Should query 2 adjacent ranges after the scrolls, but got: {ranges:?}": "",
    "First scroll should start the query right after the end of the original scroll": "",
    "Second scroll should query one more screen down after the end of the visible range": "",
    "Should query for hints after every scroll": "",
    "139": "",
    "184": "",
    "Should have hints from the new LSP response after the edit": "",
    "No new ranges or LSP queries should be made after returning to the selection with cached hints": "",
    "++++more text++++": "",
    "On edit, should scroll to selection and query a range around it: visible + same range above and below. Instead, got query ranges {ranges:?}": "",
    "Above range {above_query_range:?} should be before visible range {visible_query_range:?}": "",
    "Visible range {visible_query_range:?} should be before below range {below_query_range:?}": "",
    "Hints should be queried with the selected range after the query range start": "",
    "Hints should be queried with the selected range before the query range end": "",
    "Hints query range should contain one more screen before": "",
    "Hints query range should contain one more screen after": "",
    "There should be a visible range and two ranges above and below it queried": "",
    "67": "",
    "115": "",
    "163": "",
    "Single buffer should produce a single excerpt with visible range": "",
    "let i = {i};\n": "",
    "let j = {j};\n": "",
    "/a/other.rs": "",
    "main hint": "",
    "unexpected uri: {:?}": "",
    "out of excerpt range, should be ignored": "",
    "{hint_text}{E} #{i}": "",
    "(edited)": "",
    "main hint #0": "",
    "main hint #1": "",
    "main hint #2": "",
    "main hint #3": "",
    "main hint #4": "",
    "main hint #5": "",
    "When scroll is at the edge of a multibuffer, its visible excerpts only should be queried for inlay hints": "",
    "other hint #0": "",
    "other hint #1": "",
    "other hint #2": "",
    "With more scrolls of the multibuffer, more hints should be added into the cache and nothing invalidated without edits": "",
    "other hint #3": "",
    "other hint #4": "",
    "other hint #5": "",
    "After multibuffer was scrolled to the end, all hints for all excerpts should be fetched": "",
    "After multibuffer was scrolled to the end, further scrolls up should not bring more hints": "",
    "other hint(edited) #0": "",
    "other hint(edited) #1": "",
    "other hint(edited) #2": ""
  },
  "zed/crates/editor/src/inline_completion_tests.rs": {
    "editor has no active completion": "",
    "expected edit completion": "",
    "expected move completion": "",
    "Fake Completion Provider": ""
  },
  "zed/crates/editor/src/items.rs": {
    "leaders don't share views for unshared buffers": "",
    "Editor Saved": "",
    "cannot call save_as on an excerpt list": "",
    "untitled": "",
    "Editor": "",
    "Failed to query editor state": "",
    "No path or contents found for buffer": "",
    "Project item at stored path was not a buffer": "",
    "Failed to downcast to Editor after opening abs path {abs_path:?}": "",
    "failed to save serialized editor": "",
    "failed to save contents of buffer": "",
    "/file.rs": "",
    "fn main() {}": "",
    "hello": ""
  },
  "zed/crates/editor/src/linked_editing_ranges.rs": {},
  "zed/crates/editor/src/lsp_ext.rs": {},
  "zed/crates/editor/src/mouse_context_menu.rs": {
    "MouseContextMenu": "",
    "position": "",
    "context_menu": "",
    "Go to Definition": "",
    "Go to Declaration": "",
    "Go to Type Definition": "",
    "Go to Implementation": "",
    "Find All References": "",
    "Rename Symbol": "",
    "Format Buffer": "",
    "Format Selections": "",
    "Code Actions": "",
    "Cut": "",
    "Copy": "",
    "Paste": "",
    "Reveal in Finder": "",
    "Reveal in File Manager": "",
    "Open in Terminal": "",
    "Copy Permalink": ""
  },
  "zed/crates/editor/src/movement.rs": {
    "move left": "",
    "subkind": "",
    "Should not stop at inlays when looking for boundaries": ""
  },
  "zed/crates/editor/src/persistence.rs": {
    "NOT NULL": "",
    "(?1, ?2, ?, ?)": "",
    ", ": "",
    "\nDELETE FROM editor_selections WHERE editor_id = ?1 AND workspace_id = ?2;\n\nINSERT OR IGNORE INTO editor_selections (editor_id, workspace_id, start, end)\nVALUES {placeholders};\n": "",
    "?": "",
    "DELETE FROM editors WHERE workspace_id = ? AND item_id NOT IN ({placeholders})": "",
    "testing.txt": "",
    "Test": "",
    "Go": ""
  },
  "zed/crates/editor/src/proposed_changes_editor.rs": {
    "ProposedChangesEditor": "",
    "apply-changes": "",
    "Apply All": ""
  },
  "zed/crates/editor/src/rust_analyzer_ext.rs": {
    "expand macro": "",
    "Empty macro expansion for position {position:?}": "",
    "open docs": "",
    "Empty docs urls for position {position:?}": "",
    "{:?}": ""
  },
  "zed/crates/extension/src/extension_builder.rs": {
    "wasm32-wasip1": "",
    "https://github.com/bytecodealliance/wasmtime/releases/download/v18.0.2/wasi_snapshot_preview1.reactor.wasm": "",
    "https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-21/": "",
    "wasi-sdk-21.0-macos.tar.gz": "",
    "wasi-sdk-21.0-linux.tar.gz": "",
    "wasi-sdk-21.0.m-mingw.tar.gz": "",
    "extension dir {} is not an absolute path": "",
    "failed to create cache dir": "",
    "compiling Rust extension {}": "",
    "failed to compile Rust extension": "",
    "compiled Rust extension {}": "",
    "grammar name '{grammar_name}' must be written in snake_case: {snake_cased_grammar_name}": "",
    "compiling grammar {grammar_name} for extension {}": "",
    "failed to compile grammar '{grammar_name}'": "",
    "compiled grammar {grammar_name} for extension {}": "",
    "finished compiling extension {}": "",
    "Cargo.toml": "",
    "compiling Rust crate for extension {}": "",
    "cargo": "",
    "build": "",
    "--target": "",
    "--release": "",
    "--target-dir": "",
    "target": "",
    "RUSTC_WRAPPER": "",
    "failed to run `cargo`": "",
    "failed to build extension {}": "",
    "compiled Rust crate for extension {}": "",
    "release": "",
    "debug": "",
    "_": "",
    "wasm": "",
    "failed to read output module `{}`": "",
    "wasi_snapshot_preview1": "",
    "failed to load adapter module": "",
    "encoding wasm component for extension {}": "",
    "failed to encode wasm component": "",
    "failed to strip debug sections from wasm component": "",
    "compiled wasm did not contain a valid zed extension api version": "",
    "extension.wasm": "",
    "failed to write extension.wasm": "",
    "extension {} written to {}": "",
    "grammars": "",
    "checking out {grammar_name} parser": "",
    "src": "",
    "parser.c": "",
    "scanner.c": "",
    "compiling {grammar_name} parser": "",
    "-fPIC": "",
    "-shared": "",
    "-Os": "",
    "-Wl,--export=tree_sitter_{grammar_name}": "",
    "-o": "",
    "-I": "",
    "failed to run clang": "",
    "failed to compile {} parser with clang: {}": "",
    ".git": "",
    "git": "",
    "--git-dir": "",
    "remote": "",
    "-v": "",
    "origin": "",
    "grammar directory '{}' already exists, but is not a git clone of '{}'": "",
    "failed to create grammar directory {}": "",
    "init": "",
    "failed to run `git init` in directory '{}'": "",
    "add": "",
    "failed to execute `git remote add`": "",
    "failed to add remote {url} for git repository {}": "",
    "fetch": "",
    "--depth": "",
    "1": "",
    "failed to execute `git fetch`": "",
    "checkout": "",
    "failed to execute `git checkout`": "",
    "failed to fetch revision {} in directory '{}'": "",
    "failed to checkout revision {} in directory '{}': {}": "",
    "rustc": "",
    "--print": "",
    "sysroot": "",
    "failed to run rustc": "",
    "failed to retrieve rust sysroot: {}": "",
    "lib/rustlib": "",
    "rustup": "",
    "failed to run `rustup target add`": "",
    "failed to install the `{RUST_TARGET}` target: {}": "",
    "wasi_snapshot_preview1.reactor.wasm": "",
    "downloading wasi adapter module to {}": "",
    "failed to save file {}": "",
    "downloaded wasi adapter is invalid": "",
    "{WASI_SDK_URL}/{asset_name}": "",
    "wasi-sdk is not available for platform {}": "",
    "wasi-sdk": "",
    "bin": "",
    "clang{}": "",
    "archive": "",
    "downloading wasi-sdk to {}": "",
    "failed to unpack wasi-sdk archive": "",
    "no content": "",
    "failed to read contents of extracted wasi archive directory": "",
    "failed to move extracted wasi dir": "",
    ".debug": "",
    "languages": "",
    "failed to list languages dir": "",
    "config.toml": "",
    "themes": "",
    "failed to list themes dir": "",
    "json": "",
    "icon_themes": "",
    "failed to list icon themes dir": "",
    "snippets.json": "",
    "failed to list grammars dir": "",
    "toml": "",
    "no grammar name": ""
  },
  "zed/crates/extension/src/extension_host_proxy.rs": {},
  "zed/crates/extension/src/extension_manifest.rs": {
    "**": "",
    "*": "",
    "capability for process:exec {desired_command} {desired_args:?} was not listed in the extension manifest": "",
    "kind": "",
    "process:exec": "",
    "commit": "",
    "invalid extension name": "",
    "extension.json": "",
    "failed to load {extension_name} extension.json": "",
    "invalid extension.json for extension {extension_name}": "",
    "toml": "",
    "failed to load {extension_name} extension.toml": "",
    "invalid extension.toml for extension {extension_name}": "",
    "test": "",
    "Test": "",
    "1.0.0": "",
    "ls": "",
    "-la": "",
    "-l": "",
    "pwd": "",
    "git": "",
    "status": "",
    "-s": "",
    "npm": "",
    "install": "",
    "cargo": "",
    "--all": "",
    "--no-fail-fast": "",
    "build": "",
    "docker": "",
    "run": "",
    "nginx": "",
    "ubuntu": "",
    "bash": "",
    "alpine": "",
    "sh": "",
    "-c": "",
    "echo hello": "",
    "ps": ""
  },
  "zed/crates/extension/src/extension.rs": {
    "error parsing wasm extension": "",
    "zed:api-version": "",
    "extension {} has invalid zed:api-version section: {:?}": "",
    "extension {} has no zed:api-version section": ""
  },
  "zed/crates/extension/src/types.rs": {},
  "zed/crates/extension_api/src/extension_api.rs": {
    "`language_server_command` not implemented": "",
    "`run_slash_command` not implemented": "",
    "`context_server_command` not implemented": "",
    "`index_docs` not implemented": "",
    "init-extension": "",
    "C": "",
    "PWD": "",
    "wasm32": "",
    "zed:api-version": "",
    "OUT_DIR": "",
    "/version_bytes": "",
    "./wit/since_v0.3.0": ""
  },
  "zed/crates/extension_api/src/http_client.rs": {
    "Method not set": "",
    "URL not set": ""
  },
  "zed/crates/extension_api/src/settings.rs": {
    "../wit/since_v0.2.0/settings.rs": "",
    "language": "",
    "lsp": "",
    "context_servers": ""
  },
  "zed/crates/extension_cli/src/main.rs": {
    "zed-extension": "",
    "failed to canonicalize source_dir": "",
    "failed to canonicalize scratch_dir": "",
    "loading extension manifest": "",
    "compiling extension": "",
    "Zed Extension CLI/{} ({}; {})": "",
    "CARGO_PKG_VERSION": "",
    "failed to compile extension": "",
    "archive": "",
    "failed to copy extension resources": "",
    "tar": "",
    "-czvf": "",
    "archive.tar.gz": "",
    "-C": "",
    ".": "",
    "failed to run tar": "",
    "failed to create archive.tar.gz: {}": "",
    "missing repository in extension manifest": "",
    "manifest.json": "",
    "failed to create output dir": "",
    "failed to serialize manifest": "",
    "extension.toml": "",
    "failed to write extension.toml": "",
    "extension.wasm": "",
    "failed to copy extension.wasm": "",
    "grammars": "",
    "wasm": "",
    "failed to copy grammar '{}'": "",
    "themes": "",
    "invalid theme path": "",
    "failed to copy theme '{}'": "",
    "icon_themes": "",
    "invalid icon theme path": "",
    "failed to copy icon theme '{}'": "",
    "icons": "",
    "failed to copy icons": "",
    "languages": "",
    "invalid language path": "",
    "failed to copy language dir '{}'": "",
    "loaded grammar {grammar_name}": "",
    "config.toml": "",
    "grammar not found: '{name}'": "",
    "scm": "",
    "language {} provides query {} but no grammar": "",
    "loaded language {}": "",
    "loaded theme family {}": "",
    "Theme ": "",
    " is using a deprecated style property: scrollbar_thumb.background. Use `scrollbar.thumb.background` instead.": ""
  },
  "zed/crates/extensions_ui/src/components/extension_card.rs": {
    "Overridden by dev extension.": ""
  },
  "zed/crates/extensions_ui/src/components/feature_upsell.rs": {
    "open_docs": "",
    "View docs": "",
    "Documentation Viewed": "",
    "Feature Upsell": ""
  },
  "zed/crates/extensions_ui/src/extension_suggest.rs": {
    "astro": "",
    "beancount": "",
    "clojure": "",
    "bb": "",
    "clj": "",
    "cljc": "",
    "cljs": "",
    "edn": "",
    "neocmake": "",
    "CMakeLists.txt": "",
    "cmake": "",
    "csharp": "",
    "cs": "",
    "cython": "",
    "pyx": "",
    "pxd": "",
    "pxi": "",
    "dart": "",
    "dockerfile": "",
    "Dockerfile": "",
    "elisp": "",
    "el": "",
    "elixir": "",
    "ex": "",
    "exs": "",
    "heex": "",
    "elm": "",
    "erlang": "",
    "erl": "",
    "hrl": "",
    "fish": "",
    "git-firefly": "",
    ".gitconfig": "",
    ".gitignore": "",
    "COMMIT_EDITMSG": "",
    "EDIT_DESCRIPTION": "",
    "MERGE_MSG": "",
    "NOTES_EDITMSG": "",
    "TAG_EDITMSG": "",
    "git-rebase-todo": "",
    "gleam": "",
    "glsl": "",
    "vert": "",
    "frag": "",
    "graphql": "",
    "gql": "",
    "haskell": "",
    "hs": "",
    "html": "",
    "htm": "",
    "shtml": "",
    "java": "",
    "kotlin": "",
    "kt": "",
    "latex": "",
    "tex": "",
    "log": "",
    "lua": "",
    "make": "",
    "Makefile": "",
    "nix": "",
    "nu": "",
    "ocaml": "",
    "ml": "",
    "mli": "",
    "php": "",
    "prisma": "",
    "proto": "",
    "purescript": "",
    "purs": "",
    "r": "",
    "R": "",
    "racket": "",
    "rkt": "",
    "rescript": "",
    "res": "",
    "resi": "",
    "ruby": "",
    "rb": "",
    "erb": "",
    "scheme": "",
    "scm": "",
    "scss": "",
    "sql": "",
    "svelte": "",
    "swift": "",
    "templ": "",
    "terraform": "",
    "tf": "",
    "tfvars": "",
    "hcl": "",
    "toml": "",
    "Cargo.lock": "",
    "vue": "",
    "wgsl": "",
    "wit": "",
    "zig": "",
    "{}_extension_suggest": "",
    "Do you want to install the recommended '{}' extension for '{}' files?": "",
    "Yes, install extension": "",
    "No, don't install it": "",
    "dismissed": "",
    "Cargo.toml": "",
    "a/b/c/d/.gitignore": "",
    "a/b/c/d/test.gleam": ""
  },
  "zed/crates/extensions_ui/src/extension_version_selector.rs": {
    "v{}": "",
    "Select extension version...": "",
    "Incompatible": "",
    "%Y-%m-%d": ""
  },
  "zed/crates/extensions_ui/src/extensions_ui.rs": {
    "failed to install dev extension": "",
    "git": "",
    "github": "",
    "gitlab": "",
    "bitbucket": "",
    "codeberg": "",
    "sourcehut": "",
    "permalink": "",
    "link": "",
    "open in": "",
    "vim": "",
    "sh": "",
    "bash": "",
    "c": "",
    "clang": "",
    "c++": "",
    "cpp": "",
    "go": "",
    "golang": "",
    "python": "",
    "py": "",
    "react": "",
    "rust": "",
    "type": "",
    "typescript": "",
    "ts": "",
    "Search extensions...": "",
    "v{}": "",
    "rebuild-{}": "",
    "Rebuild": "",
    "Uninstall": "",
    "{}: {}": "",
    "Authors": "",
    "Author": "",
    ", ": "",
    "<>": "",
    "repository-{}": "",
    "v{version}": "",
    "(v{installed_version} installed)": "",
    "Themes": "",
    "Icon Themes": "",
    "Languages": "",
    "Grammars": "",
    "Language Servers": "",
    "Context Servers": "",
    "Slash Commands": "",
    "Indexed Docs Providers": "",
    "Snippets": "",
    "Downloads: {}": "",
    "more-{}": "",
    "Install Another Version...": "",
    "Copy Extension ID": "",
    "Install": "",
    "Extension Installed": "",
    "Upgrade": "",
    "Extension Uninstalled": "",
    "v{version} is not compatible with this version of Zed.": "",
    "BufferSearchBar": "",
    "no extensions": "",
    "Loading extensions...": "",
    "No extensions that match your search.": "",
    "No extensions.": "",
    "No installed extensions that match your search.": "",
    "No installed extensions.": "",
    "No not installed extensions that match your search.": "",
    "No not installed extensions.": "",
    "Zed comes with basic Git support. More Git features are coming in the future.": "",
    "https://zed.dev/docs/git": "",
    "Zed supports linking to a source line on GitHub and others.": "",
    "https://zed.dev/docs/git#git-integrations": "",
    "Vim support is built-in to Zed!": "",
    "https://zed.dev/docs/vim": "",
    "enable-vim": "",
    "Enable vim mode": "",
    "Vim Mode Toggled": "",
    "Feature Upsell": "",
    "Shell support is built-in to Zed!": "",
    "https://zed.dev/docs/languages/bash": "",
    "C support is built-in to Zed!": "",
    "https://zed.dev/docs/languages/c": "",
    "C++ support is built-in to Zed!": "",
    "https://zed.dev/docs/languages/cpp": "",
    "Go support is built-in to Zed!": "",
    "https://zed.dev/docs/languages/go": "",
    "Python support is built-in to Zed!": "",
    "https://zed.dev/docs/languages/python": "",
    "React support is built-in to Zed!": "",
    "https://zed.dev/docs/languages/typescript": "",
    "Rust support is built-in to Zed!": "",
    "https://zed.dev/docs/languages/rust": "",
    "Typescript support is built-in to Zed!": "",
    "Extensions": "",
    "install-dev-extension": "",
    "Install Dev Extension": "",
    "icon-themes-filter": "",
    "Icon themes": "",
    "filter-all": "",
    "All": "",
    "Show all extensions": "",
    "filter-installed": "",
    "Installed": "",
    "Show installed extensions": "",
    "filter-not-installed": "",
    "Not Installed": "",
    "Show not installed extensions": "",
    "entries": "",
    "Extensions Page Opened": ""
  },
  "zed/crates/feedback/src/feedback_modal.rs": {
    "email_address": "",
    "\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b": "",
    "Feedback failed to submit, see error log for details.": "",
    "Discard feedback?": "",
    "Yes": "",
    "No": "",
    "Email address (optional)": "",
    "You can use markdown to organize your feedback with code and links.": "",
    "Feedback editor is never a multi-buffer": "",
    "Ready to submit your feedback?": "",
    "Yes, Submit!": "",
    "OK": "",
    "Error submitting feedback": "",
    "/api/feedback": "",
    "content-type": "",
    "application/json": "",
    "Feedback API failed with error: {}": "",
    "Submitting...": "",
    "Submit": "",
    "GiveFeedback": "",
    "Give Feedback": "",
    "Feedback must be at least {} characters.": "",
    "Characters: {}": "",
    "Provide an email address if you want us to be able to reply.": "",
    "zed_repository": "",
    "Zed Repository": "",
    "cancel_feedback": "",
    "Cancel": "",
    "submit_feedback": "",
    "Submit feedback to the Zed team.": ""
  },
  "zed/crates/feedback/src/feedback.rs": {
    "https://github.com/zed-industries/zed": "",
    "https://github.com/zed-industries/zed/discussions/new/choose": "",
    "https://github.com/zed-industries/zed/issues/new": "",
    "?": "",
    "template=1_bug_report.yml": "",
    "&": "",
    "environment={}": "",
    "Copied into clipboard": "",
    "OK": ""
  },
  "zed/crates/feedback/src/system_specs.rs": {
    "{} || {} || {}": "",
    "OS: {} {}": "",
    "Zed: v{} ({}) {}": "",
    "{} {}": "",
    "(Taylor's Version)": "",
    "Memory: {}": "",
    "Architecture: {}": "",
    "GPU: {}": "",
    "{system_specs}": ""
  },
  "zed/crates/file_finder/src/file_finder_tests.rs": {
    "…": "",
    "p/a/b/c/d/": "",
    "p/…/d/": "",
    "p/a/…/c/d/": "",
    "p/…/c/d/": "",
    "p/a/b/c/d": "",
    "p/…/d": "",
    "p/a/…/c/d": "",
    "p/…/c/d": "",
    "/p/a/b/c/d/": "",
    "/p/…/d/": "",
    "/p/a/…/c/d/": "",
    "/p/…/c/d/": "",
    "project/dir/child/grandchild": "",
    "project/one/two/X/three/sub": "",
    "project/…/X/three/sub": "",
    "project/one/two/three/X/sub": "",
    "project/…/three/X/sub": "",
    "b0.5": "",
    "c1.0": "",
    "a1.0": "",
    "a0.5": "",
    "b1.0": "",
    "/root": "",
    "a": "",
    "banana": "",
    "bandana": "",
    "bna": "",
    " bandana": "",
    "bandana ": "",
    " bandana ": "",
    " ndan ": "",
    " band ": "",
    "a bandana": "",
    "Wrong number of matches for bandana query '{bandana_query}'": "",
    "Wrong match for bandana query '{bandana_query}'": "",
    "file1.txt": "",
    "b": "",
    "file2.txt": "",
    "/root/a/b/file2.txt": "",
    "a/b/file2.txt": "",
    "Matching abs path should be the only match": "",
    "/root/a/b/file1.txt": "",
    "Mismatching abs path should produce no matches": "",
    "其他": "",
    "S数据表格": "",
    "task.xlsx": "",
    "some content": "",
    "t": "",
    "其他/S数据表格/task.xlsx": "",
    "first.rs": "",
    "// First Rust file": "",
    "/src": "",
    "test": "",
    "second.rs": "",
    "// Second Rust file": "",
    "{file_query}:{file_row}:{file_column}": "",
    "Finder should have a query after the update_matches call": "",
    "Expected to have 1 selection (caret) after file finder confirm, but got: {all_selections:?}": "",
    "Caret selection should have its start and end at the same position": "",
    "Query inside file should get caret with the same focus row": "",
    "Query inside file should get caret with the same focus column": "",
    "Excessive rows (as in query outside file borders) should get trimmed to last file row": "",
    "Excessive columns (as in query outside file borders) should get trimmed to selected row's last column": "",
    "/dir": "",
    "hello": "",
    "goodbye": "",
    "halogen-light": "",
    "happiness": "",
    "height": "",
    "hi": "",
    "hiccup": "",
    "/ancestor": "",
    ".gitignore": "",
    "ignored-root": "",
    "tracked-root": "",
    "/ancestor/tracked-root": "",
    "/ancestor/ignored-root": "",
    "the-parent-dir": "",
    "the-file": "",
    "/root/the-parent-dir/the-file": "",
    "thf": "",
    "thf/": "",
    "dir1": "",
    "a.txt": "",
    "dir2": "",
    "b.txt": "",
    "dir2/b.txt": "",
    "dir2/a.txt": "",
    "dir1/a.txt": "",
    "dir3": "",
    "dir": "",
    "third.rs": "",
    "// Third Rust file": "",
    "fir": "",
    "Should have no history before opening any files": "",
    "sec": "",
    "test/first.rs": "",
    "/src/test/first.rs": "",
    "Should show 1st opened item in the history when opening the 2nd item": "",
    "thi": "",
    "test/second.rs": "",
    "/src/test/second.rs": "",
    "\n    );\n\n    let history_after_third =\n        open_close_queried_buffer(": "",
    ", 1, ": "",
    ", &workspace, cx).await;\n    assert_eq!(\n                history_after_third,\n                vec![\n                    FoundPath::new(\n                        ProjectPath {\n                            worktree_id,\n                            path: Arc::from(Path::new(": "",
    ")),\n                        },\n                        Some(PathBuf::from(path!(": "",
    ")))\n                    ),\n                    FoundPath::new(\n                        ProjectPath {\n                            worktree_id,\n                            path: Arc::from(Path::new(": "",
    ")))\n                    ),\n                ],\n                ": "",
    "\n            );\n\n    let history_after_second_again =\n        open_close_queried_buffer(": "",
    ", &workspace, cx).await;\n    assert_eq!(\n                history_after_second_again,\n                vec![\n                    FoundPath::new(\n                        ProjectPath {\n                            worktree_id,\n                            path: Arc::from(Path::new(": "",
    "\n            );\n}\n\n#[gpui::test]\nasync fn test_external_files_history(cx: &mut gpui::TestAppContext) {\n    let app_state = init_test(cx);\n\n    app_state\n        .fs\n        .as_fake()\n        .insert_tree(\n            path!(": "",
    "),\n            json!({\n                ": "",
    ": {\n                    ": "",
    ": ": "",
    ",\n                    ": "",
    ",\n                }\n            }),\n        )\n        .await;\n\n    app_state\n        .fs\n        .as_fake()\n        .insert_tree(\n            path!(": "",
    ",\n                }\n            }),\n        )\n        .await;\n\n    let project = Project::test(app_state.fs.clone(), [path!(": "",
    ").as_ref()], cx).await;\n    cx.update(|cx| {\n        project.update(cx, |project, cx| {\n            project.find_or_create_worktree(path!(": "",
    "), false, cx)\n        })\n    })\n    .detach();\n    cx.background_executor.run_until_parked();\n\n    let (workspace, cx) = cx.add_window_view(|window, cx| Workspace::test_new(project, window, cx));\n    let worktree_id = cx.read(|cx| {\n        let worktrees = workspace.read(cx).worktrees(cx).collect::<Vec<_>>();\n        assert_eq!(worktrees.len(), 1,);\n\n        WorktreeId::from_usize(worktrees[0].entity_id().as_u64() as usize)\n    });\n    workspace\n        .update_in(cx, |workspace, window, cx| {\n            workspace.open_abs_path(\n                PathBuf::from(path!(": "",
    ")),\n                OpenOptions {\n                    visible: Some(OpenVisible::None),\n                    ..Default::default()\n                },\n                window,\n                cx,\n            )\n        })\n        .detach();\n    cx.background_executor.run_until_parked();\n    let external_worktree_id = cx.read(|cx| {\n        let worktrees = workspace.read(cx).worktrees(cx).collect::<Vec<_>>();\n        assert_eq!(\n            worktrees.len(),\n            2,\n            ": "",
    "\n        );\n\n        WorktreeId::from_usize(\n            worktrees\n                .into_iter()\n                .find(|worktree| worktree.entity_id().as_u64() as usize != worktree_id.to_usize())\n                .expect(": "",
    ")\n                .entity_id()\n                .as_u64() as usize,\n        )\n    });\n    cx.dispatch_action(workspace::CloseActiveItem {\n        save_intent: None,\n        close_pinned: false,\n    });\n\n    let initial_history_items =\n        open_close_queried_buffer(": "",
    ", &workspace, cx).await;\n    assert_eq!(\n        initial_history_items,\n        vec![FoundPath::new(\n            ProjectPath {\n                worktree_id: external_worktree_id,\n                path: Arc::from(Path::new(": "",
    ")),\n            },\n            Some(PathBuf::from(path!(": "",
    ")))\n        )],\n        ": "",
    "\n    );\n\n    let updated_history_items =\n        open_close_queried_buffer(": "",
    ", &workspace, cx).await;\n    assert_eq!(\n        updated_history_items,\n        vec![\n            FoundPath::new(\n                ProjectPath {\n                    worktree_id,\n                    path: Arc::from(Path::new(": "",
    ")),\n                },\n                Some(PathBuf::from(path!(": "",
    ")))\n            ),\n            FoundPath::new(\n                ProjectPath {\n                    worktree_id: external_worktree_id,\n                    path: Arc::from(Path::new(": "",
    ")))\n            ),\n        ],\n        ": "",
    ",\n    );\n}\n\n#[gpui::test]\nasync fn test_toggle_panel_new_selections(cx: &mut gpui::TestAppContext) {\n    let app_state = init_test(cx);\n\n    app_state\n        .fs\n        .as_fake()\n        .insert_tree(\n            path!(": "",
    ").as_ref()], cx).await;\n    let (workspace, cx) = cx.add_window_view(|window, cx| Workspace::test_new(project, window, cx));\n\n    // generate some history to select from\n    open_close_queried_buffer(": "",
    ", &workspace, cx).await;\n    open_close_queried_buffer(": "",
    ", &workspace, cx).await;\n    let current_history = open_close_queried_buffer(": "",
    ", &workspace, cx).await;\n\n    for expected_selected_index in 0..current_history.len() {\n        cx.dispatch_action(ToggleFileFinder::default());\n        let picker = active_file_picker(&workspace, cx);\n        let selected_index = picker.update(cx, |picker, _| picker.delegate.selected_index());\n        assert_eq!(\n            selected_index, expected_selected_index,\n            ": "",
    "\n        );\n    }\n\n    cx.dispatch_action(ToggleFileFinder::default());\n    let selected_index = workspace.update(cx, |workspace, cx| {\n        workspace\n            .active_modal::<FileFinder>(cx)\n            .unwrap()\n            .read(cx)\n            .picker\n            .read(cx)\n            .delegate\n            .selected_index()\n    });\n    assert_eq!(\n        selected_index, 0,\n        ": "",
    "\n    );\n}\n\n#[gpui::test]\nasync fn test_search_preserves_history_items(cx: &mut gpui::TestAppContext) {\n    let app_state = init_test(cx);\n\n    app_state\n        .fs\n        .as_fake()\n        .insert_tree(\n            path!(": "",
    ").as_ref()], cx).await;\n    let (workspace, cx) = cx.add_window_view(|window, cx| Workspace::test_new(project, window, cx));\n    let worktree_id = cx.read(|cx| {\n        let worktrees = workspace.read(cx).worktrees(cx).collect::<Vec<_>>();\n        assert_eq!(worktrees.len(), 1,);\n\n        WorktreeId::from_usize(worktrees[0].entity_id().as_u64() as usize)\n    });\n\n    // generate some history to select from\n    open_close_queried_buffer(": "",
    ", &workspace, cx).await;\n\n    let finder = open_file_picker(&workspace, cx);\n    let first_query = ": "",
    ";\n    finder\n        .update_in(cx, |finder, window, cx| {\n            finder\n                .delegate\n                .update_matches(first_query.to_string(), window, cx)\n        })\n        .await;\n    finder.update(cx, |picker, _| {\n            let matches = collect_search_matches(picker);\n            assert_eq!(matches.history.len(), 1, ": "",
    ");\n            let history_match = matches.history_found_paths.first().expect(": "",
    ");\n            assert_eq!(history_match, &FoundPath::new(\n                ProjectPath {\n                    worktree_id,\n                    path: Arc::from(Path::new(": "",
    ")))\n            ));\n            assert_eq!(matches.search.len(), 1, ": "",
    ");\n            assert_eq!(matches.search.first().unwrap(), Path::new(": "",
    "));\n        });\n\n    let second_query = ": "",
    ";\n    let finder = active_file_picker(&workspace, cx);\n    finder\n        .update_in(cx, |finder, window, cx| {\n            finder\n                .delegate\n                .update_matches(second_query.to_string(), window, cx)\n        })\n        .await;\n    finder.update(cx, |picker, _| {\n        assert!(\n            collect_search_matches(picker)\n                .search_paths_only()\n                .is_empty(),\n            ": "",
    "\n        );\n    });\n\n    let first_query_again = first_query;\n\n    let finder = active_file_picker(&workspace, cx);\n    finder\n        .update_in(cx, |finder, window, cx| {\n            finder\n                .delegate\n                .update_matches(first_query_again.to_string(), window, cx)\n        })\n        .await;\n    finder.update(cx, |picker, _| {\n            let matches = collect_search_matches(picker);\n            assert_eq!(matches.history.len(), 1, ": "",
    "));\n        });\n}\n\n#[gpui::test]\nasync fn test_search_sorts_history_items(cx: &mut gpui::TestAppContext) {\n    let app_state = init_test(cx);\n\n    app_state\n        .fs\n        .as_fake()\n        .insert_tree(\n            path!(": "",
    ").as_ref()], cx).await;\n    let (workspace, cx) = cx.add_window_view(|window, cx| Workspace::test_new(project, window, cx));\n    // generate some history to select from\n    open_close_queried_buffer(": "",
    ", &workspace, cx).await;\n\n    let finder = open_file_picker(&workspace, cx);\n    let query = ": "",
    ";\n    finder\n        .update_in(cx, |finder, window, cx| {\n            finder\n                .delegate\n                .update_matches(query.to_string(), window, cx)\n        })\n        .await;\n    finder.update(cx, |finder, _| {\n        let search_matches = collect_search_matches(finder);\n        assert_eq!(\n            search_matches.history,\n            vec![PathBuf::from(": "",
    "), PathBuf::from(": "",
    "),],\n        );\n        assert_eq!(\n            search_matches.search,\n            vec![\n                PathBuf::from(": "",
    "),\n                PathBuf::from(": "",
    "),\n            ],\n        );\n    });\n}\n\n#[gpui::test]\nasync fn test_select_current_open_file_when_no_history(cx: &mut gpui::TestAppContext) {\n    let app_state = init_test(cx);\n\n    app_state\n        .fs\n        .as_fake()\n        .insert_tree(\n            path!(": "",
    ").as_ref()], cx).await;\n    let (workspace, cx) = cx.add_window_view(|window, cx| Workspace::test_new(project, window, cx));\n    // Open new buffer\n    open_queried_buffer(": "",
    ", &workspace, cx).await;\n\n    let picker = open_file_picker(&workspace, cx);\n    picker.update(cx, |finder, _| {\n        assert_match_selection(&finder, 0, ": "",
    ");\n    });\n}\n\n#[gpui::test]\nasync fn test_keep_opened_file_on_top_of_search_results_and_select_next_one(\n    cx: &mut TestAppContext,\n) {\n    let app_state = init_test(cx);\n\n    app_state\n        .fs\n        .as_fake()\n        .insert_tree(\n            path!(": "",
    ").as_ref()], cx).await;\n    let (workspace, cx) = cx.add_window_view(|window, cx| Workspace::test_new(project, window, cx));\n\n    open_close_queried_buffer(": "",
    ", &workspace, cx).await;\n    open_queried_buffer(": "",
    ", &workspace, cx).await;\n\n    // main.rs is on top, previously used is selected\n    let picker = open_file_picker(&workspace, cx);\n    picker.update(cx, |finder, _| {\n        assert_eq!(finder.delegate.matches.len(), 3);\n        assert_match_selection(finder, 0, ": "",
    ");\n        assert_match_at_position(finder, 1, ": "",
    ");\n        assert_match_at_position(finder, 2, ": "",
    ");\n    });\n\n    // all files match, main.rs is still on top, but the second item is selected\n    picker\n        .update_in(cx, |finder, window, cx| {\n            finder\n                .delegate\n                .update_matches(": "",
    ".to_string(), window, cx)\n        })\n        .await;\n    picker.update(cx, |finder, _| {\n        assert_eq!(finder.delegate.matches.len(), 5);\n        assert_match_at_position(finder, 0, ": "",
    ");\n        assert_match_selection(finder, 1, ": "",
    ");\n        assert_match_at_position(finder, 3, ": "",
    ");\n        assert_match_at_position(finder, 4, ": "",
    ");\n    });\n\n    // main.rs is not among matches, select top item\n    picker\n        .update_in(cx, |finder, window, cx| {\n            finder.delegate.update_matches(": "",
    ".to_string(), window, cx)\n        })\n        .await;\n    picker.update(cx, |finder, _| {\n        assert_eq!(finder.delegate.matches.len(), 2);\n        assert_match_at_position(finder, 0, ": "",
    ");\n    });\n\n    // main.rs is back, put it on top and select next item\n    picker\n        .update_in(cx, |finder, window, cx| {\n            finder.delegate.update_matches(": "",
    ".to_string(), window, cx)\n        })\n        .await;\n    picker.update(cx, |finder, _| {\n        assert_eq!(finder.delegate.matches.len(), 3);\n        assert_match_at_position(finder, 0, ": "",
    ");\n    });\n\n    // get back to the initial state\n    picker\n        .update_in(cx, |finder, window, cx| {\n            finder.delegate.update_matches(": "",
    ".to_string(), window, cx)\n        })\n        .await;\n    picker.update(cx, |finder, _| {\n        assert_eq!(finder.delegate.matches.len(), 3);\n        assert_match_selection(finder, 0, ": "",
    ");\n    });\n}\n\n#[gpui::test]\nasync fn test_non_separate_history_items(cx: &mut TestAppContext) {\n    let app_state = init_test(cx);\n\n    app_state\n        .fs\n        .as_fake()\n        .insert_tree(\n            path!(": "",
    ", &workspace, cx).await;\n\n    cx.dispatch_action(ToggleFileFinder::default());\n    let picker = active_file_picker(&workspace, cx);\n    // main.rs is on top, previously used is selected\n    picker.update(cx, |finder, _| {\n        assert_eq!(finder.delegate.matches.len(), 3);\n        assert_match_selection(finder, 0, ": "",
    ");\n    });\n}\n\n#[gpui::test]\nasync fn test_history_items_shown_in_order_of_open(cx: &mut TestAppContext) {\n    let app_state = init_test(cx);\n\n    app_state\n        .fs\n        .as_fake()\n        .insert_tree(\n            path!(": "",
    ").as_ref()], cx).await;\n    let (workspace, cx) = cx.add_window_view(|window, cx| Workspace::test_new(project, window, cx));\n\n    open_queried_buffer(": "",
    ", &workspace, cx).await;\n\n    let picker = open_file_picker(&workspace, cx);\n    picker.update(cx, |finder, _| {\n        assert_eq!(finder.delegate.matches.len(), 3);\n        assert_match_selection(finder, 0, ": "",
    ");\n    });\n\n    cx.dispatch_action(SelectNext);\n    cx.dispatch_action(Confirm); // Open 2.txt\n\n    let picker = open_file_picker(&workspace, cx);\n    picker.update(cx, |finder, _| {\n        assert_eq!(finder.delegate.matches.len(), 3);\n        assert_match_selection(finder, 0, ": "",
    ");\n    });\n\n    cx.dispatch_action(SelectNext);\n    cx.dispatch_action(SelectNext);\n    cx.dispatch_action(Confirm); // Open 1.txt\n\n    let picker = open_file_picker(&workspace, cx);\n    picker.update(cx, |finder, _| {\n        assert_eq!(finder.delegate.matches.len(), 3);\n        assert_match_selection(finder, 0, ": "",
    ");\n    });\n}\n\n#[gpui::test]\nasync fn test_selected_history_item_stays_selected_on_worktree_updated(cx: &mut TestAppContext) {\n    let app_state = init_test(cx);\n\n    app_state\n        .fs\n        .as_fake()\n        .insert_tree(\n            path!(": "",
    ");\n    });\n\n    cx.dispatch_action(SelectNext);\n\n    // Add more files to the worktree to trigger update matches\n    for i in 0..5 {\n        let filename = if cfg!(windows) {\n            format!(": "",
    ", 4 + i)\n        } else {\n            format!(": "",
    ", 4 + i)\n        };\n        app_state\n            .fs\n            .create_file(Path::new(&filename), Default::default())\n            .await\n            .expect(": "",
    ");\n    }\n\n    cx.executor().advance_clock(FS_WATCH_LATENCY);\n\n    picker.update(cx, |finder, _| {\n        assert_eq!(finder.delegate.matches.len(), 3);\n        assert_match_at_position(finder, 0, ": "",
    ");\n    });\n}\n\n#[gpui::test]\nasync fn test_history_items_vs_very_good_external_match(cx: &mut gpui::TestAppContext) {\n    let app_state = init_test(cx);\n\n    app_state\n        .fs\n        .as_fake()\n        .insert_tree(\n            path!(": "",
    ";\n    cx.simulate_input(query);\n    finder.update(cx, |picker, _| {\n            let search_entries = collect_search_matches(picker).search_paths_only();\n            assert_eq!(\n                search_entries,\n                vec![\n                    PathBuf::from(": "",
    "),\n                    PathBuf::from(": "",
    "),\n                ],\n                ": "",
    "\n            );\n        });\n}\n\n#[gpui::test]\nasync fn test_nonexistent_history_items_not_shown(cx: &mut gpui::TestAppContext) {\n    let app_state = init_test(cx);\n\n    app_state\n        .fs\n        .as_fake()\n        .insert_tree(\n            path!(": "",
    ").as_ref()], cx).await;\n    let (workspace, cx) = cx.add_window_view(|window, cx| Workspace::test_new(project, window, cx)); // generate some history to select from\n    open_close_queried_buffer(": "",
    ", &workspace, cx).await;\n    app_state\n        .fs\n        .remove_file(\n            Path::new(path!(": "",
    ")),\n            RemoveOptions::default(),\n        )\n        .await\n        .unwrap();\n    cx.run_until_parked();\n\n    let picker = open_file_picker(&workspace, cx);\n    cx.simulate_input(": "",
    ");\n\n    picker.update(cx, |picker, _| {\n            assert_eq!(\n                collect_search_matches(picker).history,\n                vec![\n                    PathBuf::from(": "",
    "\n            );\n        });\n}\n\n#[gpui::test]\nasync fn test_search_results_refreshed_on_worktree_updates(cx: &mut gpui::TestAppContext) {\n    let app_state = init_test(cx);\n\n    app_state\n        .fs\n        .as_fake()\n        .insert_tree(\n            ": "",
    ",\n            json!({\n                ": "",
    ",\n                ": "",
    ",\n            }),\n        )\n        .await;\n\n    let project = Project::test(app_state.fs.clone(), [": "",
    ".as_ref()], cx).await;\n    let (workspace, cx) =\n        cx.add_window_view(|window, cx| Workspace::test_new(project.clone(), window, cx));\n\n    // Initial state\n    let picker = open_file_picker(&workspace, cx);\n    cx.simulate_input(": "",
    ");\n    picker.update(cx, |finder, _| {\n        assert_eq!(finder.delegate.matches.len(), 2);\n        assert_match_at_position(finder, 0, ": "",
    ");\n    });\n\n    // Delete main.rs\n    app_state\n        .fs\n        .remove_file(": "",
    ".as_ref(), Default::default())\n        .await\n        .expect(": "",
    ");\n    cx.executor().advance_clock(FS_WATCH_LATENCY);\n\n    // main.rs is in not among search results anymore\n    picker.update(cx, |finder, _| {\n        assert_eq!(finder.delegate.matches.len(), 1);\n        assert_match_at_position(finder, 0, ": "",
    ");\n    });\n\n    // Create util.rs\n    app_state\n        .fs\n        .create_file(": "",
    ");\n    cx.executor().advance_clock(FS_WATCH_LATENCY);\n\n    // util.rs is among search results\n    picker.update(cx, |finder, _| {\n        assert_eq!(finder.delegate.matches.len(), 2);\n        assert_match_at_position(finder, 0, ": "",
    ");\n    });\n}\n\n#[gpui::test]\nasync fn test_search_results_refreshed_on_adding_and_removing_worktrees(\n    cx: &mut gpui::TestAppContext,\n) {\n    let app_state = init_test(cx);\n\n    app_state\n        .fs\n        .as_fake()\n        .insert_tree(\n            ": "",
    ",\n                },\n                ": "",
    ",\n                }\n            }),\n        )\n        .await;\n\n    let project = Project::test(app_state.fs.clone(), [": "",
    ".as_ref()], cx).await;\n    let (workspace, cx) =\n        cx.add_window_view(|window, cx| Workspace::test_new(project.clone(), window, cx));\n    let worktree_1_id = project.update(cx, |project, cx| {\n        let worktree = project.worktrees(cx).last().expect(": "",
    ");\n        worktree.read(cx).id()\n    });\n\n    // Initial state\n    let picker = open_file_picker(&workspace, cx);\n    cx.simulate_input(": "",
    ");\n    });\n\n    // Add new worktree\n    project\n        .update(cx, |project, cx| {\n            project\n                .find_or_create_worktree(": "",
    ", true, cx)\n                .into_future()\n        })\n        .await\n        .expect(": "",
    ");\n    cx.executor().advance_clock(FS_WATCH_LATENCY);\n\n    // main.rs is among search results\n    picker.update(cx, |finder, _| {\n        assert_eq!(finder.delegate.matches.len(), 3);\n        assert_match_at_position(finder, 0, ": "",
    ");\n    });\n\n    // Remove the first worktree\n    project.update(cx, |project, cx| {\n        project.remove_worktree(worktree_1_id, cx);\n    });\n    cx.executor().advance_clock(FS_WATCH_LATENCY);\n\n    // Files from the first worktree are not in the search results anymore\n    picker.update(cx, |finder, _| {\n        assert_eq!(finder.delegate.matches.len(), 1);\n        assert_match_at_position(finder, 0, ": "",
    ");\n    });\n}\n\n#[gpui::test]\nasync fn test_selected_match_stays_selected_after_matches_refreshed(cx: &mut gpui::TestAppContext) {\n    let app_state = init_test(cx);\n\n    app_state.fs.as_fake().insert_tree(": "",
    ", json!({})).await;\n\n    app_state\n        .fs\n        .create_dir(": "",
    ".as_ref())\n        .await\n        .expect(": "",
    ");\n\n    let initial_files_num = 5;\n    for i in 0..initial_files_num {\n        let filename = format!(": "",
    ", 10 + i);\n        app_state\n            .fs\n            .create_file(Path::new(&filename), Default::default())\n            .await\n            .expect(": "",
    ");\n    }\n\n    let project = Project::test(app_state.fs.clone(), [": "",
    ");\n    let selected_index = 3;\n    // Checking only the filename, not the whole path\n    let selected_file = format!(": "",
    ", 10 + selected_index);\n    // Select even/file_13.txt\n    for _ in 0..selected_index {\n        cx.dispatch_action(SelectNext);\n    }\n\n    picker.update(cx, |finder, _| {\n        assert_match_selection(finder, selected_index, &selected_file)\n    });\n\n    // Add more matches to the search results\n    let files_to_add = 10;\n    for i in 0..files_to_add {\n        let filename = format!(": "",
    ", 20 + i);\n        app_state\n            .fs\n            .create_file(Path::new(&filename), Default::default())\n            .await\n            .expect(": "",
    ");\n    }\n    cx.executor().advance_clock(FS_WATCH_LATENCY);\n\n    // file_13.txt is still selected\n    picker.update(cx, |finder, _| {\n        let expected_selected_index = selected_index + files_to_add;\n        assert_match_selection(finder, expected_selected_index, &selected_file);\n    });\n}\n\n#[gpui::test]\nasync fn test_first_match_selected_if_previous_one_is_not_in_the_match_list(\n    cx: &mut gpui::TestAppContext,\n) {\n    let app_state = init_test(cx);\n\n    app_state\n        .fs\n        .as_fake()\n        .insert_tree(\n            ": "",
    ");\n    // Select even/file_2.txt\n    cx.dispatch_action(SelectNext);\n\n    // Remove the selected entry\n    app_state\n        .fs\n        .remove_file(": "",
    ");\n    cx.executor().advance_clock(FS_WATCH_LATENCY);\n\n    // file_1.txt is now selected\n    picker.update(cx, |finder, _| {\n        assert_match_selection(finder, 0, ": "",
    ");\n    });\n}\n\n#[gpui::test]\nasync fn test_keeps_file_finder_open_after_modifier_keys_release(cx: &mut gpui::TestAppContext) {\n    let app_state = init_test(cx);\n\n    app_state\n        .fs\n        .as_fake()\n        .insert_tree(\n            path!(": "",
    ",\n            }),\n        )\n        .await;\n\n    let project = Project::test(app_state.fs.clone(), [path!(": "",
    ", &workspace, cx).await;\n\n    cx.simulate_modifiers_change(Modifiers::secondary_key());\n    open_file_picker(&workspace, cx);\n\n    cx.simulate_modifiers_change(Modifiers::none());\n    active_file_picker(&workspace, cx);\n}\n\n#[gpui::test]\nasync fn test_opens_file_on_modifier_keys_release(cx: &mut gpui::TestAppContext) {\n    let app_state = init_test(cx);\n\n    app_state\n        .fs\n        .as_fake()\n        .insert_tree(\n            path!(": "",
    ", &workspace, cx).await;\n\n    cx.simulate_modifiers_change(Modifiers::secondary_key());\n    let picker = open_file_picker(&workspace, cx);\n    picker.update(cx, |finder, _| {\n        assert_eq!(finder.delegate.matches.len(), 2);\n        assert_match_selection(finder, 0, ": "",
    ");\n    });\n\n    cx.dispatch_action(SelectNext);\n    cx.simulate_modifiers_change(Modifiers::none());\n    cx.read(|cx| {\n        let active_editor = workspace.read(cx).active_item_as::<Editor>(cx).unwrap();\n        assert_eq!(active_editor.read(cx).title(cx), ": "",
    ");\n    });\n}\n\n#[gpui::test]\nasync fn test_switches_between_release_norelease_modes_on_forward_nav(\n    cx: &mut gpui::TestAppContext,\n) {\n    let app_state = init_test(cx);\n\n    app_state\n        .fs\n        .as_fake()\n        .insert_tree(\n            path!(": "",
    ", &workspace, cx).await;\n\n    // Open with a shortcut\n    cx.simulate_modifiers_change(Modifiers::secondary_key());\n    let picker = open_file_picker(&workspace, cx);\n    picker.update(cx, |finder, _| {\n        assert_eq!(finder.delegate.matches.len(), 2);\n        assert_match_selection(finder, 0, ": "",
    ");\n    });\n\n    // Switch to navigating with other shortcuts\n    // Don't open file on modifiers release\n    cx.simulate_modifiers_change(Modifiers::control());\n    cx.dispatch_action(SelectNext);\n    cx.simulate_modifiers_change(Modifiers::none());\n    picker.update(cx, |finder, _| {\n        assert_eq!(finder.delegate.matches.len(), 2);\n        assert_match_at_position(finder, 0, ": "",
    ");\n    });\n\n    // Back to navigation with initial shortcut\n    // Open file on modifiers release\n    cx.simulate_modifiers_change(Modifiers::secondary_key());\n    cx.dispatch_action(ToggleFileFinder::default());\n    cx.simulate_modifiers_change(Modifiers::none());\n    cx.read(|cx| {\n        let active_editor = workspace.read(cx).active_item_as::<Editor>(cx).unwrap();\n        assert_eq!(active_editor.read(cx).title(cx), ": "",
    ");\n    });\n}\n\n#[gpui::test]\nasync fn test_switches_between_release_norelease_modes_on_backward_nav(\n    cx: &mut gpui::TestAppContext,\n) {\n    let app_state = init_test(cx);\n\n    app_state\n        .fs\n        .as_fake()\n        .insert_tree(\n            path!(": "",
    "\n            }),\n        )\n        .await;\n\n    let project = Project::test(app_state.fs.clone(), [path!(": "",
    ", &workspace, cx).await;\n\n    // Open with a shortcut\n    cx.simulate_modifiers_change(Modifiers::secondary_key());\n    let picker = open_file_picker(&workspace, cx);\n    picker.update(cx, |finder, _| {\n        assert_eq!(finder.delegate.matches.len(), 3);\n        assert_match_selection(finder, 0, ": "",
    ");\n    });\n\n    // Switch to navigating with other shortcuts\n    // Don't open file on modifiers release\n    cx.simulate_modifiers_change(Modifiers::control());\n    cx.dispatch_action(menu::SelectPrevious);\n    cx.simulate_modifiers_change(Modifiers::none());\n    picker.update(cx, |finder, _| {\n        assert_eq!(finder.delegate.matches.len(), 3);\n        assert_match_at_position(finder, 0, ": "",
    ");\n        assert_match_selection(finder, 2, ": "",
    ");\n    });\n\n    // Back to navigation with initial shortcut\n    // Open file on modifiers release\n    cx.simulate_modifiers_change(Modifiers::secondary_key());\n    cx.dispatch_action(SelectPrevious); // <-- File Finder's SelectPrevious, not menu's\n    cx.simulate_modifiers_change(Modifiers::none());\n    cx.read(|cx| {\n        let active_editor = workspace.read(cx).active_item_as::<Editor>(cx).unwrap();\n        assert_eq!(active_editor.read(cx).title(cx), ": "",
    ");\n    });\n}\n\n#[gpui::test]\nasync fn test_extending_modifiers_does_not_confirm_selection(cx: &mut gpui::TestAppContext) {\n    let app_state = init_test(cx);\n\n    app_state\n        .fs\n        .as_fake()\n        .insert_tree(\n            path!(": "",
    ", &workspace, cx).await;\n\n    cx.simulate_modifiers_change(Modifiers::secondary_key());\n    open_file_picker(&workspace, cx);\n\n    cx.simulate_modifiers_change(Modifiers::command_shift());\n    active_file_picker(&workspace, cx);\n}\n\n#[gpui::test]\nasync fn test_repeat_toggle_action(cx: &mut gpui::TestAppContext) {\n    let app_state = init_test(cx);\n    app_state\n        .fs\n        .as_fake()\n        .insert_tree(\n            ": "",
    ".as_ref()], cx).await;\n    let (workspace, cx) = cx.add_window_view(|window, cx| Workspace::test_new(project, window, cx));\n\n    cx.dispatch_action(ToggleFileFinder::default());\n    let picker = active_file_picker(&workspace, cx);\n    picker.update(cx, |picker, _| {\n        assert_eq!(picker.delegate.selected_index, 0);\n        assert_eq!(picker.logical_scroll_top_index(), 0);\n    });\n\n    // When toggling repeatedly, the picker scrolls to reveal the selected item.\n    cx.dispatch_action(ToggleFileFinder::default());\n    cx.dispatch_action(ToggleFileFinder::default());\n    cx.dispatch_action(ToggleFileFinder::default());\n    picker.update(cx, |picker, _| {\n        assert_eq!(picker.delegate.selected_index, 3);\n        assert_eq!(picker.logical_scroll_top_index(), 3);\n    });\n}\n\nasync fn open_close_queried_buffer(\n    input: &str,\n    expected_matches: usize,\n    expected_editor_title: &str,\n    workspace: &Entity<Workspace>,\n    cx: &mut gpui::VisualTestContext,\n) -> Vec<FoundPath> {\n    let history_items = open_queried_buffer(\n        input,\n        expected_matches,\n        expected_editor_title,\n        workspace,\n        cx,\n    )\n    .await;\n\n    cx.dispatch_action(workspace::CloseActiveItem {\n        save_intent: None,\n        close_pinned: false,\n    });\n\n    history_items\n}\n\nasync fn open_queried_buffer(\n    input: &str,\n    expected_matches: usize,\n    expected_editor_title: &str,\n    workspace: &Entity<Workspace>,\n    cx: &mut gpui::VisualTestContext,\n) -> Vec<FoundPath> {\n    let picker = open_file_picker(&workspace, cx);\n    cx.simulate_input(input);\n\n    let history_items = picker.update(cx, |finder, _| {\n        assert_eq!(\n            finder.delegate.matches.len(),\n            expected_matches,\n            ": "",
    ",\n            finder.delegate.matches\n        );\n        finder.delegate.history_items.clone()\n    });\n\n    cx.dispatch_action(Confirm);\n\n    cx.read(|cx| {\n        let active_editor = workspace.read(cx).active_item_as::<Editor>(cx).unwrap();\n        let active_editor_title = active_editor.read(cx).title(cx);\n        assert_eq!(\n            expected_editor_title, active_editor_title,\n            ": "",
    "\n        );\n    });\n\n    history_items\n}\n\nfn init_test(cx: &mut TestAppContext) -> Arc<AppState> {\n    cx.update(|cx| {\n        let state = AppState::test(cx);\n        theme::init(theme::LoadThemes::JustBase, cx);\n        language::init(cx);\n        super::init(cx);\n        editor::init(cx);\n        workspace::init_settings(cx);\n        Project::init_settings(cx);\n        state\n    })\n}\n\nfn test_path_position(test_str: &str) -> FileSearchQuery {\n    let path_position = PathWithPosition::parse_str(test_str);\n\n    FileSearchQuery {\n        raw_query: test_str.to_owned(),\n        file_query_end: if path_position.path.to_str().unwrap() == test_str {\n            None\n        } else {\n            Some(path_position.path.to_str().unwrap().len())\n        },\n        path_position,\n    }\n}\n\nfn build_find_picker(\n    project: Entity<Project>,\n    cx: &mut TestAppContext,\n) -> (\n    Entity<Picker<FileFinderDelegate>>,\n    Entity<Workspace>,\n    &mut VisualTestContext,\n) {\n    let (workspace, cx) = cx.add_window_view(|window, cx| Workspace::test_new(project, window, cx));\n    let picker = open_file_picker(&workspace, cx);\n    (picker, workspace, cx)\n}\n\n#[track_caller]\nfn open_file_picker(\n    workspace: &Entity<Workspace>,\n    cx: &mut VisualTestContext,\n) -> Entity<Picker<FileFinderDelegate>> {\n    cx.dispatch_action(ToggleFileFinder {\n        separate_history: true,\n    });\n    active_file_picker(workspace, cx)\n}\n\n#[track_caller]\nfn active_file_picker(\n    workspace: &Entity<Workspace>,\n    cx: &mut VisualTestContext,\n) -> Entity<Picker<FileFinderDelegate>> {\n    workspace.update(cx, |workspace, cx| {\n        workspace\n            .active_modal::<FileFinder>(cx)\n            .expect(": "",
    ")\n            .read(cx)\n            .picker\n            .clone()\n    })\n}\n\n#[derive(Debug, Default)]\nstruct SearchEntries {\n    history: Vec<PathBuf>,\n    history_found_paths: Vec<FoundPath>,\n    search: Vec<PathBuf>,\n    search_matches: Vec<PathMatch>,\n}\n\nimpl SearchEntries {\n    #[track_caller]\n    fn search_paths_only(self) -> Vec<PathBuf> {\n        assert!(\n            self.history.is_empty(),\n            ": "",
    ",\n            self.history\n        );\n        self.search\n    }\n\n    #[track_caller]\n    fn search_matches_only(self) -> Vec<PathMatch> {\n        assert!(\n            self.history.is_empty(),\n            ": "",
    ",\n            self.history\n        );\n        self.search_matches\n    }\n}\n\nfn collect_search_matches(picker: &Picker<FileFinderDelegate>) -> SearchEntries {\n    let mut search_entries = SearchEntries::default();\n    for m in &picker.delegate.matches.matches {\n        match &m {\n            Match::History {\n                path: history_path,\n                panel_match: path_match,\n            } => {\n                search_entries.history.push(\n                    path_match\n                        .as_ref()\n                        .map(|path_match| {\n                            Path::new(path_match.0.path_prefix.as_ref()).join(&path_match.0.path)\n                        })\n                        .unwrap_or_else(|| {\n                            history_path\n                                .absolute\n                                .as_deref()\n                                .unwrap_or_else(|| &history_path.project.path)\n                                .to_path_buf()\n                        }),\n                );\n                search_entries\n                    .history_found_paths\n                    .push(history_path.clone());\n            }\n            Match::Search(path_match) => {\n                search_entries\n                    .search\n                    .push(Path::new(path_match.0.path_prefix.as_ref()).join(&path_match.0.path));\n                search_entries.search_matches.push(path_match.0.clone());\n            }\n        }\n    }\n    search_entries\n}\n\n#[track_caller]\nfn assert_match_selection(\n    finder: &Picker<FileFinderDelegate>,\n    expected_selection_index: usize,\n    expected_file_name: &str,\n) {\n    assert_eq!(\n        finder.delegate.selected_index(),\n        expected_selection_index,\n        ": "",
    "\n    );\n    assert_match_at_position(finder, expected_selection_index, expected_file_name);\n}\n\n#[track_caller]\nfn assert_match_at_position(\n    finder: &Picker<FileFinderDelegate>,\n    match_index: usize,\n    expected_file_name: &str,\n) {\n    let match_item = finder\n        .delegate\n        .matches\n        .get(match_index)\n        .unwrap_or_else(|| panic!(": ""
  },
  "zed/crates/file_finder/src/file_finder.rs": {
    "c/d": "",
    "/a/b": "",
    "HOME": "",
    "~": "",
    "…": "",
    "FileFinder": "",
    "menu_open": "",
    "Search project files...": "",
    "Invalid matches state: no element for index {ix}": "",
    "open-selection": "",
    "Open": "",
    "menu-popover": "",
    "actions-trigger": "",
    "Split…": "",
    "Split Left": "",
    "Split Right": "",
    "Split Up": "",
    "Split Down": ""
  },
  "zed/crates/file_finder/src/new_path_prompt.rs": {
    "{}/{}": "",
    "./": "",
    "[…]": "",
    "{}/": "",
    "{} already exists. Do you want to replace it?": "",
    "A file or folder with the same name already exists. Replacing it will overwrite its current contents.": "",
    "Replace": "",
    "Cancel": "",
    "Type a path...": "",
    "[directory/]filename.ext": ""
  },
  "zed/crates/file_finder/src/open_path_prompt.rs": {
    "C:\\": "",
    "{}{}{}": "",
    "No such file or directory": "",
    "[directory{MAIN_SEPARATOR_STR}]filename.ext": ""
  },
  "zed/crates/fsevent/examples/events.rs": {
    "Must pass 1 or more paths as arguments": "",
    "event batch": "",
    "  {:?}": "",
    "This example only works on macOS": ""
  },
  "zed/crates/fsevent/src/fsevent.rs": {
    "C": "",
    "dropped": "",
    "unknown flag set for fs event: {}": "",
    "MUST_SCAN_SUBDIRS ": "",
    "USER_DROPPED ": "",
    "KERNEL_DROPPED ": "",
    "IDS_WRAPPED ": "",
    "HISTORY_DONE ": "",
    "ROOT_CHANGED ": "",
    "MOUNT ": "",
    "UNMOUNT ": "",
    "ITEM_CREATED ": "",
    "ITEM_REMOVED ": "",
    "INODE_META_MOD ": "",
    "ITEM_RENAMED ": "",
    "ITEM_MODIFIED ": "",
    "FINDER_INFO_MOD ": "",
    "ITEM_CHANGE_OWNER ": "",
    "ITEM_XATTR_MOD ": "",
    "IS_FILE ": "",
    "IS_DIR ": "",
    "IS_SYMLINK ": "",
    "OWN_EVENT ": "",
    "IS_LAST_HARDLINK ": "",
    "IS_HARDLINK ": "",
    "ITEM_CLONED ": "",
    "CoreServices": "",
    "framework": "",
    "test-event-stream": "",
    "existing-file-{}": "",
    "new-file": "",
    "existing-file-5": "",
    "running": "",
    "stopped": "",
    "CI": ""
  },
  "zed/crates/fuzzy/src/strings.rs": {
    "Invariant violation: Index {start} out of range or not on a utf-8 boundary in string {:?}": "",
    "Invariant violation: Index {end} out of range or not on a utf-8 boundary in string {:?}": ""
  },
  "zed/crates/git/src/blame.rs": {
    "failed to get commit messages": "",
    "fatal: no such ref: HEAD": "",
    "fatal: no such path": "",
    "blame": "",
    "--incremental": "",
    "--contents": "",
    "-": "",
    "Failed to start git blame process: {}": "",
    "failed to get pipe to stdin of git blame command": "",
    "Failed to read git blame output: {}": "",
    "git blame process failed: {}": "",
    "failed to parse sha": "",
    "Failed to parse original line number": "",
    "Failed to parse final line number": "",
    "[offset_hour][offset_minute]": "",
    "filename": "",
    "previous": "",
    "summary": "",
    "author": "",
    "author-mail": "",
    "author-time": "",
    "author-tz": "",
    "committer": "",
    "committer-mail": "",
    "committer-time": "",
    "committer-tz": "",
    "CARGO_MANIFEST_DIR": "",
    "test_data": "",
    "Could not read test data at {:?}. Is it generated?": "",
    "golden": "",
    "{}.json": "",
    "could not serialize entries to JSON": "",
    "UPDATE_GOLDEN": "",
    "true": "",
    "could not create golden test data directory": "",
    "could not write out golden data": "",
    "could not read golden test data file at {:?}. Did you run the test with UPDATE_GOLDEN=true before?": "",
    "\\r\n": "",
    "wrong blame entries": "",
    "blame_incremental_not_committed": "",
    "blame_incremental_simple": "",
    "blame_incremental_complex": ""
  },
  "zed/crates/git/src/commit.rs": {
    "<MARKER>": "",
    "git": "",
    "show": "",
    "-s": "",
    "--format=%B{}": "",
    "Failed to start git blame process: {}": "",
    "'git show' failed with error {:?}": "",
    "<": "",
    "&lt;": "",
    ">": "",
    "&gt;": ""
  },
  "zed/crates/git/src/git.rs": {
    ".git": "",
    ".gitignore": "",
    "fsmonitor--daemon": "",
    "lfs": "",
    "COMMIT_EDITMSG": "",
    "index.lock": "",
    "editor::RevertFile": "",
    "editor::RevertSelectedHunks": "",
    "failed to parse bytes into git oid": "",
    "failed to parse git oid: {}": ""
  },
  "zed/crates/git/src/remote.rs": {
    "^[0-9a-zA-Z\\-_]+@": "",
    "Failed to create USERNAME_REGEX": "",
    "ssh://{}": "",
    "https://github.com/octocat/zed.git": "",
    "https": "",
    "github.com": "",
    "/octocat/zed.git": "",
    "git@github.com:octocat/zed.git": "",
    "ssh": "",
    "org-000000@github.com:octocat/zed.git": "",
    "ssh://git@github.com/octocat/zed.git": "",
    "file:///path/to/local/zed": "",
    "file": "",
    "/path/to/local/zed": "",
    "failed to parse URL": "",
    "unexpected scheme for {input:?}": "",
    "unexpected host for {input:?}": "",
    "unexpected path for {input:?}": "",
    "not_a_url": "",
    "http://": "",
    "expected \"{url}\" to not parse as a Git remote URL": ""
  },
  "zed/crates/git/src/repository.rs": {
    "Operation cancelled by user": "",
    "refs/remotes/": "",
    ".git": "",
    "commondir": "",
    "dyn GitRepository<...>": "",
    "git": "",
    "failed to read git work directory": "",
    "{} is not a commit": "",
    "--mixed": "",
    "--soft": "",
    "reset": "",
    "Failed to reset:\n{}": "",
    "checkout": "",
    "--": "",
    "Failed to checkout files:\n{}": "",
    "Error loading index text: {:?}": "",
    "hash-object": "",
    "-w": "",
    "--stdin": "",
    "indexing SHA: {sha}, path {path:?}": "",
    "update-index": "",
    "--add": "",
    "--cacheinfo": "",
    "100644": "",
    "Failed to stage:\n{}": "",
    "--force-remove": "",
    "Failed to unstage:\n{}": "",
    "CHERRY_PICK_HEAD": "",
    "%(HEAD)": "",
    "%(objectname)": "",
    "%(parent)": "",
    "%(refname)": "",
    "%(upstream)": "",
    "%(upstream:track)": "",
    "%(committerdate:unix)": "",
    "%(contents:subject)": "",
    "%00": "",
    "for-each-ref": "",
    "refs/heads/**/*": "",
    "--format": "",
    "Failed to git git branches:\n{}": "",
    "symbolic-ref": "",
    "--quiet": "",
    "--short": "",
    "HEAD": "",
    "Branch name could not be retrieved": "",
    "failed to get git working directory for file {:?}": "",
    "origin": "",
    "--staged": "",
    "diff": "",
    "Failed to run git diff:\n{}": "",
    "--remove": "",
    "Failed to stage paths:\n{}": "",
    "commit": "",
    "-m": "",
    "--cleanup=strip": "",
    "--author": "",
    "{name} <{email}>": "",
    "Failed to commit:\n{}": "",
    "GIT_ASKPASS": "",
    "SSH_ASKPASS": "",
    "SSH_ASKPASS_REQUIRE": "",
    "force": "",
    "push": "",
    "--set-upstream": "",
    "--force-with-lease": "",
    "{}:{}": "",
    "pull": "",
    "fetch": "",
    "--all": "",
    "config": "",
    "--get": "",
    "branch.{}.remote": "",
    "remote": "",
    "Failed to get remotes:\n{}": "",
    "rev-parse": "",
    "Failed to get HEAD": "",
    "merge-base": "",
    "Failed to get remotes": "",
    "refs/remotes/{remote}/HEAD": "",
    "--symbolic-full-name": "",
    "@{u}": "",
    "Connecting to host timed out": "",
    "Operation failed:\n{}": "",
    "Dropped repo change event": "",
    "failed to get blame for {:?}": "",
    "repo path should not be empty": "",
    "repo path `{}` should be relative, not a windows prefix": "",
    "repo path `{}` should be relative": "",
    "repo path `{}` should not start with `.`": "",
    "repo path `{}` should not start with `..`": "",
    "Repo paths must be relative": "",
    "no HEAD": "",
    "*": "",
    "no objectname": "",
    "no parent": "",
    "no refname": "",
    "refs/heads/": "",
    "unexpected format for refname": "",
    "no upstream": "",
    "no upstream:track": "",
    "no committerdate": "",
    "no contents:subject": "",
    "[": "",
    "missing [": "",
    "]": "",
    ", ": "",
    "gone": "",
    "ahead ": "",
    "behind ": "",
    "help: octal escapes are not supported, `\\0` is always null": "",
    "*\\0060964da10574cd9bf06463a53bf6e0769c5c45e\\0\\0refs/heads/zed-patches\\0refs/remotes/origin/zed-patches\\0\\01733187470\\0generated protobuf\n": "",
    "zed-patches": "",
    "refs/remotes/origin/zed-patches": "",
    "060964da10574cd9bf06463a53bf6e0769c5c45e": "",
    "generated protobuf": ""
  },
  "zed/crates/git/src/status.rs": {
    "Invalid status code: {byte}": "",
    "Invalid unmerged status code: {byte}": "",
    "--no-optional-locks": "",
    "status": "",
    "--porcelain=v1": "",
    "--untracked-files=all": "",
    "--no-renames": "",
    "-z": "",
    ".": "",
    "Failed to start git status process: {e}": "",
    "Failed to read git status output: {e}": "",
    "git status process failed: {stderr}": "",
    " ": "",
    "summary": "",
    "Unexpected duplicated status entries: {a_status:?} and {b_status:?}": ""
  },
  "zed/crates/git_hosting_providers/src/providers/codeberg.rs": {
    "https://codeberg.org/api/v1/repos/{repo_owner}/{repo}/git/commits/{commit}": "",
    "Content-Type": "",
    "application/json": "",
    "CODEBERG_TOKEN": "",
    "Authorization": "",
    "Bearer {}": "",
    "error fetching Codeberg commit details at {:?}": "",
    "status error {}, response: {text:?}": "",
    "failed to deserialize Codeberg commit details": "",
    "Codeberg": "",
    "https://codeberg.org": "",
    "L{line}": "",
    "L{start_line}-L{end_line}": "",
    "codeberg.org": "",
    ".git": "",
    "{owner}/{repo}/commit/{sha}": "",
    "{owner}/{repo}/src/commit/{sha}/{path}": "",
    "git@codeberg.org:zed-industries/zed.git": "",
    "zed-industries": "",
    "zed": "",
    "https://codeberg.org/zed-industries/zed.git": "",
    "faa6f979be417239b2e070dbbf6392b909224e0b": "",
    "crates/editor/src/git/permalink.rs": "",
    "https://codeberg.org/zed-industries/zed/src/commit/faa6f979be417239b2e070dbbf6392b909224e0b/crates/editor/src/git/permalink.rs": "",
    "https://codeberg.org/zed-industries/zed/src/commit/faa6f979be417239b2e070dbbf6392b909224e0b/crates/editor/src/git/permalink.rs#L7": "",
    "https://codeberg.org/zed-industries/zed/src/commit/faa6f979be417239b2e070dbbf6392b909224e0b/crates/editor/src/git/permalink.rs#L24-L48": ""
  },
  "zed/crates/git_hosting_providers/src/providers/github.rs": {
    "\\(#(\\d+)\\)$": "",
    "https://api.github.com/repos/{repo_owner}/{repo}/commits/{commit}": "",
    "Content-Type": "",
    "application/json": "",
    "GITHUB_TOKEN": "",
    "Authorization": "",
    "Bearer {}": "",
    "error fetching GitHub commit details at {:?}": "",
    "status error {}, response: {text:?}": "",
    "failed to deserialize GitHub commit details": "",
    "GitHub": "",
    "https://github.com": "",
    "L{line}": "",
    "L{start_line}-L{end_line}": "",
    "github.com": "",
    ".git": "",
    "{owner}/{repo}/commit/{sha}": "",
    "{owner}/{repo}/blob/{sha}/{path}": "",
    ".md": "",
    "plain=1": "",
    "/{}/{}/pull/{}": "",
    "size=128": "",
    "git@github.com:zed-industries/zed.git": "",
    "zed-industries": "",
    "zed": "",
    "https://github.com/zed-industries/zed.git": "",
    "https://jlannister@github.com/some-org/some-repo.git": "",
    "some-org": "",
    "some-repo": "",
    "e6ebe7974deb6bb6cc0e2595c8ec31f0c71084b7": "",
    "crates/editor/src/git/permalink.rs": "",
    "https://github.com/zed-industries/zed/blob/e6ebe7974deb6bb6cc0e2595c8ec31f0c71084b7/crates/editor/src/git/permalink.rs": "",
    "b2efec9824c45fcc90c9a7eb107a50d1772a60aa": "",
    "crates/zed/src/main.rs": "",
    "https://github.com/zed-industries/zed/blob/b2efec9824c45fcc90c9a7eb107a50d1772a60aa/crates/zed/src/main.rs": "",
    "https://github.com/zed-industries/zed/blob/e6ebe7974deb6bb6cc0e2595c8ec31f0c71084b7/crates/editor/src/git/permalink.rs#L7": "",
    "https://github.com/zed-industries/zed/blob/e6ebe7974deb6bb6cc0e2595c8ec31f0c71084b7/crates/editor/src/git/permalink.rs#L24-L48": "",
    "This does not contain a pull request": "",
    "\n            project panel: do not expand collapsed worktrees on ": "",
    " (#10687)\n\n            Fixes #10597\n\n            Release Notes:\n\n            - Fixed ": "",
    " expanding collapsed worktrees.\n            ": "",
    "https://github.com/zed-industries/zed/pull/10687": "",
    "\n            Follow-up to #10687 to fix problems\n\n            See the original PR, this is a fix.\n            ": ""
  },
  "zed/crates/git_hosting_providers/src/providers/gitlab.rs": {
    "GitLab": "",
    "https://gitlab.com": "",
    "git@": "",
    "URL has no host": "",
    "gitlab": "",
    "not a GitLab URL": "",
    "GitLab Self-Hosted": "",
    "https://{}": "",
    "L{line}": "",
    "L{start_line}-{end_line}": "",
    ".git": "",
    "{owner}/{repo}/-/commit/{sha}": "",
    "{owner}/{repo}/-/blob/{sha}/{path}": "",
    ".md": "",
    "plain=1": "",
    "git@gitlab.com:zed-industries/zed.git": "",
    "zed-industries": "",
    "zed": "",
    "https://gitlab.com/zed-industries/zed.git": "",
    "git@gitlab.my-enterprise.com:zed-industries/zed.git": "",
    "https://gitlab.my-enterprise.com/group/subgroup/zed.git": "",
    "group/subgroup": "",
    "e6ebe7974deb6bb6cc0e2595c8ec31f0c71084b7": "",
    "crates/editor/src/git/permalink.rs": "",
    "https://gitlab.com/zed-industries/zed/-/blob/e6ebe7974deb6bb6cc0e2595c8ec31f0c71084b7/crates/editor/src/git/permalink.rs": "",
    "https://gitlab.com/zed-industries/zed/-/blob/e6ebe7974deb6bb6cc0e2595c8ec31f0c71084b7/crates/editor/src/git/permalink.rs#L7": "",
    "https://gitlab.com/zed-industries/zed/-/blob/e6ebe7974deb6bb6cc0e2595c8ec31f0c71084b7/crates/editor/src/git/permalink.rs#L24-48": "",
    "git@gitlab.some-enterprise.com:zed-industries/zed.git": "",
    "https://gitlab.some-enterprise.com/zed-industries/zed/-/blob/e6ebe7974deb6bb6cc0e2595c8ec31f0c71084b7/crates/editor/src/git/permalink.rs": "",
    "https://gitlab-instance.big-co.com/zed-industries/zed.git": "",
    "b2efec9824c45fcc90c9a7eb107a50d1772a60aa": "",
    "crates/zed/src/main.rs": "",
    "https://gitlab-instance.big-co.com/zed-industries/zed/-/blob/b2efec9824c45fcc90c9a7eb107a50d1772a60aa/crates/zed/src/main.rs": ""
  },
  "zed/crates/git_ui/src/branch_picker.rs": {
    "No active repository": "",
    "Failed to create branch": "",
    "Select branch...": "",
    "Failed to change branch": "",
    "vcs-menu-{ix}": "",
    "Create branch \"{}\"…": "",
    "based off {}": "",
    "based off the current branch": "",
    "no commits found": ""
  },
  "zed/crates/git_ui/src/git_panel.rs": {
    "title_case": "",
    "Stage All": "",
    "Unstage All": "",
    "Open Diff": "",
    "Discard Tracked Changes": "",
    "Trash Untracked Files": "",
    "GitPanel": "",
    "Conflicts": "",
    "Tracked": "",
    "Untracked": "",
    "Enter commit message": "",
    "menu": "",
    "ChangesList": "",
    "CommitEditor": "",
    "..": "",
    "Failed to open file": "",
    "{e}": "",
    "Trash {}?": "",
    "Failed to trash file": "",
    "HEAD": "",
    "\nand {} more…": "",
    "Discard changes to these files?": "",
    "Trash these files?": "",
    "Failed to trash files": "",
    "Git Committed": "",
    "Git Panel": "",
    "Ok": "",
    "There are still conflicts. You must stage these before committing": "",
    "No changes to commit": "",
    "Git Uncommitted": "",
    "HEAD^": "",
    "No active repository": "",
    "This commit was already pushed to {}.": "",
    ", ": "",
    "Are you sure?": "",
    "Delete": "",
    "Create": "",
    "Update": "",
    "{} {}": "",
    "Git Commit Message Generated": "",
    "{PROMPT}\nHere are the changes in this commit:\n{diff_text}": "",
    "{PROMPT}\nHere is the user's subject line:\n{subject}\nHere are the changes in this commit:\n{diff_text}\n": "",
    "commit_message_prompt.txt": "",
    "Git Fetched": "",
    "git fetch": "",
    "Error while fetching {:?}": "",
    "Git Pulled": "",
    "Failed to get current remote: {}": "",
    "git pull {}": "",
    "Error while pull {:?}": "",
    "Git Pushed": "",
    "git push {}": "",
    "Error while pushing {:?}": "",
    "No active branch": "",
    "No active remote": "",
    "Pick which remote to push to": "",
    "Co-authored-by: ": "",
    " <": "",
    "git-operation-error": "",
    "Open Zed Log": "",
    "git-remote-info": "",
    "overflow-menu-trigger": "",
    "Generating Commit...": "",
    "generate-commit-message": "",
    "Generate Commit Message": "",
    "co-authors": "",
    "Add co-authored-by:{}{}": "",
    " {} <{}>": "",
    "You must resolve conflicts before committing": "",
    "Commit in progress": "",
    "No commit message": "",
    "You do not have write access to this project": "",
    "Commit": "",
    "Commit Tracked": "",
    "git reset": "",
    "git add --all .": "",
    "No Changes": "",
    "1 Change": "",
    "{} Changes": "",
    "Open diff": "",
    "overflow_menu": "",
    "footer-button": "",
    "commit-editor-container": "",
    "commit-footer": "",
    "expand-commit-editor": "",
    "Open Commit Modal": "",
    "commit-msg-hover": "",
    "undo": "",
    "Uncommit": "",
    "git reset HEAD^ --soft": "",
    "git reset HEAD^": "",
    "No Git repositories": "",
    "git-panel-vertical-scroll": "",
    "stage-file": "",
    "start-slot": "",
    "entries": "",
    "header_{}": "",
    "no active repo": "",
    "Unstage File": "",
    "Stage File": "",
    "Trash File": "",
    "Restore File": "",
    "Open File": "",
    "entry_{}_{}": "",
    "entry_{}_{}_checkbox_wrapper": "",
    "entry_{}_{}_checkbox": "",
    "Unstage": "",
    "Stage": "",
    "{} section": "",
    "Release shift to {} single entry": "",
    "Shift click to {} section": "",
    "{}/": "",
    "git_panel": "",
    "Version Control": "",
    "repo-selector": "",
    "repository-switcher": "",
    "Switch active repository": "",
    " (no branch)": "",
    "branch-selector": "",
    "Switch Branch": "",
    "popover-button": "",
    "some-branch": "",
    "origin/some-branch": "",
    "abc123": "",
    "Modify stuff": "",
    "zed/{}": "",
    "repo-{}": "",
    "Action Button States": "",
    "No Branch": "",
    "no-branch": "",
    "Remote status unknown": "",
    "unknown-upstream": "",
    "No Remote Upstream": "",
    "no-remote-upstream": "",
    "Not Ahead or Behind": "",
    "not-ahead-or-behind": "",
    "Behind remote": "",
    "behind-remote": "",
    "Ahead of remote": "",
    "ahead-of-remote": "",
    "Ahead and behind remote": "",
    "ahead-and-behind": "",
    "Labels": "",
    "Short Branch & Repo": "",
    "short-branch": "",
    "zed": "",
    "main": "",
    "Long Branch": "",
    "long-branch": "",
    "redesign-and-update-git-ui-list-entry-style": "",
    "Long Repo": "",
    "long-repo": "",
    "zed-industries-community-examples": "",
    "gpui": "",
    "Long Repo & Branch": "",
    "long-repo-and-branch": "",
    "Uppercase Repo": "",
    "uppercase-repo": "",
    "LICENSES": "",
    "Uppercase Branch": "",
    "uppercase-branch": "",
    "update-README": "",
    "/root": "",
    ".git": "",
    "crates": "",
    "gpui.rs": "",
    "fn main() {}": "",
    "util": "",
    "util.rs": "",
    "fn do_it() {}": "",
    "/root/zed/.git": "",
    "crates/gpui/gpui.rs": "",
    "crates/util/util.rs": "",
    "/root/zed/crates/gpui": "",
    "/root/zed/crates/gpui/gpui.rs": "",
    "/root/zed/crates/util/util.rs": "",
    "../util/util.rs": "",
    "../../gpui/gpui.rs": ""
  },
  "zed/crates/go_to_line/src/cursor_position.rs": {
    "1": "",
    "before the first character": "",
    "added 1": "",
    "line": "",
    "selection": "",
    "character": "",
    " (": "",
    ", ": "",
    "s": "",
    "{count} {name}{plural_suffix}": "",
    "{}{FILE_ROW_COLUMN_DELIMITER}{}": "",
    "go-to-line-column": "",
    "Go to Line/Column": "",
    "line_indicator_format": ""
  },
  "zed/crates/go_to_line/src/go_to_line.rs": {
    "{line}{FILE_ROW_COLUMN_DELIMITER}{column}": "",
    "Current Line: {} of {} (column {})": "",
    "Go to line {line}, character {character}": "",
    "Go to line {line}": "",
    "GoToLine": "",
    "/dir": "",
    "a.rs": "",
    "\n                    struct SingleLine; // display line 0\n                                       // display line 1\n                    struct MultiLine { // display line 2\n                        field_1: i32,  // display line 3\n                        field_2: i32,  // display line 4\n                    }                  // display line 5\n                                       // display line 6\n                    struct Another {   // display line 7\n                        field_1: i32,  // display line 8\n                        field_2: i32,  // display line 9\n                        field_3: i32,  // display line 10\n                        field_4: i32,  // display line 11\n                    }                  // display line 12\n                ": "",
    "/dir/a.rs": "",
    "Initially opened go to line modal should not highlight any rows": "",
    "1": "",
    "Go to line modal should highlight a row, corresponding to the query": "",
    "8": "",
    "If the query is too large, the last row should be highlighted": "",
    "After cancelling and closing the modal, no rows should be highlighted": "",
    "Reopened modal should not highlight any rows": "",
    "5": "",
    "After confirming and closing the modal, no rows should be highlighted": "",
    "ēlo": "",
    "missing cursor position item": "",
    "No selections should be initially": "",
    "After selecting a text with multibyte unicode characters, the character count should be correct": "",
    "ēlo你好": "",
    "Beginning of the line should be at first line, before any characters": "",
    "Wrong position for char '{c}' in string '{text}'": "",
    "After reaching the end of the text, position should not change when moving right": "",
    "When going to {point:?}, expecting the cursor to be at char '{c}' in string '{text}'": "",
    "When going into too large point, should go to the end of the text": "",
    "No position found": "",
    "No placeholder text": "",
    "{}:{}": "",
    "Expected one caret selection but got: {selections:?}": "",
    "Expected a single caret selection, but got: {selection:?}": ""
  },
  "zed/crates/google_ai/src/google_ai.rs": {
    "https://generativelanguage.googleapis.com": "",
    "Request must contain at least one content item": "",
    "User content must contain at least one part": "",
    "{api_url}/v1beta/models/{model}:streamGenerateContent?alt=sse&key={api_key}": "",
    "Content-Type": "",
    "application/json": "",
    "data: ": "",
    "error during streamGenerateContent, status code: {:?}, body: {}": "",
    "{}/v1beta/models/gemini-pro:countTokens?key={}": "",
    "error during countTokens, status code: {:?}, body: {}": "",
    "generateContent": "",
    "streamGenerateContent": "",
    "countTokens": "",
    "embedContent": "",
    "batchEmbedContents": "",
    "camelCase": "",
    "String::is_empty": "",
    "HARM_CATEGORY_UNSPECIFIED": "",
    "HARM_CATEGORY_DEROGATORY": "",
    "HARM_CATEGORY_TOXICITY": "",
    "HARM_CATEGORY_VIOLENCE": "",
    "HARM_CATEGORY_SEXUAL": "",
    "HARM_CATEGORY_MEDICAL": "",
    "HARM_CATEGORY_DANGEROUS": "",
    "HARM_CATEGORY_HARASSMENT": "",
    "HARM_CATEGORY_HATE_SPEECH": "",
    "HARM_CATEGORY_SEXUALLY_EXPLICIT": "",
    "HARM_CATEGORY_DANGEROUS_CONTENT": "",
    "HARM_BLOCK_THRESHOLD_UNSPECIFIED": "",
    "BLOCK_LOW_AND_ABOVE": "",
    "BLOCK_MEDIUM_AND_ABOVE": "",
    "BLOCK_ONLY_HIGH": "",
    "BLOCK_NONE": "",
    "SCREAMING_SNAKE_CASE": "",
    "HARM_PROBABILITY_UNSPECIFIED": "",
    "schemars": "",
    "gemini-1.5-pro": "",
    "gemini-1.5-flash": "",
    "gemini-2.0-pro-exp": "",
    "gemini-2.0-flash": "",
    "gemini-2.0-flash-thinking-exp": "",
    "gemini-2.0-flash-lite-preview": "",
    "custom": "",
    "Gemini 1.5 Pro": "",
    "Gemini 1.5 Flash": "",
    "Gemini 2.0 Pro": "",
    "Gemini 2.0 Flash": "",
    "Gemini 2.0 Flash Thinking": "",
    "Gemini 2.0 Flash Lite": ""
  },
  "zed/crates/gpui/examples/hello_world.rs": {
    "Hello, {}!": "",
    "World": ""
  },
  "zed/crates/gpui/examples/image/image.rs": {
    "main": "",
    "Image loaded from a local file": "",
    "Image loaded from a remote resource": "",
    "Image loaded from an asset": "",
    "Auto Width": "",
    "https://picsum.photos/800/400": "",
    "Auto Height": "",
    "image with max width 100%": "",
    "CARGO_MANIFEST_DIR": "",
    "examples": "",
    "gpui example": "",
    "cmd-q": "",
    "Image": "",
    "Quit": "",
    "Image Example": "",
    "examples/image/app-icon.png": "",
    "image/color.svg": ""
  },
  "zed/crates/gpui/examples/set_menus.rs": {
    "Set Menus Example": "",
    "set_menus": "",
    "Quit": "",
    "Gracefully quitting the application . . .": ""
  },
  "zed/crates/gpui/examples/uniform_list.rs": {
    "entries": "",
    "clicked Item {item:?}": "",
    "Item {item}": ""
  },
  "zed/crates/gpui/examples/window_positioning.rs": {
    "origin: {}, {} size: {}, {}": "",
    "cx.bounds() origin: {}, {} size {}, {}": "",
    "Top Left {:?}": "",
    "Top Right {:?}": "",
    "Bottom Left {:?}": "",
    "Bottom Right {:?}": "",
    "Top Center {:?}": "",
    "Left Center {:?}": "",
    "Center {:?}": "",
    "Right Center {:?}": "",
    "Bottom Center {:?}": ""
  },
  "zed/crates/gpui/src/elements/animation.rs": {
    "delta should always be between 0 and 1": "",
    "should only be called once": ""
  },
  "zed/crates/gpui/src/elements/div.rs": {
    "DragMoveEvent is only valid when the stored active drag is of the same type.": "",
    "calling on_drag more than once on the same element is not supported": "",
    "calling on_hover more than once on the same element is not supported": "",
    "calling tooltip more than once on the same element is not supported": "",
    "hover style already set": "",
    "{:?}": "",
    "This element was created at:\n{}:{}:{}": "",
    "checked for type drag state type above": ""
  },
  "zed/crates/gpui/src/action.rs": {
    "dyn Action": "",
    "name": "",
    "Didn't find an action named \"{name}\"": "",
    "Error while building action \"{name}\": {error}": "",
    "no action type registered for {:?}": "",
    "All actions in all_names should be registered": "",
    "action generated by `gpui::actions!`": "",
    "action generated by `gpui::action_as!`": "",
    "action, generated by `gpui::action_with_deprecated_aliases!`": "",
    "::": "",
    " is an internal action, so cannot be built from JSON.": ""
  },
  "zed/crates/gpui/src/app.rs": {
    "TRACK_THREAD_BORROWS": "",
    "borrowed {thread_id:?}": "",
    "dropped borrow from {thread_id:?}": "",
    "dropped {thread_id:?}": "",
    "GPUI was compiled in test mode": "",
    "must construct App on main thread": "",
    "timed out waiting on app_will_quit": "",
    "invalid event type": "",
    "All windows should be off the stack when flushing effects": "",
    "window not found": "",
    "no state of type {} exists": "",
    "no global added for {}": "",
    "no global registered of type {}": "",
    "invalid entity type": "",
    "attempted to read a window that is already on the stack": "",
    "root view's type has changed": "",
    "Notify({})": "",
    "Emit({:?})": "",
    "RefreshWindows": "",
    "NotifyGlobalObservers({:?})": "",
    "Defer(..)": "",
    "EntityCreated({:?})": "",
    "No HttpClient available": ""
  },
  "zed/crates/gpui/src/arena.rs": {
    "not enough space in Arena": "",
    "attempted to dereference an ArenaRef after its Arena was cleared": ""
  },
  "zed/crates/gpui/src/asset_cache.rs": {
    "Failed to load asset: {}": ""
  },
  "zed/crates/gpui/src/color.rs": {
    "rgba({:#010x})": "",
    "a string in the format #rrggbb or #rrggbbaa": "",
    "rgb": "",
    "rgba": "",
    "rrggbb": "",
    "rrggbbaa": "",
    "Expected #rgb, #rgba, #rrggbb, or #rrggbbaa": "",
    "invalid unicode characters in color": "",
    "invalid RGBA hex color: '{value}'. {EXPECTED_FORMATS}": "",
    "{INVALID_UNICODE}: r component of #rgb/#rgba for value: '{value}'": "",
    "{INVALID_UNICODE}: g component of #rgb/#rgba for value: '{value}'": "",
    "{INVALID_UNICODE}: b component of #rgb/#rgba for value: '{value}'": "",
    "{INVALID_UNICODE}: a component of #rgba for value: '{value}'": "",
    "{}: r component of #rrggbb/#rrggbbaa for value: '{}'": "",
    "{INVALID_UNICODE}: g component of #rrggbb/#rrggbbaa for value: '{value}'": "",
    "{INVALID_UNICODE}: b component of #rrggbb/#rrggbbaa for value: '{value}'": "",
    "{INVALID_UNICODE}: a component of #rrggbbaa for value: '{value}'": "",
    "hsla({:.2}, {:.2}%, {:.2}%, {:.2})": "",
    "sRGB": "",
    "Oklab": "",
    "Solid({:?})": "",
    "LinearGradient({}, {:?}, {:?})": "",
    "PatternSlash({:?}, {})": "",
    "#f09": "",
    "#f09f": "",
    "#ff0099": "",
    "#ff0099ff": "",
    " #f5f5f5ff   ": "",
    "#DeAdbEeF": ""
  },
  "zed/crates/gpui/src/element.rs": {
    "views": "",
    "must call request_layout only once": "",
    "must call request_layout before prepaint": "",
    "must call prepaint before paint": "",
    "cannot measure after painting": ""
  },
  "zed/crates/gpui/src/executor.rs": {
    "\nbacktrace of waiting future:\n{:?}": "",
    "\n  waiting on: {}\n": "",
    "parked with nothing left to run{waiting_message}{backtrace_message}": "",
    "parked with nothing let to run": "",
    "local task dropped by a thread that didn't spawn it. Task spawned at {}": "",
    "local task polled by a thread that didn't spawn it. Task spawned at {}": ""
  },
  "zed/crates/gpui/src/key_dispatch.rs": {
    "Editor": "",
    "cmd-z": "",
    "cmd-shift-z": "",
    "cmd-k left": "",
    "Pane": "",
    "node {} was not part of the reused subtree {:?}": "",
    "test::TestAction": "",
    "cmd-n": "",
    "ProjectPanel": "",
    "Workspace": ""
  },
  "zed/crates/gpui/src/platform/linux/platform.rs": {
    "wayland": "",
    "x11": "",
    "zed-github-account": "",
    "Couldn't open file picker due to missing xdg-desktop-portal implementation.": "",
    "Failed to get app path: {:?}": "",
    "Restarting process, using app path: {:?}": "",
    "\n            while kill -0 {pid} 2>/dev/null; do\n                sleep 0.1\n            done\n\n            {app_path}\n            ": "",
    "/bin/bash": "",
    "-c": "",
    "failed to spawn restart script: {:?}": "",
    "activate is not implemented on Linux, ignoring the call": "",
    "hide is not implemented on Linux, ignoring the call": "",
    "hide_other_apps is not implemented on Linux, ignoring the call": "",
    "unhide_other_apps is not implemented on Linux, ignoring the call": "",
    "screen capture not implemented": "",
    "Open Folder": "",
    "Open File": "",
    "Save File": "",
    "pathbuf should not be nul terminated": "",
    "pick files": "",
    "pick directories": "",
    "xdg-open": "",
    "invoking xdg-open": "",
    "Platform<LinuxPlatform>::path_for_auxiliary_executable is not implemented yet": "",
    "url": "",
    "username": "",
    "Cannot find username in stored credentials": "",
    "register_url_scheme unimplemented": "",
    "Failed to open with dbus: {}": "",
    "XDG_ACTIVATION_TOKEN": "",
    "Failed to open with {:?}: {}": "",
    "LC_CTYPE": "",
    "C": "",
    "left_ptr": "",
    "text": "",
    "crosshair": "",
    "grabbing": "",
    "grab": "",
    "pointer": "",
    "w-resize": "",
    "e-resize": "",
    "ew-resize": "",
    "n-resize": "",
    "s-resize": "",
    "ns-resize": "",
    "nwse-resize": "",
    "nesw-resize": "",
    "col-resize": "",
    "row-resize": "",
    "vertical-text": "",
    "not-allowed": "",
    "alias": "",
    "copy": "",
    "context-menu": "",
    "enter": "",
    "pageup": "",
    "pagedown": "",
    "tab": "",
    "back": "",
    "forward": "",
    "cut": "",
    "paste": "",
    "new": "",
    "open": "",
    "save": "",
    ",": "",
    ".": "",
    "<": "",
    ">": "",
    "?": "",
    ";": "",
    ":": "",
    "'": "",
    "\"": "",
    "[": "",
    "{": "",
    "]": "",
    "}": "",
    "\\": "",
    "|": "",
    "`": "",
    "~": "",
    "!": "",
    "@": "",
    "#": "",
    "$": "",
    "%": "",
    "^": "",
    "&": "",
    "*": "",
    "(": "",
    ")": "",
    "-": "",
    "_": "",
    "=": "",
    "+": "",
    "kp_": "",
    "´": "",
    "¯": "",
    "˘": "",
    "˙": "",
    "¨": "",
    "˚": "",
    "˝": "",
    "ˇ": "",
    "¸": "",
    "˛": "",
    "ͅ": "",
    "゙": "",
    "゚": "",
    "̣̣": "",
    "̡": "",
    "̛": "",
    "̶̶": "",
    "̓̓": "",
    "ʽ": "",
    "̏": "",
    "˳": "",
    "̱": "",
    "ꞈ": "",
    "̰": "",
    "̮": "",
    "̤": "",
    "̯": "",
    "̦": "",
    "ə": "",
    "Ə": ""
  },
  "zed/crates/gpui/src/platform/windows/platform.rs": {
    "unable to initialize Windows OLE": "",
    "Error creating bitmap factory.": "",
    "Error creating DirectWriteTextSystem": "",
    "Unable to init GPU context": "",
    "Error retrieve windows version": "",
    "Dock menu for index {action_idx} not found": "",
    "Set `MenuItemSubmenu` for dock menu on Windows is not supported.": "",
    "--dock-action {}": "",
    "Something went wrong while waiting {:?}": "",
    "\n            $pidToWaitFor = {}\n            $exePath = ": "",
    "\n\n            while ($true) {{\n                $process = Get-Process -Id $pidToWaitFor -ErrorAction SilentlyContinue\n                if (-not $process) {{\n                    Start-Process -FilePath $exePath\n                    break\n                }}\n                Start-Sleep -Seconds 0.1\n            }}\n            ": "",
    "failed to spawn restart script: {:?}": "",
    "screen capture not implemented": "",
    "only files": "",
    "only folders": "",
    "unable to parse file path": "",
    "unable to parse file full path: {}": "",
    "not yet implemented": "",
    "register_url_scheme unimplemented": "",
    "Unable to open target: {}": "",
    "Unable to open target in explorer: {}": "",
    "All files": "",
    "unable to get module handle": "",
    "unable to load icon file": "",
    "你好，我是张小白": ""
  },
  "zed/crates/html_to_markdown/src/html_to_markdown.rs": {
    "failed to parse HTML": "",
    "failed to convert HTML to Markdown": "",
    "failed to parse HTML document": ""
  },
  "zed/crates/html_to_markdown/src/markdown_writer.rs": {
    "^\\s*$": "",
    "Failed to create empty_line_regex": "",
    "\n{3,}": "",
    "\n\n": "",
    " ": ""
  },
  "zed/crates/http_client/src/github.rs": {
    "prerelease": "",
    "https://api.github.com/repos/{repo_name_with_owner}/releases": "",
    "error fetching latest release": "",
    "error reading latest release": "",
    "status error {}, response: {text:?}": "",
    "Error deserializing: {:?}": "",
    "GitHub API response text: {:?}": "",
    "error deserializing latest release": "",
    "Failed to find a release": "",
    "https://api.github.com/repos/{repo_name_with_owner}/releases/tags/{tag}": "",
    "error deserializing GitHub release": "",
    "https://github.com/{repo_name_with_owner}/archive/refs/tags": "",
    "{tag}.{extension}": "",
    "tar.gz": "",
    "gz": "",
    "zip": "",
    "cannot modify url path segments": "",
    "release/2.3.5": "",
    "microsoft/vscode-eslint": "",
    "https://github.com/microsoft/vscode-eslint/archive/refs/tags/release%2F2.3.5.tar.gz": "",
    "https://github.com/microsoft/vscode-eslint/archive/refs/tags/release%2F2.3.5.zip": ""
  },
  "zed/crates/http_client/src/http_client.rs": {
    "Content-Type": "",
    "application/json": "",
    "{}{}": "",
    "https://zed.dev": "",
    "https://api.zed.dev": "",
    "https://staging.zed.dev": "",
    "https://api-staging.zed.dev": "",
    "http://localhost:3000": "",
    "http://localhost:8080": "",
    "https://llm.zed.dev": "",
    "https://llm-staging.zed.dev": "",
    "ALL_PROXY": "",
    "all_proxy": "",
    "HTTPS_PROXY": "",
    "https_proxy": "",
    "HTTP_PROXY": "",
    "http_proxy": "",
    "BlockedHttpClient disallowed request": "",
    "http://test.example": "",
    "FakeHttpClient": ""
  },
  "zed/crates/image_viewer/src/image_viewer.rs": {
    "ImageView": "",
    "No image path found": "",
    "Path not found": "",
    "img": "",
    "?": "",
    ", ": "",
    "DELETE FROM image_viewers WHERE workspace_id = ? AND item_id NOT IN ({placeholders})": ""
  },
  "zed/crates/indexed_docs/src/providers/rustdoc.rs": {
    "rustdoc": "",
    "docs/rust/rustdoc-db.1.mdb": "",
    "Cargo.toml": "",
    "failed to load cargo metadata": "",
    "target/doc": "",
    "_": "",
    "no docs directory for '{crate_name}'. if this is a valid crate name, try running `cargo doc`": "",
    "no cargo doc directory. run `cargo doc`": "",
    "index.html": "",
    "docs-rs": "",
    "docs/rust/docs-rs-db.1.mdb": "",
    "./rustdoc/popular_crates.txt": "",
    "latest": "",
    "{crate_name}/{version}/{crate_name}{item_path}": "",
    "/{}": "",
    "https://docs.rs/{path}": "",
    "error reading docs.rs response body": "",
    "status error {}, response: {text:?}": "",
    "failed to fetch {item:?}: {history:?}": "",
    "failed to fetch {item:?}": "",
    "{package}::{}": ""
  },
  "zed/crates/indexed_docs/src/store.rs": {
    "no indexed docs store found for {provider}": "",
    "rustdoc_entries": "",
    "no docs found for {key}": ""
  },
  "zed/crates/inline_completion_button/src/inline_completion_button.rs": {
    "https://github.com/settings/copilot": "",
    "copilot-error": "",
    "Copilot can't be started: {}": "",
    "Reinstall Copilot": "",
    "GitHub Copilot": "",
    "copilot": "",
    "copilot-icon": "",
    "supermaven": "",
    "Sign In": "",
    "Use Copilot": "",
    "supermaven-icon": "",
    "Read Terms of Service": "",
    "Sign in to use": "",
    "zed-predict-pending-button": "",
    "Edit Predictions": "",
    "Pending ToS Clicked": "",
    "Edit Prediction Status Button": "",
    "Edit Prediction": "",
    "Hidden For This File": "",
    "Disabled For This File": "",
    "zeta": "",
    "pulsating-label": "",
    "Disable Copilot": "",
    "Use Supermaven": "",
    "Show Edit Predictions For": "",
    "This Buffer": "",
    "Edit predictions cannot be toggled for this buffer because they are disabled for {}": "",
    "All Files": "",
    "Privacy Settings": "",
    "Training Data Collection": "",
    "Project identified as open source, and you're sharing data.": "",
    "Project identified as open source, but you're not sharing data.": "",
    "Project not identified as open source. No data captured.": "",
    "Project not identified as open source, and setting turned off.": "",
    "\n                                    })\n                                )\n                                .child(\n                                    h_flex()\n                                        .items_start()\n                                        .pt_2()\n                                        .flex_1()\n                                        .gap_1p5()\n                                        .border_t_1()\n                                        .border_color(cx.theme().colors().border_variant)\n                                        .child(h_flex().flex_shrink_0().h(line_height).child(Icon::new(icon_name).size(IconSize::XSmall).color(icon_color)))\n                                        .child(div().child(msg).w_full().text_sm().text_color(label_color.color(cx)))\n                                )\n                                .into_any_element()\n                        })\n                        .handler(move |_, cx| {\n                            provider.toggle_data_collection(cx);\n\n                            if !enabled {\n                                telemetry::event!(\n                                    ": "",
    ",\n                                    source = ": "",
    "\n                                );\n                            } else {\n                                telemetry::event!(\n                                    ": "",
    "\n                                );\n                            }\n                        })\n                );\n\n                if is_collecting && !is_open_source {\n                    menu = menu.item(\n                        ContextMenuEntry::new(": "",
    ")\n                            .disabled(true)\n                            .icon(IconName::Close)\n                            .icon_color(Color::Error)\n                            .icon_size(IconSize::Small),\n                    );\n                }\n            }\n        }\n\n        menu = menu.item(\n            ContextMenuEntry::new(": "",
    ")\n                .icon(IconName::LockOutlined)\n                .icon_color(Color::Muted)\n                .documentation_aside(|_| {\n                    Label::new(indoc!{": "",
    "}).into_any_element()\n                })\n                .handler(move |window, cx| {\n                    if let Some(workspace) = window.root().flatten() {\n                        let workspace = workspace.downgrade();\n                        window\n                            .spawn(cx, |cx| {\n                                open_disabled_globs_setting_in_editor(\n                                    workspace,\n                                    cx,\n                                )\n                            })\n                            .detach_and_log_err(cx);\n                    }\n                }),\n        );\n\n        if !self.editor_enabled.unwrap_or(true) {\n            menu = menu.item(\n                ContextMenuEntry::new(": "",
    ")\n                    .disabled(true)\n                    .icon(IconName::ZedPredictDisabled)\n                    .icon_size(IconSize::Small),\n            );\n        }\n\n        if cx.has_flag::<feature_flags::PredictEditsNonEagerModeFeatureFlag>() {\n            let is_eager_preview_enabled = match settings.edit_predictions_mode() {\n                language::EditPredictionsMode::Subtle => false,\n                language::EditPredictionsMode::Eager => true,\n            };\n            menu = menu.separator().toggleable_entry(\n                ": "",
    ",\n                is_eager_preview_enabled,\n                IconPosition::Start,\n                None,\n                {\n                    let fs = fs.clone();\n                    move |_window, cx| {\n                        update_settings_file::<AllLanguageSettings>(\n                            fs.clone(),\n                            cx,\n                            move |settings, _cx| {\n                                let new_mode = match is_eager_preview_enabled {\n                                    true => language::EditPredictionsMode::Subtle,\n                                    false => language::EditPredictionsMode::Eager,\n                                };\n\n                                if let Some(edit_predictions) = settings.edit_predictions.as_mut() {\n                                    edit_predictions.mode = new_mode;\n                                } else {\n                                    settings.edit_predictions =\n                                        Some(language_settings::EditPredictionSettingsContent {\n                                            mode: new_mode,\n                                            ..Default::default()\n                                        });\n                                }\n                            },\n                        );\n                    }\n                },\n            );\n        }\n\n        if let Some(editor_focus_handle) = self.editor_focus_handle.clone() {\n            menu = menu\n                .separator()\n                .entry(\n                    ": "",
    ",\n                    Some(Box::new(ShowEditPrediction)),\n                    {\n                        let editor_focus_handle = editor_focus_handle.clone();\n                        move |window, cx| {\n                            editor_focus_handle.dispatch_action(&ShowEditPrediction, window, cx);\n                        }\n                    },\n                )\n                .context(editor_focus_handle);\n        }\n\n        menu\n    }\n\n    fn build_copilot_context_menu(\n        &self,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Entity<ContextMenu> {\n        ContextMenu::build(window, cx, |menu, window, cx| {\n            self.build_language_settings_menu(menu, window, cx)\n                .separator()\n                .link(\n                    ": "",
    ",\n                    OpenBrowser {\n                        url: COPILOT_SETTINGS_URL.to_string(),\n                    }\n                    .boxed_clone(),\n                )\n                .action(": "",
    ", copilot::SignOut.boxed_clone())\n        })\n    }\n\n    fn build_supermaven_context_menu(\n        &self,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Entity<ContextMenu> {\n        ContextMenu::build(window, cx, |menu, window, cx| {\n            self.build_language_settings_menu(menu, window, cx)\n                .separator()\n                .action(": "",
    ", supermaven::SignOut.boxed_clone())\n        })\n    }\n\n    fn build_zeta_context_menu(\n        &self,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Entity<ContextMenu> {\n        ContextMenu::build(window, cx, |menu, window, cx| {\n            self.build_language_settings_menu(menu, window, cx).when(\n                cx.has_flag::<PredictEditsRateCompletionsFeatureFlag>(),\n                |this| this.action(": "",
    ", RateCompletions.boxed_clone()),\n            )\n        })\n    }\n\n    pub fn update_enabled(&mut self, editor: Entity<Editor>, cx: &mut Context<Self>) {\n        let editor = editor.read(cx);\n        let snapshot = editor.buffer().read(cx).snapshot(cx);\n        let suggestion_anchor = editor.selections.newest_anchor().start;\n        let language = snapshot.language_at(suggestion_anchor);\n        let file = snapshot.file_at(suggestion_anchor).cloned();\n        self.editor_enabled = {\n            let file = file.as_ref();\n            Some(\n                file.map(|file| {\n                    all_language_settings(Some(file), cx)\n                        .edit_predictions_enabled_for_file(file, cx)\n                })\n                .unwrap_or(true),\n            )\n        };\n        self.editor_show_predictions = editor.edit_predictions_enabled();\n        self.edit_prediction_provider = editor.edit_prediction_provider();\n        self.language = language.cloned();\n        self.file = file;\n        self.editor_focus_handle = Some(editor.focus_handle(cx));\n\n        cx.notify();\n    }\n\n    pub fn toggle_menu(&mut self, window: &mut Window, cx: &mut Context<Self>) {\n        self.popover_menu_handle.toggle(window, cx);\n    }\n}\n\nimpl StatusItemView for InlineCompletionButton {\n    fn set_active_pane_item(\n        &mut self,\n        item: Option<&dyn ItemHandle>,\n        _: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some(editor) = item.and_then(|item| item.act_as::<Editor>(cx)) {\n            self.editor_subscription = Some((\n                cx.observe(&editor, Self::update_enabled),\n                editor.entity_id().as_u64() as usize,\n            ));\n            self.update_enabled(editor, cx);\n        } else {\n            self.language = None;\n            self.editor_subscription = None;\n            self.editor_enabled = None;\n        }\n        cx.notify();\n    }\n}\n\nimpl SupermavenButtonStatus {\n    fn to_icon(&self) -> IconName {\n        match self {\n            SupermavenButtonStatus::Ready => IconName::Supermaven,\n            SupermavenButtonStatus::Errored(_) => IconName::SupermavenError,\n            SupermavenButtonStatus::NeedsActivation(_) => IconName::SupermavenInit,\n            SupermavenButtonStatus::Initializing => IconName::SupermavenInit,\n        }\n    }\n\n    fn to_tooltip(&self) -> String {\n        match self {\n            SupermavenButtonStatus::Ready => ": "",
    ".to_string(),\n            SupermavenButtonStatus::Errored(error) => format!(": "",
    ", error),\n            SupermavenButtonStatus::NeedsActivation(_) => ": "",
    ".to_string(),\n            SupermavenButtonStatus::Initializing => ": "",
    ".to_string(),\n        }\n    }\n\n    fn has_menu(&self) -> bool {\n        match self {\n            SupermavenButtonStatus::Ready | SupermavenButtonStatus::NeedsActivation(_) => true,\n            SupermavenButtonStatus::Errored(_) | SupermavenButtonStatus::Initializing => false,\n        }\n    }\n}\n\nasync fn open_disabled_globs_setting_in_editor(\n    workspace: WeakEntity<Workspace>,\n    mut cx: AsyncWindowContext,\n) -> Result<()> {\n    let settings_editor = workspace\n        .update_in(&mut cx, |_, window, cx| {\n            create_and_open_local_file(paths::settings_file(), window, cx, || {\n                settings::initial_user_settings_content().as_ref().into()\n            })\n        })?\n        .await?\n        .downcast::<Editor>()\n        .unwrap();\n\n    settings_editor\n        .downgrade()\n        .update_in(&mut cx, |item, window, cx| {\n            let text = item.buffer().read(cx).snapshot(cx).text();\n\n            let settings = cx.global::<SettingsStore>();\n\n            // Ensure that we always have ": "",
    "disabled_globs": "",
    "\n            let edits = settings.edits_for_update::<AllLanguageSettings>(&text, |file| {\n                file.edit_predictions\n                    .get_or_insert_with(Default::default)\n                    .disabled_globs\n                    .get_or_insert_with(Vec::new);\n            });\n\n            if !edits.is_empty() {\n                item.edit(edits.iter().cloned(), cx);\n            }\n\n            let text = item.buffer().read(cx).snapshot(cx).text();\n\n            static DISABLED_GLOBS_REGEX: LazyLock<Regex> = LazyLock::new(|| {\n                Regex::new(r#": "",
    "#).unwrap()\n            });\n            // Only capture [...]\n            let range = DISABLED_GLOBS_REGEX.captures(&text).and_then(|captures| {\n                captures\n                    .name(": ""
  },
  "zed/crates/install_cli/src/install_cli.rs": {
    "cli": "",
    "/usr/local/bin/zed": "",
    "/usr/bin/osascript": "",
    "-e": "",
    " with administrator privileges": "",
    "error running osascript": ""
  },
  "zed/crates/language/src/buffer_tests.rs": {
    "[ \\t]+$": "",
    "Failed to create TRAILING_WHITESPACE_REGEX": "",
    "one\\r\ntwo\\rthree": "",
    "one\ntwo\nthree": "",
    "\\r\nfour": "",
    "zero\\r\n": "",
    "zero\none\ntwo\nthree\nfour": "",
    "Make": "",
    "Makefile": "",
    "mk": "",
    "src/lib.rs": "",
    "src/lib.mk": "",
    "src/Makefile": "",
    "zed/cars": "",
    "zed/a.cars": "",
    "zed/sumk": "",
    "JavaScript": "",
    "js": "",
    "\\bnode\\b": "",
    "the/script": "",
    "nothing": "",
    "#!/bin/env node": "",
    "TypeScript": "",
    "C++": "",
    "c": "",
    "Dockerfile": "",
    "Dockerfile.*": "",
    "cpp": "",
    "C": "",
    "foo.js": "",
    "foo.c": "",
    "Dockerfile.dev": "",
    "zed": "",
    "abcdef": "",
    "XYZ": "",
    "u": "",
    "w": "",
    "one two three\nfour fiˇve six\nseven eightˇ nine\nten eleven twelve\n": "",
    "one two three\n{\nfour FIVEˇ six\n}\nseven AND EIGHTˇ nine\nten eleven twelve\n": "",
    "one two three\n{\nˇ}\nseven AND EIGHTEENˇ nine\nten eleven twelve\n": "",
    "zero": "",
    "one  ": "",
    "two": "",
    "three   ": "",
    "four": "",
    "five    ": "",
    "EE": "",
    "EEE": "",
    "zEEero": "",
    "one": "",
    "threeEEE   ": "",
    "five": "",
    "threeEEE": "",
    "fn a() {}": "",
    "(source_file (function_item name: (identifier) ": "",
    "parameters: (parameters) ": "",
    "body: (block)))": "",
    "b: C": "",
    " d; ": "",
    "fn a(b: C) { d; }": "",
    "parameters: (parameters (parameter pattern: (identifier) type: (type_identifier))) ": "",
    "body: (block (expression_statement (identifier)))))": "",
    ".e": "",
    "fn a(b: C) { d.e; }": "",
    "(f)": "",
    "fn a(b: C) { d.e(f); }": "",
    "::<G>": "",
    "fn a(b: C) { d.e::<G>(f); }": "",
    "body: (block (expression_statement (call_expression ": "",
    "function: (generic_function ": "",
    "function: (field_expression value: (identifier) field: (field_identifier)) ": "",
    "type_arguments: (type_arguments (type_identifier))) ": "",
    "arguments: (arguments (identifier)))))))": "",
    "(source_file (expression_statement (block)))": "",
    "(document (object))": "",
    "\n        struct Person {\n            name: String,\n            age: usize,\n        }\n\n        mod module {\n            enum LoginState {\n                LoggedOut,\n                LoggingOn,\n                LoggedIn {\n                    person: Person,\n                    time: Instant,\n                }\n            }\n        }\n\n        impl Eq for Person {}\n\n        impl Drop for Person {\n            fn drop(&mut self) {\n                println!(": "",
    ");\n            }\n        }\n    ": "",
    "struct Person": "",
    "name": "",
    "age": "",
    "mod module": "",
    "enum LoginState": "",
    "LoggedOut": "",
    "LoggingOn": "",
    "LoggedIn": "",
    "person": "",
    "time": "",
    "impl Eq for Person": "",
    "impl Drop for Person": "",
    "fn drop": "",
    "oon": "",
    "dp p": "",
    "dpn": "",
    "impl ": "",
    "\n        impl A for B<\n            C\n        > {\n        };\n    ": "",
    "impl A for B<": "",
    "\n            (function_declaration\n                ": "",
    " @context\n                name: (_) @name\n                parameters: (formal_parameters\n                    ": "",
    " @context.extra\n                    ": "",
    " @context.extra)) @item\n            ": "",
    "\n        function a() {}\n        function b(c) {}\n    ": "",
    "function a()": "",
    "function b( )": "",
    "function a": "",
    "\n        /// This is a doc comment\n        /// that spans multiple lines\n        fn annotated_function() {\n            // This is not an annotation\n        }\n\n        // This is a single-line annotation\n        fn another_function() {}\n\n        fn unannotated_function() {}\n\n        // This comment is not an annotation\n\n        fn function_after_blank_line() {}\n    ": "",
    "fn annotated_function": "",
    "/// This is a doc comment\n/// that spans multiple lines": "",
    "fn another_function": "",
    "// This is a single-line annotation": "",
    "fn unannotated_function": "",
    "fn function_after_blank_line": "",
    "\n        impl Person {\n            fn one() {\n                1\n            }\n\n            fn two() {\n                2\n            }fn three() {\n                3\n            }\n        }\n    ": "",
    "impl Person": "",
    "fn one": "",
    "fn two": "",
    "\n            impl Hello {\n                fn say() -> u8 { return /* ˇhi */ 1 }\n            }": "",
    "/* hi */": "",
    "return /* hi */ 1": "",
    "fn say() -> u8 { return /* hi */ 1 }": "",
    "\n            mod x {\n                moˇd y {\n\n                }\n            }\n            let foo = 1;": "",
    "\n            mod x «{»\n                mod y {\n\n                }\n            «}»\n            let foo = 1;": "",
    "\n            mod x {\n                mod y ˇ{\n\n                }\n            }\n            let foo = 1;": "",
    "\n                mod x «{»\n                    mod y {\n\n                    }\n                «}»\n                let foo = 1;": "",
    "\n                mod x {\n                    mod y «{»\n\n                    «}»\n                }\n                let foo = 1;": "",
    "\n            mod x {\n                mod y {\n\n                }ˇ\n            }\n            let foo = 1;": "",
    "\n            mod x {\n                mod y {\n\n                }\n            ˇ}\n            let foo = 1;": "",
    "\n            mod x {\n                mod y {\n\n                }\n            }\n            let fˇoo = 1;": "",
    "\n            mod x {\n                mod y {\n\n                }\n            }\n            let foo = 1;ˇ": "",
    "\n        for (const a in b)ˇ {\n            // a comment that's longer than the for-loop header\n        }": "",
    "\n        for «(»const a in b«)» {\n            // a comment that's longer than the for-loop header\n        }": "",
    "\n        for (const a in b) {ˇ\n            // a comment that's longer than the for-loop header\n        }": "",
    "\n        for (const a in b) «{»\n            // a comment that's longer than the for-loop header\n        «}»": "",
    "fn a() { b(|c| {}) }": "",
    "|": "",
    "|c|": "",
    "|c| {}": "",
    "(|c| {})": "",
    "\n\n": "",
    "fn a() {\n    \n}": "",
    "b()\n": "",
    "fn a() {\n    b()\n    \n}": "",
    ".c": "",
    "fn a() {\n    b()\n        .c\n}": "",
    "fn a() {\n    b()\n    c\n}": "",
    "fn a() {\n\\t\n}": "",
    "fn a() {\n\\tb()\n\\t\n}": "",
    "fn a() {\n\\tb()\n\\t\\t.c\n}": "",
    "fn a() {\n\\tb()\n\\tc\n}": "",
    "\n            fn a() {\n            c;\n            d;\n            }\n            ": "",
    "\n            fn a() {\n            c«()»;\n            d«()»;\n            }\n            ": "",
    "\n            fn a() {\n            c();\n            d();\n            }\n            ": "",
    "\n            fn a() {\n            c«\n            .f\n            .g()»;\n            d«\n            .f\n            .g()»;\n            }\n            ": "",
    "\n            fn a() {\n            c\n                .f\n                .g();\n            d\n                .f\n                .g();\n            }\n            ": "",
    "\n            fn a() {«\n            »\n            c\n                .f\n                .g();\n            d\n                .f\n                .g();\n            }\n            ": "",
    "\n            fn a() {\n                ˇ\n            c\n                .f\n                .g();\n            d\n                .f\n                .g();\n            }\n            ": "",
    "ˇ": "",
    "\n            fn a() {\n            «»\n            c\n                .f\n                .g();\n            d\n                .f\n                .g();\n            }\n            ": "",
    "\n            fn a() {\n\n            c\n                .f\n                .g();\n            d\n                .f\n                .g();\n            }\n            ": "",
    "second buffer: {:?}": "",
    "\n            fn a() {\n                b();\n                |\n            ": "",
    "\n            fn a() {\n                b();\n                «}»\n            ": "",
    "\n            fn a() {\n                b();\n            }\n            ": "",
    "\n            fn a() {\n                b();\n            «    »}\n            ": "",
    "\n            fn a() {\n                b();\n                }\n            ": "",
    "DONE": "",
    "\n            fn a() {\n                i\n            }\n            ": "",
    "\n            fn a() {\n                i«f let Some(x) = y»\n            }\n            ": "",
    "\n            fn a() {\n                if let Some(x) = y\n            }\n            ": "",
    "\n            fn a() {\n                if let Some(x) = y« {»\n            }\n            ": "",
    "\n            fn a() {\n                if let Some(x) = y {\n            }\n            ": "",
    "\n            fn a() {}\n            ": "",
    "\n            fn a(«\n            b») {}\n            ": "",
    "\n            fn a(\n                b) {}\n            ": "",
    "\n            fn a(\n                ˇ) {}\n            ": "",
    "\n                fn a(\n                ) {}\n            ": "",
    "a\nb": "",
    "\n\n\n": "",
    "\n            const a: usize = 1;\n            fn b() {\n                if c {\n                    let d = 2;\n                }\n            }\n        ": "",
    "e(\n    f()\n);\n": "",
    "\n                const a: usize = 1;\n                fn b() {\n                    if c {\n                        e(\n                            f()\n                        );\n                        let d = 2;\n                    }\n                }\n            ": "",
    "\n            fn a() {\n                b();\n            }\n        ": "",
    "\n            ": "",
    "\n        ": "",
    "\n            fn a() {\n                b();\n                ": "",
    "\n            }\n            ": "",
    "        ": "",
    "\n            fn a() {\n                if b() {\n\n                }\n            }\n        ": "",
    "    c\n        .d()\n        .e();": "",
    "\n            fn a() {\n                if b() {\n                    c\n                        .d()\n                        .e();\n                }\n            }\n            ": "",
    " ": "",
    "\n            mod numbers {\n                «fn one() {\n                    1\n                }\n            »\n                «fn two() {\n                    2\n                }\n            »\n                «fn three() {\n                    3\n                }\n            »}\n            ": "",
    "fn one() {\n    101\n}\n": "",
    "fn two() {\n    102\n}\n": "",
    "fn three() {\n    103\n}\n": "",
    "\n            mod numbers {\n                fn one() {\n                    101\n                }\n\n                fn two() {\n                    102\n                }\n\n                fn three() {\n                    103\n                }\n            }\n            ": "",
    "\n            * one\n                - a\n                - b\n            * two\n        ": "",
    "\n            * one\n                - a\n                - b\n\n            * two\n            ": "",
    "HTML": "",
    "\n                <div>ˇ\n                </div>\n                <script>\n                    init({ˇ\n                    })\n                </script>\n                <span>ˇ\n                </span>\n            ": "",
    "\na": "",
    "\n                <div>\n                  a\n                </div>\n                <script>\n                    init({\n                            a\n                    })\n                </script>\n                <span>\n                  a\n                </span>\n            ": "",
    "\n            class C\n            def a(b, c)\n            puts b\n            puts c\n            rescue\n            puts ": "",
    "\n            exit 1\n            end\n            end\n        ": "",
    "\n                class C\n                  def a(b, c)\n                    puts b\n                    puts c\n                  rescue\n                    puts ": "",
    "\n                    exit 1\n                  end\n                end\n            ": "",
    "fn a() {\n\n}": "",
    "fn a() {\n    \n\n}": "",
    "x": "",
    "fn a() {\n    x\n    \n}": "",
    "abc\ndef\nghi": "",
    "\nabc\ndef\nghi": "",
    "\n\nabc\ndef\nghi": "",
    "abc\ndef\n\n\n\nghi": "",
    "abc\ndefghi\njkl": "",
    "abc\ndef\n\n\n\nghi\njkl": "",
    "abc\ndef\n\n\nghi\njkl": "",
    "abc\ndef\nghi\n\n\n": "",
    "abc\ndef\nghi\n\n": "",
    "// ": "",
    "{": "",
    "}": "",
    "'": "",
    "string": "",
    "comment": "",
    "element": "",
    "{/*": "",
    "*/}": "",
    "\n                (jsx_element) @element\n                (string) @string\n                (comment) @comment.inclusive\n                [\n                    (jsx_opening_element)\n                    (jsx_closing_element)\n                    (jsx_expression)\n                ] @default\n            ": "",
    "\n            a[": "",
    "] = <C d=": "",
    ">\n                <F></F>\n                { g() }\n            </C>; // a comment\n        ": "",
    "b\"": "",
    "<F>": "",
    " d=": "",
    "\n                (string_literal) @string\n            ": "",
    "\n            const S: &'static str = ": "",
    ";\n        ": "",
    "ello": "",
    "\n            <ol>\n            <% people.each do |person| %>\n                <li>\n                    <%= person.name %>\n                </li>\n            <% end %>\n            </ol>\n        ": "",
    "ERB": "",
    "<!--": "",
    "-->": "",
    "# ": "",
    "\n            this is an *emphasized* word.\n        ": "",
    "abc": "",
    "D": "",
    "E": "",
    "abcDE": "",
    "abcD": "",
    "F": "",
    "abcDF": "",
    "one\ntwo\nthree\n": "",
    "1.5\n": "",
    "THREE": "",
    "one\n1.5\ntwo\nTHREE\n": "",
    "ZERO\n": "",
    "ZERO\none\ntwo\nthree\n": "",
    "ZERO\none\n1.5\ntwo\nTHREE\n": "",
    "2.5\n": "",
    "ZERO\none\ntwo\n2.5\nthree\n": "",
    "ZERO\none\n1.5\ntwo\n2.5\nTHREE\n": "",
    "abcdefghijk": "",
    "ABC": "",
    "HI": "",
    "LMN": "",
    "ABCdefgHIjkLMN": "",
    "abcdefgHIjk": "",
    "hi": "",
    "ABCdefghijkLMN": "",
    "abcdefghijkLMN": "",
    "ABCdefgHIjk": "",
    "\n        fn test_empty() -> bool {\n            false\n        }": "",
    "\n        fn calculate_area(: f64) -> f64 {\n            std::f64::consts::PI * .powi(2)\n        }": "",
    "radius": "",
    "\n                fn calculate_area(radius: f64) -> f64 {\n                    std::f64::consts::PI * radius.powi(2)": "",
    "\n        struct Person {\n            first_name: String,\n        }\n\n        impl Person {\n            fn first_name(&self) -> &String {\n                &self.first_name\n            }\n        }": "",
    "last": "",
    "\n                        firstlast_name: String,\n                    }\n\n                    impl Person {\n                        fn firstlast_name(&self) -> &String {\n                            &self.firstlast_name": "",
    "MIN_PEERS": "",
    "invalid `MIN_PEERS` variable": "",
    "MAX_PEERS": "",
    "invalid `MAX_PEERS` variable": "",
    "OPERATIONS": "",
    "invalid `OPERATIONS` variable": "",
    "Adding initial peer with replica id {}": "",
    "initial text: {:?}": "",
    "buffer {} text: {:?}": "",
    "peer {} clearing active selections": "",
    "peer {} setting active selections: {:?}": "",
    "peer {} setting diagnostics: {:?}": "",
    "Adding new replica {} (replicating from {})": "",
    "New replica {} text: {:?}": "",
    "peer {} (version: {:?}) applying {} ops from the network. {:?}": "",
    "Replica {} version != Replica 0 version": "",
    "Replica {} text != Replica 0 text": "",
    "Replica {} diagnostics != Replica 0 diagnostics": "",
    "Replica {} remote selections != expected selections": "",
    "wrong ranges for text lines:\n{:?}": "",
    "Ruby": "",
    "rb": "",
    "\n            (class ": "",
    " @end) @indent\n            (method ": "",
    " @end) @indent\n            (rescue) @outdent\n            (then) @indent\n        ": "",
    "\n        (element\n          (start_tag) @start\n          (end_tag)? @end) @indent\n        ": "",
    "\n        (script_element\n            (raw_text) @injection.content\n            (#set! injection.language ": "",
    "))\n        ": "",
    "erb": "",
    "<%#": "",
    "%>": "",
    "\n            (\n                (code) @injection.content\n                (#set! injection.language ": "",
    ")\n                (#set! injection.combined)\n            )\n\n            (\n                (content) @injection.content\n                (#set! injection.language ": "",
    ")\n                (#set! injection.combined)\n            )\n        ": "",
    "\n        (call_expression) @indent\n        (field_expression) @indent\n        (_ ": "",
    " @end) @indent\n        (_ ": "",
    " @end) @indent\n        ": "",
    "\n        (": "",
    " @open ": "",
    " @close)\n        ": "",
    "\n        (function_item\n            body: (_\n                ": "",
    "\n                (_)* @function.inside\n                ": "",
    " )) @function.around\n\n        (line_comment)+ @comment.around\n\n        (block_comment) @comment.around\n        ": "",
    "\n        (line_comment) @annotation\n\n        (struct_item\n            ": "",
    " @context\n            name: (_) @name) @item\n        (enum_item\n            ": "",
    " @context\n            name: (_) @name) @item\n        (enum_variant\n            name: (_) @name) @item\n        (field_declaration\n            name: (_) @name) @item\n        (impl_item\n            ": "",
    " @context\n            trait: (_)? @name\n            ": "",
    "? @context\n            type: (_) @name\n            body: (_ ": "",
    " (_)* ": "",
    ")) @item\n        (function_item\n            ": "",
    " @context\n            name: (_) @name) @item\n        (mod_item\n            ": "",
    " @context\n            name: (_) @name) @item\n        ": "",
    "Json": "",
    " @close)\n        (": "",
    "\n        (object ": "",
    "md": "",
    "\n            (fenced_code_block\n                (info_string\n                    (language) @injection.language)\n                (code_fence_content) @injection.content)\n\n                ((inline) @injection.content\n                (#set! injection.language ": "",
    "Markdown-Inline": "",
    "(emphasis) @emphasis": ""
  },
  "zed/crates/language_model_selector/src/language_model_selector.rs": {
    "assistant2::ToggleModelSelector": "",
    "https://zed.dev/pro": "",
    "lmstudio": "",
    "ollama": "",
    "authenticated": "",
    "copilot_chat": "",
    "Failed to authenticate provider: {}: {err}": "",
    "model-switcher": "",
    "Select a model...": "",
    "Configured Models": "",
    "Pro": "",
    "zed-pro": "",
    "Zed Pro": "",
    "try-pro": "",
    "Upgrade to Pro": "",
    "Try Pro": "",
    "configure": "",
    "Configure": ""
  },
  "zed/crates/language_selector/src/active_buffer_language.rs": {
    "Unknown": "",
    "change-language": "",
    "Select Language": ""
  },
  "zed/crates/language_selector/src/language_selector.rs": {
    " (current)": "",
    "file.{extension}": "",
    "Select a language…": "",
    "project was dropped": "",
    "buffer was dropped": ""
  },
  "zed/crates/language_models/src/provider/anthropic.rs": {
    "Anthropic": "",
    "ANTHROPIC_API_KEY": "",
    "Bearer": "",
    "invalid {PROVIDER_NAME} API key": "",
    "user": "",
    "assistant": "",
    "system": "",
    "gpt-4": "",
    "App state dropped": "",
    "Missing Anthropic API Key": "",
    "failed to stream completion": "",
    "anthropic/{}": "",
    "base64": "",
    "image/png": "",
    "System role should never occur here": "",
    "\n\n": "",
    "end_turn": "",
    "max_tokens": "",
    "tool_use": "",
    "sk-ant-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx": "",
    "not signed in": "",
    "Loading credentials...": "",
    "To use Zed's assistant with Anthropic, you need to add an API key. Follow these steps:": "",
    "Create one by visiting": "",
    "Anthropic's settings": "",
    "https://console.anthropic.com/settings/keys": "",
    "Paste your API key below and hit enter to start using the assistant": "",
    "You can also assign the {ANTHROPIC_API_KEY_VAR} environment variable and restart Zed.": "",
    "API key set in {ANTHROPIC_API_KEY_VAR} environment variable.": "",
    "API key configured.": "",
    "reset-key": "",
    "Reset key": "",
    "To reset your API key, unset the {ANTHROPIC_API_KEY_VAR} environment variable.": ""
  },
  "zed/crates/language_models/src/provider/bedrock.rs": {
    "amazon-bedrock": "",
    "Amazon Bedrock": "",
    "https://amazonaws.com": "",
    "ZED_ACCESS_KEY_ID": "",
    "ZED_SECRET_ACCESS_KEY": "",
    "ZED_AWS_REGION": "",
    "ZED_AWS_CREDENTIALS": "",
    "Bearer": "",
    "invalid {PROVIDER_NAME} credentials": "",
    "failed to parse credentials": "",
    "Failed to read credentials": "",
    "App state dropped": "",
    "Keychain": "",
    "bedrock/{}": "",
    "System role should never occur here": "",
    "failed to build Bedrock message": "",
    "\n\n": "",
    "user": "",
    "assistant": "",
    "system": "",
    "gpt-4": "",
    "Failed to parse tool use event: {:?}": "",
    "Tool is not used": "",
    "XXXXXXXXXXXXXXXX": "",
    "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX": "",
    "us-east-1": "",
    "not signed in": "",
    "Loading credentials...": "",
    "To use Zed's assistant with Bedrock, you need to add the Access Key ID, Secret Access Key and AWS Region. Follow these steps:": "",
    "Start by": "",
    "creating a user and security credentials": "",
    "https://us-east-1.console.aws.amazon.com/iam/home": "",
    "Grant that user permissions according to this documentation:": "",
    "Prerequisites": "",
    "https://docs.aws.amazon.com/bedrock/latest/userguide/inference-prereq.html": "",
    "Select the models you would like access to:": "",
    "Bedrock Model Catalog": "",
    "https://us-east-1.console.aws.amazon.com/bedrock/home?region=us-east-1#/modelaccess": "",
    "Fill the fields below and hit enter to start using the assistant": "",
    "Access Key ID": "",
    "Secret Access Key": "",
    "Region": "",
    "You can also assign the {ZED_BEDROCK_ACCESS_KEY_ID_VAR}, {ZED_BEDROCK_SECRET_ACCESS_KEY_VAR}, and {ZED_BEDROCK_REGION_VAR} environment variables and restart Zed.": "",
    "Access Key ID is set in {ZED_BEDROCK_ACCESS_KEY_ID_VAR}, Secret Key is set in {ZED_BEDROCK_SECRET_ACCESS_KEY_VAR}, Region is set in {ZED_BEDROCK_REGION_VAR} environment variables.": "",
    "Credentials configured.": "",
    "reset-key": "",
    "Reset key": "",
    "To reset your credentials, unset the {ZED_BEDROCK_ACCESS_KEY_ID_VAR}, {ZED_BEDROCK_SECRET_ACCESS_KEY_VAR}, and {ZED_BEDROCK_REGION_VAR} environment variables.": ""
  },
  "zed/crates/language_models/src/provider/cloud.rs": {
    "Terms of Service": "",
    "To start using Zed AI, please read and accept the": "",
    "I accept the Terms of Service": "",
    "cloud language model completion failed with status {}: {body}": "",
    "tool use not implemented for Google AI": "",
    "You have full access to Zed's hosted LLMs, which include models from Anthropic, OpenAI, and Google. They come with faster speeds and higher limits through Zed Pro.": "",
    "You have basic access to models from Anthropic through the Zed AI Free plan.": "",
    "Manage Subscription": "",
    "Learn more": "",
    "Upgrade": "",
    "Use Zed AI to access hosted language models.": "",
    "Sign In": ""
  },
  "zed/crates/language_models/src/provider/copilot_chat.rs": {
    "copilot_chat": "",
    "GitHub Copilot Chat": "",
    "Copilot must be enabled for Copilot Chat to work. Please enable Copilot and try again.": "",
    "Received the following error while signing into Copilot: {err}": "",
    "Copilot is still starting, please wait for Copilot to start then try again": "",
    "Unable to authorize with Copilot. Please make sure that you have an active Copilot and Copilot Chat subscription.": "",
    "You have signed out of Copilot. Please sign in to Copilot and try again.": "",
    "Still signing into Copilot...": "",
    "Signing out of GitHub Copilot Chat is currently not supported.": "",
    "copilot_chat/{}": "",
    "Empty prompts aren't allowed. Please provide a non-empty prompt.": "",
    "The final message must be from the user. To provide a system prompt, you must provide the system prompt followed by a user prompt.": "",
    "The Copilot Chat API returned a response with no message content": "",
    "The Copilot Chat API returned a response with no delta content": "",
    "The Copilot Chat API returned a response with no choices, but hadn't finished the message yet. Please try again.": "",
    "not implemented": "",
    "Authorized.": "",
    "sign_out": "",
    "Sign Out": "",
    "icon_circle_arrow": "",
    "Copilot Chat requires an active GitHub Copilot subscription. Please ensure Copilot is configured and try again, or use a different Assistant provider.": "",
    "Starting Copilot...": "",
    "Signing in to Copilot...": "",
    "Copilot had issues starting. Please try restarting it. If the issue persists, try reinstalling Copilot.": "",
    "To use Zed's assistant with GitHub Copilot, you need to be logged in to GitHub. Note that your GitHub account must have an active Copilot Chat subscription.": "",
    "sign_in": "",
    "Sign In": "",
    "Sign in to start using Github Copilot Chat.": ""
  },
  "zed/crates/language_models/src/provider/deepseek.rs": {
    "deepseek": "",
    "DeepSeek": "",
    "DEEPSEEK_API_KEY": "",
    "Bearer": "",
    "invalid {PROVIDER_NAME} API key": "",
    "deepseek-chat": "",
    "deepseek-reasoner": "",
    "App state dropped": "",
    "Missing DeepSeek API Key": "",
    "deepseek/{}": "",
    "user": "",
    "assistant": "",
    "system": "",
    "gpt-4": "",
    "Empty response": "",
    "sk-00000000000000000000000000000000": "",
    "Loading credentials...": "",
    "To use DeepSeek in Zed, you need an API key:": "",
    "Get your API key from the": "",
    "DeepSeek console": "",
    "https://platform.deepseek.com/api_keys": "",
    "Paste your API key below and hit enter to start using the assistant": "",
    "Or set the {} environment variable.": "",
    "API key set in {}": "",
    "API key configured": "",
    "reset-key": "",
    "Reset": ""
  },
  "zed/crates/language_models/src/provider/google.rs": {
    "google": "",
    "Google AI": "",
    "GOOGLE_AI_API_KEY": "",
    "Bearer": "",
    "invalid {PROVIDER_NAME} API key": "",
    "google/{}": "",
    "Missing Google API key": "",
    "App state dropped": "",
    "Missing Google API Key": "",
    "not implemented": "",
    "user": "",
    "assistant": "",
    "system": "",
    "gpt-4": "",
    "not signed in": "",
    "AIzaSy...": "",
    "Loading credentials...": "",
    "To use Zed's assistant with Google AI, you need to add an API key. Follow these steps:": "",
    "Create one by visiting": "",
    "Google AI's console": "",
    "https://aistudio.google.com/app/apikey": "",
    "Paste your API key below and hit enter to start using the assistant": "",
    "You can also assign the {GOOGLE_AI_API_KEY_VAR} environment variable and restart Zed.": "",
    "API key set in {GOOGLE_AI_API_KEY_VAR} environment variable.": "",
    "API key configured.": "",
    "reset-key": "",
    "Reset key": "",
    "To reset your API key, unset the {GOOGLE_AI_API_KEY_VAR} environment variable.": ""
  },
  "zed/crates/language_models/src/provider/lmstudio.rs": {
    "App state dropped": "",
    "Run local LLMs like Llama, Phi, and Qwen.": "",
    "To use LM Studio as a provider for Zed assistant, it needs to be running with at least one model downloaded.": "",
    "Loading models...": "",
    "To get your first model, try running": "",
    "Download LM Studio": "",
    "Model Catalog": "",
    "Connected": "",
    "Connect": ""
  },
  "zed/crates/language_models/src/provider/mistral.rs": {
    "mistral": "",
    "Mistral": "",
    "MISTRAL_API_KEY": "",
    "Bearer": "",
    "invalid {PROVIDER_NAME} API key": "",
    "App state dropped": "",
    "Missing Mistral API Key": "",
    "mistral/{}": "",
    "user": "",
    "assistant": "",
    "system": "",
    "gpt-4": "",
    "Empty response": "",
    "0aBCDEFGhIjKLmNOpqrSTUVwxyzabCDE1f2": "",
    "not signed in": "",
    "Loading credentials...": "",
    "To use Zed's assistant with Mistral, you need to add an API key. Follow these steps:": "",
    "Create one by visiting": "",
    "Mistral's console": "",
    "https://console.mistral.ai/api-keys": "",
    "Ensure your Mistral account has credits": "",
    "Paste your API key below and hit enter to start using the assistant": "",
    "You can also assign the {MISTRAL_API_KEY_VAR} environment variable and restart Zed.": "",
    "API key set in {MISTRAL_API_KEY_VAR} environment variable.": "",
    "API key configured.": "",
    "reset-key": "",
    "Reset key": "",
    "To reset your API key, unset the {MISTRAL_API_KEY_VAR} environment variable.": ""
  },
  "zed/crates/language_models/src/provider/ollama.rs": {
    "https://ollama.com/download": "",
    "https://ollama.com/library": "",
    "https://ollama.com/": "",
    "ollama": "",
    "Ollama": "",
    "llama3.2:latest": "",
    "authenticated": "",
    "-embed": "",
    "App state dropped": "",
    "ollama/{}": "",
    "message does not have an assistant role": "",
    "assistant message does not have any tool calls": "",
    "tool not used": "",
    "Get up and running with Llama 3.3, Mistral, Gemma 2, and other large language models with Ollama.": "",
    "Ollama must be running with at least one model installed to use it in the assistant.": "",
    "Loading models...": "",
    "Once installed, try ": "",
    "ollama run llama3.2": "",
    "ollama-site": "",
    "download_ollama_button": "",
    "Download Ollama": "",
    "view-models": "",
    "All Models": "",
    "connected": "",
    "Connected": "",
    "retry_ollama_models": "",
    "Connect": ""
  },
  "zed/crates/language_models/src/provider/open_ai.rs": {
    "openai": "",
    "OpenAI": "",
    "OPENAI_API_KEY": "",
    "Bearer": "",
    "invalid {PROVIDER_NAME} API key": "",
    "App state dropped": "",
    "Missing OpenAI API Key": "",
    "openai/{}": "",
    "o1-": "",
    "user": "",
    "assistant": "",
    "system": "",
    "gpt-4": "",
    "sk-000000000000000000000000000000000000000000000000": "",
    "not signed in": "",
    "Loading credentials...": "",
    "To use Zed's assistant with OpenAI, you need to add an API key. Follow these steps:": "",
    "Create one by visiting": "",
    "OpenAI's console": "",
    "https://platform.openai.com/api-keys": "",
    "Ensure your OpenAI account has credits": "",
    "Paste your API key below and hit enter to start using the assistant": "",
    "You can also assign the {OPENAI_API_KEY_VAR} environment variable and restart Zed.": "",
    "Note that having a subscription for another service like GitHub Copilot won't work.": "",
    "API key set in {OPENAI_API_KEY_VAR} environment variable.": "",
    "API key configured.": "",
    "reset-key": "",
    "Reset key": "",
    "To reset your API key, unset the {OPENAI_API_KEY_VAR} environment variable.": ""
  },
  "zed/crates/markdown/examples/markdown.rs": {
    "\n# Markdown Example Document\n\n## Headings\nHeadings are created by adding one or more `#` symbols before your heading text. The number of `#` you use will determine the size of the heading.\n\n```\nfunction a(b: T) {\n\n}\n```\n\n\nRemember, markdown processors may have slight differences and extensions, so always refer to the specific documentation or guides relevant to your platform or editor for the best practices and additional features.\n": "",
    "cmd-c": "",
    "Zed Plex Sans": "",
    "Zed Plex Mono": "",
    "Zed Mono": "",
    "TypeScript": "",
    "markdown-example": "",
    "foo": ""
  },
  "zed/crates/media/src/media.rs": {
    "IOSurface": "",
    "framework": "",
    "C": "",
    "CoreVideo": "",
    "could not create texture cache, code: {}": "",
    "could not create texture, code: {}": "",
    "error getting sample timing info, code {}": "",
    "CoreMedia": "",
    "error getting parameter set, code: {}": "",
    "could not get block buffer data": "",
    "error creating compression session, code {}": "",
    "error encoding frame, code {}": "",
    "VideoToolbox": ""
  },
  "zed/crates/media/build.rs": {
    "xcrun": "",
    "--sdk": "",
    "macosx": "",
    "--show-sdk-path": "",
    "cargo:rerun-if-changed=src/bindings.h": "",
    "src/bindings.h": "",
    "-isysroot{}": "",
    "-xobjective-c": "",
    "CMItemIndex": "",
    "CMSampleTimingInfo": "",
    "CMVideoCodecType": "",
    "VTEncodeInfoFlags": "",
    "CMTimeMake": "",
    "kCVPixelFormatType_.*": "",
    "kCVReturn.*": "",
    "VTEncodeInfoFlags_.*": "",
    "kCMVideoCodecType_.*": "",
    "kCMTime.*": "",
    "kCMSampleAttachmentKey_.*": "",
    "unable to generate bindings": "",
    "OUT_DIR": "",
    "bindings.rs": "",
    "couldn't write dispatch bindings": ""
  },
  "zed/crates/node_runtime/src/node_runtime.rs": {
    "NODE_EXTRA_CA_CERTS": "",
    "info": "",
    "--json": "",
    "--fetch-retry-mintimeout": "",
    "2000": "",
    "--fetch-retry-maxtimeout": "",
    "5000": "",
    "--fetch-timeout": "",
    "no version found for npm package {}": "",
    "{name}@{version}": "",
    "--save-exact": "",
    "install": "",
    "kebab-case": "",
    "v22.5.1": "",
    "bin/node": "",
    "node.exe": "",
    "bin/npm": "",
    "node_modules/npm/bin/npm-cli.js": "",
    "invalid node binary path": "",
    "PATH": "",
    "failed to create PATH env variable": "",
    "Node runtime install_if_needed": "",
    "darwin": "",
    "win": "",
    "Running on unsupported os: {other}": "",
    "x86_64": "",
    "x64": "",
    "aarch64": "",
    "arm64": "",
    "Running on unsupported architecture: {other}": "",
    "node-{version}-{os}-{arch}": "",
    "node": "",
    "--version": "",
    "--cache": "",
    "cache": "",
    "--userconfig": "",
    "blank_user_npmrc": "",
    "--globalconfig": "",
    "blank_global_npmrc": "",
    "error creating node containing dir": "",
    "node-{version}-{os}-{arch}.{extension}": "",
    "tar.gz": "",
    "zip": "",
    "https://nodejs.org/dist/{version}/{file_name}": "",
    "error downloading Node binary tarball": "",
    "missing node binary file": "",
    "missing npm file": "",
    "{e}": "",
    "failed to launch npm subcommand {subcommand} subcommand\nerr: {:?}": "",
    "failed to execute npm {subcommand} subcommand:\nstdout: {:?}\nstderr: {:?}": "",
    "node_modules": "",
    "running node from {:?}": "",
    "failed to run node --version. stdout: {}, stderr: {}": "",
    "node at {} is too old. want: {}, got: {}": "",
    "root": "",
    "-g": "",
    "npm": "",
    "package.json": "",
    "binary_path: no node runtime available": "",
    "run_npm_subcommand: no node runtime available": "",
    "npm_package_installed_version: no node runtime available": "",
    "--prefix": "",
    "localhost": "",
    "127.0.0.1": "",
    "--proxy": "",
    "SYSTEMROOT": "",
    "Missing environment variable: SYSTEMROOT!": "",
    "ComSpec": "",
    "Missing environment variable: ComSpec!": ""
  },
  "zed/crates/notifications/src/notification_store.rs": {
    "Notification store was dropped while loading notifications": ""
  },
  "zed/crates/ollama/src/ollama.rs": {
    "http://localhost:11434": "",
    "lowercase": "",
    "user": "",
    "assistant": "",
    "system": "",
    "invalid role '{value}'": "",
    "5m": "",
    "10m": "",
    "1h": "",
    "1d": "",
    "schemars": "",
    "phi": "",
    "tinyllama": "",
    "granite-code": "",
    "llama2": "",
    "yi": "",
    "vicuna": "",
    "stablelm2": "",
    "llama3": "",
    "gemma2": "",
    "gemma": "",
    "codegemma": "",
    "starcoder": "",
    "aya": "",
    "codellama": "",
    "starcoder2": "",
    "mistral": "",
    "codestral": "",
    "mixstral": "",
    "llava": "",
    "qwen2": "",
    "qwen2.5-coder": "",
    "dolphin-mixtral": "",
    "llama3.1": "",
    "llama3.2": "",
    "llama3.3": "",
    "phi3": "",
    "phi3.5": "",
    "phi4": "",
    "command-r": "",
    "deepseek-coder-v2": "",
    "deepseek-r1": "",
    "yi-coder": "",
    ":latest": "",
    "role": "",
    "type": "",
    "{api_url}/api/chat": "",
    "Content-Type": "",
    "application/json": "",
    "Failed to connect to API: {} {}": "",
    "Unable to parse chat response": "",
    "Failed to connect to Ollama API: {} {}": "",
    "{api_url}/api/tags": "",
    "Accept": "",
    "Unable to parse Ollama tag listing": "",
    "{api_url}/api/generate": "",
    "model": "",
    "keep_alive": "",
    "15m": ""
  },
  "zed/crates/open_ai/src/open_ai.rs": {
    "https://api.openai.com/v1": "",
    "lowercase": "",
    "user": "",
    "assistant": "",
    "system": "",
    "tool": "",
    "invalid role '{value}'": "",
    "schemars": "",
    "gpt-3.5-turbo": "",
    "gpt-4": "",
    "gpt-4-turbo": "",
    "gpt-4o": "",
    "gpt-4o-mini": "",
    "o1": "",
    "o1-preview": "",
    "o1-mini": "",
    "o3-mini": "",
    "custom": "",
    "gpt-4-turbo-preview": "",
    "invalid model id": "",
    "Option::is_none": "",
    "Vec::is_empty": "",
    "type": "",
    "role": "",
    "is_none_or_empty": "",
    "{api_url}/chat/completions": "",
    "Content-Type": "",
    "application/json": "",
    "Authorization": "",
    "Bearer {}": "",
    "Failed to connect to OpenAI API: {}": "",
    "Failed to connect to OpenAI API: {} {}": "",
    "{api_url}/completions": "",
    "data: ": "",
    "[DONE]": "",
    "text-embedding-3-small": "",
    "text-embedding-3-large": "",
    "{api_url}/embeddings": "",
    "failed to parse OpenAI embedding response": "",
    "error during embedding, status: {:?}, body: {:?}": "",
    "tool not used": ""
  },
  "zed/crates/outline/src/outline.rs": {
    "Search buffer symbols...": "",
    "/dir": "",
    "a.rs": "",
    "\n                    struct SingleLine; // display line 0\n                                       // display line 1\n                    struct MultiLine { // display line 2\n                        field_1: i32,  // display line 3\n                        field_2: i32,  // display line 4\n                    }                  // display line 5\n                ": "",
    "/dir/a.rs": "",
    "struct SingleLine": "",
    "struct MultiLine": "",
    "field_1": "",
    "field_2": "",
    "Initially opened outline view should have no highlights": "",
    "Second struct's rows should be highlighted": "",
    "First struct's row should be highlighted": "",
    "No rows should be highlighted after outline view is cancelled and closed": "",
    "Reopened outline view should have no highlights": "",
    "No rows should be highlighted after outline view is confirmed and closed": "",
    "(struct_item\n            (visibility_modifier)? @context\n            ": "",
    " @context\n            name: (_) @name) @item\n\n        (enum_item\n            (visibility_modifier)? @context\n            ": "",
    " @context\n            name: (_) @name) @item\n\n        (enum_variant\n            (visibility_modifier)? @context\n            name: (_) @name) @item\n\n        (impl_item\n            ": "",
    " @context\n            trait: (_)? @name\n            ": "",
    "? @context\n            type: (_) @name) @item\n\n        (trait_item\n            (visibility_modifier)? @context\n            ": "",
    " @context\n            name: (_) @name) @item\n\n        (function_item\n            (visibility_modifier)? @context\n            (function_modifiers)? @context\n            ": "",
    " @context\n            name: (_) @name) @item\n\n        (function_signature_item\n            (visibility_modifier)? @context\n            (function_modifiers)? @context\n            ": "",
    " @context\n            name: (_) @name) @item\n\n        (macro_definition\n            . ": "",
    " @context\n            name: (_) @name) @item\n\n        (mod_item\n            (visibility_modifier)? @context\n            ": "",
    " @context\n            name: (_) @name) @item\n\n        (type_item\n            (visibility_modifier)? @context\n            ": "",
    " @context\n            name: (_) @name) @item\n\n        (associated_type\n            ": "",
    " @context\n            name: (_) @name) @item\n\n        (const_item\n            (visibility_modifier)? @context\n            ": "",
    " @context\n            name: (_) @name) @item\n\n        (field_declaration\n            (visibility_modifier)? @context\n            name: (_) @name) @item\n": "",
    "Expected one caret selection but got: {selections:?}": "",
    "Expected a single caret selection, but got: {selection:?}": ""
  },
  "zed/crates/outline_panel/src/outline_panel.rs": {
    "OutlinePanel": "",
    "Highlighted text that does not match the buffer text": "",
    "…": "",
    "loading outline panel": "",
    "Filter...": "",
    "have a &mut Workspace": "",
    "menu": "",
    "editing": "",
    "not_editing": "",
    "Reveal in Finder": "",
    "Reveal in File Manager": "",
    "Open in Terminal": "",
    "Unfold Directory": "",
    "Fold Directory": "",
    "Copy Path": "",
    "Copy Relative Path": "",
    "Lines {}- {}": "",
    "{:?}|{:?}{:?}|{:?}": "",
    "Untitled": "",
    "Unknown buffer": "",
    "search-{match_range:?}": "",
    "Empty folded dirs receiver": "",
    "project-panel-vertical-scroll": "",
    "project-panel-horizontal-scroll": "",
    "No matches for query": "",
    "No outlines available": "",
    "Toggle this panel with {keystroke}": "",
    "entries": "",
    "outline-panel-menu": "",
    "Unpin Outline": "",
    "Pin Active Outline": "",
    "buffers_inside_directory called on a non-directory entry {dir_entry:?}": "",
    "Outline Panel": "",
    "outline-panel": "",
    "Searching:": "",
    "'{}'": "",
    "  <==== selected": "",
    "/rust-analyzer": "",
    "Project search view expected to appear after new search event trigger": "",
    "param_names_for_lifetime_elision_hints": "",
    "/rust-analyzer/\n  crates/\n    ide/src/\n      inlay_hints/\n        fn_lifetime_fn.rs\n          search: match config.param_names_for_lifetime_elision_hints {\n          search: allocated_lifetimes.push(if config.param_names_for_lifetime_elision_hints {\n          search: Some(it) if config.param_names_for_lifetime_elision_hints => {\n          search: InlayHintsConfig { param_names_for_lifetime_elision_hints: true, ..TEST_CONFIG },\n      inlay_hints.rs\n        search: pub param_names_for_lifetime_elision_hints: bool,\n        search: param_names_for_lifetime_elision_hints: self\n      static_index.rs\n        search: param_names_for_lifetime_elision_hints: false,\n    rust-analyzer/src/\n      cli/\n        analysis_stats.rs\n          search: param_names_for_lifetime_elision_hints: true,\n      config.rs\n        search: param_names_for_lifetime_elision_hints: self": "",
    "{line_to_select}{SELECTED_MARKER}": "",
    "search: match config.param_names_for_lifetime_elision_hints {": "",
    "fn_lifetime_fn.rs": "",
    "/rust-analyzer/\n  crates/\n    ide/src/\n      inlay_hints/\n        fn_lifetime_fn.rs{SELECTED_MARKER}\n      inlay_hints.rs\n        search: pub param_names_for_lifetime_elision_hints: bool,\n        search: param_names_for_lifetime_elision_hints: self\n      static_index.rs\n        search: param_names_for_lifetime_elision_hints: false,\n    rust-analyzer/src/\n      cli/\n        analysis_stats.rs\n          search: param_names_for_lifetime_elision_hints: true,\n      config.rs\n        search: param_names_for_lifetime_elision_hints: self": "",
    "inlay_hints/": "",
    "ide/src/": "",
    "/rust-analyzer/\n  crates/\n    ide/src/{SELECTED_MARKER}\n    rust-analyzer/src/\n      cli/\n        analysis_stats.rs\n          search: param_names_for_lifetime_elision_hints: true,\n      config.rs\n        search: param_names_for_lifetime_elision_hints: self": "",
    "a": "",
    "{}/": "",
    "{root_path}\n  crates/\n    ide/src/\n      inlay_hints/\n        fn_lifetime_fn.rs\n          search: match config.param_names_for_lifetime_elision_hints {{\n          search: allocated_lifetimes.push(if config.param_names_for_lifetime_elision_hints {{\n          search: Some(it) if config.param_names_for_lifetime_elision_hints => {{\n          search: InlayHintsConfig {{ param_names_for_lifetime_elision_hints: true, ..TEST_CONFIG }},\n      inlay_hints.rs\n        search: pub param_names_for_lifetime_elision_hints: bool,\n        search: param_names_for_lifetime_elision_hints: self\n      static_index.rs\n        search: param_names_for_lifetime_elision_hints: false,\n    rust-analyzer/src/\n      cli/\n        analysis_stats.rs\n          search: param_names_for_lifetime_elision_hints: true,\n      config.rs\n        search: param_names_for_lifetime_elision_hints: self": "",
    "should have an active editor open": "",
    "search: ": "",
    "Should place the initial editor selection on the corresponding search result": "",
    "search: Some(it) if config.param_names_for_lifetime_elision_hints => {": "",
    "Should still have the initial caret position after SelectNext calls": "",
    "After opening, should move the caret to the opened outline entry's position": "",
    "search: InlayHintsConfig { param_names_for_lifetime_elision_hints: true, ..TEST_CONFIG },": "",
    "Should again preserve the selection after another SelectNext call": "",
    "After opening an excerpt, new editor should be open": "",
    "fn_lifetime_fn.rs  <==== selected": "",
    "When opening the excerpt, should navigate to the place corresponding the outline entry": "",
    "/root": "",
    "one": "",
    "a.txt": "",
    "aaa aaa": "",
    "two": "",
    "b.txt": "",
    "a aaa": "",
    "/root/one": "",
    "/root/two": "",
    "Were opening another worktree directory": "",
    "Directory should be opened successfully": "",
    "aaa": "",
    "/root/one/\n  a.txt\n    search: aaa aaa  <==== selected\n    search: aaa aaa\n/root/two/\n  b.txt\n    search: a aaa": "",
    "/root/one/\n  a.txt  <==== selected\n/root/two/\n  b.txt\n    search: a aaa": "",
    "/root/one/\n  a.txt\n/root/two/  <==== selected": "",
    "/root/one/\n  a.txt\n/root/two/  <==== selected\n  b.txt\n    search: a aaa": "",
    "src": "",
    "lib.rs": "",
    "\n#[derive(Clone, Debug, PartialEq, Eq, Hash)]\nstruct OutlineEntryExcerpt {\n    id: ExcerptId,\n    buffer_id: BufferId,\n    range: ExcerptRange<language::Anchor>,\n}": "",
    "\n                (struct_item\n                    (visibility_modifier)? @context\n                    ": "",
    " @context\n                    name: (_) @name) @item\n\n                (field_declaration\n                    (visibility_modifier)? @context\n                    name: (_) @name) @item\n": "",
    "/root/src/lib.rs": "",
    "Failed to open Rust source file": "",
    "Should open an editor for Rust source file": "",
    "\noutline: struct OutlineEntryExcerpt\n  outline: id\n  outline: buffer_id\n  outline: range": "",
    "\noutline: struct OutlineEntryExcerpt  <==== selected\n  outline: id\n  outline: buffer_id\n  outline: range": "",
    "\noutline: struct OutlineEntryExcerpt\n  outline: id  <==== selected\n  outline: buffer_id\n  outline: range": "",
    "\noutline: struct OutlineEntryExcerpt\n  outline: id\n  outline: buffer_id  <==== selected\n  outline: range": "",
    "\noutline: struct OutlineEntryExcerpt\n  outline: id\n  outline: buffer_id\n  outline: range  <==== selected": "",
    "/frontend-project": "",
    "public": "",
    "lottie": "",
    "syntax-tree.json": "",
    "{ ": "",
    ": ": "",
    " }": "",
    "app": "",
    "(site)": "",
    "(about)": "",
    "jobs": "",
    "[slug]": "",
    "page.tsx": "",
    "static": "",
    "(blog)": "",
    "post": "",
    "components": "",
    "ErrorBoundary.tsx": "",
    "/frontend-project/\n  public/lottie/\n    syntax-tree.json\n      search: { ": "",
    " }  <==== selected\n  src/\n    app/(site)/\n      (about)/jobs/[slug]/\n        page.tsx\n          search: static\n      (blog)/post/[slug]/\n        page.tsx\n          search: static\n    components/\n      ErrorBoundary.tsx\n        search: static": "",
    " }\n  src/\n    app/(site)/  <==== selected\n    components/\n      ErrorBoundary.tsx\n        search: static": "",
    " }\n  src/\n    app/(site)/\n    components/\n      ErrorBoundary.tsx\n        search: static  <==== selected": "",
    "Should have an active editor": "",
    " }\n  src/\n    app/(site)/\n    components/\n      ErrorBoundary.tsx  <==== selected": "",
    " }\n  src/\n    app/(site)/\n    components/\n      ErrorBoundary.tsx  <==== selected\n        search: static": "",
    "Failed to load outline panel": "",
    "no outline panel": "",
    "  ": "",
    "Did not cover external files with tests": "",
    "{}/{}": "",
    "outline: {}": "",
    "search: {}": "",
    "crates": "",
    "ide": "",
    "inlay_hints": "",
    "\n        pub(super) fn hints(\n            acc: &mut Vec<InlayHint>,\n            config: &InlayHintsConfig,\n            func: ast::Fn,\n        ) -> Option<()> {\n            // ... snip\n\n            let mut used_names: FxHashMap<SmolStr, usize> =\n                match config.param_names_for_lifetime_elision_hints {\n                    true => generic_param_list\n                        .iter()\n                        .flat_map(|gpl| gpl.lifetime_params())\n                        .filter_map(|param| param.lifetime())\n                        .filter_map(|lt| Some((SmolStr::from(lt.text().as_str().get(1..)?), 0)))\n                        .collect(),\n                    false => Default::default(),\n                };\n            {\n                let mut potential_lt_refs = potential_lt_refs.iter().filter(|&&(.., is_elided)| is_elided);\n                if self_param.is_some() && potential_lt_refs.next().is_some() {\n                    allocated_lifetimes.push(if config.param_names_for_lifetime_elision_hints {\n                        // self can't be used as a lifetime, so no need to check for collisions\n                        ": "",
    ".into()\n                    } else {\n                        gen_idx_name()\n                    });\n                }\n                potential_lt_refs.for_each(|(name, ..)| {\n                    let name = match name {\n                        Some(it) if config.param_names_for_lifetime_elision_hints => {\n                            if let Some(c) = used_names.get_mut(it.text().as_str()) {\n                                *c += 1;\n                                SmolStr::from(format!(": "",
    ", text = it.text().as_str()))\n                            } else {\n                                used_names.insert(it.text().as_str().into(), 0);\n                                SmolStr::from_iter([": "",
    ", it.text().as_str()])\n                            }\n                        }\n                        _ => gen_idx_name(),\n                    };\n                    allocated_lifetimes.push(name);\n                });\n            }\n\n            // ... snip\n        }\n\n        // ... snip\n\n            #[test]\n            fn hints_lifetimes_named() {\n                check_with_config(\n                    InlayHintsConfig { param_names_for_lifetime_elision_hints: true, ..TEST_CONFIG },\n                    r#": "",
    "#,\n                );\n            }\n\n        // ... snip\n        ": "",
    "inlay_hints.rs": "",
    "\n    #[derive(Clone, Debug, PartialEq, Eq)]\n    pub struct InlayHintsConfig {\n        // ... snip\n        pub param_names_for_lifetime_elision_hints: bool,\n        pub max_length: Option<usize>,\n        // ... snip\n    }\n\n    impl Config {\n        pub fn inlay_hints(&self) -> InlayHintsConfig {\n            InlayHintsConfig {\n                // ... snip\n                param_names_for_lifetime_elision_hints: self\n                    .inlayHints_lifetimeElisionHints_useParameterNames()\n                    .to_owned(),\n                max_length: self.inlayHints_maxLength().to_owned(),\n                // ... snip\n            }\n        }\n    }\n    ": "",
    "static_index.rs": "",
    "\n// ... snip\n        fn add_file(&mut self, file_id: FileId) {\n            let current_crate = crates_for(self.db, file_id).pop().map(Into::into);\n            let folds = self.analysis.folding_ranges(file_id).unwrap();\n            let inlay_hints = self\n                .analysis\n                .inlay_hints(\n                    &InlayHintsConfig {\n                        // ... snip\n                        closure_style: hir::ClosureStyle::ImplFn,\n                        param_names_for_lifetime_elision_hints: false,\n                        binding_mode_hints: false,\n                        max_length: Some(25),\n                        closure_capture_hints: false,\n                        // ... snip\n                    },\n                    file_id,\n                    None,\n                )\n                .unwrap();\n            // ... snip\n    }\n// ... snip\n    ": "",
    "rust-analyzer": "",
    "cli": "",
    "analysis_stats.rs": "",
    "\n        // ... snip\n                for &file_id in &file_ids {\n                    _ = analysis.inlay_hints(\n                        &InlayHintsConfig {\n                            // ... snip\n                            implicit_drop_hints: true,\n                            lifetime_elision_hints: ide::LifetimeElisionHints::Always,\n                            param_names_for_lifetime_elision_hints: true,\n                            hide_named_constructor_hints: false,\n                            hide_closure_initialization_hints: false,\n                            closure_style: hir::ClosureStyle::ImplFn,\n                            max_length: Some(25),\n                            closing_brace_hints_min_lines: Some(20),\n                            fields_to_resolve: InlayFieldsToResolve::empty(),\n                            range_exclusive_hints: true,\n                        },\n                        file_id.into(),\n                        None,\n                    );\n                }\n        // ... snip\n                                    ": "",
    "config.rs": "",
    "\n                config_data! {\n                    /// Configs that only make sense when they are set by a client. As such they can only be defined\n                    /// by setting them using client's settings (e.g `settings.json` on VS Code).\n                    client: struct ClientDefaultConfigData <- ClientConfigInput -> {\n                        // ... snip\n                        /// Maximum length for inlay hints. Set to null to have an unlimited length.\n                        inlayHints_maxLength: Option<usize>                        = Some(25),\n                        // ... snip\n                        /// Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n                        inlayHints_lifetimeElisionHints_useParameterNames: bool    = false,\n                        // ... snip\n                    }\n                }\n\n                impl Config {\n                    // ... snip\n                    pub fn inlay_hints(&self) -> InlayHintsConfig {\n                        InlayHintsConfig {\n                            // ... snip\n                            param_names_for_lifetime_elision_hints: self\n                                .inlayHints_lifetimeElisionHints_useParameterNames()\n                                .to_owned(),\n                            max_length: self.inlayHints_maxLength().to_owned(),\n                            // ... snip\n                        }\n                    }\n                    // ... snip\n                }\n                ": "",
    "\n                (field_identifier) @field\n                (struct_expression) @struct\n            ": "",
    "\n                (macro_invocation\n                    (token_tree) @injection.content\n                    (#set! injection.language ": "",
    "))\n            ": "",
    "Active editor should have exactly one selection after any outline panel interactions": ""
  },
  "zed/crates/paths/src/paths.rs": {
    ".zed_server": "",
    "failed to determine RoamingAppData directory": "",
    "FLATPAK_XDG_CONFIG_HOME": "",
    "failed to determine XDG_CONFIG_HOME directory": "",
    "zed": "",
    ".config": "",
    "Library/Application Support/Zed": "",
    "FLATPAK_XDG_DATA_HOME": "",
    "failed to determine XDG_DATA_HOME directory": "",
    "failed to determine LocalAppData directory": "",
    "failed to determine cachesDirectory directory": "",
    "FLATPAK_XDG_CACHE_HOME": "",
    "failed to determine XDG_CACHE_HOME directory": "",
    ".cache": "",
    "Library/Logs/Zed": "",
    "logs": "",
    "server_state": "",
    "Zed.log": "",
    "Zed.log.old": "",
    "db": "",
    "Library/Logs/DiagnosticReports": "",
    "Retired": "",
    "settings.json": "",
    "settings_backup.json": "",
    "keymap.json": "",
    "keymap_backup.json": "",
    "tasks.json": "",
    "extensions": "",
    "remote_extensions": "",
    "uploads": "",
    "themes": "",
    "snippets": "",
    "conversations": "",
    "prompts": "",
    "assets": "",
    "prompt_overrides": "",
    "embeddings": "",
    "languages": "",
    "copilot": "",
    "supermaven": "",
    "prettier": "",
    "remote_servers": "",
    ".zed": "",
    ".zed/settings.json": "",
    ".zed/tasks.json": "",
    ".vscode/tasks.json": "",
    ".editorconfig": ""
  },
  "zed/crates/prettier/src/prettier.rs": {
    "prettier_server.js": "",
    "./prettier_server.js": "",
    "prettier": "",
    "prettier-plugin-tailwindcss": "",
    "\nformatted by test prettier": "",
    ".prettierrc": "",
    ".prettierrc.json": "",
    ".prettierrc.json5": "",
    ".prettierrc.yaml": "",
    ".prettierrc.yml": "",
    ".prettierrc.toml": "",
    ".prettierrc.js": "",
    ".prettierrc.cjs": "",
    "package.json": "",
    "prettier.config.js": "",
    "prettier.config.cjs": "",
    ".editorconfig": "",
    ".prettierignore": "",
    "node_modules": "",
    "Skipping prettier location for path {path_to_check:?} that is inside node_modules": "",
    "failed to get metadata for initial path {path_to_check:?}": "",
    "empty metadata for initial path {path_to_check:?}": "",
    "Found prettier path {path_to_check:?} in installed prettiers": "",
    "Found prettier path {path_to_check:?} in the node_modules": "",
    "workspaces": "",
    "traversing path parents, should be able to strip prefix": "",
    "Skipping non-string 'workspaces' value: {value:?}": "",
    "Path {path_to_check:?} is the workspace root for project in {closest_package_json_path:?}, but it has no prettier installed": "",
    "Found prettier path {path_to_check:?} in the workspace root for project in {closest_package_json_path:?}": "",
    "Skipping path {path_to_check:?} workspace root with workspaces {workspaces:?} that have no prettier installed": "",
    "Failed to parse workspaces for {path_to_check:?} from package.json, got {unknown:?}. Skipping.": "",
    "Skipping path {path_to_check:?} that has no prettier dependency and no workspaces section in its package.json": "",
    "Found no prettier in ancestors of {locate_from:?}": "",
    "Skipping prettier ignore location for path {path_to_check:?} that is inside node_modules": "",
    "Found prettier ignore at {path_to_check:?}": "",
    "fetching metadata for {ignore_path:?}": "",
    "Found prettier ignore at {ignore_path:?}": "",
    "Found prettier ignore at workspace root {workspace_ignore:?}": "",
    "Found no prettier ignore in ancestors of {locate_from:?}": "",
    "Prettier dir {prettier_dir:?} is not a directory": "",
    "no prettier server package found at {prettier_server:?}": "",
    "prettier server creation": "",
    "prettier server initialization": "",
    "Cannot format: prettier is not allowed for language {buffer_language:?}": "",
    "Prettier node_modules dir does not exist: {prettier_node_modules:?}": "",
    "dist": "",
    "index.mjs": "",
    "index.js": "",
    "plugin.js": "",
    "src": "",
    "lib": "",
    "standalone.js": "",
    "tabWidth": "",
    "printWidth": "",
    "useTabs": "",
    "Have not found plugin path for {plugin_name:?} inside {prettier_node_modules:?}": "",
    "Formatting unsaved file with prettier failed. No prettier parser configured for language {buffer_language:?}": "",
    "Cannot determine prettier parser for unsaved file": "",
    "Formatting file {:?} with prettier, plugins :{:?}, options: {:?}, ignore_path: {:?}": "",
    "prettier params calculation": "",
    "rust": "",
    "prettier does not support Rust": "",
    "Should not format buffer without a language with prettier": "",
    "prettier clear cache": "",
    "fetching metadata for {possible_node_modules_location:?}": "",
    "fetching metadata for package json {possible_package_json:?}": "",
    "reading {possible_package_json:?} file contents": "",
    "parsing {possible_package_json:?} file contents": "",
    "camelCase": "",
    "filepath": "",
    "prettier/format": "",
    "prettier/clear_cache": "",
    "/root": "",
    ".config": "",
    "zed": "",
    "settings.json": "",
    "{ ": "",
    ": ": "",
    " }": "",
    "work": "",
    "project": "",
    "// index.js file contents": "",
    "expect": "",
    "build": "",
    "print.js": "",
    "// print.js file contents": "",
    "{\n                                    ": "",
    ": {\n                                        ": "",
    "\n                                    }\n                                }": "",
    "// Dummy prettier package file": "",
    "/root/.config/zed/settings.json": "",
    "Should find no prettier for path hierarchy without it": "",
    "/root/work/project/src/index.js": "",
    "/root/work/project": "",
    "Should successfully find a prettier for path hierarchy that has node_modules with prettier, but no package.json mentions of it": "",
    "/root/work/project/node_modules/expect/build/print.js": "",
    "Should not format files inside node_modules/": "",
    "web_blog": "",
    "{\n                                ": "",
    ": {\n                                    ": "",
    "\n                                }\n                            }": "",
    "pages": "",
    "[slug].tsx": "",
    "// [slug].tsx file contents": "",
    "{\n                        ": "",
    ": {\n                            ": "",
    "\n                        },\n                        ": "",
    ": false,\n                            ": "",
    ": 80,\n                            ": "",
    ",\n                            ": "",
    ": 4\n                        }\n                    }": "",
    "/root/web_blog/pages/[slug].tsx": "",
    "/root/web_blog": "",
    "Should find a preinstalled prettier in the project root": "",
    "/root/web_blog/node_modules/expect/build/print.js": "",
    "Should not allow formatting node_modules/ contents": "",
    "{\n                            ": "",
    ": {\n                                ": "",
    "\n                            },\n                            ": "",
    ": false,\n                                ": "",
    ": 80,\n                                ": "",
    ",\n                                ": "",
    ": 4\n                            }\n                        }": "",
    "/root/work/web_blog/pages/[slug].tsx": "",
    "Should find no prettier when node_modules don't have it": "",
    "/root/work": "",
    "Should return closest cached value found without path checks": "",
    "/root/work/web_blog/node_modules/expect/build/print.js": "",
    "Should not allow formatting files inside node_modules/": "",
    "Should ignore cache lookup for files inside node_modules/": "",
    "full-stack-foundations": "",
    "exercises": "",
    "03.loading": "",
    "01.problem.loader": "",
    "app": "",
    "routes": "",
    "users+": "",
    "$username_+": "",
    "notes.tsx": "",
    "// notes.tsx file contents": "",
    "test.js": "",
    "// test.js contents": "",
    "{\n                                        ": "",
    ": {\n                                            ": "",
    "\n                                        }\n                                    }": "",
    ": [": "",
    ", ": "",
    "]\n                        }": "",
    "/root/work/full-stack-foundations/exercises/03.loading/01.problem.loader/app/routes/users+/$username_+/notes.tsx": "",
    "/root/work/full-stack-foundations": "",
    "Should ascend to the multi-workspace root and find the prettier there": "",
    "/root/work/full-stack-foundations/node_modules/prettier/index.js": "",
    "Should not allow formatting files inside root node_modules/": "",
    "/root/work/full-stack-foundations/exercises/03.loading/01.problem.loader/node_modules/test.js": "",
    "Should not allow formatting files inside submodule's node_modules/": "",
    "Expected to fail for prettier in package.json but not in node_modules found, but got path {path:?}": "",
    "\\\\": "",
    "/root/work/full-stack-foundations/exercises/03.loading/01.problem.loader": "",
    "Error message should mention which project had prettier defined": "",
    "Error message should mention potential candidates without prettier node_modules contents": "",
    "ignored.js": "",
    "// this file should be ignored": "",
    "\n                    }": "",
    "/root/project/src/index.js": "",
    "/root/project": "",
    "Should find prettierignore in project root": "",
    "monorepo": "",
    "packages": "",
    "web": "",
    "// index.js contents": "",
    "// this should be ignored": "",
    "\n                            }": "",
    "],\n                        ": "",
    "\n                        }\n                    }": "",
    "/root/monorepo/packages/web/src/index.js": "",
    "/root/monorepo/packages/web": "",
    "Should find prettierignore in child package": "",
    "main.js": "",
    "// this should not be ignored": "",
    "/root/monorepo/packages/web/src/main.js": "",
    "Should find child package prettierignore first": "",
    "/root/monorepo/packages/web/src/ignored.js": ""
  },
  "zed/crates/project/src/buffer_store.rs": {
    "recalculate diffs": "",
    "Invalid mode": "",
    "missing variant": "",
    "no worktree found for id {}": "",
    "received chunk for buffer {} without initial state": "",
    "missing transaction": "",
    "no such worktree": "",
    "buffer doesn't have a file": "",
    "{e}": "",
    "buffer was closed": "",
    "buffer has no file": "",
    "failed to relativize buffer path": "",
    "Failed to blame {:?}": "",
    "no permalink available": "",
    "origin": "",
    "remote \"{remote}\" not found": "",
    "failed to read HEAD SHA": "",
    "failed to parse Git remote URL": "",
    "failed to convert path to string": "",
    "failed to parse permalink": "",
    "buffer {} was already registered": "",
    "unknown buffer id {}": "",
    "tried to register shared lsp handle, but buffer was not shared": "",
    "missing original_sender_id on SynchronizeBuffers request": "",
    "buffer store is not a remote": "",
    "invalid file": "",
    "project is not shared": "",
    "peer_id {} closed buffer_id {} which was either not open or already closed": "",
    "missing line ending": "",
    "no selection to get permalink for defined": "",
    "no such buffer": "",
    "local-only method called in a non-local context": "",
    "not a remote buffer store": "",
    ".cargo_vcs_info.json": "",
    "No .cargo_vcs_info.json found in parent directories": "",
    "Cargo.toml": "",
    "Failed to parse package.repository field of manifest": ""
  },
  "zed/crates/project/src/color_extractor.rs": {
    "(#(?:[\\da-fA-F]{3}){1,2})": "",
    "(rgba?|hsla?)\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*(?:,\\s*(1|0?\\.\\d+))?\\s*\\)": "",
    "Failed to create RELAXED_HEX_REGEX": "",
    "^{HEX}$": "",
    "Failed to create STRICT_HEX_REGEX": "",
    "Failed to create RELAXED_RGB_OR_HSL_REGEX": "",
    "^{RGB_OR_HSL}$": "",
    "Failed to create STRICT_RGB_OR_HSL_REGEX": "",
    "rgb": "",
    "rgba": "",
    "hsl": "",
    "hsla": "",
    "%": "",
    "f0f": "",
    "#fof": "",
    "rgb(255, 0, 0, 0.0)": "",
    "hsl(120, 0, 0, 0.0)": "",
    "rgba(255, 0, 0)": "",
    "hsla(120, 0, 0)": "",
    "rgba(255, 0, 0, 0)": "",
    "hsla(120, 0, 0, 0)": "",
    "rgba(255, 0, 0, 1.0)": "",
    "hsla(120, 0, 0, 1.0)": "",
    "#f0f": "",
    "#ff0000": "",
    "rgb(255, 0, 0)": "",
    "rgba(255, 0, 0, 0.4)": "",
    "rgba(255, 0, 0, 1)": "",
    "rgb(20%, 0%, 0%)": "",
    "rgba(20%, 0%, 0%, 1)": "",
    "rgb(0%, 20%, 0%)": "",
    "rgba(0%, 20%, 0%, 1)": "",
    "rgb(0%, 0%, 20%)": "",
    "rgba(0%, 0%, 20%, 1)": "",
    "hsl(0, 100%, 50%)": "",
    "hsl(120, 100%, 50%)": "",
    "hsla(0, 100%, 50%, 0.0)": "",
    "hsla(0, 100%, 50%, 0.4)": "",
    "hsla(0, 100%, 50%, 1)": "",
    "hsla(120, 100%, 50%, 0.0)": "",
    "hsla(120, 100%, 50%, 0.4)": "",
    "hsla(120, 100%, 50%, 1)": "",
    "{} foo": "",
    "foo {}": "",
    "foo {} foo": ""
  },
  "zed/crates/project/src/direnv.rs": {
    "Failed to run direnv. See logs for more info": "",
    "Direnv returned invalid json. See logs for more info": "",
    "direnv": "",
    "export": "",
    "json": "",
    "TERM": "",
    "dumb": "",
    "Loading direnv environment failed ({}), stderr: {}": ""
  },
  "zed/crates/project/src/environment.rs": {
    "PATH": "",
    "using project environment variables from CLI. PATH={:?}": "",
    "using project environment variables shell launched in {:?}. PATH={:?}": "",
    "Failed to load shell environment in {}: not a directory": "",
    "Failed to load shell environment in {}: {}": "",
    "true": "",
    "SHELL": "",
    "Failed to get login environment. SHELL environment variable is not set": "",
    "fish": "",
    "cd '{}'; emit fish_prompt; printf '%s' {MARKER}; /usr/bin/env; exit 0;": "",
    "cd '{}'; printf '%s' {MARKER}; /usr/bin/env; exit 0;": "",
    "tcsh": "",
    "csh": "",
    "Failed to spawn login shell to source login environment variables. See logs for details": "",
    "login shell exited with {}": "",
    "Login shell exited with nonzero exit code. See logs for details": "",
    "failed to parse output of `env` command in login shell. stdout: {:?}, stderr: {:?}": "",
    "Failed to parse stdout of env command. See logs for the output": ""
  },
  "zed/crates/project/src/image_store.rs": {
    "worktree not found": "",
    "failed to load image metadata": "",
    "Failed to load image content": "",
    "svg": "",
    "no such worktree": "",
    "Image format not supported": "",
    "Opening images from remote is not supported": "",
    "Reloading images from remote is not supported": "",
    "/root": "",
    "/root/image_1.png": "",
    "image_1.png": ""
  },
  "zed/crates/project/src/lsp_command.rs": {
    "Invalid file path provided to LSP request: {path:?}": "",
    "Prepare rename": "",
    "Rename not supported": "",
    "invalid position": "",
    "Missing start or end position in remote project PrepareRenameResponse": "",
    "Rename": "",
    "missing transaction": "",
    "Get definition": "",
    "Get declaration": "",
    "Get implementation": "",
    "Get type definition": "",
    "no language server found for buffer": "",
    "missing origin start": "",
    "missing origin end": "",
    "missing target": "",
    "missing target start": "",
    "missing target end": "",
    "Find all references": "",
    "Finding references...": "",
    "Get document highlights": "",
    "Get signature help": "",
    "waiting for version for buffer {}": "",
    "Get hover": "",
    "Get completion": "",
    "no language server with id {server_id}": "",
    "completion out of expected range": "",
    "Get code actions": "",
    "Missing the language server that just returned a response {server_id}": "",
    "invalid start": "",
    "invalid end": "",
    "Formatting on typing": "",
    "lsp to project inlay hint conversion": "",
    "failed to serialize resolve json data": "",
    "incorrect proto inlay hint message: no resolve state in hint {message_hint:?}": "",
    "incorrect proto inlay hint message: non-json resolve state {lsp_resolve_state:?}": "",
    "No lsp resolve data for the hint that can be resolved: {message_hint:?}": "",
    "Unexpected resolve state {invalid} for hint {message_hint:?}": "",
    "missing label": "",
    "invalid uri in hint part {part:?}": "",
    "Inlay hints": "",
    "typescript-language-server": "",
    "lsp to project inlay hints conversion": "",
    "Linked editing range": ""
  },
  "zed/crates/project/src/lsp_store.rs": {
    "attempting to start language server {:?}, path: {root_path:?}, id: {server_id}": "",
    "{err}\n-- stderr--\n{}": "",
    "Failed to start language server {server_name:?}: {err}": "",
    "server stderr: {:?}": "",
    "workspace/didChangeWatchedFiles": "",
    "textDocument/rangeFormatting": "",
    "textDocument/onTypeFormatting": "",
    "textDocument/formatting": "",
    "workspace/didChangeConfiguration": "",
    "textDocument/rename": "",
    "unhandled capability registration: {reg:?}": "",
    "unhandled capability unregistration: {unreg:?}": "",
    "failed to format ranges via language server": "",
    "failed to format via language server": "",
    "failed to format via external command {:?}": "",
    "{} language server does not support range formatting": "",
    "failed to convert abs path to uri": "",
    "{buffer_path}": "",
    "Untitled": "",
    "failed to acquire stdin": "",
    "command failed with exit code {:?}:\nstdout: {}\nstderr: {}": "",
    "To find LSP adapter": "",
    "Language server ID should be available, as it's registered on demand": "",
    "`{}` is not parseable as an URI": "",
    "no snapshots found for buffer {buffer_id} and server {server_id}": "",
    "snapshot not found for buffer {buffer_id} server {server_id} at version {version}": "",
    "resolving a formatting code action": "",
    "project dropped": "",
    "Cannot execute a command {} not listed in the language server capabilities": "",
    "can't convert URI to path": "",
    "project project closed": "",
    "language server not found": "",
    "Processing new watcher paths for language server with id {}": "",
    "Failed to strip prefix for string pattern: {}, with prefix: {}, with error: {}": "",
    "Failed to strip prefix for relative pattern: {}, with prefix: {}, with error: {}": "",
    "base_uri is empty, {}": "",
    "Watcher pattern `{}` has been attached to the worktree at `{}`": "",
    "Watcher pattern `{}` has not been attached to any worktree or absolute path": "",
    "language server {}: unregistered workspace/DidChangeWatchedFiles capability with id {}": "",
    "language server {}: failed to unregister workspace/DidChangeWatchedFiles capability with id {}. not registered.": "",
    "bad refcounting": "",
    "oops!": "",
    "{} via {} failed: {}": "",
    "no app context": "",
    "missing transaction": "",
    "resolving a code action": "",
    "no app present": "",
    "no upstream client and not local": "",
    "inlay hints proto request": "",
    "inlay hints proto resolve response conversion": "",
    "inlay hint resolve LSP request": "",
    "No upstream client or local language server": "",
    "Unexpected response: {unexpected:?}": "",
    "server_id mismatch, querying completion resolve for {server_id} but completion server id is {completion_server_id}": "",
    "server_id mismatch, applying completion resolve for {server_id} but completion server id is {completion_server_id}": "",
    ",\n                completion.label.text(),\n                new_label.text(),\n                completion.label.filter_text(),\n                new_label.filter_text()\n            );\n        }\n\n        Ok(())\n    }\n\n    async fn resolve_completion_remote(\n        project_id: u64,\n        server_id: LanguageServerId,\n        buffer_id: BufferId,\n        completions: Rc<RefCell<Box<[Completion]>>>,\n        completion_index: usize,\n        client: AnyProtoClient,\n    ) -> Result<()> {\n        let lsp_completion = {\n            let completion = &completions.borrow()[completion_index];\n            match &completion.source {\n                CompletionSource::Lsp {\n                    lsp_completion,\n                    resolved,\n                    server_id: completion_server_id,\n                    ..\n                } => {\n                    anyhow::ensure!(\n                        server_id == *completion_server_id,\n                        ": "",
    "\n                    );\n                    if *resolved {\n                        return Ok(());\n                    }\n                    serde_json::to_string(lsp_completion).unwrap().into_bytes()\n                }\n                CompletionSource::Custom => return Ok(()),\n            }\n        };\n        let request = proto::ResolveCompletionDocumentation {\n            project_id,\n            language_server_id: server_id.0 as u64,\n            lsp_completion,\n            buffer_id: buffer_id.into(),\n        };\n\n        let response = client\n            .request(request)\n            .await\n            .context(": "",
    ")?;\n        let resolved_lsp_completion = serde_json::from_slice(&response.lsp_completion)?;\n\n        let documentation = if response.documentation.is_empty() {\n            CompletionDocumentation::Undocumented\n        } else if response.documentation_is_markdown {\n            CompletionDocumentation::MultiLineMarkdown(response.documentation.into())\n        } else if response.documentation.lines().count() <= 1 {\n            CompletionDocumentation::SingleLine(response.documentation.into())\n        } else {\n            CompletionDocumentation::MultiLinePlainText(response.documentation.into())\n        };\n\n        let mut completions = completions.borrow_mut();\n        let completion = &mut completions[completion_index];\n        completion.documentation = Some(documentation);\n        if let CompletionSource::Lsp {\n            lsp_completion,\n            resolved,\n            server_id: completion_server_id,\n            lsp_defaults: _,\n        } = &mut completion.source\n        {\n            if *resolved {\n                return Ok(());\n            }\n            anyhow::ensure!(\n                server_id == *completion_server_id,\n                ": "",
    "\n            );\n            *lsp_completion = Box::new(resolved_lsp_completion);\n            *resolved = true;\n        }\n\n        let old_range = response\n            .old_start\n            .and_then(deserialize_anchor)\n            .zip(response.old_end.and_then(deserialize_anchor));\n        if let Some((old_start, old_end)) = old_range {\n            if !response.new_text.is_empty() {\n                completion.new_text = response.new_text;\n                completion.old_range = old_start..old_end;\n            }\n        }\n\n        Ok(())\n    }\n\n    pub fn apply_additional_edits_for_completion(\n        &self,\n        buffer_handle: Entity<Buffer>,\n        completions: Rc<RefCell<Box<[Completion]>>>,\n        completion_index: usize,\n        push_to_history: bool,\n        cx: &mut Context<Self>,\n    ) -> Task<Result<Option<Transaction>>> {\n        if let Some((client, project_id)) = self.upstream_client() {\n            let buffer = buffer_handle.read(cx);\n            let buffer_id = buffer.remote_id();\n            cx.spawn(move |_, mut cx| async move {\n                let request = {\n                    let completion = completions.borrow()[completion_index].clone();\n                    proto::ApplyCompletionAdditionalEdits {\n                        project_id,\n                        buffer_id: buffer_id.into(),\n                        completion: Some(Self::serialize_completion(&CoreCompletion {\n                            old_range: completion.old_range,\n                            new_text: completion.new_text,\n                            source: completion.source,\n                        })),\n                    }\n                };\n\n                if let Some(transaction) = client.request(request).await?.transaction {\n                    let transaction = language::proto::deserialize_transaction(transaction)?;\n                    buffer_handle\n                        .update(&mut cx, |buffer, _| {\n                            buffer.wait_for_edits(transaction.edit_ids.iter().copied())\n                        })?\n                        .await?;\n                    if push_to_history {\n                        buffer_handle.update(&mut cx, |buffer, _| {\n                            buffer.push_transaction(transaction.clone(), Instant::now());\n                        })?;\n                    }\n                    Ok(Some(transaction))\n                } else {\n                    Ok(None)\n                }\n            })\n        } else {\n            let Some(server) = buffer_handle.update(cx, |buffer, cx| {\n                let completion = &completions.borrow()[completion_index];\n                let server_id = completion.source.server_id()?;\n                Some(\n                    self.language_server_for_local_buffer(buffer, server_id, cx)?\n                        .1\n                        .clone(),\n                )\n            }) else {\n                return Task::ready(Ok(None));\n            };\n            let snapshot = buffer_handle.read(&cx).snapshot();\n\n            cx.spawn(move |this, mut cx| async move {\n                Self::resolve_completion_local(\n                    server.clone(),\n                    &snapshot,\n                    completions.clone(),\n                    completion_index,\n                )\n                .await\n                .context(": "",
    ")?;\n                let completion = completions.borrow()[completion_index].clone();\n                let additional_text_edits = completion\n                    .source\n                    .lsp_completion(true)\n                    .as_ref()\n                    .and_then(|lsp_completion| lsp_completion.additional_text_edits.clone());\n                if let Some(edits) = additional_text_edits {\n                    let edits = this\n                        .update(&mut cx, |this, cx| {\n                            this.as_local_mut().unwrap().edits_from_lsp(\n                                &buffer_handle,\n                                edits,\n                                server.server_id(),\n                                None,\n                                cx,\n                            )\n                        })?\n                        .await?;\n\n                    buffer_handle.update(&mut cx, |buffer, cx| {\n                        buffer.finalize_last_transaction();\n                        buffer.start_transaction();\n\n                        for (range, text) in edits {\n                            let primary = &completion.old_range;\n                            let start_within = primary.start.cmp(&range.start, buffer).is_le()\n                                && primary.end.cmp(&range.start, buffer).is_ge();\n                            let end_within = range.start.cmp(&primary.end, buffer).is_le()\n                                && range.end.cmp(&primary.end, buffer).is_ge();\n\n                            //Skip additional edits which overlap with the primary completion edit\n                            //https://github.com/zed-industries/zed/pull/1871\n                            if !start_within && !end_within {\n                                buffer.edit([(range, text)], None, cx);\n                            }\n                        }\n\n                        let transaction = if buffer.end_transaction(cx).is_some() {\n                            let transaction = buffer.finalize_last_transaction().unwrap().clone();\n                            if !push_to_history {\n                                buffer.forget_transaction(transaction.id);\n                            }\n                            Some(transaction)\n                        } else {\n                            None\n                        };\n                        Ok(transaction)\n                    })?\n                } else {\n                    Ok(None)\n                }\n            })\n        }\n    }\n\n    pub fn inlay_hints(\n        &mut self,\n        buffer_handle: Entity<Buffer>,\n        range: Range<Anchor>,\n        cx: &mut Context<Self>,\n    ) -> Task<anyhow::Result<Vec<InlayHint>>> {\n        let buffer = buffer_handle.read(cx);\n        let range_start = range.start;\n        let range_end = range.end;\n        let buffer_id = buffer.remote_id().into();\n        let lsp_request = InlayHints { range };\n\n        if let Some((client, project_id)) = self.upstream_client() {\n            let request = proto::InlayHints {\n                project_id,\n                buffer_id,\n                start: Some(serialize_anchor(&range_start)),\n                end: Some(serialize_anchor(&range_end)),\n                version: serialize_version(&buffer_handle.read(cx).version()),\n            };\n            cx.spawn(move |project, cx| async move {\n                let response = client\n                    .request(request)\n                    .await\n                    .context(": "",
    ")?;\n                LspCommand::response_from_proto(\n                    lsp_request,\n                    response,\n                    project.upgrade().ok_or_else(|| anyhow!(": "",
    "))?,\n                    buffer_handle.clone(),\n                    cx.clone(),\n                )\n                .await\n                .context(": "",
    ")\n            })\n        } else {\n            let lsp_request_task = self.request_lsp(\n                buffer_handle.clone(),\n                LanguageServerToQuery::FirstCapable,\n                lsp_request,\n                cx,\n            );\n            cx.spawn(move |_, mut cx| async move {\n                buffer_handle\n                    .update(&mut cx, |buffer, _| {\n                        buffer.wait_for_edits(vec![range_start.timestamp, range_end.timestamp])\n                    })?\n                    .await\n                    .context(": "",
    ")?;\n                lsp_request_task.await.context(": "",
    ")\n            })\n        }\n    }\n\n    pub fn signature_help<T: ToPointUtf16>(\n        &mut self,\n        buffer: &Entity<Buffer>,\n        position: T,\n        cx: &mut Context<Self>,\n    ) -> Task<Vec<SignatureHelp>> {\n        let position = position.to_point_utf16(buffer.read(cx));\n\n        if let Some((client, upstream_project_id)) = self.upstream_client() {\n            let request_task = client.request(proto::MultiLspQuery {\n                buffer_id: buffer.read(cx).remote_id().into(),\n                version: serialize_version(&buffer.read(cx).version()),\n                project_id: upstream_project_id,\n                strategy: Some(proto::multi_lsp_query::Strategy::All(\n                    proto::AllLanguageServers {},\n                )),\n                request: Some(proto::multi_lsp_query::Request::GetSignatureHelp(\n                    GetSignatureHelp { position }.to_proto(upstream_project_id, buffer.read(cx)),\n                )),\n            });\n            let buffer = buffer.clone();\n            cx.spawn(|weak_project, cx| async move {\n                let Some(project) = weak_project.upgrade() else {\n                    return Vec::new();\n                };\n                join_all(\n                    request_task\n                        .await\n                        .log_err()\n                        .map(|response| response.responses)\n                        .unwrap_or_default()\n                        .into_iter()\n                        .filter_map(|lsp_response| match lsp_response.response? {\n                            proto::lsp_response::Response::GetSignatureHelpResponse(response) => {\n                                Some(response)\n                            }\n                            unexpected => {\n                                debug_panic!(": "",
    ");\n                                None\n                            }\n                        })\n                        .map(|signature_response| {\n                            let response = GetSignatureHelp { position }.response_from_proto(\n                                signature_response,\n                                project.clone(),\n                                buffer.clone(),\n                                cx.clone(),\n                            );\n                            async move { response.await.log_err().flatten() }\n                        }),\n                )\n                .await\n                .into_iter()\n                .flatten()\n                .collect()\n            })\n        } else {\n            let all_actions_task = self.request_multiple_lsp_locally(\n                buffer,\n                Some(position),\n                GetSignatureHelp { position },\n                cx,\n            );\n            cx.spawn(|_, _| async move {\n                all_actions_task\n                    .await\n                    .into_iter()\n                    .flatten()\n                    .filter(|help| !help.label.is_empty())\n                    .collect::<Vec<_>>()\n            })\n        }\n    }\n\n    pub fn hover(\n        &mut self,\n        buffer: &Entity<Buffer>,\n        position: PointUtf16,\n        cx: &mut Context<Self>,\n    ) -> Task<Vec<Hover>> {\n        if let Some((client, upstream_project_id)) = self.upstream_client() {\n            let request_task = client.request(proto::MultiLspQuery {\n                buffer_id: buffer.read(cx).remote_id().into(),\n                version: serialize_version(&buffer.read(cx).version()),\n                project_id: upstream_project_id,\n                strategy: Some(proto::multi_lsp_query::Strategy::All(\n                    proto::AllLanguageServers {},\n                )),\n                request: Some(proto::multi_lsp_query::Request::GetHover(\n                    GetHover { position }.to_proto(upstream_project_id, buffer.read(cx)),\n                )),\n            });\n            let buffer = buffer.clone();\n            cx.spawn(|weak_project, cx| async move {\n                let Some(project) = weak_project.upgrade() else {\n                    return Vec::new();\n                };\n                join_all(\n                    request_task\n                        .await\n                        .log_err()\n                        .map(|response| response.responses)\n                        .unwrap_or_default()\n                        .into_iter()\n                        .filter_map(|lsp_response| match lsp_response.response? {\n                            proto::lsp_response::Response::GetHoverResponse(response) => {\n                                Some(response)\n                            }\n                            unexpected => {\n                                debug_panic!(": "",
    ");\n                                None\n                            }\n                        })\n                        .map(|hover_response| {\n                            let response = GetHover { position }.response_from_proto(\n                                hover_response,\n                                project.clone(),\n                                buffer.clone(),\n                                cx.clone(),\n                            );\n                            async move {\n                                response\n                                    .await\n                                    .log_err()\n                                    .flatten()\n                                    .and_then(remove_empty_hover_blocks)\n                            }\n                        }),\n                )\n                .await\n                .into_iter()\n                .flatten()\n                .collect()\n            })\n        } else {\n            let all_actions_task = self.request_multiple_lsp_locally(\n                buffer,\n                Some(position),\n                GetHover { position },\n                cx,\n            );\n            cx.spawn(|_, _| async move {\n                all_actions_task\n                    .await\n                    .into_iter()\n                    .filter_map(|hover| remove_empty_hover_blocks(hover?))\n                    .collect::<Vec<Hover>>()\n            })\n        }\n    }\n\n    pub fn symbols(&self, query: &str, cx: &mut Context<Self>) -> Task<Result<Vec<Symbol>>> {\n        let language_registry = self.languages.clone();\n\n        if let Some((upstream_client, project_id)) = self.upstream_client().as_ref() {\n            let request = upstream_client.request(proto::GetProjectSymbols {\n                project_id: *project_id,\n                query: query.to_string(),\n            });\n            cx.foreground_executor().spawn(async move {\n                let response = request.await?;\n                let mut symbols = Vec::new();\n                let core_symbols = response\n                    .symbols\n                    .into_iter()\n                    .filter_map(|symbol| Self::deserialize_symbol(symbol).log_err())\n                    .collect::<Vec<_>>();\n                populate_labels_for_symbols(core_symbols, &language_registry, None, &mut symbols)\n                    .await;\n                Ok(symbols)\n            })\n        } else if let Some(local) = self.as_local() {\n            struct WorkspaceSymbolsResult {\n                server_id: LanguageServerId,\n                lsp_adapter: Arc<CachedLspAdapter>,\n                worktree: WeakEntity<Worktree>,\n                worktree_abs_path: Arc<Path>,\n                lsp_symbols: Vec<(String, SymbolKind, lsp::Location)>,\n            }\n\n            let mut requests = Vec::new();\n            let mut requested_servers = BTreeSet::new();\n            'next_server: for ((worktree_id, _), server_ids) in local.language_server_ids.iter() {\n                let Some(worktree_handle) = self\n                    .worktree_store\n                    .read(cx)\n                    .worktree_for_id(*worktree_id, cx)\n                else {\n                    continue;\n                };\n                let worktree = worktree_handle.read(cx);\n                if !worktree.is_visible() {\n                    continue;\n                }\n\n                let mut servers_to_query = server_ids\n                    .difference(&requested_servers)\n                    .cloned()\n                    .collect::<BTreeSet<_>>();\n                for server_id in &servers_to_query {\n                    let (lsp_adapter, server) = match local.language_servers.get(server_id) {\n                        Some(LanguageServerState::Running {\n                            adapter, server, ..\n                        }) => (adapter.clone(), server),\n\n                        _ => continue 'next_server,\n                    };\n                    let worktree_abs_path = worktree.abs_path().clone();\n                    let worktree_handle = worktree_handle.clone();\n                    let server_id = server.server_id();\n                    requests.push(\n                            server\n                                .request::<lsp::request::WorkspaceSymbolRequest>(\n                                    lsp::WorkspaceSymbolParams {\n                                        query: query.to_string(),\n                                        ..Default::default()\n                                    },\n                                )\n                                .log_err()\n                                .map(move |response| {\n                                    let lsp_symbols = response.flatten().map(|symbol_response| match symbol_response {\n                                        lsp::WorkspaceSymbolResponse::Flat(flat_responses) => {\n                                            flat_responses.into_iter().map(|lsp_symbol| {\n                                            (lsp_symbol.name, lsp_symbol.kind, lsp_symbol.location)\n                                            }).collect::<Vec<_>>()\n                                        }\n                                        lsp::WorkspaceSymbolResponse::Nested(nested_responses) => {\n                                            nested_responses.into_iter().filter_map(|lsp_symbol| {\n                                                let location = match lsp_symbol.location {\n                                                    OneOf::Left(location) => location,\n                                                    OneOf::Right(_) => {\n                                                        log::error!(": "",
    ");\n                                                        return None\n                                                    }\n                                                };\n                                                Some((lsp_symbol.name, lsp_symbol.kind, location))\n                                            }).collect::<Vec<_>>()\n                                        }\n                                    }).unwrap_or_default();\n\n                                    WorkspaceSymbolsResult {\n                                        server_id,\n                                        lsp_adapter,\n                                        worktree: worktree_handle.downgrade(),\n                                        worktree_abs_path,\n                                        lsp_symbols,\n                                    }\n                                }),\n                        );\n                }\n                requested_servers.append(&mut servers_to_query);\n            }\n\n            cx.spawn(move |this, mut cx| async move {\n                let responses = futures::future::join_all(requests).await;\n                let this = match this.upgrade() {\n                    Some(this) => this,\n                    None => return Ok(Vec::new()),\n                };\n\n                let mut symbols = Vec::new();\n                for result in responses {\n                    let core_symbols = this.update(&mut cx, |this, cx| {\n                        result\n                            .lsp_symbols\n                            .into_iter()\n                            .filter_map(|(symbol_name, symbol_kind, symbol_location)| {\n                                let abs_path = symbol_location.uri.to_file_path().ok()?;\n                                let source_worktree = result.worktree.upgrade()?;\n                                let source_worktree_id = source_worktree.read(cx).id();\n\n                                let path;\n                                let worktree;\n                                if let Some((tree, rel_path)) =\n                                    this.worktree_store.read(cx).find_worktree(&abs_path, cx)\n                                {\n                                    worktree = tree;\n                                    path = rel_path;\n                                } else {\n                                    worktree = source_worktree.clone();\n                                    path = relativize_path(&result.worktree_abs_path, &abs_path);\n                                }\n\n                                let worktree_id = worktree.read(cx).id();\n                                let project_path = ProjectPath {\n                                    worktree_id,\n                                    path: path.into(),\n                                };\n                                let signature = this.symbol_signature(&project_path);\n                                Some(CoreSymbol {\n                                    source_language_server_id: result.server_id,\n                                    language_server_name: result.lsp_adapter.name.clone(),\n                                    source_worktree_id,\n                                    path: project_path,\n                                    kind: symbol_kind,\n                                    name: symbol_name,\n                                    range: range_from_lsp(symbol_location.range),\n                                    signature,\n                                })\n                            })\n                            .collect()\n                    })?;\n\n                    populate_labels_for_symbols(\n                        core_symbols,\n                        &language_registry,\n                        Some(result.lsp_adapter),\n                        &mut symbols,\n                    )\n                    .await;\n                }\n\n                Ok(symbols)\n            })\n        } else {\n            Task::ready(Err(anyhow!(": "",
    ")))\n        }\n    }\n\n    pub fn diagnostic_summary(&self, include_ignored: bool, cx: &App) -> DiagnosticSummary {\n        let mut summary = DiagnosticSummary::default();\n        for (_, _, path_summary) in self.diagnostic_summaries(include_ignored, cx) {\n            summary.error_count += path_summary.error_count;\n            summary.warning_count += path_summary.warning_count;\n        }\n        summary\n    }\n\n    pub fn diagnostic_summaries<'a>(\n        &'a self,\n        include_ignored: bool,\n        cx: &'a App,\n    ) -> impl Iterator<Item = (ProjectPath, LanguageServerId, DiagnosticSummary)> + 'a {\n        self.worktree_store\n            .read(cx)\n            .visible_worktrees(cx)\n            .filter_map(|worktree| {\n                let worktree = worktree.read(cx);\n                Some((worktree, self.diagnostic_summaries.get(&worktree.id())?))\n            })\n            .flat_map(move |(worktree, summaries)| {\n                let worktree_id = worktree.id();\n                summaries\n                    .iter()\n                    .filter(move |(path, _)| {\n                        include_ignored\n                            || worktree\n                                .entry_for_path(path.as_ref())\n                                .map_or(false, |entry| !entry.is_ignored)\n                    })\n                    .flat_map(move |(path, summaries)| {\n                        summaries.iter().map(move |(server_id, summary)| {\n                            (\n                                ProjectPath {\n                                    worktree_id,\n                                    path: path.clone(),\n                                },\n                                *server_id,\n                                *summary,\n                            )\n                        })\n                    })\n            })\n    }\n\n    pub fn on_buffer_edited(\n        &mut self,\n        buffer: Entity<Buffer>,\n        cx: &mut Context<Self>,\n    ) -> Option<()> {\n        let language_servers: Vec<_> = buffer.update(cx, |buffer, cx| {\n            Some(\n                self.as_local()?\n                    .language_servers_for_buffer(buffer, cx)\n                    .map(|i| i.1.clone())\n                    .collect(),\n            )\n        })?;\n\n        let buffer = buffer.read(cx);\n        let file = File::from_dyn(buffer.file())?;\n        let abs_path = file.as_local()?.abs_path(cx);\n        let uri = lsp::Url::from_file_path(abs_path).unwrap();\n        let next_snapshot = buffer.text_snapshot();\n        for language_server in language_servers {\n            let language_server = language_server.clone();\n\n            let buffer_snapshots = self\n                .as_local_mut()\n                .unwrap()\n                .buffer_snapshots\n                .get_mut(&buffer.remote_id())\n                .and_then(|m| m.get_mut(&language_server.server_id()))?;\n            let previous_snapshot = buffer_snapshots.last()?;\n\n            let build_incremental_change = || {\n                buffer\n                    .edits_since::<(PointUtf16, usize)>(previous_snapshot.snapshot.version())\n                    .map(|edit| {\n                        let edit_start = edit.new.start.0;\n                        let edit_end = edit_start + (edit.old.end.0 - edit.old.start.0);\n                        let new_text = next_snapshot\n                            .text_for_range(edit.new.start.1..edit.new.end.1)\n                            .collect();\n                        lsp::TextDocumentContentChangeEvent {\n                            range: Some(lsp::Range::new(\n                                point_to_lsp(edit_start),\n                                point_to_lsp(edit_end),\n                            )),\n                            range_length: None,\n                            text: new_text,\n                        }\n                    })\n                    .collect()\n            };\n\n            let document_sync_kind = language_server\n                .capabilities()\n                .text_document_sync\n                .as_ref()\n                .and_then(|sync| match sync {\n                    lsp::TextDocumentSyncCapability::Kind(kind) => Some(*kind),\n                    lsp::TextDocumentSyncCapability::Options(options) => options.change,\n                });\n\n            let content_changes: Vec<_> = match document_sync_kind {\n                Some(lsp::TextDocumentSyncKind::FULL) => {\n                    vec![lsp::TextDocumentContentChangeEvent {\n                        range: None,\n                        range_length: None,\n                        text: next_snapshot.text(),\n                    }]\n                }\n                Some(lsp::TextDocumentSyncKind::INCREMENTAL) => build_incremental_change(),\n                _ => {\n                    #[cfg(any(test, feature = ": "",
    "))]\n                    {\n                        build_incremental_change()\n                    }\n\n                    #[cfg(not(any(test, feature = ": "",
    ")))]\n                    {\n                        continue;\n                    }\n                }\n            };\n\n            let next_version = previous_snapshot.version + 1;\n            buffer_snapshots.push(LspBufferSnapshot {\n                version: next_version,\n                snapshot: next_snapshot.clone(),\n            });\n\n            language_server\n                .notify::<lsp::notification::DidChangeTextDocument>(\n                    &lsp::DidChangeTextDocumentParams {\n                        text_document: lsp::VersionedTextDocumentIdentifier::new(\n                            uri.clone(),\n                            next_version,\n                        ),\n                        content_changes,\n                    },\n                )\n                .log_err();\n        }\n\n        None\n    }\n\n    pub fn on_buffer_saved(\n        &mut self,\n        buffer: Entity<Buffer>,\n        cx: &mut Context<Self>,\n    ) -> Option<()> {\n        let file = File::from_dyn(buffer.read(cx).file())?;\n        let worktree_id = file.worktree_id(cx);\n        let abs_path = file.as_local()?.abs_path(cx);\n        let text_document = lsp::TextDocumentIdentifier {\n            uri: lsp::Url::from_file_path(abs_path).log_err()?,\n        };\n        let local = self.as_local()?;\n\n        for server in local.language_servers_for_worktree(worktree_id) {\n            if let Some(include_text) = include_text(server.as_ref()) {\n                let text = if include_text {\n                    Some(buffer.read(cx).text())\n                } else {\n                    None\n                };\n                server\n                    .notify::<lsp::notification::DidSaveTextDocument>(\n                        &lsp::DidSaveTextDocumentParams {\n                            text_document: text_document.clone(),\n                            text,\n                        },\n                    )\n                    .log_err();\n            }\n        }\n\n        let language_servers = buffer.update(cx, |buffer, cx| {\n            local.language_server_ids_for_buffer(buffer, cx)\n        });\n        for language_server_id in language_servers {\n            self.simulate_disk_based_diagnostics_events_if_needed(language_server_id, cx);\n        }\n\n        None\n    }\n\n    pub(crate) async fn refresh_workspace_configurations(\n        this: &WeakEntity<Self>,\n        fs: Arc<dyn Fs>,\n        mut cx: AsyncApp,\n    ) {\n        maybe!(async move {\n            let servers = this\n                .update(&mut cx, |this, cx| {\n                    let Some(local) = this.as_local() else {\n                        return Vec::default();\n                    };\n                    local\n                        .language_server_ids\n                        .iter()\n                        .flat_map(|((worktree_id, _), server_ids)| {\n                            let worktree = this\n                                .worktree_store\n                                .read(cx)\n                                .worktree_for_id(*worktree_id, cx);\n                            let delegate = worktree.map(|worktree| {\n                                LocalLspAdapterDelegate::new(\n                                    local.languages.clone(),\n                                    &local.environment,\n                                    cx.weak_entity(),\n                                    &worktree,\n                                    local.http_client.clone(),\n                                    local.fs.clone(),\n                                    cx,\n                                )\n                            });\n\n                            server_ids.iter().filter_map(move |server_id| {\n                                let states = local.language_servers.get(server_id)?;\n\n                                match states {\n                                    LanguageServerState::Starting { .. } => None,\n                                    LanguageServerState::Running {\n                                        adapter, server, ..\n                                    } => Some((\n                                        adapter.adapter.clone(),\n                                        server.clone(),\n                                        delegate.clone()? as Arc<dyn LspAdapterDelegate>,\n                                    )),\n                                }\n                            })\n                        })\n                        .collect::<Vec<_>>()\n                })\n                .ok()?;\n\n            let toolchain_store = this\n                .update(&mut cx, |this, cx| this.toolchain_store(cx))\n                .ok()?;\n            for (adapter, server, delegate) in servers {\n                let settings = adapter\n                    .workspace_configuration(\n                        fs.as_ref(),\n                        &delegate,\n                        toolchain_store.clone(),\n                        &mut cx,\n                    )\n                    .await\n                    .ok()?;\n\n                server\n                    .notify::<lsp::notification::DidChangeConfiguration>(\n                        &lsp::DidChangeConfigurationParams { settings },\n                    )\n                    .ok();\n            }\n            Some(())\n        })\n        .await;\n    }\n\n    fn toolchain_store(&self, cx: &App) -> Arc<dyn LanguageToolchainStore> {\n        if let Some(toolchain_store) = self.toolchain_store.as_ref() {\n            toolchain_store.read(cx).as_language_toolchain_store()\n        } else {\n            Arc::new(EmptyToolchainStore)\n        }\n    }\n    fn maintain_workspace_config(\n        fs: Arc<dyn Fs>,\n        external_refresh_requests: watch::Receiver<()>,\n        cx: &mut Context<Self>,\n    ) -> Task<Result<()>> {\n        let (mut settings_changed_tx, mut settings_changed_rx) = watch::channel();\n        let _ = postage::stream::Stream::try_recv(&mut settings_changed_rx);\n\n        let settings_observation = cx.observe_global::<SettingsStore>(move |_, _| {\n            *settings_changed_tx.borrow_mut() = ();\n        });\n\n        let mut joint_future =\n            futures::stream::select(settings_changed_rx, external_refresh_requests);\n        cx.spawn(move |this, cx| async move {\n            while let Some(()) = joint_future.next().await {\n                Self::refresh_workspace_configurations(&this, fs.clone(), cx.clone()).await;\n            }\n\n            drop(settings_observation);\n            anyhow::Ok(())\n        })\n    }\n\n    pub fn language_servers_for_local_buffer<'a>(\n        &'a self,\n        buffer: &Buffer,\n        cx: &mut App,\n    ) -> impl Iterator<Item = (&'a Arc<CachedLspAdapter>, &'a Arc<LanguageServer>)> {\n        let local = self.as_local();\n        let language_server_ids = local\n            .map(|local| local.language_server_ids_for_buffer(buffer, cx))\n            .unwrap_or_default();\n\n        language_server_ids\n            .into_iter()\n            .filter_map(\n                move |server_id| match local?.language_servers.get(&server_id)? {\n                    LanguageServerState::Running {\n                        adapter, server, ..\n                    } => Some((adapter, server)),\n                    _ => None,\n                },\n            )\n    }\n\n    pub fn language_server_for_local_buffer<'a>(\n        &'a self,\n        buffer: &'a Buffer,\n        server_id: LanguageServerId,\n        cx: &'a mut App,\n    ) -> Option<(&'a Arc<CachedLspAdapter>, &'a Arc<LanguageServer>)> {\n        self.as_local()?\n            .language_servers_for_buffer(buffer, cx)\n            .find(|(_, s)| s.server_id() == server_id)\n    }\n\n    fn remove_worktree(&mut self, id_to_remove: WorktreeId, cx: &mut Context<Self>) {\n        self.diagnostic_summaries.remove(&id_to_remove);\n        if let Some(local) = self.as_local_mut() {\n            let to_remove = local.remove_worktree(id_to_remove, cx);\n            for server in to_remove {\n                self.language_server_statuses.remove(&server);\n            }\n        }\n    }\n\n    pub fn shared(\n        &mut self,\n        project_id: u64,\n        downstream_client: AnyProtoClient,\n        _: &mut Context<Self>,\n    ) {\n        self.downstream_client = Some((downstream_client.clone(), project_id));\n\n        for (server_id, status) in &self.language_server_statuses {\n            downstream_client\n                .send(proto::StartLanguageServer {\n                    project_id,\n                    server: Some(proto::LanguageServer {\n                        id: server_id.0 as u64,\n                        name: status.name.clone(),\n                        worktree_id: None,\n                    }),\n                })\n                .log_err();\n        }\n    }\n\n    pub fn disconnected_from_host(&mut self) {\n        self.downstream_client.take();\n    }\n\n    pub fn disconnected_from_ssh_remote(&mut self) {\n        if let LspStoreMode::Remote(RemoteLspStore {\n            upstream_client, ..\n        }) = &mut self.mode\n        {\n            upstream_client.take();\n        }\n    }\n\n    pub(crate) fn set_language_server_statuses_from_proto(\n        &mut self,\n        language_servers: Vec<proto::LanguageServer>,\n    ) {\n        self.language_server_statuses = language_servers\n            .into_iter()\n            .map(|server| {\n                (\n                    LanguageServerId(server.id as usize),\n                    LanguageServerStatus {\n                        name: server.name,\n                        pending_work: Default::default(),\n                        has_pending_diagnostic_updates: false,\n                        progress_tokens: Default::default(),\n                    },\n                )\n            })\n            .collect();\n    }\n\n    fn register_local_language_server(\n        &mut self,\n        worktree: Entity<Worktree>,\n        language_server_name: LanguageServerName,\n        language_server_id: LanguageServerId,\n        cx: &mut App,\n    ) {\n        let Some(local) = self.as_local_mut() else {\n            return;\n        };\n        let worktree_id = worktree.read(cx).id();\n        let path = ProjectPath {\n            worktree_id,\n            path: Arc::from(": "",
    ".as_ref()),\n        };\n        let delegate = LocalLspAdapterDelegate::from_local_lsp(local, &worktree, cx);\n        local.lsp_tree.update(cx, |this, cx| {\n            for node in this.get(\n                path,\n                AdapterQuery::Adapter(&language_server_name),\n                delegate,\n                cx,\n            ) {\n                node.server_id_or_init(|disposition| {\n                    assert_eq!(disposition.server_name, &language_server_name);\n\n                    language_server_id\n                });\n            }\n        });\n        local\n            .language_server_ids\n            .entry((worktree_id, language_server_name))\n            .or_default()\n            .insert(language_server_id);\n    }\n\n    pub fn update_diagnostic_entries(\n        &mut self,\n        server_id: LanguageServerId,\n        abs_path: PathBuf,\n        version: Option<i32>,\n        diagnostics: Vec<DiagnosticEntry<Unclipped<PointUtf16>>>,\n        cx: &mut Context<Self>,\n    ) -> Result<(), anyhow::Error> {\n        let Some((worktree, relative_path)) =\n            self.worktree_store.read(cx).find_worktree(&abs_path, cx)\n        else {\n            log::warn!(": "",
    ");\n            return Ok(());\n        };\n\n        let project_path = ProjectPath {\n            worktree_id: worktree.read(cx).id(),\n            path: relative_path.into(),\n        };\n\n        if let Some(buffer) = self.buffer_store.read(cx).get_by_path(&project_path, cx) {\n            self.as_local_mut().unwrap().update_buffer_diagnostics(\n                &buffer,\n                server_id,\n                version,\n                diagnostics.clone(),\n                cx,\n            )?;\n        }\n\n        let updated = worktree.update(cx, |worktree, cx| {\n            self.update_worktree_diagnostics(\n                worktree.id(),\n                server_id,\n                project_path.path.clone(),\n                diagnostics,\n                cx,\n            )\n        })?;\n        if updated {\n            cx.emit(LspStoreEvent::DiagnosticsUpdated {\n                language_server_id: server_id,\n                path: project_path,\n            })\n        }\n        Ok(())\n    }\n\n    fn update_worktree_diagnostics(\n        &mut self,\n        worktree_id: WorktreeId,\n        server_id: LanguageServerId,\n        worktree_path: Arc<Path>,\n        diagnostics: Vec<DiagnosticEntry<Unclipped<PointUtf16>>>,\n        _: &mut Context<Worktree>,\n    ) -> Result<bool> {\n        let local = match &mut self.mode {\n            LspStoreMode::Local(local_lsp_store) => local_lsp_store,\n            _ => anyhow::bail!(": "",
    "),\n        };\n\n        let summaries_for_tree = self.diagnostic_summaries.entry(worktree_id).or_default();\n        let diagnostics_for_tree = local.diagnostics.entry(worktree_id).or_default();\n        let summaries_by_server_id = summaries_for_tree.entry(worktree_path.clone()).or_default();\n\n        let old_summary = summaries_by_server_id\n            .remove(&server_id)\n            .unwrap_or_default();\n\n        let new_summary = DiagnosticSummary::new(&diagnostics);\n        if new_summary.is_empty() {\n            if let Some(diagnostics_by_server_id) = diagnostics_for_tree.get_mut(&worktree_path) {\n                if let Ok(ix) = diagnostics_by_server_id.binary_search_by_key(&server_id, |e| e.0) {\n                    diagnostics_by_server_id.remove(ix);\n                }\n                if diagnostics_by_server_id.is_empty() {\n                    diagnostics_for_tree.remove(&worktree_path);\n                }\n            }\n        } else {\n            summaries_by_server_id.insert(server_id, new_summary);\n            let diagnostics_by_server_id = diagnostics_for_tree\n                .entry(worktree_path.clone())\n                .or_default();\n            match diagnostics_by_server_id.binary_search_by_key(&server_id, |e| e.0) {\n                Ok(ix) => {\n                    diagnostics_by_server_id[ix] = (server_id, diagnostics);\n                }\n                Err(ix) => {\n                    diagnostics_by_server_id.insert(ix, (server_id, diagnostics));\n                }\n            }\n        }\n\n        if !old_summary.is_empty() || !new_summary.is_empty() {\n            if let Some((downstream_client, project_id)) = &self.downstream_client {\n                downstream_client\n                    .send(proto::UpdateDiagnosticSummary {\n                        project_id: *project_id,\n                        worktree_id: worktree_id.to_proto(),\n                        summary: Some(proto::DiagnosticSummary {\n                            path: worktree_path.to_proto(),\n                            language_server_id: server_id.0 as u64,\n                            error_count: new_summary.error_count as u32,\n                            warning_count: new_summary.warning_count as u32,\n                        }),\n                    })\n                    .log_err();\n            }\n        }\n\n        Ok(!old_summary.is_empty() || !new_summary.is_empty())\n    }\n\n    pub fn open_buffer_for_symbol(\n        &mut self,\n        symbol: &Symbol,\n        cx: &mut Context<Self>,\n    ) -> Task<Result<Entity<Buffer>>> {\n        if let Some((client, project_id)) = self.upstream_client() {\n            let request = client.request(proto::OpenBufferForSymbol {\n                project_id,\n                symbol: Some(Self::serialize_symbol(symbol)),\n            });\n            cx.spawn(move |this, mut cx| async move {\n                let response = request.await?;\n                let buffer_id = BufferId::new(response.buffer_id)?;\n                this.update(&mut cx, |this, cx| {\n                    this.wait_for_remote_buffer(buffer_id, cx)\n                })?\n                .await\n            })\n        } else if let Some(local) = self.as_local() {\n            let Some(language_server_id) = local\n                .language_server_ids\n                .get(&(\n                    symbol.source_worktree_id,\n                    symbol.language_server_name.clone(),\n                ))\n                .and_then(|ids| {\n                    ids.contains(&symbol.source_language_server_id)\n                        .then_some(symbol.source_language_server_id)\n                })\n            else {\n                return Task::ready(Err(anyhow!(\n                    ": "",
    "\n                )));\n            };\n\n            let worktree_abs_path = if let Some(worktree_abs_path) = self\n                .worktree_store\n                .read(cx)\n                .worktree_for_id(symbol.path.worktree_id, cx)\n                .map(|worktree| worktree.read(cx).abs_path())\n            {\n                worktree_abs_path\n            } else {\n                return Task::ready(Err(anyhow!(": "",
    ")));\n            };\n\n            let symbol_abs_path = resolve_path(&worktree_abs_path, &symbol.path.path);\n            let symbol_uri = if let Ok(uri) = lsp::Url::from_file_path(symbol_abs_path) {\n                uri\n            } else {\n                return Task::ready(Err(anyhow!(": "",
    ")));\n            };\n\n            self.open_local_buffer_via_lsp(\n                symbol_uri,\n                language_server_id,\n                symbol.language_server_name.clone(),\n                cx,\n            )\n        } else {\n            Task::ready(Err(anyhow!(": "",
    ")))\n        }\n    }\n\n    pub fn open_local_buffer_via_lsp(\n        &mut self,\n        mut abs_path: lsp::Url,\n        language_server_id: LanguageServerId,\n        language_server_name: LanguageServerName,\n        cx: &mut Context<Self>,\n    ) -> Task<Result<Entity<Buffer>>> {\n        cx.spawn(move |lsp_store, mut cx| async move {\n            // Escape percent-encoded string.\n            let current_scheme = abs_path.scheme().to_owned();\n            let _ = abs_path.set_scheme(": "",
    ");\n\n            let abs_path = abs_path\n                .to_file_path()\n                .map_err(|_| anyhow!(": "",
    "))?;\n            let p = abs_path.clone();\n            let yarn_worktree = lsp_store\n                .update(&mut cx, move |lsp_store, cx| match lsp_store.as_local() {\n                    Some(local_lsp_store) => local_lsp_store.yarn.update(cx, |_, cx| {\n                        cx.spawn(|this, mut cx| async move {\n                            let t = this\n                                .update(&mut cx, |this, cx| {\n                                    this.process_path(&p, &current_scheme, cx)\n                                })\n                                .ok()?;\n                            t.await\n                        })\n                    }),\n                    None => Task::ready(None),\n                })?\n                .await;\n            let (worktree_root_target, known_relative_path) =\n                if let Some((zip_root, relative_path)) = yarn_worktree {\n                    (zip_root, Some(relative_path))\n                } else {\n                    (Arc::<Path>::from(abs_path.as_path()), None)\n                };\n            let (worktree, relative_path) = if let Some(result) =\n                lsp_store.update(&mut cx, |lsp_store, cx| {\n                    lsp_store.worktree_store.update(cx, |worktree_store, cx| {\n                        worktree_store.find_worktree(&worktree_root_target, cx)\n                    })\n                })? {\n                let relative_path =\n                    known_relative_path.unwrap_or_else(|| Arc::<Path>::from(result.1));\n                (result.0, relative_path)\n            } else {\n                let worktree = lsp_store\n                    .update(&mut cx, |lsp_store, cx| {\n                        lsp_store.worktree_store.update(cx, |worktree_store, cx| {\n                            worktree_store.create_worktree(&worktree_root_target, false, cx)\n                        })\n                    })?\n                    .await?;\n                if worktree.update(&mut cx, |worktree, _| worktree.is_local())? {\n                    lsp_store\n                        .update(&mut cx, |lsp_store, cx| {\n                            lsp_store.register_local_language_server(\n                                worktree.clone(),\n                                language_server_name,\n                                language_server_id,\n                                cx,\n                            )\n                        })\n                        .ok();\n                }\n                let worktree_root = worktree.update(&mut cx, |worktree, _| worktree.abs_path())?;\n                let relative_path = if let Some(known_path) = known_relative_path {\n                    known_path\n                } else {\n                    abs_path.strip_prefix(worktree_root)?.into()\n                };\n                (worktree, relative_path)\n            };\n            let project_path = ProjectPath {\n                worktree_id: worktree.update(&mut cx, |worktree, _| worktree.id())?,\n                path: relative_path,\n            };\n            lsp_store\n                .update(&mut cx, |lsp_store, cx| {\n                    lsp_store.buffer_store().update(cx, |buffer_store, cx| {\n                        buffer_store.open_buffer(project_path, cx)\n                    })\n                })?\n                .await\n        })\n    }\n\n    fn request_multiple_lsp_locally<P, R>(\n        &mut self,\n        buffer: &Entity<Buffer>,\n        position: Option<P>,\n        request: R,\n        cx: &mut Context<'_, Self>,\n    ) -> Task<Vec<R::Response>>\n    where\n        P: ToOffset,\n        R: LspCommand + Clone,\n        <R::LspRequest as lsp::request::Request>::Result: Send,\n        <R::LspRequest as lsp::request::Request>::Params: Send,\n    {\n        let Some(local) = self.as_local() else {\n            return Task::ready(Vec::new());\n        };\n\n        let snapshot = buffer.read(cx).snapshot();\n        let scope = position.and_then(|position| snapshot.language_scope_at(position));\n\n        let server_ids = buffer.update(cx, |buffer, cx| {\n            local\n                .language_servers_for_buffer(buffer, cx)\n                .filter(|(adapter, _)| {\n                    scope\n                        .as_ref()\n                        .map(|scope| scope.language_allowed(&adapter.name))\n                        .unwrap_or(true)\n                })\n                .map(|(_, server)| server.server_id())\n                .collect::<Vec<_>>()\n        });\n\n        let mut response_results = server_ids\n            .into_iter()\n            .map(|server_id| {\n                self.request_lsp(\n                    buffer.clone(),\n                    LanguageServerToQuery::Other(server_id),\n                    request.clone(),\n                    cx,\n                )\n            })\n            .collect::<FuturesUnordered<_>>();\n\n        cx.spawn(|_, _| async move {\n            let mut responses = Vec::with_capacity(response_results.len());\n            while let Some(response_result) = response_results.next().await {\n                if let Some(response) = response_result.log_err() {\n                    responses.push(response);\n                }\n            }\n            responses\n        })\n    }\n\n    async fn handle_lsp_command<T: LspCommand>(\n        this: Entity<Self>,\n        envelope: TypedEnvelope<T::ProtoRequest>,\n        mut cx: AsyncApp,\n    ) -> Result<<T::ProtoRequest as proto::RequestMessage>::Response>\n    where\n        <T::LspRequest as lsp::request::Request>::Params: Send,\n        <T::LspRequest as lsp::request::Request>::Result: Send,\n    {\n        let sender_id = envelope.original_sender_id().unwrap_or_default();\n        let buffer_id = T::buffer_id_from_proto(&envelope.payload)?;\n        let buffer_handle = this.update(&mut cx, |this, cx| {\n            this.buffer_store.read(cx).get_existing(buffer_id)\n        })??;\n        let request = T::from_proto(\n            envelope.payload,\n            this.clone(),\n            buffer_handle.clone(),\n            cx.clone(),\n        )\n        .await?;\n        let response = this\n            .update(&mut cx, |this, cx| {\n                this.request_lsp(\n                    buffer_handle.clone(),\n                    LanguageServerToQuery::FirstCapable,\n                    request,\n                    cx,\n                )\n            })?\n            .await?;\n        this.update(&mut cx, |this, cx| {\n            Ok(T::response_to_proto(\n                response,\n                this,\n                sender_id,\n                &buffer_handle.read(cx).version(),\n                cx,\n            ))\n        })?\n    }\n\n    async fn handle_multi_lsp_query(\n        this: Entity<Self>,\n        envelope: TypedEnvelope<proto::MultiLspQuery>,\n        mut cx: AsyncApp,\n    ) -> Result<proto::MultiLspQueryResponse> {\n        let response_from_ssh = this.update(&mut cx, |this, _| {\n            let (upstream_client, project_id) = this.upstream_client()?;\n            let mut payload = envelope.payload.clone();\n            payload.project_id = project_id;\n\n            Some(upstream_client.request(payload))\n        })?;\n        if let Some(response_from_ssh) = response_from_ssh {\n            return response_from_ssh.await;\n        }\n\n        let sender_id = envelope.original_sender_id().unwrap_or_default();\n        let buffer_id = BufferId::new(envelope.payload.buffer_id)?;\n        let version = deserialize_version(&envelope.payload.version);\n        let buffer = this.update(&mut cx, |this, cx| {\n            this.buffer_store.read(cx).get_existing(buffer_id)\n        })??;\n        buffer\n            .update(&mut cx, |buffer, _| {\n                buffer.wait_for_version(version.clone())\n            })?\n            .await?;\n        let buffer_version = buffer.update(&mut cx, |buffer, _| buffer.version())?;\n        match envelope\n            .payload\n            .strategy\n            .context(": "",
    ")?\n        {\n            proto::multi_lsp_query::Strategy::All(_) => {\n                // currently, there's only one multiple language servers query strategy,\n                // so just ensure it's specified correctly\n            }\n        }\n        match envelope.payload.request {\n            Some(proto::multi_lsp_query::Request::GetHover(get_hover)) => {\n                let get_hover =\n                    GetHover::from_proto(get_hover, this.clone(), buffer.clone(), cx.clone())\n                        .await?;\n                let all_hovers = this\n                    .update(&mut cx, |this, cx| {\n                        this.request_multiple_lsp_locally(\n                            &buffer,\n                            Some(get_hover.position),\n                            get_hover,\n                            cx,\n                        )\n                    })?\n                    .await\n                    .into_iter()\n                    .filter_map(|hover| remove_empty_hover_blocks(hover?));\n                this.update(&mut cx, |project, cx| proto::MultiLspQueryResponse {\n                    responses: all_hovers\n                        .map(|hover| proto::LspResponse {\n                            response: Some(proto::lsp_response::Response::GetHoverResponse(\n                                GetHover::response_to_proto(\n                                    Some(hover),\n                                    project,\n                                    sender_id,\n                                    &buffer_version,\n                                    cx,\n                                ),\n                            )),\n                        })\n                        .collect(),\n                })\n            }\n            Some(proto::multi_lsp_query::Request::GetCodeActions(get_code_actions)) => {\n                let get_code_actions = GetCodeActions::from_proto(\n                    get_code_actions,\n                    this.clone(),\n                    buffer.clone(),\n                    cx.clone(),\n                )\n                .await?;\n\n                let all_actions = this\n                    .update(&mut cx, |project, cx| {\n                        project.request_multiple_lsp_locally(\n                            &buffer,\n                            Some(get_code_actions.range.start),\n                            get_code_actions,\n                            cx,\n                        )\n                    })?\n                    .await\n                    .into_iter();\n\n                this.update(&mut cx, |project, cx| proto::MultiLspQueryResponse {\n                    responses: all_actions\n                        .map(|code_actions| proto::LspResponse {\n                            response: Some(proto::lsp_response::Response::GetCodeActionsResponse(\n                                GetCodeActions::response_to_proto(\n                                    code_actions,\n                                    project,\n                                    sender_id,\n                                    &buffer_version,\n                                    cx,\n                                ),\n                            )),\n                        })\n                        .collect(),\n                })\n            }\n            Some(proto::multi_lsp_query::Request::GetSignatureHelp(get_signature_help)) => {\n                let get_signature_help = GetSignatureHelp::from_proto(\n                    get_signature_help,\n                    this.clone(),\n                    buffer.clone(),\n                    cx.clone(),\n                )\n                .await?;\n\n                let all_signatures = this\n                    .update(&mut cx, |project, cx| {\n                        project.request_multiple_lsp_locally(\n                            &buffer,\n                            Some(get_signature_help.position),\n                            get_signature_help,\n                            cx,\n                        )\n                    })?\n                    .await\n                    .into_iter();\n\n                this.update(&mut cx, |project, cx| proto::MultiLspQueryResponse {\n                    responses: all_signatures\n                        .map(|signature_help| proto::LspResponse {\n                            response: Some(\n                                proto::lsp_response::Response::GetSignatureHelpResponse(\n                                    GetSignatureHelp::response_to_proto(\n                                        signature_help,\n                                        project,\n                                        sender_id,\n                                        &buffer_version,\n                                        cx,\n                                    ),\n                                ),\n                            ),\n                        })\n                        .collect(),\n                })\n            }\n            None => anyhow::bail!(": "",
    "),\n        }\n    }\n\n    async fn handle_apply_code_action(\n        this: Entity<Self>,\n        envelope: TypedEnvelope<proto::ApplyCodeAction>,\n        mut cx: AsyncApp,\n    ) -> Result<proto::ApplyCodeActionResponse> {\n        let sender_id = envelope.original_sender_id().unwrap_or_default();\n        let action = Self::deserialize_code_action(\n            envelope\n                .payload\n                .action\n                .ok_or_else(|| anyhow!(": "",
    "))?,\n        )?;\n        let apply_code_action = this.update(&mut cx, |this, cx| {\n            let buffer_id = BufferId::new(envelope.payload.buffer_id)?;\n            let buffer = this.buffer_store.read(cx).get_existing(buffer_id)?;\n            anyhow::Ok(this.apply_code_action(buffer, action, false, cx))\n        })??;\n\n        let project_transaction = apply_code_action.await?;\n        let project_transaction = this.update(&mut cx, |this, cx| {\n            this.buffer_store.update(cx, |buffer_store, cx| {\n                buffer_store.serialize_project_transaction_for_peer(\n                    project_transaction,\n                    sender_id,\n                    cx,\n                )\n            })\n        })?;\n        Ok(proto::ApplyCodeActionResponse {\n            transaction: Some(project_transaction),\n        })\n    }\n\n    async fn handle_register_buffer_with_language_servers(\n        this: Entity<Self>,\n        envelope: TypedEnvelope<proto::RegisterBufferWithLanguageServers>,\n        mut cx: AsyncApp,\n    ) -> Result<proto::Ack> {\n        let buffer_id = BufferId::new(envelope.payload.buffer_id)?;\n        let peer_id = envelope.original_sender_id.unwrap_or(envelope.sender_id);\n        this.update(&mut cx, |this, cx| {\n            if let Some((upstream_client, upstream_project_id)) = this.upstream_client() {\n                return upstream_client.send(proto::RegisterBufferWithLanguageServers {\n                    project_id: upstream_project_id,\n                    buffer_id: buffer_id.to_proto(),\n                });\n            }\n\n            let Some(buffer) = this.buffer_store().read(cx).get(buffer_id) else {\n                anyhow::bail!(": "",
    ");\n            };\n\n            let handle = this.register_buffer_with_language_servers(&buffer, false, cx);\n            this.buffer_store().update(cx, |buffer_store, _| {\n                buffer_store.register_shared_lsp_handle(peer_id, buffer_id, handle);\n            });\n\n            Ok(())\n        })??;\n        Ok(proto::Ack {})\n    }\n\n    async fn handle_rename_project_entry(\n        this: Entity<Self>,\n        envelope: TypedEnvelope<proto::RenameProjectEntry>,\n        mut cx: AsyncApp,\n    ) -> Result<proto::ProjectEntryResponse> {\n        let entry_id = ProjectEntryId::from_proto(envelope.payload.entry_id);\n        let (worktree_id, worktree, old_path, is_dir) = this\n            .update(&mut cx, |this, cx| {\n                this.worktree_store\n                    .read(cx)\n                    .worktree_and_entry_for_id(entry_id, cx)\n                    .map(|(worktree, entry)| {\n                        (\n                            worktree.read(cx).id(),\n                            worktree,\n                            entry.path.clone(),\n                            entry.is_dir(),\n                        )\n                    })\n            })?\n            .ok_or_else(|| anyhow!(": "",
    "))?;\n        let (old_abs_path, new_abs_path) = {\n            let root_path = worktree.update(&mut cx, |this, _| this.abs_path())?;\n            let new_path = PathBuf::from_proto(envelope.payload.new_path.clone());\n            (root_path.join(&old_path), root_path.join(&new_path))\n        };\n\n        Self::will_rename_entry(\n            this.downgrade(),\n            worktree_id,\n            &old_abs_path,\n            &new_abs_path,\n            is_dir,\n            cx.clone(),\n        )\n        .await;\n        let response = Worktree::handle_rename_entry(worktree, envelope.payload, cx.clone()).await;\n        this.update(&mut cx, |this, _| {\n            this.did_rename_entry(worktree_id, &old_abs_path, &new_abs_path, is_dir);\n        })\n        .ok();\n        response\n    }\n\n    async fn handle_update_diagnostic_summary(\n        this: Entity<Self>,\n        envelope: TypedEnvelope<proto::UpdateDiagnosticSummary>,\n        mut cx: AsyncApp,\n    ) -> Result<()> {\n        this.update(&mut cx, |this, cx| {\n            let worktree_id = WorktreeId::from_proto(envelope.payload.worktree_id);\n            if let Some(message) = envelope.payload.summary {\n                let project_path = ProjectPath {\n                    worktree_id,\n                    path: Arc::<Path>::from_proto(message.path),\n                };\n                let path = project_path.path.clone();\n                let server_id = LanguageServerId(message.language_server_id as usize);\n                let summary = DiagnosticSummary {\n                    error_count: message.error_count as usize,\n                    warning_count: message.warning_count as usize,\n                };\n\n                if summary.is_empty() {\n                    if let Some(worktree_summaries) =\n                        this.diagnostic_summaries.get_mut(&worktree_id)\n                    {\n                        if let Some(summaries) = worktree_summaries.get_mut(&path) {\n                            summaries.remove(&server_id);\n                            if summaries.is_empty() {\n                                worktree_summaries.remove(&path);\n                            }\n                        }\n                    }\n                } else {\n                    this.diagnostic_summaries\n                        .entry(worktree_id)\n                        .or_default()\n                        .entry(path)\n                        .or_default()\n                        .insert(server_id, summary);\n                }\n                if let Some((downstream_client, project_id)) = &this.downstream_client {\n                    downstream_client\n                        .send(proto::UpdateDiagnosticSummary {\n                            project_id: *project_id,\n                            worktree_id: worktree_id.to_proto(),\n                            summary: Some(proto::DiagnosticSummary {\n                                path: project_path.path.as_ref().to_proto(),\n                                language_server_id: server_id.0 as u64,\n                                error_count: summary.error_count as u32,\n                                warning_count: summary.warning_count as u32,\n                            }),\n                        })\n                        .log_err();\n                }\n                cx.emit(LspStoreEvent::DiagnosticsUpdated {\n                    language_server_id: LanguageServerId(message.language_server_id as usize),\n                    path: project_path,\n                });\n            }\n            Ok(())\n        })?\n    }\n\n    async fn handle_start_language_server(\n        this: Entity<Self>,\n        envelope: TypedEnvelope<proto::StartLanguageServer>,\n        mut cx: AsyncApp,\n    ) -> Result<()> {\n        let server = envelope\n            .payload\n            .server\n            .ok_or_else(|| anyhow!(": "",
    "))?;\n\n        this.update(&mut cx, |this, cx| {\n            let server_id = LanguageServerId(server.id as usize);\n            this.language_server_statuses.insert(\n                server_id,\n                LanguageServerStatus {\n                    name: server.name.clone(),\n                    pending_work: Default::default(),\n                    has_pending_diagnostic_updates: false,\n                    progress_tokens: Default::default(),\n                },\n            );\n            cx.emit(LspStoreEvent::LanguageServerAdded(\n                server_id,\n                LanguageServerName(server.name.into()),\n                server.worktree_id.map(WorktreeId::from_proto),\n            ));\n            cx.notify();\n        })?;\n        Ok(())\n    }\n\n    async fn handle_update_language_server(\n        this: Entity<Self>,\n        envelope: TypedEnvelope<proto::UpdateLanguageServer>,\n        mut cx: AsyncApp,\n    ) -> Result<()> {\n        this.update(&mut cx, |this, cx| {\n            let language_server_id = LanguageServerId(envelope.payload.language_server_id as usize);\n\n            match envelope\n                .payload\n                .variant\n                .ok_or_else(|| anyhow!(": "",
    "))?\n            {\n                proto::update_language_server::Variant::WorkStart(payload) => {\n                    this.on_lsp_work_start(\n                        language_server_id,\n                        payload.token,\n                        LanguageServerProgress {\n                            title: payload.title,\n                            is_disk_based_diagnostics_progress: false,\n                            is_cancellable: payload.is_cancellable.unwrap_or(false),\n                            message: payload.message,\n                            percentage: payload.percentage.map(|p| p as usize),\n                            last_update_at: cx.background_executor().now(),\n                        },\n                        cx,\n                    );\n                }\n\n                proto::update_language_server::Variant::WorkProgress(payload) => {\n                    this.on_lsp_work_progress(\n                        language_server_id,\n                        payload.token,\n                        LanguageServerProgress {\n                            title: None,\n                            is_disk_based_diagnostics_progress: false,\n                            is_cancellable: payload.is_cancellable.unwrap_or(false),\n                            message: payload.message,\n                            percentage: payload.percentage.map(|p| p as usize),\n                            last_update_at: cx.background_executor().now(),\n                        },\n                        cx,\n                    );\n                }\n\n                proto::update_language_server::Variant::WorkEnd(payload) => {\n                    this.on_lsp_work_end(language_server_id, payload.token, cx);\n                }\n\n                proto::update_language_server::Variant::DiskBasedDiagnosticsUpdating(_) => {\n                    this.disk_based_diagnostics_started(language_server_id, cx);\n                }\n\n                proto::update_language_server::Variant::DiskBasedDiagnosticsUpdated(_) => {\n                    this.disk_based_diagnostics_finished(language_server_id, cx)\n                }\n            }\n\n            Ok(())\n        })?\n    }\n\n    async fn handle_language_server_log(\n        this: Entity<Self>,\n        envelope: TypedEnvelope<proto::LanguageServerLog>,\n        mut cx: AsyncApp,\n    ) -> Result<()> {\n        let language_server_id = LanguageServerId(envelope.payload.language_server_id as usize);\n        let log_type = envelope\n            .payload\n            .log_type\n            .map(LanguageServerLogType::from_proto)\n            .context(": "",
    ")?;\n\n        let message = envelope.payload.message;\n\n        this.update(&mut cx, |_, cx| {\n            cx.emit(LspStoreEvent::LanguageServerLog(\n                language_server_id,\n                log_type,\n                message,\n            ));\n        })\n    }\n\n    pub fn disk_based_diagnostics_started(\n        &mut self,\n        language_server_id: LanguageServerId,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some(language_server_status) =\n            self.language_server_statuses.get_mut(&language_server_id)\n        {\n            language_server_status.has_pending_diagnostic_updates = true;\n        }\n\n        cx.emit(LspStoreEvent::DiskBasedDiagnosticsStarted { language_server_id });\n        cx.emit(LspStoreEvent::LanguageServerUpdate {\n            language_server_id,\n            message: proto::update_language_server::Variant::DiskBasedDiagnosticsUpdating(\n                Default::default(),\n            ),\n        })\n    }\n\n    pub fn disk_based_diagnostics_finished(\n        &mut self,\n        language_server_id: LanguageServerId,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some(language_server_status) =\n            self.language_server_statuses.get_mut(&language_server_id)\n        {\n            language_server_status.has_pending_diagnostic_updates = false;\n        }\n\n        cx.emit(LspStoreEvent::DiskBasedDiagnosticsFinished { language_server_id });\n        cx.emit(LspStoreEvent::LanguageServerUpdate {\n            language_server_id,\n            message: proto::update_language_server::Variant::DiskBasedDiagnosticsUpdated(\n                Default::default(),\n            ),\n        })\n    }\n\n    // After saving a buffer using a language server that doesn't provide a disk-based progress token,\n    // kick off a timer that will reset every time the buffer is saved. If the timer eventually fires,\n    // simulate disk-based diagnostics being finished so that other pieces of UI (e.g., project\n    // diagnostics view, diagnostic status bar) can update. We don't emit an event right away because\n    // the language server might take some time to publish diagnostics.\n    fn simulate_disk_based_diagnostics_events_if_needed(\n        &mut self,\n        language_server_id: LanguageServerId,\n        cx: &mut Context<Self>,\n    ) {\n        const DISK_BASED_DIAGNOSTICS_DEBOUNCE: Duration = Duration::from_secs(1);\n\n        let Some(LanguageServerState::Running {\n            simulate_disk_based_diagnostics_completion,\n            adapter,\n            ..\n        }) = self\n            .as_local_mut()\n            .and_then(|local_store| local_store.language_servers.get_mut(&language_server_id))\n        else {\n            return;\n        };\n\n        if adapter.disk_based_diagnostics_progress_token.is_some() {\n            return;\n        }\n\n        let prev_task = simulate_disk_based_diagnostics_completion.replace(cx.spawn(\n            move |this, mut cx| async move {\n                cx.background_executor()\n                    .timer(DISK_BASED_DIAGNOSTICS_DEBOUNCE)\n                    .await;\n\n                this.update(&mut cx, |this, cx| {\n                    this.disk_based_diagnostics_finished(language_server_id, cx);\n\n                    if let Some(LanguageServerState::Running {\n                        simulate_disk_based_diagnostics_completion,\n                        ..\n                    }) = this.as_local_mut().and_then(|local_store| {\n                        local_store.language_servers.get_mut(&language_server_id)\n                    }) {\n                        *simulate_disk_based_diagnostics_completion = None;\n                    }\n                })\n                .ok();\n            },\n        ));\n\n        if prev_task.is_none() {\n            self.disk_based_diagnostics_started(language_server_id, cx);\n        }\n    }\n\n    pub fn language_server_statuses(\n        &self,\n    ) -> impl DoubleEndedIterator<Item = (LanguageServerId, &LanguageServerStatus)> {\n        self.language_server_statuses\n            .iter()\n            .map(|(key, value)| (*key, value))\n    }\n\n    pub(super) fn did_rename_entry(\n        &self,\n        worktree_id: WorktreeId,\n        old_path: &Path,\n        new_path: &Path,\n        is_dir: bool,\n    ) {\n        maybe!({\n            let local_store = self.as_local()?;\n\n            let old_uri = lsp::Url::from_file_path(old_path).ok().map(String::from)?;\n            let new_uri = lsp::Url::from_file_path(new_path).ok().map(String::from)?;\n\n            for language_server in local_store.language_servers_for_worktree(worktree_id) {\n                let Some(filter) = local_store\n                    .language_server_paths_watched_for_rename\n                    .get(&language_server.server_id())\n                else {\n                    continue;\n                };\n\n                if filter.should_send_did_rename(&old_uri, is_dir) {\n                    language_server\n                        .notify::<DidRenameFiles>(&RenameFilesParams {\n                            files: vec![FileRename {\n                                old_uri: old_uri.clone(),\n                                new_uri: new_uri.clone(),\n                            }],\n                        })\n                        .log_err();\n                }\n            }\n            Some(())\n        });\n    }\n\n    pub(super) fn will_rename_entry(\n        this: WeakEntity<Self>,\n        worktree_id: WorktreeId,\n        old_path: &Path,\n        new_path: &Path,\n        is_dir: bool,\n        cx: AsyncApp,\n    ) -> Task<()> {\n        let old_uri = lsp::Url::from_file_path(old_path).ok().map(String::from);\n        let new_uri = lsp::Url::from_file_path(new_path).ok().map(String::from);\n        cx.spawn(move |mut cx| async move {\n            let mut tasks = vec![];\n            this.update(&mut cx, |this, cx| {\n                let local_store = this.as_local()?;\n                let old_uri = old_uri?;\n                let new_uri = new_uri?;\n                for language_server in local_store.language_servers_for_worktree(worktree_id) {\n                    let Some(filter) = local_store\n                        .language_server_paths_watched_for_rename\n                        .get(&language_server.server_id())\n                    else {\n                        continue;\n                    };\n                    let Some(adapter) =\n                        this.language_server_adapter_for_id(language_server.server_id())\n                    else {\n                        continue;\n                    };\n                    if filter.should_send_will_rename(&old_uri, is_dir) {\n                        let apply_edit = cx.spawn({\n                            let old_uri = old_uri.clone();\n                            let new_uri = new_uri.clone();\n                            let language_server = language_server.clone();\n                            |this, mut cx| async move {\n                                let edit = language_server\n                                    .request::<WillRenameFiles>(RenameFilesParams {\n                                        files: vec![FileRename { old_uri, new_uri }],\n                                    })\n                                    .log_err()\n                                    .await\n                                    .flatten()?;\n\n                                LocalLspStore::deserialize_workspace_edit(\n                                    this.upgrade()?,\n                                    edit,\n                                    false,\n                                    adapter.clone(),\n                                    language_server.clone(),\n                                    &mut cx,\n                                )\n                                .await\n                                .ok();\n                                Some(())\n                            }\n                        });\n                        tasks.push(apply_edit);\n                    }\n                }\n                Some(())\n            })\n            .ok()\n            .flatten();\n            for task in tasks {\n                // Await on tasks sequentially so that the order of application of edits is deterministic\n                // (at least with regards to the order of registration of language servers)\n                task.await;\n            }\n        })\n    }\n\n    fn lsp_notify_abs_paths_changed(\n        &mut self,\n        server_id: LanguageServerId,\n        changes: Vec<PathEvent>,\n    ) {\n        maybe!({\n            let server = self.language_server_for_id(server_id)?;\n            let changes = changes\n                .into_iter()\n                .filter_map(|event| {\n                    let typ = match event.kind? {\n                        PathEventKind::Created => lsp::FileChangeType::CREATED,\n                        PathEventKind::Removed => lsp::FileChangeType::DELETED,\n                        PathEventKind::Changed => lsp::FileChangeType::CHANGED,\n                    };\n                    Some(lsp::FileEvent {\n                        uri: lsp::Url::from_file_path(&event.path).ok()?,\n                        typ,\n                    })\n                })\n                .collect::<Vec<_>>();\n            if !changes.is_empty() {\n                server\n                    .notify::<lsp::notification::DidChangeWatchedFiles>(\n                        &lsp::DidChangeWatchedFilesParams { changes },\n                    )\n                    .log_err();\n            }\n            Some(())\n        });\n    }\n\n    pub fn language_server_for_id(&self, id: LanguageServerId) -> Option<Arc<LanguageServer>> {\n        let local_lsp_store = self.as_local()?;\n        if let Some(LanguageServerState::Running { server, .. }) =\n            local_lsp_store.language_servers.get(&id)\n        {\n            Some(server.clone())\n        } else if let Some((_, server)) = local_lsp_store.supplementary_language_servers.get(&id) {\n            Some(Arc::clone(server))\n        } else {\n            None\n        }\n    }\n\n    fn on_lsp_progress(\n        &mut self,\n        progress: lsp::ProgressParams,\n        language_server_id: LanguageServerId,\n        disk_based_diagnostics_progress_token: Option<String>,\n        cx: &mut Context<Self>,\n    ) {\n        let token = match progress.token {\n            lsp::NumberOrString::String(token) => token,\n            lsp::NumberOrString::Number(token) => {\n                log::info!(": "",
    ", token);\n                return;\n            }\n        };\n\n        let lsp::ProgressParamsValue::WorkDone(progress) = progress.value;\n        let language_server_status =\n            if let Some(status) = self.language_server_statuses.get_mut(&language_server_id) {\n                status\n            } else {\n                return;\n            };\n\n        if !language_server_status.progress_tokens.contains(&token) {\n            return;\n        }\n\n        let is_disk_based_diagnostics_progress = disk_based_diagnostics_progress_token\n            .as_ref()\n            .map_or(false, |disk_based_token| {\n                token.starts_with(disk_based_token)\n            });\n\n        match progress {\n            lsp::WorkDoneProgress::Begin(report) => {\n                if is_disk_based_diagnostics_progress {\n                    self.disk_based_diagnostics_started(language_server_id, cx);\n                }\n                self.on_lsp_work_start(\n                    language_server_id,\n                    token.clone(),\n                    LanguageServerProgress {\n                        title: Some(report.title),\n                        is_disk_based_diagnostics_progress,\n                        is_cancellable: report.cancellable.unwrap_or(false),\n                        message: report.message.clone(),\n                        percentage: report.percentage.map(|p| p as usize),\n                        last_update_at: cx.background_executor().now(),\n                    },\n                    cx,\n                );\n            }\n            lsp::WorkDoneProgress::Report(report) => self.on_lsp_work_progress(\n                language_server_id,\n                token,\n                LanguageServerProgress {\n                    title: None,\n                    is_disk_based_diagnostics_progress,\n                    is_cancellable: report.cancellable.unwrap_or(false),\n                    message: report.message,\n                    percentage: report.percentage.map(|p| p as usize),\n                    last_update_at: cx.background_executor().now(),\n                },\n                cx,\n            ),\n            lsp::WorkDoneProgress::End(_) => {\n                language_server_status.progress_tokens.remove(&token);\n                self.on_lsp_work_end(language_server_id, token.clone(), cx);\n                if is_disk_based_diagnostics_progress {\n                    self.disk_based_diagnostics_finished(language_server_id, cx);\n                }\n            }\n        }\n    }\n\n    fn on_lsp_work_start(\n        &mut self,\n        language_server_id: LanguageServerId,\n        token: String,\n        progress: LanguageServerProgress,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some(status) = self.language_server_statuses.get_mut(&language_server_id) {\n            status.pending_work.insert(token.clone(), progress.clone());\n            cx.notify();\n        }\n        cx.emit(LspStoreEvent::LanguageServerUpdate {\n            language_server_id,\n            message: proto::update_language_server::Variant::WorkStart(proto::LspWorkStart {\n                token,\n                title: progress.title,\n                message: progress.message,\n                percentage: progress.percentage.map(|p| p as u32),\n                is_cancellable: Some(progress.is_cancellable),\n            }),\n        })\n    }\n\n    fn on_lsp_work_progress(\n        &mut self,\n        language_server_id: LanguageServerId,\n        token: String,\n        progress: LanguageServerProgress,\n        cx: &mut Context<Self>,\n    ) {\n        let mut did_update = false;\n        if let Some(status) = self.language_server_statuses.get_mut(&language_server_id) {\n            match status.pending_work.entry(token.clone()) {\n                btree_map::Entry::Vacant(entry) => {\n                    entry.insert(progress.clone());\n                    did_update = true;\n                }\n                btree_map::Entry::Occupied(mut entry) => {\n                    let entry = entry.get_mut();\n                    if (progress.last_update_at - entry.last_update_at)\n                        >= SERVER_PROGRESS_THROTTLE_TIMEOUT\n                    {\n                        entry.last_update_at = progress.last_update_at;\n                        if progress.message.is_some() {\n                            entry.message = progress.message.clone();\n                        }\n                        if progress.percentage.is_some() {\n                            entry.percentage = progress.percentage;\n                        }\n                        if progress.is_cancellable != entry.is_cancellable {\n                            entry.is_cancellable = progress.is_cancellable;\n                        }\n                        did_update = true;\n                    }\n                }\n            }\n        }\n\n        if did_update {\n            cx.emit(LspStoreEvent::LanguageServerUpdate {\n                language_server_id,\n                message: proto::update_language_server::Variant::WorkProgress(\n                    proto::LspWorkProgress {\n                        token,\n                        message: progress.message,\n                        percentage: progress.percentage.map(|p| p as u32),\n                        is_cancellable: Some(progress.is_cancellable),\n                    },\n                ),\n            })\n        }\n    }\n\n    fn on_lsp_work_end(\n        &mut self,\n        language_server_id: LanguageServerId,\n        token: String,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some(status) = self.language_server_statuses.get_mut(&language_server_id) {\n            if let Some(work) = status.pending_work.remove(&token) {\n                if !work.is_disk_based_diagnostics_progress {\n                    cx.emit(LspStoreEvent::RefreshInlayHints);\n                }\n            }\n            cx.notify();\n        }\n\n        cx.emit(LspStoreEvent::LanguageServerUpdate {\n            language_server_id,\n            message: proto::update_language_server::Variant::WorkEnd(proto::LspWorkEnd { token }),\n        })\n    }\n\n    pub async fn handle_resolve_completion_documentation(\n        this: Entity<Self>,\n        envelope: TypedEnvelope<proto::ResolveCompletionDocumentation>,\n        mut cx: AsyncApp,\n    ) -> Result<proto::ResolveCompletionDocumentationResponse> {\n        let lsp_completion = serde_json::from_slice(&envelope.payload.lsp_completion)?;\n\n        let completion = this\n            .read_with(&cx, |this, cx| {\n                let id = LanguageServerId(envelope.payload.language_server_id as usize);\n                let Some(server) = this.language_server_for_id(id) else {\n                    return Err(anyhow!(": "",
    "));\n                };\n\n                Ok(cx.background_spawn(async move {\n                    let can_resolve = server\n                        .capabilities()\n                        .completion_provider\n                        .as_ref()\n                        .and_then(|options| options.resolve_provider)\n                        .unwrap_or(false);\n                    if can_resolve {\n                        server\n                            .request::<lsp::request::ResolveCompletionItem>(lsp_completion)\n                            .await\n                    } else {\n                        anyhow::Ok(lsp_completion)\n                    }\n                }))\n            })??\n            .await?;\n\n        let mut documentation_is_markdown = false;\n        let lsp_completion = serde_json::to_string(&completion)?.into_bytes();\n        let documentation = match completion.documentation {\n            Some(lsp::Documentation::String(text)) => text,\n\n            Some(lsp::Documentation::MarkupContent(lsp::MarkupContent { kind, value })) => {\n                documentation_is_markdown = kind == lsp::MarkupKind::Markdown;\n                value\n            }\n\n            _ => String::new(),\n        };\n\n        // If we have a new buffer_id, that means we're talking to a new client\n        // and want to check for new text_edits in the completion too.\n        let mut old_start = None;\n        let mut old_end = None;\n        let mut new_text = String::default();\n        if let Ok(buffer_id) = BufferId::new(envelope.payload.buffer_id) {\n            let buffer_snapshot = this.update(&mut cx, |this, cx| {\n                let buffer = this.buffer_store.read(cx).get_existing(buffer_id)?;\n                anyhow::Ok(buffer.read(cx).snapshot())\n            })??;\n\n            if let Some(text_edit) = completion.text_edit.as_ref() {\n                let edit = parse_completion_text_edit(text_edit, &buffer_snapshot);\n\n                if let Some((old_range, mut text_edit_new_text)) = edit {\n                    LineEnding::normalize(&mut text_edit_new_text);\n\n                    new_text = text_edit_new_text;\n                    old_start = Some(serialize_anchor(&old_range.start));\n                    old_end = Some(serialize_anchor(&old_range.end));\n                }\n            }\n        }\n\n        Ok(proto::ResolveCompletionDocumentationResponse {\n            documentation,\n            documentation_is_markdown,\n            old_start,\n            old_end,\n            new_text,\n            lsp_completion,\n        })\n    }\n\n    async fn handle_on_type_formatting(\n        this: Entity<Self>,\n        envelope: TypedEnvelope<proto::OnTypeFormatting>,\n        mut cx: AsyncApp,\n    ) -> Result<proto::OnTypeFormattingResponse> {\n        let on_type_formatting = this.update(&mut cx, |this, cx| {\n            let buffer_id = BufferId::new(envelope.payload.buffer_id)?;\n            let buffer = this.buffer_store.read(cx).get_existing(buffer_id)?;\n            let position = envelope\n                .payload\n                .position\n                .and_then(deserialize_anchor)\n                .ok_or_else(|| anyhow!(": "",
    "))?;\n            Ok::<_, anyhow::Error>(this.apply_on_type_formatting(\n                buffer,\n                position,\n                envelope.payload.trigger.clone(),\n                cx,\n            ))\n        })??;\n\n        let transaction = on_type_formatting\n            .await?\n            .as_ref()\n            .map(language::proto::serialize_transaction);\n        Ok(proto::OnTypeFormattingResponse { transaction })\n    }\n\n    async fn handle_refresh_inlay_hints(\n        this: Entity<Self>,\n        _: TypedEnvelope<proto::RefreshInlayHints>,\n        mut cx: AsyncApp,\n    ) -> Result<proto::Ack> {\n        this.update(&mut cx, |_, cx| {\n            cx.emit(LspStoreEvent::RefreshInlayHints);\n        })?;\n        Ok(proto::Ack {})\n    }\n\n    async fn handle_inlay_hints(\n        this: Entity<Self>,\n        envelope: TypedEnvelope<proto::InlayHints>,\n        mut cx: AsyncApp,\n    ) -> Result<proto::InlayHintsResponse> {\n        let sender_id = envelope.original_sender_id().unwrap_or_default();\n        let buffer_id = BufferId::new(envelope.payload.buffer_id)?;\n        let buffer = this.update(&mut cx, |this, cx| {\n            this.buffer_store.read(cx).get_existing(buffer_id)\n        })??;\n        buffer\n            .update(&mut cx, |buffer, _| {\n                buffer.wait_for_version(deserialize_version(&envelope.payload.version))\n            })?\n            .await\n            .with_context(|| format!(": "",
    ", buffer.entity_id()))?;\n\n        let start = envelope\n            .payload\n            .start\n            .and_then(deserialize_anchor)\n            .context(": "",
    ")?;\n        let end = envelope\n            .payload\n            .end\n            .and_then(deserialize_anchor)\n            .context(": "",
    ")?;\n        let buffer_hints = this\n            .update(&mut cx, |lsp_store, cx| {\n                lsp_store.inlay_hints(buffer.clone(), start..end, cx)\n            })?\n            .await\n            .context(": "",
    ")?;\n\n        this.update(&mut cx, |project, cx| {\n            InlayHints::response_to_proto(\n                buffer_hints,\n                project,\n                sender_id,\n                &buffer.read(cx).version(),\n                cx,\n            )\n        })\n    }\n\n    async fn handle_resolve_inlay_hint(\n        this: Entity<Self>,\n        envelope: TypedEnvelope<proto::ResolveInlayHint>,\n        mut cx: AsyncApp,\n    ) -> Result<proto::ResolveInlayHintResponse> {\n        let proto_hint = envelope\n            .payload\n            .hint\n            .expect(": "",
    ");\n        let hint = InlayHints::proto_to_project_hint(proto_hint)\n            .context(": "",
    ")?;\n        let buffer = this.update(&mut cx, |this, cx| {\n            let buffer_id = BufferId::new(envelope.payload.buffer_id)?;\n            this.buffer_store.read(cx).get_existing(buffer_id)\n        })??;\n        let response_hint = this\n            .update(&mut cx, |this, cx| {\n                this.resolve_inlay_hint(\n                    hint,\n                    buffer,\n                    LanguageServerId(envelope.payload.language_server_id as usize),\n                    cx,\n                )\n            })?\n            .await\n            .context(": "",
    ")?;\n        Ok(proto::ResolveInlayHintResponse {\n            hint: Some(InlayHints::project_to_proto_hint(response_hint)),\n        })\n    }\n\n    async fn handle_open_buffer_for_symbol(\n        this: Entity<Self>,\n        envelope: TypedEnvelope<proto::OpenBufferForSymbol>,\n        mut cx: AsyncApp,\n    ) -> Result<proto::OpenBufferForSymbolResponse> {\n        let peer_id = envelope.original_sender_id().unwrap_or_default();\n        let symbol = envelope\n            .payload\n            .symbol\n            .ok_or_else(|| anyhow!(": "",
    "))?;\n        let symbol = Self::deserialize_symbol(symbol)?;\n        let symbol = this.update(&mut cx, |this, _| {\n            let signature = this.symbol_signature(&symbol.path);\n            if signature == symbol.signature {\n                Ok(symbol)\n            } else {\n                Err(anyhow!(": "",
    "))\n            }\n        })??;\n        let buffer = this\n            .update(&mut cx, |this, cx| {\n                this.open_buffer_for_symbol(\n                    &Symbol {\n                        language_server_name: symbol.language_server_name,\n                        source_worktree_id: symbol.source_worktree_id,\n                        source_language_server_id: symbol.source_language_server_id,\n                        path: symbol.path,\n                        name: symbol.name,\n                        kind: symbol.kind,\n                        range: symbol.range,\n                        signature: symbol.signature,\n                        label: CodeLabel {\n                            text: Default::default(),\n                            runs: Default::default(),\n                            filter_range: Default::default(),\n                        },\n                    },\n                    cx,\n                )\n            })?\n            .await?;\n\n        this.update(&mut cx, |this, cx| {\n            let is_private = buffer\n                .read(cx)\n                .file()\n                .map(|f| f.is_private())\n                .unwrap_or_default();\n            if is_private {\n                Err(anyhow!(rpc::ErrorCode::UnsharedItem))\n            } else {\n                this.buffer_store\n                    .update(cx, |buffer_store, cx| {\n                        buffer_store.create_buffer_for_peer(&buffer, peer_id, cx)\n                    })\n                    .detach_and_log_err(cx);\n                let buffer_id = buffer.read(cx).remote_id().to_proto();\n                Ok(proto::OpenBufferForSymbolResponse { buffer_id })\n            }\n        })?\n    }\n\n    fn symbol_signature(&self, project_path: &ProjectPath) -> [u8; 32] {\n        let mut hasher = Sha256::new();\n        hasher.update(project_path.worktree_id.to_proto().to_be_bytes());\n        hasher.update(project_path.path.to_string_lossy().as_bytes());\n        hasher.update(self.nonce.to_be_bytes());\n        hasher.finalize().as_slice().try_into().unwrap()\n    }\n\n    pub async fn handle_get_project_symbols(\n        this: Entity<Self>,\n        envelope: TypedEnvelope<proto::GetProjectSymbols>,\n        mut cx: AsyncApp,\n    ) -> Result<proto::GetProjectSymbolsResponse> {\n        let symbols = this\n            .update(&mut cx, |this, cx| {\n                this.symbols(&envelope.payload.query, cx)\n            })?\n            .await?;\n\n        Ok(proto::GetProjectSymbolsResponse {\n            symbols: symbols.iter().map(Self::serialize_symbol).collect(),\n        })\n    }\n\n    pub async fn handle_restart_language_servers(\n        this: Entity<Self>,\n        envelope: TypedEnvelope<proto::RestartLanguageServers>,\n        mut cx: AsyncApp,\n    ) -> Result<proto::Ack> {\n        this.update(&mut cx, |this, cx| {\n            let buffers = this.buffer_ids_to_buffers(envelope.payload.buffer_ids.into_iter(), cx);\n            this.restart_language_servers_for_buffers(buffers, cx);\n        })?;\n\n        Ok(proto::Ack {})\n    }\n\n    pub async fn handle_cancel_language_server_work(\n        this: Entity<Self>,\n        envelope: TypedEnvelope<proto::CancelLanguageServerWork>,\n        mut cx: AsyncApp,\n    ) -> Result<proto::Ack> {\n        this.update(&mut cx, |this, cx| {\n            if let Some(work) = envelope.payload.work {\n                match work {\n                    proto::cancel_language_server_work::Work::Buffers(buffers) => {\n                        let buffers =\n                            this.buffer_ids_to_buffers(buffers.buffer_ids.into_iter(), cx);\n                        this.cancel_language_server_work_for_buffers(buffers, cx);\n                    }\n                    proto::cancel_language_server_work::Work::LanguageServerWork(work) => {\n                        let server_id = LanguageServerId::from_proto(work.language_server_id);\n                        this.cancel_language_server_work(server_id, work.token, cx);\n                    }\n                }\n            }\n        })?;\n\n        Ok(proto::Ack {})\n    }\n\n    fn buffer_ids_to_buffers(\n        &mut self,\n        buffer_ids: impl Iterator<Item = u64>,\n        cx: &mut Context<Self>,\n    ) -> Vec<Entity<Buffer>> {\n        buffer_ids\n            .into_iter()\n            .flat_map(|buffer_id| {\n                self.buffer_store\n                    .read(cx)\n                    .get(BufferId::new(buffer_id).log_err()?)\n            })\n            .collect::<Vec<_>>()\n    }\n\n    async fn handle_apply_additional_edits_for_completion(\n        this: Entity<Self>,\n        envelope: TypedEnvelope<proto::ApplyCompletionAdditionalEdits>,\n        mut cx: AsyncApp,\n    ) -> Result<proto::ApplyCompletionAdditionalEditsResponse> {\n        let (buffer, completion) = this.update(&mut cx, |this, cx| {\n            let buffer_id = BufferId::new(envelope.payload.buffer_id)?;\n            let buffer = this.buffer_store.read(cx).get_existing(buffer_id)?;\n            let completion = Self::deserialize_completion(\n                envelope\n                    .payload\n                    .completion\n                    .ok_or_else(|| anyhow!(": "",
    "))?,\n            )?;\n            anyhow::Ok((buffer, completion))\n        })??;\n\n        let apply_additional_edits = this.update(&mut cx, |this, cx| {\n            this.apply_additional_edits_for_completion(\n                buffer,\n                Rc::new(RefCell::new(Box::new([Completion {\n                    old_range: completion.old_range,\n                    new_text: completion.new_text,\n                    source: completion.source,\n                    documentation: None,\n                    label: CodeLabel {\n                        text: Default::default(),\n                        runs: Default::default(),\n                        filter_range: Default::default(),\n                    },\n                    confirm: None,\n                }]))),\n                0,\n                false,\n                cx,\n            )\n        })?;\n\n        Ok(proto::ApplyCompletionAdditionalEditsResponse {\n            transaction: apply_additional_edits\n                .await?\n                .as_ref()\n                .map(language::proto::serialize_transaction),\n        })\n    }\n\n    pub fn last_formatting_failure(&self) -> Option<&str> {\n        self.last_formatting_failure.as_deref()\n    }\n\n    pub fn reset_last_formatting_failure(&mut self) {\n        self.last_formatting_failure = None;\n    }\n\n    pub fn environment_for_buffer(\n        &self,\n        buffer: &Entity<Buffer>,\n        cx: &mut Context<Self>,\n    ) -> Shared<Task<Option<HashMap<String, String>>>> {\n        let worktree_id = buffer.read(cx).file().map(|file| file.worktree_id(cx));\n        let worktree_abs_path = worktree_id.and_then(|worktree_id| {\n            self.worktree_store\n                .read(cx)\n                .worktree_for_id(worktree_id, cx)\n                .map(|entry| entry.read(cx).abs_path().clone())\n        });\n\n        if let Some(environment) = &self.as_local().map(|local| local.environment.clone()) {\n            environment.update(cx, |env, cx| {\n                env.get_environment(worktree_id, worktree_abs_path, cx)\n            })\n        } else {\n            Task::ready(None).shared()\n        }\n    }\n\n    pub fn format(\n        &mut self,\n        buffers: HashSet<Entity<Buffer>>,\n        target: LspFormatTarget,\n        push_to_history: bool,\n        trigger: FormatTrigger,\n        cx: &mut Context<Self>,\n    ) -> Task<anyhow::Result<ProjectTransaction>> {\n        if let Some(_) = self.as_local() {\n            let buffers = buffers\n                .into_iter()\n                .map(|buffer_handle| {\n                    let buffer = buffer_handle.read(cx);\n                    let buffer_abs_path = File::from_dyn(buffer.file())\n                        .and_then(|file| file.as_local().map(|f| f.abs_path(cx)));\n\n                    (buffer_handle, buffer_abs_path, buffer.remote_id())\n                })\n                .collect::<Vec<_>>();\n\n            cx.spawn(move |lsp_store, mut cx| async move {\n                let mut formattable_buffers = Vec::with_capacity(buffers.len());\n\n                for (handle, abs_path, id) in buffers {\n                    let env = lsp_store\n                        .update(&mut cx, |lsp_store, cx| {\n                            lsp_store.environment_for_buffer(&handle, cx)\n                        })?\n                        .await;\n\n                    let ranges = match &target {\n                        LspFormatTarget::Buffers => None,\n                        LspFormatTarget::Ranges(ranges) => {\n                            let Some(ranges) = ranges.get(&id) else {\n                                return Err(anyhow!(": "",
    "));\n                            };\n                            Some(ranges.clone())\n                        }\n                    };\n\n                    formattable_buffers.push(FormattableBuffer {\n                        handle,\n                        abs_path,\n                        env,\n                        ranges,\n                    });\n                }\n\n                let result = LocalLspStore::format_locally(\n                    lsp_store.clone(),\n                    formattable_buffers,\n                    push_to_history,\n                    trigger,\n                    cx.clone(),\n                )\n                .await;\n                lsp_store.update(&mut cx, |lsp_store, _| {\n                    lsp_store.update_last_formatting_failure(&result);\n                })?;\n\n                result\n            })\n        } else if let Some((client, project_id)) = self.upstream_client() {\n            // Don't support formatting ranges via remote\n            match target {\n                LspFormatTarget::Buffers => {}\n                LspFormatTarget::Ranges(_) => {\n                    return Task::ready(Ok(ProjectTransaction::default()));\n                }\n            }\n\n            let buffer_store = self.buffer_store();\n            cx.spawn(move |lsp_store, mut cx| async move {\n                let result = client\n                    .request(proto::FormatBuffers {\n                        project_id,\n                        trigger: trigger as i32,\n                        buffer_ids: buffers\n                            .iter()\n                            .map(|buffer| {\n                                buffer.update(&mut cx, |buffer, _| buffer.remote_id().into())\n                            })\n                            .collect::<Result<_>>()?,\n                    })\n                    .await\n                    .and_then(|result| result.transaction.context(": "",
    "));\n\n                lsp_store.update(&mut cx, |lsp_store, _| {\n                    lsp_store.update_last_formatting_failure(&result);\n                })?;\n\n                let transaction_response = result?;\n                buffer_store\n                    .update(&mut cx, |buffer_store, cx| {\n                        buffer_store.deserialize_project_transaction(\n                            transaction_response,\n                            push_to_history,\n                            cx,\n                        )\n                    })?\n                    .await\n            })\n        } else {\n            Task::ready(Ok(ProjectTransaction::default()))\n        }\n    }\n\n    async fn handle_format_buffers(\n        this: Entity<Self>,\n        envelope: TypedEnvelope<proto::FormatBuffers>,\n        mut cx: AsyncApp,\n    ) -> Result<proto::FormatBuffersResponse> {\n        let sender_id = envelope.original_sender_id().unwrap_or_default();\n        let format = this.update(&mut cx, |this, cx| {\n            let mut buffers = HashSet::default();\n            for buffer_id in &envelope.payload.buffer_ids {\n                let buffer_id = BufferId::new(*buffer_id)?;\n                buffers.insert(this.buffer_store.read(cx).get_existing(buffer_id)?);\n            }\n            let trigger = FormatTrigger::from_proto(envelope.payload.trigger);\n            anyhow::Ok(this.format(buffers, LspFormatTarget::Buffers, false, trigger, cx))\n        })??;\n\n        let project_transaction = format.await?;\n        let project_transaction = this.update(&mut cx, |this, cx| {\n            this.buffer_store.update(cx, |buffer_store, cx| {\n                buffer_store.serialize_project_transaction_for_peer(\n                    project_transaction,\n                    sender_id,\n                    cx,\n                )\n            })\n        })?;\n        Ok(proto::FormatBuffersResponse {\n            transaction: Some(project_transaction),\n        })\n    }\n\n    async fn handle_apply_code_action_kind(\n        this: Entity<Self>,\n        envelope: TypedEnvelope<proto::ApplyCodeActionKind>,\n        mut cx: AsyncApp,\n    ) -> Result<proto::ApplyCodeActionKindResponse> {\n        let sender_id = envelope.original_sender_id().unwrap_or_default();\n        let format = this.update(&mut cx, |this, cx| {\n            let mut buffers = HashSet::default();\n            for buffer_id in &envelope.payload.buffer_ids {\n                let buffer_id = BufferId::new(*buffer_id)?;\n                buffers.insert(this.buffer_store.read(cx).get_existing(buffer_id)?);\n            }\n            let kind = match envelope.payload.kind.as_str() {\n                ": "",
    " => Ok(CodeActionKind::EMPTY),\n                ": "",
    " => Ok(CodeActionKind::QUICKFIX),\n                ": "",
    " => Ok(CodeActionKind::REFACTOR),\n                ": "",
    " => Ok(CodeActionKind::REFACTOR_EXTRACT),\n                ": "",
    " => Ok(CodeActionKind::REFACTOR_INLINE),\n                ": "",
    " => Ok(CodeActionKind::REFACTOR_REWRITE),\n                ": "",
    " => Ok(CodeActionKind::SOURCE),\n                ": "",
    " => Ok(CodeActionKind::SOURCE_ORGANIZE_IMPORTS),\n                ": "",
    " => Ok(CodeActionKind::SOURCE_FIX_ALL),\n                _ => Err(anyhow!(": "",
    ")),\n            }?;\n            anyhow::Ok(this.apply_code_action_kind(buffers, kind, false, cx))\n        })??;\n\n        let project_transaction = format.await?;\n        let project_transaction = this.update(&mut cx, |this, cx| {\n            this.buffer_store.update(cx, |buffer_store, cx| {\n                buffer_store.serialize_project_transaction_for_peer(\n                    project_transaction,\n                    sender_id,\n                    cx,\n                )\n            })\n        })?;\n        Ok(proto::ApplyCodeActionKindResponse {\n            transaction: Some(project_transaction),\n        })\n    }\n\n    async fn shutdown_language_server(\n        server_state: Option<LanguageServerState>,\n        name: LanguageServerName,\n        cx: AsyncApp,\n    ) {\n        let server = match server_state {\n            Some(LanguageServerState::Starting { startup, .. }) => {\n                let mut timer = cx\n                    .background_executor()\n                    .timer(SERVER_LAUNCHING_BEFORE_SHUTDOWN_TIMEOUT)\n                    .fuse();\n\n                select! {\n                    server = startup.fuse() => server,\n                    _ = timer => {\n                        log::info!(\n                            ": "",
    ",\n                            name\n                        );\n                        None\n                    },\n                }\n            }\n\n            Some(LanguageServerState::Running { server, .. }) => Some(server),\n\n            None => None,\n        };\n\n        if let Some(server) = server {\n            if let Some(shutdown) = server.shutdown() {\n                shutdown.await;\n            }\n        }\n    }\n\n    // Returns a list of all of the worktrees which no longer have a language server and the root path\n    // for the stopped server\n    fn stop_local_language_server(\n        &mut self,\n        server_id: LanguageServerId,\n        name: LanguageServerName,\n        cx: &mut Context<Self>,\n    ) -> Task<Vec<WorktreeId>> {\n        let local = match &mut self.mode {\n            LspStoreMode::Local(local) => local,\n            _ => {\n                return Task::ready(Vec::new());\n            }\n        };\n\n        let mut orphaned_worktrees = vec![];\n        // Remove this server ID from all entries in the given worktree.\n        local.language_server_ids.retain(|(worktree, _), ids| {\n            if !ids.remove(&server_id) {\n                return true;\n            }\n\n            if ids.is_empty() {\n                orphaned_worktrees.push(*worktree);\n                false\n            } else {\n                true\n            }\n        });\n        let _ = self.language_server_statuses.remove(&server_id);\n        log::info!(": "",
    ");\n        self.buffer_store.update(cx, |buffer_store, cx| {\n            for buffer in buffer_store.buffers() {\n                buffer.update(cx, |buffer, cx| {\n                    buffer.update_diagnostics(server_id, DiagnosticSet::new([], buffer), cx);\n                    buffer.set_completion_triggers(server_id, Default::default(), cx);\n                });\n            }\n        });\n\n        for (worktree_id, summaries) in self.diagnostic_summaries.iter_mut() {\n            summaries.retain(|path, summaries_by_server_id| {\n                if summaries_by_server_id.remove(&server_id).is_some() {\n                    if let Some((client, project_id)) = self.downstream_client.clone() {\n                        client\n                            .send(proto::UpdateDiagnosticSummary {\n                                project_id,\n                                worktree_id: worktree_id.to_proto(),\n                                summary: Some(proto::DiagnosticSummary {\n                                    path: path.as_ref().to_proto(),\n                                    language_server_id: server_id.0 as u64,\n                                    error_count: 0,\n                                    warning_count: 0,\n                                }),\n                            })\n                            .log_err();\n                    }\n                    !summaries_by_server_id.is_empty()\n                } else {\n                    true\n                }\n            });\n        }\n\n        let local = self.as_local_mut().unwrap();\n        for diagnostics in local.diagnostics.values_mut() {\n            diagnostics.retain(|_, diagnostics_by_server_id| {\n                if let Ok(ix) = diagnostics_by_server_id.binary_search_by_key(&server_id, |e| e.0) {\n                    diagnostics_by_server_id.remove(ix);\n                    !diagnostics_by_server_id.is_empty()\n                } else {\n                    true\n                }\n            });\n        }\n        local.language_server_watched_paths.remove(&server_id);\n        let server_state = local.language_servers.remove(&server_id);\n        cx.notify();\n        cx.emit(LspStoreEvent::LanguageServerRemoved(server_id));\n        cx.spawn(move |_, cx| async move {\n            Self::shutdown_language_server(server_state, name, cx).await;\n            orphaned_worktrees\n        })\n    }\n\n    pub fn restart_language_servers_for_buffers(\n        &mut self,\n        buffers: Vec<Entity<Buffer>>,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some((client, project_id)) = self.upstream_client() {\n            let request = client.request(proto::RestartLanguageServers {\n                project_id,\n                buffer_ids: buffers\n                    .into_iter()\n                    .map(|b| b.read(cx).remote_id().to_proto())\n                    .collect(),\n            });\n            cx.background_spawn(request).detach_and_log_err(cx);\n        } else {\n            let Some(local) = self.as_local_mut() else {\n                return;\n            };\n            let language_servers_to_stop = buffers\n                .iter()\n                .flat_map(|buffer| {\n                    buffer.update(cx, |buffer, cx| {\n                        local.language_server_ids_for_buffer(buffer, cx)\n                    })\n                })\n                .collect::<BTreeSet<_>>();\n            local.lsp_tree.update(cx, |this, _| {\n                this.remove_nodes(&language_servers_to_stop);\n            });\n            let tasks = language_servers_to_stop\n                .into_iter()\n                .map(|server| {\n                    let name = self\n                        .language_server_statuses\n                        .get(&server)\n                        .map(|state| state.name.as_str().into())\n                        .unwrap_or_else(|| LanguageServerName::from(": "",
    "));\n                    self.stop_local_language_server(server, name, cx)\n                })\n                .collect::<Vec<_>>();\n\n            cx.spawn(|this, mut cx| async move {\n                cx.background_spawn(futures::future::join_all(tasks)).await;\n                this.update(&mut cx, |this, cx| {\n                    for buffer in buffers {\n                        this.register_buffer_with_language_servers(&buffer, true, cx);\n                    }\n                })\n                .ok()\n            })\n            .detach();\n        }\n    }\n\n    pub fn update_diagnostics(\n        &mut self,\n        language_server_id: LanguageServerId,\n        mut params: lsp::PublishDiagnosticsParams,\n        disk_based_sources: &[String],\n        cx: &mut Context<Self>,\n    ) -> Result<()> {\n        if !self.mode.is_local() {\n            anyhow::bail!(": "",
    ");\n        }\n        let abs_path = params\n            .uri\n            .to_file_path()\n            .map_err(|_| anyhow!(": "",
    "))?;\n        let mut diagnostics = Vec::default();\n        let mut primary_diagnostic_group_ids = HashMap::default();\n        let mut sources_by_group_id = HashMap::default();\n        let mut supporting_diagnostics = HashMap::default();\n\n        // Ensure that primary diagnostics are always the most severe\n        params.diagnostics.sort_by_key(|item| item.severity);\n\n        for diagnostic in &params.diagnostics {\n            let source = diagnostic.source.as_ref();\n            let range = range_from_lsp(diagnostic.range);\n            let is_supporting = diagnostic\n                .related_information\n                .as_ref()\n                .map_or(false, |infos| {\n                    infos.iter().any(|info| {\n                        primary_diagnostic_group_ids.contains_key(&(\n                            source,\n                            diagnostic.code.clone(),\n                            range_from_lsp(info.location.range),\n                        ))\n                    })\n                });\n\n            let is_unnecessary = diagnostic.tags.as_ref().map_or(false, |tags| {\n                tags.iter().any(|tag| *tag == DiagnosticTag::UNNECESSARY)\n            });\n\n            if is_supporting {\n                supporting_diagnostics.insert(\n                    (source, diagnostic.code.clone(), range),\n                    (diagnostic.severity, is_unnecessary),\n                );\n            } else {\n                let group_id = post_inc(&mut self.as_local_mut().unwrap().next_diagnostic_group_id);\n                let is_disk_based =\n                    source.map_or(false, |source| disk_based_sources.contains(source));\n\n                sources_by_group_id.insert(group_id, source);\n                primary_diagnostic_group_ids\n                    .insert((source, diagnostic.code.clone(), range.clone()), group_id);\n\n                diagnostics.push(DiagnosticEntry {\n                    range,\n                    diagnostic: Diagnostic {\n                        source: diagnostic.source.clone(),\n                        code: diagnostic.code.clone(),\n                        severity: diagnostic.severity.unwrap_or(DiagnosticSeverity::ERROR),\n                        message: diagnostic.message.trim().to_string(),\n                        group_id,\n                        is_primary: true,\n                        is_disk_based,\n                        is_unnecessary,\n                        data: diagnostic.data.clone(),\n                    },\n                });\n                if let Some(infos) = &diagnostic.related_information {\n                    for info in infos {\n                        if info.location.uri == params.uri && !info.message.is_empty() {\n                            let range = range_from_lsp(info.location.range);\n                            diagnostics.push(DiagnosticEntry {\n                                range,\n                                diagnostic: Diagnostic {\n                                    source: diagnostic.source.clone(),\n                                    code: diagnostic.code.clone(),\n                                    severity: DiagnosticSeverity::INFORMATION,\n                                    message: info.message.trim().to_string(),\n                                    group_id,\n                                    is_primary: false,\n                                    is_disk_based,\n                                    is_unnecessary: false,\n                                    data: diagnostic.data.clone(),\n                                },\n                            });\n                        }\n                    }\n                }\n            }\n        }\n\n        for entry in &mut diagnostics {\n            let diagnostic = &mut entry.diagnostic;\n            if !diagnostic.is_primary {\n                let source = *sources_by_group_id.get(&diagnostic.group_id).unwrap();\n                if let Some(&(severity, is_unnecessary)) = supporting_diagnostics.get(&(\n                    source,\n                    diagnostic.code.clone(),\n                    entry.range.clone(),\n                )) {\n                    if let Some(severity) = severity {\n                        diagnostic.severity = severity;\n                    }\n                    diagnostic.is_unnecessary = is_unnecessary;\n                }\n            }\n        }\n\n        self.update_diagnostic_entries(\n            language_server_id,\n            abs_path,\n            params.version,\n            diagnostics,\n            cx,\n        )?;\n        Ok(())\n    }\n\n    fn insert_newly_running_language_server(\n        &mut self,\n        adapter: Arc<CachedLspAdapter>,\n        language_server: Arc<LanguageServer>,\n        server_id: LanguageServerId,\n        key: (WorktreeId, LanguageServerName),\n        workspace_folders: Arc<Mutex<BTreeSet<Url>>>,\n        cx: &mut Context<Self>,\n    ) {\n        let Some(local) = self.as_local_mut() else {\n            return;\n        };\n        // If the language server for this key doesn't match the server id, don't store the\n        // server. Which will cause it to be dropped, killing the process\n        if local\n            .language_server_ids\n            .get(&key)\n            .map(|ids| !ids.contains(&server_id))\n            .unwrap_or(false)\n        {\n            return;\n        }\n\n        // Update language_servers collection with Running variant of LanguageServerState\n        // indicating that the server is up and running and ready\n        let workspace_folders = workspace_folders.lock().clone();\n        local.language_servers.insert(\n            server_id,\n            LanguageServerState::running(\n                workspace_folders,\n                adapter.clone(),\n                language_server.clone(),\n                None,\n            ),\n        );\n        if let Some(file_ops_caps) = language_server\n            .capabilities()\n            .workspace\n            .as_ref()\n            .and_then(|ws| ws.file_operations.as_ref())\n        {\n            let did_rename_caps = file_ops_caps.did_rename.as_ref();\n            let will_rename_caps = file_ops_caps.will_rename.as_ref();\n            if did_rename_caps.or(will_rename_caps).is_some() {\n                let watcher = RenamePathsWatchedForServer::default()\n                    .with_did_rename_patterns(did_rename_caps)\n                    .with_will_rename_patterns(will_rename_caps);\n                local\n                    .language_server_paths_watched_for_rename\n                    .insert(server_id, watcher);\n            }\n        }\n\n        self.language_server_statuses.insert(\n            server_id,\n            LanguageServerStatus {\n                name: language_server.name().to_string(),\n                pending_work: Default::default(),\n                has_pending_diagnostic_updates: false,\n                progress_tokens: Default::default(),\n            },\n        );\n\n        cx.emit(LspStoreEvent::LanguageServerAdded(\n            server_id,\n            language_server.name(),\n            Some(key.0),\n        ));\n        cx.emit(LspStoreEvent::RefreshInlayHints);\n\n        if let Some((downstream_client, project_id)) = self.downstream_client.as_ref() {\n            downstream_client\n                .send(proto::StartLanguageServer {\n                    project_id: *project_id,\n                    server: Some(proto::LanguageServer {\n                        id: server_id.0 as u64,\n                        name: language_server.name().to_string(),\n                        worktree_id: Some(key.0.to_proto()),\n                    }),\n                })\n                .log_err();\n        }\n\n        // Tell the language server about every open buffer in the worktree that matches the language.\n        self.buffer_store.clone().update(cx, |buffer_store, cx| {\n            for buffer_handle in buffer_store.buffers() {\n                let buffer = buffer_handle.read(cx);\n                let file = match File::from_dyn(buffer.file()) {\n                    Some(file) => file,\n                    None => continue,\n                };\n                let language = match buffer.language() {\n                    Some(language) => language,\n                    None => continue,\n                };\n\n                if file.worktree.read(cx).id() != key.0\n                    || !self\n                        .languages\n                        .lsp_adapters(&language.name())\n                        .iter()\n                        .any(|a| a.name == key.1)\n                {\n                    continue;\n                }\n                // didOpen\n                let file = match file.as_local() {\n                    Some(file) => file,\n                    None => continue,\n                };\n\n                let local = self.as_local_mut().unwrap();\n\n                if local.registered_buffers.contains_key(&buffer.remote_id()) {\n                    let versions = local\n                        .buffer_snapshots\n                        .entry(buffer.remote_id())\n                        .or_default()\n                        .entry(server_id)\n                        .and_modify(|_| {\n                            assert!(\n                            false,\n                            ": "",
    "\n                        )\n                        })\n                        .or_insert_with(|| {\n                            vec![LspBufferSnapshot {\n                                version: 0,\n                                snapshot: buffer.text_snapshot(),\n                            }]\n                        });\n\n                    let snapshot = versions.last().unwrap();\n                    let version = snapshot.version;\n                    let initial_snapshot = &snapshot.snapshot;\n                    let uri = lsp::Url::from_file_path(file.abs_path(cx)).unwrap();\n                    language_server.register_buffer(\n                        uri,\n                        adapter.language_id(&language.name()),\n                        version,\n                        initial_snapshot.text(),\n                    );\n                }\n                buffer_handle.update(cx, |buffer, cx| {\n                    buffer.set_completion_triggers(\n                        server_id,\n                        language_server\n                            .capabilities()\n                            .completion_provider\n                            .as_ref()\n                            .and_then(|provider| {\n                                provider\n                                    .trigger_characters\n                                    .as_ref()\n                                    .map(|characters| characters.iter().cloned().collect())\n                            })\n                            .unwrap_or_default(),\n                        cx,\n                    )\n                });\n            }\n        });\n\n        cx.notify();\n    }\n\n    pub fn language_servers_running_disk_based_diagnostics(\n        &self,\n    ) -> impl Iterator<Item = LanguageServerId> + '_ {\n        self.language_server_statuses\n            .iter()\n            .filter_map(|(id, status)| {\n                if status.has_pending_diagnostic_updates {\n                    Some(*id)\n                } else {\n                    None\n                }\n            })\n    }\n\n    pub(crate) fn cancel_language_server_work_for_buffers(\n        &mut self,\n        buffers: impl IntoIterator<Item = Entity<Buffer>>,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some((client, project_id)) = self.upstream_client() {\n            let request = client.request(proto::CancelLanguageServerWork {\n                project_id,\n                work: Some(proto::cancel_language_server_work::Work::Buffers(\n                    proto::cancel_language_server_work::Buffers {\n                        buffer_ids: buffers\n                            .into_iter()\n                            .map(|b| b.read(cx).remote_id().to_proto())\n                            .collect(),\n                    },\n                )),\n            });\n            cx.background_spawn(request).detach_and_log_err(cx);\n        } else if let Some(local) = self.as_local() {\n            let servers = buffers\n                .into_iter()\n                .flat_map(|buffer| {\n                    buffer.update(cx, |buffer, cx| {\n                        local.language_server_ids_for_buffer(buffer, cx).into_iter()\n                    })\n                })\n                .collect::<HashSet<_>>();\n            for server_id in servers {\n                self.cancel_language_server_work(server_id, None, cx);\n            }\n        }\n    }\n\n    pub(crate) fn cancel_language_server_work(\n        &mut self,\n        server_id: LanguageServerId,\n        token_to_cancel: Option<String>,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some(local) = self.as_local() {\n            let status = self.language_server_statuses.get(&server_id);\n            let server = local.language_servers.get(&server_id);\n            if let Some((LanguageServerState::Running { server, .. }, status)) = server.zip(status)\n            {\n                for (token, progress) in &status.pending_work {\n                    if let Some(token_to_cancel) = token_to_cancel.as_ref() {\n                        if token != token_to_cancel {\n                            continue;\n                        }\n                    }\n                    if progress.is_cancellable {\n                        server\n                            .notify::<lsp::notification::WorkDoneProgressCancel>(\n                                &WorkDoneProgressCancelParams {\n                                    token: lsp::NumberOrString::String(token.clone()),\n                                },\n                            )\n                            .ok();\n                    }\n                }\n            }\n        } else if let Some((client, project_id)) = self.upstream_client() {\n            let request = client.request(proto::CancelLanguageServerWork {\n                project_id,\n                work: Some(\n                    proto::cancel_language_server_work::Work::LanguageServerWork(\n                        proto::cancel_language_server_work::LanguageServerWork {\n                            language_server_id: server_id.to_proto(),\n                            token: token_to_cancel,\n                        },\n                    ),\n                ),\n            });\n            cx.background_spawn(request).detach_and_log_err(cx);\n        }\n    }\n\n    fn register_supplementary_language_server(\n        &mut self,\n        id: LanguageServerId,\n        name: LanguageServerName,\n        server: Arc<LanguageServer>,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some(local) = self.as_local_mut() {\n            local\n                .supplementary_language_servers\n                .insert(id, (name.clone(), server));\n            cx.emit(LspStoreEvent::LanguageServerAdded(id, name, None));\n        }\n    }\n\n    fn unregister_supplementary_language_server(\n        &mut self,\n        id: LanguageServerId,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some(local) = self.as_local_mut() {\n            local.supplementary_language_servers.remove(&id);\n            cx.emit(LspStoreEvent::LanguageServerRemoved(id));\n        }\n    }\n\n    pub(crate) fn supplementary_language_servers(\n        &self,\n    ) -> impl '_ + Iterator<Item = (LanguageServerId, LanguageServerName)> {\n        self.as_local().into_iter().flat_map(|local| {\n            local\n                .supplementary_language_servers\n                .iter()\n                .map(|(id, (name, _))| (*id, name.clone()))\n        })\n    }\n\n    pub fn language_server_adapter_for_id(\n        &self,\n        id: LanguageServerId,\n    ) -> Option<Arc<CachedLspAdapter>> {\n        self.as_local()\n            .and_then(|local| local.language_servers.get(&id))\n            .and_then(|language_server_state| match language_server_state {\n                LanguageServerState::Running { adapter, .. } => Some(adapter.clone()),\n                _ => None,\n            })\n    }\n\n    pub(super) fn update_local_worktree_language_servers(\n        &mut self,\n        worktree_handle: &Entity<Worktree>,\n        changes: &[(Arc<Path>, ProjectEntryId, PathChange)],\n        cx: &mut Context<Self>,\n    ) {\n        if changes.is_empty() {\n            return;\n        }\n\n        let Some(local) = self.as_local() else { return };\n\n        local.prettier_store.update(cx, |prettier_store, cx| {\n            prettier_store.update_prettier_settings(&worktree_handle, changes, cx)\n        });\n\n        let worktree_id = worktree_handle.read(cx).id();\n        let mut language_server_ids = local\n            .language_server_ids\n            .iter()\n            .flat_map(|((server_worktree, _), server_ids)| {\n                server_ids\n                    .iter()\n                    .filter_map(|server_id| server_worktree.eq(&worktree_id).then(|| *server_id))\n            })\n            .collect::<Vec<_>>();\n        language_server_ids.sort();\n        language_server_ids.dedup();\n\n        let abs_path = worktree_handle.read(cx).abs_path();\n        for server_id in &language_server_ids {\n            if let Some(LanguageServerState::Running { server, .. }) =\n                local.language_servers.get(server_id)\n            {\n                if let Some(watched_paths) = local\n                    .language_server_watched_paths\n                    .get(server_id)\n                    .and_then(|paths| paths.worktree_paths.get(&worktree_id))\n                {\n                    let params = lsp::DidChangeWatchedFilesParams {\n                        changes: changes\n                            .iter()\n                            .filter_map(|(path, _, change)| {\n                                if !watched_paths.is_match(path) {\n                                    return None;\n                                }\n                                let typ = match change {\n                                    PathChange::Loaded => return None,\n                                    PathChange::Added => lsp::FileChangeType::CREATED,\n                                    PathChange::Removed => lsp::FileChangeType::DELETED,\n                                    PathChange::Updated => lsp::FileChangeType::CHANGED,\n                                    PathChange::AddedOrUpdated => lsp::FileChangeType::CHANGED,\n                                };\n                                Some(lsp::FileEvent {\n                                    uri: lsp::Url::from_file_path(abs_path.join(path)).unwrap(),\n                                    typ,\n                                })\n                            })\n                            .collect(),\n                    };\n                    if !params.changes.is_empty() {\n                        server\n                            .notify::<lsp::notification::DidChangeWatchedFiles>(&params)\n                            .log_err();\n                    }\n                }\n            }\n        }\n    }\n\n    pub fn wait_for_remote_buffer(\n        &mut self,\n        id: BufferId,\n        cx: &mut Context<Self>,\n    ) -> Task<Result<Entity<Buffer>>> {\n        self.buffer_store.update(cx, |buffer_store, cx| {\n            buffer_store.wait_for_remote_buffer(id, cx)\n        })\n    }\n\n    fn serialize_symbol(symbol: &Symbol) -> proto::Symbol {\n        proto::Symbol {\n            language_server_name: symbol.language_server_name.0.to_string(),\n            source_worktree_id: symbol.source_worktree_id.to_proto(),\n            language_server_id: symbol.source_language_server_id.to_proto(),\n            worktree_id: symbol.path.worktree_id.to_proto(),\n            path: symbol.path.path.as_ref().to_proto(),\n            name: symbol.name.clone(),\n            kind: unsafe { mem::transmute::<lsp::SymbolKind, i32>(symbol.kind) },\n            start: Some(proto::PointUtf16 {\n                row: symbol.range.start.0.row,\n                column: symbol.range.start.0.column,\n            }),\n            end: Some(proto::PointUtf16 {\n                row: symbol.range.end.0.row,\n                column: symbol.range.end.0.column,\n            }),\n            signature: symbol.signature.to_vec(),\n        }\n    }\n\n    fn deserialize_symbol(serialized_symbol: proto::Symbol) -> Result<CoreSymbol> {\n        let source_worktree_id = WorktreeId::from_proto(serialized_symbol.source_worktree_id);\n        let worktree_id = WorktreeId::from_proto(serialized_symbol.worktree_id);\n        let kind = unsafe { mem::transmute::<i32, lsp::SymbolKind>(serialized_symbol.kind) };\n        let path = ProjectPath {\n            worktree_id,\n            path: Arc::<Path>::from_proto(serialized_symbol.path),\n        };\n\n        let start = serialized_symbol\n            .start\n            .ok_or_else(|| anyhow!(": "",
    "))?;\n        let end = serialized_symbol\n            .end\n            .ok_or_else(|| anyhow!(": "",
    "))?;\n        Ok(CoreSymbol {\n            language_server_name: LanguageServerName(serialized_symbol.language_server_name.into()),\n            source_worktree_id,\n            source_language_server_id: LanguageServerId::from_proto(\n                serialized_symbol.language_server_id,\n            ),\n            path,\n            name: serialized_symbol.name,\n            range: Unclipped(PointUtf16::new(start.row, start.column))\n                ..Unclipped(PointUtf16::new(end.row, end.column)),\n            kind,\n            signature: serialized_symbol\n                .signature\n                .try_into()\n                .map_err(|_| anyhow!(": "",
    "))?,\n        })\n    }\n\n    pub(crate) fn serialize_completion(completion: &CoreCompletion) -> proto::Completion {\n        let (source, server_id, lsp_completion, lsp_defaults, resolved) = match &completion.source {\n            CompletionSource::Lsp {\n                server_id,\n                lsp_completion,\n                lsp_defaults,\n                resolved,\n            } => (\n                proto::completion::Source::Lsp as i32,\n                server_id.0 as u64,\n                serde_json::to_vec(lsp_completion).unwrap(),\n                lsp_defaults\n                    .as_deref()\n                    .map(|lsp_defaults| serde_json::to_vec(lsp_defaults).unwrap()),\n                *resolved,\n            ),\n            CompletionSource::Custom => (\n                proto::completion::Source::Custom as i32,\n                0,\n                Vec::new(),\n                None,\n                true,\n            ),\n        };\n\n        proto::Completion {\n            old_start: Some(serialize_anchor(&completion.old_range.start)),\n            old_end: Some(serialize_anchor(&completion.old_range.end)),\n            new_text: completion.new_text.clone(),\n            server_id,\n            lsp_completion,\n            lsp_defaults,\n            resolved,\n            source,\n        }\n    }\n\n    pub(crate) fn deserialize_completion(completion: proto::Completion) -> Result<CoreCompletion> {\n        let old_start = completion\n            .old_start\n            .and_then(deserialize_anchor)\n            .ok_or_else(|| anyhow!(": "",
    "))?;\n        let old_end = completion\n            .old_end\n            .and_then(deserialize_anchor)\n            .ok_or_else(|| anyhow!(": "",
    "))?;\n        Ok(CoreCompletion {\n            old_range: old_start..old_end,\n            new_text: completion.new_text,\n            source: match proto::completion::Source::from_i32(completion.source) {\n                Some(proto::completion::Source::Custom) => CompletionSource::Custom,\n                Some(proto::completion::Source::Lsp) => CompletionSource::Lsp {\n                    server_id: LanguageServerId::from_proto(completion.server_id),\n                    lsp_completion: serde_json::from_slice(&completion.lsp_completion)?,\n                    lsp_defaults: completion\n                        .lsp_defaults\n                        .as_deref()\n                        .map(serde_json::from_slice)\n                        .transpose()?,\n                    resolved: completion.resolved,\n                },\n                _ => anyhow::bail!(": "",
    ", completion.source),\n            },\n        })\n    }\n\n    pub(crate) fn serialize_code_action(action: &CodeAction) -> proto::CodeAction {\n        let (kind, lsp_action) = match &action.lsp_action {\n            LspAction::Action(code_action) => (\n                proto::code_action::Kind::Action as i32,\n                serde_json::to_vec(code_action).unwrap(),\n            ),\n            LspAction::Command(command) => (\n                proto::code_action::Kind::Command as i32,\n                serde_json::to_vec(command).unwrap(),\n            ),\n        };\n\n        proto::CodeAction {\n            server_id: action.server_id.0 as u64,\n            start: Some(serialize_anchor(&action.range.start)),\n            end: Some(serialize_anchor(&action.range.end)),\n            lsp_action,\n            kind,\n        }\n    }\n\n    pub(crate) fn deserialize_code_action(action: proto::CodeAction) -> Result<CodeAction> {\n        let start = action\n            .start\n            .and_then(deserialize_anchor)\n            .ok_or_else(|| anyhow!(": "",
    "))?;\n        let end = action\n            .end\n            .and_then(deserialize_anchor)\n            .ok_or_else(|| anyhow!(": "",
    "))?;\n        let lsp_action = match proto::code_action::Kind::from_i32(action.kind) {\n            Some(proto::code_action::Kind::Action) => {\n                LspAction::Action(serde_json::from_slice(&action.lsp_action)?)\n            }\n            Some(proto::code_action::Kind::Command) => {\n                LspAction::Command(serde_json::from_slice(&action.lsp_action)?)\n            }\n            None => anyhow::bail!(": "",
    ", action.kind),\n        };\n        Ok(CodeAction {\n            server_id: LanguageServerId(action.server_id as usize),\n            range: start..end,\n            lsp_action,\n        })\n    }\n\n    fn update_last_formatting_failure<T>(&mut self, formatting_result: &anyhow::Result<T>) {\n        match &formatting_result {\n            Ok(_) => self.last_formatting_failure = None,\n            Err(error) => {\n                let error_string = format!(": "",
    ");\n                log::error!(": "",
    ");\n                self.last_formatting_failure\n                    .replace(error_string.lines().join(": "",
    "));\n            }\n        }\n    }\n}\n\nimpl EventEmitter<LspStoreEvent> for LspStore {}\n\nfn remove_empty_hover_blocks(mut hover: Hover) -> Option<Hover> {\n    hover\n        .contents\n        .retain(|hover_block| !hover_block.text.trim().is_empty());\n    if hover.contents.is_empty() {\n        None\n    } else {\n        Some(hover)\n    }\n}\n\nasync fn populate_labels_for_completions(\n    new_completions: Vec<CoreCompletion>,\n    language: Option<Arc<Language>>,\n    lsp_adapter: Option<Arc<CachedLspAdapter>>,\n    completions: &mut Vec<Completion>,\n) {\n    let lsp_completions = new_completions\n        .iter()\n        .filter_map(|new_completion| {\n            if let Some(lsp_completion) = new_completion.source.lsp_completion(true) {\n                Some(lsp_completion.into_owned())\n            } else {\n                None\n            }\n        })\n        .collect::<Vec<_>>();\n\n    let mut labels = if let Some((language, lsp_adapter)) = language.as_ref().zip(lsp_adapter) {\n        lsp_adapter\n            .labels_for_completions(&lsp_completions, language)\n            .await\n            .log_err()\n            .unwrap_or_default()\n    } else {\n        Vec::new()\n    }\n    .into_iter()\n    .fuse();\n\n    for completion in new_completions {\n        match completion.source.lsp_completion(true) {\n            Some(lsp_completion) => {\n                let documentation = if let Some(docs) = lsp_completion.documentation.clone() {\n                    Some(docs.into())\n                } else {\n                    None\n                };\n\n                let mut label = labels.next().flatten().unwrap_or_else(|| {\n                    CodeLabel::fallback_for_completion(&lsp_completion, language.as_deref())\n                });\n                ensure_uniform_list_compatible_label(&mut label);\n                completions.push(Completion {\n                    label,\n                    documentation,\n                    old_range: completion.old_range,\n                    new_text: completion.new_text,\n                    source: completion.source,\n                    confirm: None,\n                });\n            }\n            None => {\n                let mut label = CodeLabel::plain(completion.new_text.clone(), None);\n                ensure_uniform_list_compatible_label(&mut label);\n                completions.push(Completion {\n                    label,\n                    documentation: None,\n                    old_range: completion.old_range,\n                    new_text: completion.new_text,\n                    source: completion.source,\n                    confirm: None,\n                });\n            }\n        }\n    }\n}\n\n#[derive(Debug)]\npub enum LanguageServerToQuery {\n    /// Query language servers in order of users preference, up until one capable of handling the request is found.\n    FirstCapable,\n    /// Query a specific language server.\n    Other(LanguageServerId),\n}\n\n#[derive(Default)]\nstruct RenamePathsWatchedForServer {\n    did_rename: Vec<RenameActionPredicate>,\n    will_rename: Vec<RenameActionPredicate>,\n}\n\nimpl RenamePathsWatchedForServer {\n    fn with_did_rename_patterns(\n        mut self,\n        did_rename: Option<&FileOperationRegistrationOptions>,\n    ) -> Self {\n        if let Some(did_rename) = did_rename {\n            self.did_rename = did_rename\n                .filters\n                .iter()\n                .filter_map(|filter| filter.try_into().log_err())\n                .collect();\n        }\n        self\n    }\n    fn with_will_rename_patterns(\n        mut self,\n        will_rename: Option<&FileOperationRegistrationOptions>,\n    ) -> Self {\n        if let Some(will_rename) = will_rename {\n            self.will_rename = will_rename\n                .filters\n                .iter()\n                .filter_map(|filter| filter.try_into().log_err())\n                .collect();\n        }\n        self\n    }\n\n    fn should_send_did_rename(&self, path: &str, is_dir: bool) -> bool {\n        self.did_rename.iter().any(|pred| pred.eval(path, is_dir))\n    }\n    fn should_send_will_rename(&self, path: &str, is_dir: bool) -> bool {\n        self.will_rename.iter().any(|pred| pred.eval(path, is_dir))\n    }\n}\n\nimpl TryFrom<&FileOperationFilter> for RenameActionPredicate {\n    type Error = globset::Error;\n    fn try_from(ops: &FileOperationFilter) -> Result<Self, globset::Error> {\n        Ok(Self {\n            kind: ops.pattern.matches.clone(),\n            glob: GlobBuilder::new(&ops.pattern.glob)\n                .case_insensitive(\n                    ops.pattern\n                        .options\n                        .as_ref()\n                        .map_or(false, |ops| ops.ignore_case.unwrap_or(false)),\n                )\n                .build()?\n                .compile_matcher(),\n        })\n    }\n}\nstruct RenameActionPredicate {\n    glob: GlobMatcher,\n    kind: Option<FileOperationPatternKind>,\n}\n\nimpl RenameActionPredicate {\n    // Returns true if language server should be notified\n    fn eval(&self, path: &str, is_dir: bool) -> bool {\n        self.kind.as_ref().map_or(true, |kind| {\n            let expected_kind = if is_dir {\n                FileOperationPatternKind::Folder\n            } else {\n                FileOperationPatternKind::File\n            };\n            kind == &expected_kind\n        }) && self.glob.is_match(path)\n    }\n}\n\n#[derive(Default)]\nstruct LanguageServerWatchedPaths {\n    worktree_paths: HashMap<WorktreeId, GlobSet>,\n    abs_paths: HashMap<Arc<Path>, (GlobSet, Task<()>)>,\n}\n\n#[derive(Default)]\nstruct LanguageServerWatchedPathsBuilder {\n    worktree_paths: HashMap<WorktreeId, GlobSet>,\n    abs_paths: HashMap<Arc<Path>, GlobSet>,\n}\n\nimpl LanguageServerWatchedPathsBuilder {\n    fn watch_worktree(&mut self, worktree_id: WorktreeId, glob_set: GlobSet) {\n        self.worktree_paths.insert(worktree_id, glob_set);\n    }\n    fn watch_abs_path(&mut self, path: Arc<Path>, glob_set: GlobSet) {\n        self.abs_paths.insert(path, glob_set);\n    }\n    fn build(\n        self,\n        fs: Arc<dyn Fs>,\n        language_server_id: LanguageServerId,\n        cx: &mut Context<LspStore>,\n    ) -> LanguageServerWatchedPaths {\n        let project = cx.weak_entity();\n\n        const LSP_ABS_PATH_OBSERVE: Duration = Duration::from_millis(100);\n        let abs_paths = self\n            .abs_paths\n            .into_iter()\n            .map(|(abs_path, globset)| {\n                let task = cx.spawn({\n                    let abs_path = abs_path.clone();\n                    let fs = fs.clone();\n\n                    let lsp_store = project.clone();\n                    |_, mut cx| async move {\n                        maybe!(async move {\n                            let mut push_updates = fs.watch(&abs_path, LSP_ABS_PATH_OBSERVE).await;\n                            while let Some(update) = push_updates.0.next().await {\n                                let action = lsp_store\n                                    .update(&mut cx, |this, _| {\n                                        let Some(local) = this.as_local() else {\n                                            return ControlFlow::Break(());\n                                        };\n                                        let Some(watcher) = local\n                                            .language_server_watched_paths\n                                            .get(&language_server_id)\n                                        else {\n                                            return ControlFlow::Break(());\n                                        };\n                                        let (globs, _) = watcher.abs_paths.get(&abs_path).expect(\n                                            ": "",
    ",\n                                        );\n                                        let matching_entries = update\n                                            .into_iter()\n                                            .filter(|event| globs.is_match(&event.path))\n                                            .collect::<Vec<_>>();\n                                        this.lsp_notify_abs_paths_changed(\n                                            language_server_id,\n                                            matching_entries,\n                                        );\n                                        ControlFlow::Continue(())\n                                    })\n                                    .ok()?;\n\n                                if action.is_break() {\n                                    break;\n                                }\n                            }\n                            Some(())\n                        })\n                        .await;\n                    }\n                });\n                (abs_path, (globset, task))\n            })\n            .collect();\n        LanguageServerWatchedPaths {\n            worktree_paths: self.worktree_paths,\n            abs_paths,\n        }\n    }\n}\n\nstruct LspBufferSnapshot {\n    version: i32,\n    snapshot: TextBufferSnapshot,\n}\n\n/// A prompt requested by LSP server.\n#[derive(Clone, Debug)]\npub struct LanguageServerPromptRequest {\n    pub level: PromptLevel,\n    pub message: String,\n    pub actions: Vec<MessageActionItem>,\n    pub lsp_name: String,\n    pub(crate) response_channel: Sender<MessageActionItem>,\n}\n\nimpl LanguageServerPromptRequest {\n    pub async fn respond(self, index: usize) -> Option<()> {\n        if let Some(response) = self.actions.into_iter().nth(index) {\n            self.response_channel.send(response).await.ok()\n        } else {\n            None\n        }\n    }\n}\nimpl PartialEq for LanguageServerPromptRequest {\n    fn eq(&self, other: &Self) -> bool {\n        self.message == other.message && self.actions == other.actions\n    }\n}\n\n#[derive(Clone, Debug, PartialEq)]\npub enum LanguageServerLogType {\n    Log(MessageType),\n    Trace(Option<String>),\n}\n\nimpl LanguageServerLogType {\n    pub fn to_proto(&self) -> proto::language_server_log::LogType {\n        match self {\n            Self::Log(log_type) => {\n                let message_type = match *log_type {\n                    MessageType::ERROR => 1,\n                    MessageType::WARNING => 2,\n                    MessageType::INFO => 3,\n                    MessageType::LOG => 4,\n                    other => {\n                        log::warn!(": "",
    ", other);\n                        4\n                    }\n                };\n                proto::language_server_log::LogType::LogMessageType(message_type)\n            }\n            Self::Trace(message) => {\n                proto::language_server_log::LogType::LogTrace(proto::LspLogTrace {\n                    message: message.clone(),\n                })\n            }\n        }\n    }\n\n    pub fn from_proto(log_type: proto::language_server_log::LogType) -> Self {\n        match log_type {\n            proto::language_server_log::LogType::LogMessageType(message_type) => {\n                Self::Log(match message_type {\n                    1 => MessageType::ERROR,\n                    2 => MessageType::WARNING,\n                    3 => MessageType::INFO,\n                    4 => MessageType::LOG,\n                    _ => MessageType::LOG,\n                })\n            }\n            proto::language_server_log::LogType::LogTrace(trace) => Self::Trace(trace.message),\n        }\n    }\n}\n\npub enum LanguageServerState {\n    Starting {\n        startup: Task<Option<Arc<LanguageServer>>>,\n        /// List of language servers that will be added to the workspace once it's initialization completes.\n        pending_workspace_folders: Arc<Mutex<BTreeSet<Url>>>,\n    },\n\n    Running {\n        adapter: Arc<CachedLspAdapter>,\n        server: Arc<LanguageServer>,\n        simulate_disk_based_diagnostics_completion: Option<Task<()>>,\n    },\n}\n\nimpl LanguageServerState {\n    fn add_workspace_folder(&self, uri: Url) {\n        match self {\n            LanguageServerState::Starting {\n                pending_workspace_folders,\n                ..\n            } => {\n                pending_workspace_folders.lock().insert(uri);\n            }\n            LanguageServerState::Running { server, .. } => {\n                server.add_workspace_folder(uri);\n            }\n        }\n    }\n    fn _remove_workspace_folder(&self, uri: Url) {\n        match self {\n            LanguageServerState::Starting {\n                pending_workspace_folders,\n                ..\n            } => {\n                pending_workspace_folders.lock().remove(&uri);\n            }\n            LanguageServerState::Running { server, .. } => server.remove_workspace_folder(uri),\n        }\n    }\n    fn running(\n        workspace_folders: BTreeSet<Url>,\n        adapter: Arc<CachedLspAdapter>,\n        server: Arc<LanguageServer>,\n        simulate_disk_based_diagnostics_completion: Option<Task<()>>,\n    ) -> Self {\n        server.set_workspace_folders(workspace_folders);\n        Self::Running {\n            adapter,\n            server,\n            simulate_disk_based_diagnostics_completion,\n        }\n    }\n}\n\nimpl std::fmt::Debug for LanguageServerState {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        match self {\n            LanguageServerState::Starting { .. } => {\n                f.debug_struct(": "",
    ").finish()\n            }\n            LanguageServerState::Running { .. } => {\n                f.debug_struct(": "",
    ").finish()\n            }\n        }\n    }\n}\n\n#[derive(Clone, Debug, Serialize)]\npub struct LanguageServerProgress {\n    pub is_disk_based_diagnostics_progress: bool,\n    pub is_cancellable: bool,\n    pub title: Option<String>,\n    pub message: Option<String>,\n    pub percentage: Option<usize>,\n    #[serde(skip_serializing)]\n    pub last_update_at: Instant,\n}\n\n#[derive(Copy, Clone, Debug, Default, PartialEq, Serialize)]\npub struct DiagnosticSummary {\n    pub error_count: usize,\n    pub warning_count: usize,\n}\n\nimpl DiagnosticSummary {\n    pub fn new<'a, T: 'a>(diagnostics: impl IntoIterator<Item = &'a DiagnosticEntry<T>>) -> Self {\n        let mut this = Self {\n            error_count: 0,\n            warning_count: 0,\n        };\n\n        for entry in diagnostics {\n            if entry.diagnostic.is_primary {\n                match entry.diagnostic.severity {\n                    DiagnosticSeverity::ERROR => this.error_count += 1,\n                    DiagnosticSeverity::WARNING => this.warning_count += 1,\n                    _ => {}\n                }\n            }\n        }\n\n        this\n    }\n\n    pub fn is_empty(&self) -> bool {\n        self.error_count == 0 && self.warning_count == 0\n    }\n\n    pub fn to_proto(\n        &self,\n        language_server_id: LanguageServerId,\n        path: &Path,\n    ) -> proto::DiagnosticSummary {\n        proto::DiagnosticSummary {\n            path: path.to_proto(),\n            language_server_id: language_server_id.0 as u64,\n            error_count: self.error_count as u32,\n            warning_count: self.warning_count as u32,\n        }\n    }\n}\n\n#[derive(Clone, Debug)]\npub enum CompletionDocumentation {\n    /// There is no documentation for this completion.\n    Undocumented,\n    /// A single line of documentation.\n    SingleLine(SharedString),\n    /// Multiple lines of plain text documentation.\n    MultiLinePlainText(SharedString),\n    /// Markdown documentation.\n    MultiLineMarkdown(SharedString),\n}\n\nimpl From<lsp::Documentation> for CompletionDocumentation {\n    fn from(docs: lsp::Documentation) -> Self {\n        match docs {\n            lsp::Documentation::String(text) => {\n                if text.lines().count() <= 1 {\n                    CompletionDocumentation::SingleLine(text.into())\n                } else {\n                    CompletionDocumentation::MultiLinePlainText(text.into())\n                }\n            }\n\n            lsp::Documentation::MarkupContent(lsp::MarkupContent { kind, value }) => match kind {\n                lsp::MarkupKind::PlainText => {\n                    if value.lines().count() <= 1 {\n                        CompletionDocumentation::SingleLine(value.into())\n                    } else {\n                        CompletionDocumentation::MultiLinePlainText(value.into())\n                    }\n                }\n\n                lsp::MarkupKind::Markdown => {\n                    CompletionDocumentation::MultiLineMarkdown(value.into())\n                }\n            },\n        }\n    }\n}\n\nfn glob_literal_prefix(glob: &Path) -> PathBuf {\n    glob.components()\n        .take_while(|component| match component {\n            path::Component::Normal(part) => !part.to_string_lossy().contains(['*', '?', '{', '}']),\n            _ => true,\n        })\n        .collect()\n}\n\npub struct SshLspAdapter {\n    name: LanguageServerName,\n    binary: LanguageServerBinary,\n    initialization_options: Option<String>,\n    code_action_kinds: Option<Vec<CodeActionKind>>,\n}\n\nimpl SshLspAdapter {\n    pub fn new(\n        name: LanguageServerName,\n        binary: LanguageServerBinary,\n        initialization_options: Option<String>,\n        code_action_kinds: Option<String>,\n    ) -> Self {\n        Self {\n            name,\n            binary,\n            initialization_options,\n            code_action_kinds: code_action_kinds\n                .as_ref()\n                .and_then(|c| serde_json::from_str(c).ok()),\n        }\n    }\n}\n\n#[async_trait(?Send)]\nimpl LspAdapter for SshLspAdapter {\n    fn name(&self) -> LanguageServerName {\n        self.name.clone()\n    }\n\n    async fn initialization_options(\n        self: Arc<Self>,\n        _: &dyn Fs,\n        _: &Arc<dyn LspAdapterDelegate>,\n    ) -> Result<Option<serde_json::Value>> {\n        let Some(options) = &self.initialization_options else {\n            return Ok(None);\n        };\n        let result = serde_json::from_str(options)?;\n        Ok(result)\n    }\n\n    fn code_action_kinds(&self) -> Option<Vec<CodeActionKind>> {\n        self.code_action_kinds.clone()\n    }\n\n    async fn check_if_user_installed(\n        &self,\n        _: &dyn LspAdapterDelegate,\n        _: Arc<dyn LanguageToolchainStore>,\n        _: &AsyncApp,\n    ) -> Option<LanguageServerBinary> {\n        Some(self.binary.clone())\n    }\n\n    async fn cached_server_binary(\n        &self,\n        _: PathBuf,\n        _: &dyn LspAdapterDelegate,\n    ) -> Option<LanguageServerBinary> {\n        None\n    }\n\n    async fn fetch_latest_server_version(\n        &self,\n        _: &dyn LspAdapterDelegate,\n    ) -> Result<Box<dyn 'static + Send + Any>> {\n        anyhow::bail!(": "",
    ")\n    }\n\n    async fn fetch_server_binary(\n        &self,\n        _: Box<dyn 'static + Send + Any>,\n        _: PathBuf,\n        _: &dyn LspAdapterDelegate,\n    ) -> Result<LanguageServerBinary> {\n        anyhow::bail!(": "",
    ")\n    }\n}\n\npub fn language_server_settings<'a>(\n    delegate: &'a dyn LspAdapterDelegate,\n    language: &LanguageServerName,\n    cx: &'a App,\n) -> Option<&'a LspSettings> {\n    language_server_settings_for(\n        SettingsLocation {\n            worktree_id: delegate.worktree_id(),\n            path: delegate.worktree_root_path(),\n        },\n        language,\n        cx,\n    )\n}\n\npub(crate) fn language_server_settings_for<'a>(\n    location: SettingsLocation<'a>,\n    language: &LanguageServerName,\n    cx: &'a App,\n) -> Option<&'a LspSettings> {\n    ProjectSettings::get(Some(location), cx).lsp.get(language)\n}\n\npub struct LocalLspAdapterDelegate {\n    lsp_store: WeakEntity<LspStore>,\n    worktree: worktree::Snapshot,\n    fs: Arc<dyn Fs>,\n    http_client: Arc<dyn HttpClient>,\n    language_registry: Arc<LanguageRegistry>,\n    load_shell_env_task: Shared<Task<Option<HashMap<String, String>>>>,\n}\n\nimpl LocalLspAdapterDelegate {\n    pub fn new(\n        language_registry: Arc<LanguageRegistry>,\n        environment: &Entity<ProjectEnvironment>,\n        lsp_store: WeakEntity<LspStore>,\n        worktree: &Entity<Worktree>,\n        http_client: Arc<dyn HttpClient>,\n        fs: Arc<dyn Fs>,\n        cx: &mut App,\n    ) -> Arc<Self> {\n        let (worktree_id, worktree_abs_path) = {\n            let worktree = worktree.read(cx);\n            (worktree.id(), worktree.abs_path())\n        };\n\n        let load_shell_env_task = environment.update(cx, |env, cx| {\n            env.get_environment(Some(worktree_id), Some(worktree_abs_path), cx)\n        });\n\n        Arc::new(Self {\n            lsp_store,\n            worktree: worktree.read(cx).snapshot(),\n            fs,\n            http_client,\n            language_registry,\n            load_shell_env_task,\n        })\n    }\n\n    fn from_local_lsp(\n        local: &LocalLspStore,\n        worktree: &Entity<Worktree>,\n        cx: &mut App,\n    ) -> Arc<Self> {\n        Self::new(\n            local.languages.clone(),\n            &local.environment,\n            local.weak.clone(),\n            worktree,\n            local.http_client.clone(),\n            local.fs.clone(),\n            cx,\n        )\n    }\n}\n\n#[async_trait]\nimpl LspAdapterDelegate for LocalLspAdapterDelegate {\n    fn show_notification(&self, message: &str, cx: &mut App) {\n        self.lsp_store\n            .update(cx, |_, cx| {\n                cx.emit(LspStoreEvent::Notification(message.to_owned()))\n            })\n            .ok();\n    }\n\n    fn http_client(&self) -> Arc<dyn HttpClient> {\n        self.http_client.clone()\n    }\n\n    fn worktree_id(&self) -> WorktreeId {\n        self.worktree.id()\n    }\n\n    fn exists(&self, path: &Path, is_dir: Option<bool>) -> bool {\n        self.worktree.entry_for_path(path).map_or(false, |entry| {\n            is_dir.map_or(true, |is_required_to_be_dir| {\n                is_required_to_be_dir == entry.is_dir()\n            })\n        })\n    }\n\n    fn worktree_root_path(&self) -> &Path {\n        self.worktree.abs_path().as_ref()\n    }\n\n    async fn shell_env(&self) -> HashMap<String, String> {\n        let task = self.load_shell_env_task.clone();\n        task.await.unwrap_or_default()\n    }\n\n    async fn npm_package_installed_version(\n        &self,\n        package_name: &str,\n    ) -> Result<Option<(PathBuf, String)>> {\n        let local_package_directory = self.worktree_root_path();\n        let node_modules_directory = local_package_directory.join(": "",
    ");\n\n        if let Some(version) =\n            read_package_installed_version(node_modules_directory.clone(), package_name).await?\n        {\n            return Ok(Some((node_modules_directory, version)));\n        }\n        let Some(npm) = self.which(": "",
    ".as_ref()).await else {\n            log::warn!(\n                ": "",
    ",\n                local_package_directory\n            );\n            return Ok(None);\n        };\n\n        let env = self.shell_env().await;\n        let output = util::command::new_smol_command(&npm)\n            .args([": "",
    ", ": "",
    "])\n            .envs(env)\n            .current_dir(local_package_directory)\n            .output()\n            .await?;\n        let global_node_modules =\n            PathBuf::from(String::from_utf8_lossy(&output.stdout).to_string());\n\n        if let Some(version) =\n            read_package_installed_version(global_node_modules.clone(), package_name).await?\n        {\n            return Ok(Some((global_node_modules, version)));\n        }\n        return Ok(None);\n    }\n\n    #[cfg(not(target_os = ": "",
    "))]\n    async fn which(&self, command: &OsStr) -> Option<PathBuf> {\n        let worktree_abs_path = self.worktree.abs_path();\n        let shell_path = self.shell_env().await.get(": "",
    ").cloned();\n        which::which_in(command, shell_path.as_ref(), worktree_abs_path).ok()\n    }\n\n    #[cfg(target_os = ": "",
    ")]\n    async fn which(&self, command: &OsStr) -> Option<PathBuf> {\n        // todo(windows) Getting the shell env variables in a current directory on Windows is more complicated than other platforms\n        //               there isn't a 'default shell' necessarily. The closest would be the default profile on the windows terminal\n        //               SEE: https://learn.microsoft.com/en-us/windows/terminal/customize-settings/startup\n        which::which(command).ok()\n    }\n\n    async fn try_exec(&self, command: LanguageServerBinary) -> Result<()> {\n        let working_dir = self.worktree_root_path();\n        let output = util::command::new_smol_command(&command.path)\n            .args(command.arguments)\n            .envs(command.env.clone().unwrap_or_default())\n            .current_dir(working_dir)\n            .output()\n            .await?;\n\n        if output.status.success() {\n            return Ok(());\n        }\n        Err(anyhow!(\n            ": "",
    ",\n            output.status,\n            String::from_utf8_lossy(&output.stdout),\n            String::from_utf8_lossy(&output.stderr)\n        ))\n    }\n\n    fn update_status(\n        &self,\n        server_name: LanguageServerName,\n        status: language::LanguageServerBinaryStatus,\n    ) {\n        self.language_registry\n            .update_lsp_status(server_name, status);\n    }\n\n    async fn language_server_download_dir(&self, name: &LanguageServerName) -> Option<Arc<Path>> {\n        let dir = self.language_registry.language_server_download_dir(name)?;\n\n        if !dir.exists() {\n            smol::fs::create_dir_all(&dir)\n                .await\n                .context(": "",
    ")\n                .log_err()?;\n        }\n\n        Some(dir)\n    }\n\n    async fn read_text_file(&self, path: PathBuf) -> Result<String> {\n        let entry = self\n            .worktree\n            .entry_for_path(&path)\n            .with_context(|| format!(": "",
    "))?;\n        let abs_path = self\n            .worktree\n            .absolutize(&entry.path)\n            .with_context(|| format!(": "",
    "))?;\n\n        self.fs.load(&abs_path).await\n    }\n}\n\nasync fn populate_labels_for_symbols(\n    symbols: Vec<CoreSymbol>,\n    language_registry: &Arc<LanguageRegistry>,\n    lsp_adapter: Option<Arc<CachedLspAdapter>>,\n    output: &mut Vec<Symbol>,\n) {\n    #[allow(clippy::mutable_key_type)]\n    let mut symbols_by_language = HashMap::<Option<Arc<Language>>, Vec<CoreSymbol>>::default();\n\n    let mut unknown_paths = BTreeSet::new();\n    for symbol in symbols {\n        let language = language_registry\n            .language_for_file_path(&symbol.path.path)\n            .await\n            .ok()\n            .or_else(|| {\n                unknown_paths.insert(symbol.path.path.clone());\n                None\n            });\n        symbols_by_language\n            .entry(language)\n            .or_default()\n            .push(symbol);\n    }\n\n    for unknown_path in unknown_paths {\n        log::info!(\n            ": "",
    ",\n            unknown_path.display()\n        );\n    }\n\n    let mut label_params = Vec::new();\n    for (language, mut symbols) in symbols_by_language {\n        label_params.clear();\n        label_params.extend(\n            symbols\n                .iter_mut()\n                .map(|symbol| (mem::take(&mut symbol.name), symbol.kind)),\n        );\n\n        let mut labels = Vec::new();\n        if let Some(language) = language {\n            let lsp_adapter = lsp_adapter.clone().or_else(|| {\n                language_registry\n                    .lsp_adapters(&language.name())\n                    .first()\n                    .cloned()\n            });\n            if let Some(lsp_adapter) = lsp_adapter {\n                labels = lsp_adapter\n                    .labels_for_symbols(&label_params, &language)\n                    .await\n                    .log_err()\n                    .unwrap_or_default();\n            }\n        }\n\n        for ((symbol, (name, _)), label) in symbols\n            .into_iter()\n            .zip(label_params.drain(..))\n            .zip(labels.into_iter().chain(iter::repeat(None)))\n        {\n            output.push(Symbol {\n                language_server_name: symbol.language_server_name,\n                source_worktree_id: symbol.source_worktree_id,\n                source_language_server_id: symbol.source_language_server_id,\n                path: symbol.path,\n                label: label.unwrap_or_else(|| CodeLabel::plain(name.clone(), None)),\n                name,\n                kind: symbol.kind,\n                range: symbol.range,\n                signature: symbol.signature,\n            });\n        }\n    }\n}\n\nfn include_text(server: &lsp::LanguageServer) -> Option<bool> {\n    match server.capabilities().text_document_sync.as_ref()? {\n        lsp::TextDocumentSyncCapability::Kind(kind) => match *kind {\n            lsp::TextDocumentSyncKind::NONE => None,\n            lsp::TextDocumentSyncKind::FULL => Some(true),\n            lsp::TextDocumentSyncKind::INCREMENTAL => Some(false),\n            _ => None,\n        },\n        lsp::TextDocumentSyncCapability::Options(options) => match options.save.as_ref()? {\n            lsp::TextDocumentSyncSaveOptions::Supported(supported) => {\n                if *supported {\n                    Some(true)\n                } else {\n                    None\n                }\n            }\n            lsp::TextDocumentSyncSaveOptions::SaveOptions(save_options) => {\n                Some(save_options.include_text.unwrap_or(false))\n            }\n        },\n    }\n}\n\n/// Completion items are displayed in a `UniformList`.\n/// Usually, those items are single-line strings, but in LSP responses,\n/// completion items `label`, `detail` and `label_details.description` may contain newlines or long spaces.\n/// Many language plugins construct these items by joining these parts together, and we may use `CodeLabel::fallback_for_completion` that uses `label` at least.\n/// All that may lead to a newline being inserted into resulting `CodeLabel.text`, which will force `UniformList` to bloat each entry to occupy more space,\n/// breaking the completions menu presentation.\n///\n/// Sanitize the text to ensure there are no newlines, or, if there are some, remove them and also remove long space sequences if there were newlines.\nfn ensure_uniform_list_compatible_label(label: &mut CodeLabel) {\n    let mut new_text = String::with_capacity(label.text.len());\n    let mut offset_map = vec![0; label.text.len() + 1];\n    let mut last_char_was_space = false;\n    let mut new_idx = 0;\n    let mut chars = label.text.char_indices().fuse();\n    let mut newlines_removed = false;\n\n    while let Some((idx, c)) = chars.next() {\n        offset_map[idx] = new_idx;\n\n        match c {\n            '\n' if last_char_was_space => {\n                newlines_removed = true;\n            }\n            '\\t' | ' ' if last_char_was_space => {}\n            '\n' if !last_char_was_space => {\n                new_text.push(' ');\n                new_idx += 1;\n                last_char_was_space = true;\n                newlines_removed = true;\n            }\n            ' ' | '\\t' => {\n                new_text.push(' ');\n                new_idx += 1;\n                last_char_was_space = true;\n            }\n            _ => {\n                new_text.push(c);\n                new_idx += c.len_utf8();\n                last_char_was_space = false;\n            }\n        }\n    }\n    offset_map[label.text.len()] = new_idx;\n\n    // Only modify the label if newlines were removed.\n    if !newlines_removed {\n        return;\n    }\n\n    let last_index = new_idx;\n    let mut run_ranges_errors = Vec::new();\n    label.runs.retain_mut(|(range, _)| {\n        match offset_map.get(range.start) {\n            Some(&start) => range.start = start,\n            None => {\n                run_ranges_errors.push(range.clone());\n                return false;\n            }\n        }\n\n        match offset_map.get(range.end) {\n            Some(&end) => range.end = end,\n            None => {\n                run_ranges_errors.push(range.clone());\n                range.end = last_index;\n            }\n        }\n        true\n    });\n    if !run_ranges_errors.is_empty() {\n        log::error!(\n            ": "",
    ",\n            label.text\n        );\n    }\n\n    let mut wrong_filter_range = None;\n    if label.filter_range == (0..label.text.len()) {\n        label.filter_range = 0..new_text.len();\n    } else {\n        let mut original_filter_range = Some(label.filter_range.clone());\n        match offset_map.get(label.filter_range.start) {\n            Some(&start) => label.filter_range.start = start,\n            None => {\n                wrong_filter_range = original_filter_range.take();\n                label.filter_range.start = last_index;\n            }\n        }\n\n        match offset_map.get(label.filter_range.end) {\n            Some(&end) => label.filter_range.end = end,\n            None => {\n                wrong_filter_range = original_filter_range.take();\n                label.filter_range.end = last_index;\n            }\n        }\n    }\n    if let Some(wrong_filter_range) = wrong_filter_range {\n        log::error!(\n            ": "",
    ",\n            label.text\n        );\n    }\n\n    label.text = new_text;\n}\n\n#[cfg(test)]\nmod tests {\n    use language::HighlightId;\n\n    use super::*;\n\n    #[test]\n    fn test_glob_literal_prefix() {\n        assert_eq!(glob_literal_prefix(Path::new(": "",
    ")), Path::new(": "",
    "));\n        assert_eq!(\n            glob_literal_prefix(Path::new(": "",
    ")),\n            Path::new(": "",
    ")\n        );\n        assert_eq!(\n            glob_literal_prefix(Path::new(": "",
    ")\n        );\n\n        #[cfg(target_os = ": "",
    ")]\n        {\n            assert_eq!(glob_literal_prefix(Path::new(": "",
    "));\n            assert_eq!(\n                glob_literal_prefix(Path::new(": "",
    ")),\n                Path::new(": "",
    ")\n            );\n            assert_eq!(\n                glob_literal_prefix(Path::new(": "",
    ")\n            );\n        }\n    }\n\n    #[test]\n    fn test_multi_len_chars_normalization() {\n        let mut label = CodeLabel {\n            text: ": "",
    ".to_string(),\n            runs: vec![(0..6, HighlightId(1))],\n            filter_range: 0..6,\n        };\n        ensure_uniform_list_compatible_label(&mut label);\n        assert_eq!(\n            label,\n            CodeLabel {\n                text: ": ""
  },
  "zed/crates/project/src/prettier_store.rs": {
    "Found already started prettier in {prettier_dir:?}": "",
    "Found prettier in {prettier_dir:?}, starting.": "",
    "Failed to determine prettier path for buffer: {e:#}": "",
    "Found prettier ignore in {ignore_dir:?}": "",
    "Failed to determine prettier ignore path for buffer: {e:#}": "",
    "Starting prettier at path {prettier_dir:?}": "",
    "default prettier spawn": "",
    "Default prettier is not installed and cannot be started": "",
    "Waiting for default prettier to install": "",
    "Cannot start default prettier due to its installation failure: {e:#}": "",
    "Started default prettier in {prettier_dir:?}": "",
    "Started prettier in {prettier_dir:?}": "",
    "prettier (default)": "",
    "prettier ({name})": "",
    "prettier ({})": "",
    "node_modules": "",
    "Prettier config file {config_path:?} changed, reloading prettier instances for worktree {current_worktree_id}": "",
    "Failed to clear prettier {prettier_path:?} cache for worktree {worktree_id:?} on prettier settings update: {e:#}": "",
    "Failed to clear default prettier cache for worktree {worktree_id:?} on prettier settings update: {e:#}": "",
    "Default prettier installation had failed {installation_attempt} times, not attempting again": "",
    "Initializing default prettier with plugins {new_plugins:?}": "",
    "locate prettier installation": "",
    "Failed to install default prettier: {e:#}": "",
    "prettier & plugins install": "",
    "Initialized prettier with plugins: {installed_plugins:?}": "",
    "prettier at {path:?}": "",
    "default prettier instance": "",
    "{} failed to format buffer": "",
    "{} failed to spawn: {error:#}": "",
    "Prettier from path {prettier_dir:?} exceeded launch threshold, not starting": "",
    "Default prettier exceeded launch threshold, not starting": "",
    "prettier": "",
    "fetching latest npm version for package {returned_package_name}": "",
    "fetching latest npm versions": "",
    "fetching FS metadata for default prettier dir {default_prettier_dir:?}": "",
    "default prettier dir {default_prettier_dir:?} is not a directory": "",
    "creating default prettier dir {default_prettier_dir:?}": "",
    "Installing default prettier and plugins: {packages_to_versions:?}": "",
    "fetching formatter packages": "",
    "writing {} file at {prettier_wrapper_path:?}": ""
  },
  "zed/crates/project/src/project_settings.rs": {
    "true_value": "",
    "default_inline_diagnostics_debounce_ms": "",
    "default_inline_diagnostics_padding": "",
    "unknown kind {kind}": "",
    "Cannot absolutize {path:?} received as {change:?} FS change: {e}": "",
    "parsing VSCode tasks, file {abs_path:?}": "",
    "converting VSCode tasks into Zed ones, file {abs_path:?}": "",
    "serializing Zed tasks into JSON, file {abs_path:?}": "",
    "Failed to set local settings in {:?}: {:?}": "",
    "Failed to set local settings: {e}": ""
  },
  "zed/crates/project/src/project.rs": {
    "RemotelyCreatedModelGuard dropped too many times": "",
    "Completion": "",
    "old_range": "",
    "new_text": "",
    "label": "",
    "documentation": "",
    "source": "",
    "command": "",
    "~{}": "",
    "snippets": "",
    "No worktree for path {project_path:?}": "",
    "No worktree for entry {entry_id:?}": "",
    "no task": "",
    "project was already shared": "",
    "attempted to unshare a remote project": "",
    "attempted to unshare an unshared project": "",
    "called create_local_buffer on a remote project": "",
    "no such path": "",
    "buffer {} does not exist": "",
    "cannot open buffer while disconnected": "",
    "Project dropped": "",
    "lsp": "",
    "Failed to set local settings in {:?}:\n{}": "",
    "local-settings": "",
    "not an ssh project": "",
    "~": "",
    "cannot list directory in remote project": "",
    "empty collaborator": "",
    "missing old peer id": "",
    "missing new peer id": "",
    "received UpdateProjectCollaborator for unknown peer": "",
    "peer {} became {}": "",
    "invalid peer id": "",
    "unknown peer {:?}": "",
    "Invalid prompt level": "",
    "missing query field": "",
    "can't synchronize remote buffers on a readonly project": "",
    "can't synchronize remote buffers on a local project": "",
    "{}{}": ""
  },
  "zed/crates/project/src/search_history.rs": {
    "No current selection should be set for the default search history": "",
    "rust": "",
    "Newly added item should be selected": "",
    "Should not add a duplicate": "",
    "rustlang": "",
    "Should replace previous item if it's a substring": "",
    "item{i}": "",
    "Default search history should not have a next item": "",
    "JavaScript": "",
    "TypeScript": "",
    "Should start from the end after reset on previous item query": "",
    "Python": "",
    "Java": "",
    "C++": ""
  },
  "zed/crates/project/src/search.rs": {
    "\\B": "",
    "Failed to create WORD_MATCH_TEST": "",
    "\\b": "",
    "\n": "",
    ",": "",
    "\\\\|\n|\\t": "",
    "\\": "",
    "\\t": "",
    "Unexpected escape sequence: {}": "",
    "file": "",
    "Cargo.toml": "",
    ".DS_Store": "",
    "~/dir/another_dir/": "",
    "./dir/file": "",
    "dir/[a-z].txt": "",
    "../dir/filé": "",
    "Valid path {valid_path} should be accepted, but got: {e}": "",
    "Path matcher for valid path {valid_path} should match itself": "",
    "dir/[].txt": "",
    "dir/[a-z.txt": "",
    "dir/{file": "",
    "Invalid glob {invalid_glob} should not be accepted": "",
    "dir/?ile": "",
    "dir/*.txt": "",
    "dir/**/file": "",
    "{dir,file}": "",
    "Valid glob should be accepted, but got: {e}": ""
  },
  "zed/crates/project/src/task_inventory.rs": {
    "oneshot": "",
    "{id_base}_{}": "",
    "{id_base}_{id}_{}": "",
    "language_{name}": "",
    "usage": "",
    "global tasks.json": "",
    "local worktree tasks from directory {directory:?}": "",
    "[]": "",
    "parsing tasks file content as a JSON array": "",
    "Failed to find task with name {task_name}": "",
    "Failed to resolve task with name {task_name}": "",
    "No tasks expected for empty inventory, but got {initial_tasks:?}": "",
    "1_a_task": "",
    "1_task": "",
    "2_task": "",
    "3_task": "",
    "Tasks with equal amount of usages should be sorted alphanumerically": "",
    "10_hello": "",
    "11_hello": "",
    "common_task_name": "",
    "static_source_1": "",
    "static_source_2": "",
    ".zed": "",
    "local worktree tasks from directory \".zed\"": "",
    "worktree_1": "",
    "worktree_2": "",
    "Without a worktree, only worktree-independent tasks should be listed": "",
    "label": "",
    "command": "",
    "echo": "",
    "args": ""
  },
  "zed/crates/project/src/task_store.rs": {
    "no location given for task context handling": "",
    "empty task store cannot handle task context requests": "",
    "no buffer store when handling task context request": "",
    "cannot handle task context request for invalid buffer id: {}": "",
    "missing task context location start": "",
    "missing task context location end": "",
    "no local buffer with id {buffer_id}": "",
    "Failed to load user tasks: {err}": "",
    "load-user-tasks": "",
    "Invalid global tasks file\n{err}": "",
    "Unknown variable name: {variable_name}": "",
    "building basic default context": "",
    "building provider context": ""
  },
  "zed/crates/project/src/terminals.rs": {
    "Connecting to a remote server: {ssh_command:?}": "",
    "TERM": "",
    "xterm-256color": "",
    "{} — Terminal": "",
    "VIRTUAL_ENV": "",
    "bin": "",
    "Python": "",
    "Scripts": "",
    ".": "",
    "source": "",
    "overlay use": "",
    "activate": "",
    "activate.csh": "",
    "activate.fish": "",
    "activate.nu": "",
    "activate.ps1": "",
    "\\r": "",
    "{} {} ; clear{}": "",
    " ": "",
    "exec ${SHELL:-sh} -l": "",
    "{}={} ": "",
    "PATH={}:$PATH ": "",
    "~/": "",
    "~": "",
    "cd \"$HOME/{trimmed_path}\"; {env_changes} {to_run}": "",
    "cd {path:?}; {env_changes} {to_run}": "",
    "cd; {env_changes} {to_run}": "",
    "sh -c {}": "",
    "ssh": "",
    "-t": "",
    "PATH": "",
    "failed to create PATH env variable": "",
    "/tmp/new": "",
    "/usr/bin;/usr/local/bin": "",
    "/usr/bin:/usr/local/bin": "",
    "OTHER": "",
    "aaa": "",
    "/tmp/new;{}": "",
    "/tmp/new:{}": ""
  },
  "zed/crates/project/src/toolchain_store.rs": {
    "Missing `toolchain` in payload": ""
  },
  "zed/crates/project/src/worktree_store.rs": {
    "cannot create worktrees via collab": "",
    "/~": "",
    "~/": "",
    "Dropped worktree store": "",
    "invalid project": "",
    "Missing worktree for id {source}": "",
    "Missing worktree for id {destination}": "",
    "listing ignored path {abs_path:?}": "",
    "fetching fs metadata for {abs_path:?}": "",
    "obviously binary": "",
    "Invalid UTF-8 sequence in file {abs_path:?} at byte position {starting_position}": "",
    "worktree not found": "",
    "invalid request": ""
  },
  "zed/crates/project_panel/src/project_panel.rs": {
    "ProjectPanel": "",
    "Failed to open file": "",
    "Disconnected from SSH host": "",
    "Disconnected from remote project": "",
    "{} is not shared by the host. This could be because it has been marked as `private`": "",
    "Failed to load project panel: {}": "",
    "Search Inside": "",
    "New File": "",
    "New Folder": "",
    "Reveal in Finder": "",
    "Reveal in File Manager": "",
    "Open in Default App": "",
    "Open in Terminal": "",
    "Find in Folder…": "",
    "Unfold Directory": "",
    "Fold Directory": "",
    "Cut": "",
    "Copy": "",
    "Duplicate": "",
    "Paste": "",
    "Copy Path": "",
    "Copy Relative Path": "",
    "Rename": "",
    "Trash": "",
    "Delete": "",
    "Add Folder to Project…": "",
    "Remove from Project": "",
    "Collapse All": "",
    "\\": "",
    "excluded-directory": "",
    "Created an excluded directory at {abs_path:?}.\nAlter `file_scan_exclusions` in the settings to show it in the panel": "",
    "\n\nIt has unsaved changes, which will be lost.": "",
    "{operation} {path}?{unsaved_warning}": "",
    ".. 1 file not shown": "",
    ".. {} files not shown": "",
    "\n\n1 of these has unsaved changes, which will be lost.": "",
    "\n\n{dirty_buffers} of these have unsaved changes, which will be lost.": "",
    "Do you want to {} the following {} files?\n{}{unsaved_warning}": "",
    "Cancel": "",
    "no such entry": "",
    " copy": "",
    " {}": "",
    ".": "",
    "\\0": "",
    "Worktree abs path has no file name, root entry: {entry:?}": "",
    "Non-root entry has no file name: {entry:?}": "",
    "A file or folder with name {filename} already exists in the destination folder. Do you want to replace it?": "",
    "Replace": "",
    "Edited sub-entry should be an ancestor of selected leaf entry": "",
    "project_entry": "",
    "symlink_icon": "",
    "Symbolic Link": "",
    "project_panel_path_component_{}_{index}": "",
    "project-panel-vertical-scroll": "",
    "project-panel-horizontal-scroll": "",
    "menu": "",
    "editing": "",
    "not_editing": "",
    "project-panel": "",
    "entries": "",
    "empty-project_panel": "",
    "open_project": "",
    "Open a project": "",
    "{} entries": "",
    "Project Panel": "",
    "/root1": "",
    ".dockerignore": "",
    ".git": "",
    "HEAD": "",
    "a": "",
    "0": "",
    "q": "",
    "r": "",
    "s": "",
    "1": "",
    "t": "",
    "u": "",
    "2": "",
    "v": "",
    "w": "",
    "x": "",
    "y": "",
    "b": "",
    "3": "",
    "Q": "",
    "4": "",
    "R": "",
    "S": "",
    "T": "",
    "U": "",
    "C": "",
    "5": "",
    "6": "",
    "V": "",
    "W": "",
    "7": "",
    "X": "",
    "8": "",
    "Y": "",
    "Z": "",
    "/root2": "",
    "d": "",
    "9": "",
    "e": "",
    "v root1": "",
    "    > .git": "",
    "    > a": "",
    "    > b": "",
    "    > C": "",
    "      .dockerignore": "",
    "v root2": "",
    "    > d": "",
    "    > e": "",
    "root1/b": "",
    "    v b  <== selected": "",
    "        > 3": "",
    "        > 4": "",
    "/src": "",
    "test": "",
    "first.rs": "",
    "// First Rust file": "",
    "second.rs": "",
    "// Second Rust file": "",
    "third.rs": "",
    "// Third Rust file": "",
    "src/test": "",
    "src/test/first.rs": "",
    "v src": "",
    "    v test": "",
    "          first.rs  <== selected  <== marked": "",
    "          second.rs": "",
    "          third.rs": "",
    "test/first.rs": "",
    "src/test/second.rs": "",
    "          first.rs": "",
    "          second.rs  <== selected  <== marked": "",
    "test/second.rs": "",
    "**/.git": "",
    "**/4/**": "",
    "root2/d": "",
    "    v b": "",
    "    v d  <== selected": "",
    "root2/e": "",
    "    v d": "",
    "    v e  <== selected": "",
    "dir_1": "",
    "nested_dir_1": "",
    "nested_dir_2": "",
    "nested_dir_3": "",
    "file_a.java": "",
    "// File contents": "",
    "file_b.java": "",
    "file_c.java": "",
    "nested_dir_4": "",
    "nested_dir_5": "",
    "file_d.java": "",
    "dir_2": "",
    "file_1.java": "",
    "    > dir_1/nested_dir_1/nested_dir_2/nested_dir_3": "",
    "    > dir_2": "",
    "root1/dir_1/nested_dir_1/nested_dir_2/nested_dir_3": "",
    "    v dir_1/nested_dir_1/nested_dir_2/nested_dir_3  <== selected": "",
    "        > nested_dir_4/nested_dir_5": "",
    "          file_a.java": "",
    "          file_b.java": "",
    "          file_c.java": "",
    "root1/dir_1/nested_dir_1/nested_dir_2/nested_dir_3/nested_dir_4/nested_dir_5": "",
    "    v dir_1/nested_dir_1/nested_dir_2/nested_dir_3": "",
    "        v nested_dir_4/nested_dir_5  <== selected": "",
    "              file_d.java": "",
    "root2/dir_2": "",
    "        v nested_dir_4/nested_dir_5": "",
    "    v dir_2  <== selected": "",
    "          file_1.java": "",
    "root1": "",
    "v root1  <== selected": "",
    "      [EDITOR: '']  <== selected": "",
    "the-new-filename": "",
    "      [PROCESSING: 'the-new-filename']  <== selected": "",
    "      the-new-filename  <== selected  <== marked": "",
    "          [EDITOR: '']  <== selected": "",
    "      the-new-filename": "",
    "another-filename.txt": "",
    "          another-filename.txt  <== selected  <== marked": "",
    "root1/b/another-filename.txt": "",
    "          [EDITOR: 'another-filename.txt']  <== selected  <== marked": "",
    "File editing should have a single selection, but got: {file_name_selections:?}": "",
    "Should select the file name from the start": "",
    "another-filename": "",
    "Should not select file extension": "",
    "a-different-filename.tar.gz": "",
    "          [PROCESSING: 'a-different-filename.tar.gz']  <== selected  <== marked": "",
    "          a-different-filename.tar.gz  <== selected": "",
    "          [EDITOR: 'a-different-filename.tar.gz']  <== selected": "",
    "a-different-filename.tar": "",
    "Should not select file extension, but still may select anything up to the last dot..": "",
    "        > [EDITOR: '']  <== selected": "",
    "          a-different-filename.tar.gz": "",
    "new-dir": "",
    "        > [PROCESSING: 'new-dir']": "",
    "        > new-dir": "",
    "/bdir1/dir2/the-new-filename": "",
    "      [PROCESSING: '/bdir1/dir2/the-new-filename']  <== selected": "",
    "    v bdir1": "",
    "        v dir2": "",
    "              the-new-filename  <== selected  <== marked": "",
    "new_dir/": "",
    "      [PROCESSING: 'new_dir/']  <== selected": "",
    "    v new_dir  <== selected": "",
    "new dir 2/": "",
    "    v new dir 2  <== selected": "",
    "    v new_dir": "",
    "\"\n        #[cfg(target_os = ": "",
    ")]\n        {\n            select_path(&panel, ": "",
    ", cx);\n            panel.update_in(cx, |panel, window, cx| panel.new_file(&NewFile, window, cx));\n            let confirm = panel.update_in(cx, |panel, window, cx| {\n                // If we want to create a subdirectory, there should be no prefix slash.\n                panel\n                    .filename_editor\n                    .update(cx, |editor, cx| editor.set_text(": "",
    ", window, cx));\n                panel.confirm_edit(window, cx).unwrap()\n            });\n            confirm.await.unwrap();\n            assert_eq!(\n                visible_entries_as_strings(&panel, 0..10, cx),\n                &[\n                    ": "",
    ",\n                    ": "",
    ",\n                ]\n            );\n        }\n    }\n\n    #[gpui::test]\n    async fn test_copy_paste(cx: &mut gpui::TestAppContext) {\n        init_test(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    ",\n            json!({\n                ": "",
    ": ": "",
    ",\n                ": "",
    "\n            }),\n        )\n        .await;\n\n        let project = Project::test(fs.clone(), [": "",
    ".as_ref()], cx).await;\n        let workspace =\n            cx.add_window(|window, cx| Workspace::test_new(project.clone(), window, cx));\n        let cx = &mut VisualTestContext::from_window(*workspace, cx);\n        let panel = workspace.update(cx, ProjectPanel::new).unwrap();\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.select_next(&Default::default(), window, cx);\n            panel.select_next(&Default::default(), window, cx);\n        });\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..50, cx),\n            &[\n                //\n                ": "",
    ",\n            ]\n        );\n\n        // Regression test - file name is created correctly when\n        // the copied file's name contains multiple dots.\n        panel.update_in(cx, |panel, window, cx| {\n            panel.copy(&Default::default(), window, cx);\n            panel.paste(&Default::default(), window, cx);\n        });\n        cx.executor().run_until_parked();\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..50, cx),\n            &[\n                //\n                ": "",
    ",\n            ]\n        );\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.filename_editor.update(cx, |editor, cx| {\n                let file_name_selections = editor.selections.all::<usize>(cx);\n                assert_eq!(file_name_selections.len(), 1, ": "",
    ");\n                let file_name_selection = &file_name_selections[0];\n                assert_eq!(file_name_selection.start, ": "",
    ".len(), ": "",
    ");\n                assert_eq!(file_name_selection.end, ": "",
    ");\n            });\n            assert!(panel.confirm_edit(window, cx).is_none());\n        });\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.paste(&Default::default(), window, cx);\n        });\n        cx.executor().run_until_parked();\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..50, cx),\n            &[\n                //\n                ": "",
    ",\n            ]\n        );\n\n        panel.update_in(cx, |panel, window, cx| {\n            assert!(panel.confirm_edit(window, cx).is_none())\n        });\n    }\n\n    #[gpui::test]\n    async fn test_cut_paste_between_different_worktrees(cx: &mut gpui::TestAppContext) {\n        init_test(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    ": {\n                    ": "",
    ": { ": "",
    ", ": "",
    " },\n                    ": "",
    " },\n                },\n            }),\n        )\n        .await;\n\n        fs.insert_tree(\n            ": "",
    " },\n                },\n            }),\n        )\n        .await;\n\n        let project = Project::test(fs.clone(), [": "",
    ".as_ref(), ": "",
    ".as_ref()], cx).await;\n        let workspace =\n            cx.add_window(|window, cx| Workspace::test_new(project.clone(), window, cx));\n        let cx = &mut VisualTestContext::from_window(*workspace, cx);\n        let panel = workspace.update(cx, ProjectPanel::new).unwrap();\n\n        select_path(&panel, ": "",
    ", cx);\n        panel.update_in(cx, |panel, window, cx| {\n            panel.cut(&Default::default(), window, cx);\n        });\n\n        select_path(&panel, ": "",
    ", cx);\n        panel.update_in(cx, |panel, window, cx| {\n            panel.select_next(&Default::default(), window, cx);\n            panel.paste(&Default::default(), window, cx);\n        });\n        cx.executor().run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..50, cx),\n            &[\n                //\n                ": "",
    ",\n            ]\n        );\n\n        select_path(&panel, ": "",
    ", cx);\n        panel.update_in(cx, |panel, window, cx| {\n            panel.cut(&Default::default(), window, cx);\n        });\n        select_path(&panel, ": "",
    ", cx);\n        panel.update_in(cx, |panel, window, cx| {\n            panel.select_next(&Default::default(), window, cx);\n            panel.paste(&Default::default(), window, cx);\n        });\n\n        cx.executor().run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..50, cx),\n            &[\n                //\n                ": "",
    ",\n            ]\n        );\n    }\n\n    #[gpui::test]\n    async fn test_copy_paste_between_different_worktrees(cx: &mut gpui::TestAppContext) {\n        init_test(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    ", cx);\n        panel.update_in(cx, |panel, window, cx| {\n            panel.copy(&Default::default(), window, cx);\n        });\n\n        select_path(&panel, ": "",
    ", cx);\n        panel.update_in(cx, |panel, window, cx| {\n            panel.copy(&Default::default(), window, cx);\n        });\n        select_path(&panel, ": "",
    ",\n            ]\n        );\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.cancel(&menu::Cancel {}, window, cx)\n        });\n        cx.executor().run_until_parked();\n\n        select_path(&panel, ": "",
    ",\n            ]\n        );\n    }\n\n    #[gpui::test]\n    async fn test_copy_paste_directory(cx: &mut gpui::TestAppContext) {\n        init_test(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    ": {\n                        ": "",
    ",\n                        ": "",
    ",\n                    }\n                },\n                ": "",
    ": {}\n            }),\n        )\n        .await;\n\n        let project = Project::test(fs.clone(), [": "",
    ", cx);\n        panel.update_in(cx, |panel, window, cx| {\n            panel.copy(&Default::default(), window, cx);\n            panel.select_next(&Default::default(), window, cx);\n            panel.paste(&Default::default(), window, cx);\n        });\n        cx.executor().run_until_parked();\n\n        let pasted_dir = find_project_entry(&panel, ": "",
    ", cx);\n        assert_ne!(pasted_dir, None, ": "",
    ");\n\n        let pasted_dir_file = find_project_entry(&panel, ": "",
    ", cx);\n        assert_ne!(\n            pasted_dir_file, None,\n            ": "",
    "\n        );\n\n        let pasted_dir_inner_dir = find_project_entry(&panel, ": "",
    ", cx);\n        assert_ne!(\n            pasted_dir_inner_dir, None,\n            ": "",
    "\n        );\n\n        toggle_expand_dir(&panel, ": "",
    ", cx);\n        toggle_expand_dir(&panel, ": "",
    ", cx);\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..50, cx),\n            &[\n                //\n                ": "",
    ", cx);\n        panel.update_in(cx, |panel, window, cx| {\n            panel.paste(&Default::default(), window, cx)\n        });\n        cx.executor().run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..50, cx),\n            &[\n                //\n                ": "",
    "\n            ]\n        );\n\n        let confirm = panel.update_in(cx, |panel, window, cx| {\n            panel\n                .filename_editor\n                .update(cx, |editor, cx| editor.set_text(": "",
    ", window, cx));\n            panel.confirm_edit(window, cx).unwrap()\n        });\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..50, cx),\n            &[\n                //\n                ": "",
    "\n            ]\n        );\n\n        confirm.await.unwrap();\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.paste(&Default::default(), window, cx)\n        });\n        cx.executor().run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..50, cx),\n            &[\n                //\n                ": "",
    ",\n            ]\n        );\n    }\n\n    #[gpui::test]\n    async fn test_copy_paste_directory_with_sibling_file(cx: &mut gpui::TestAppContext) {\n        init_test(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    ",\n                },\n                ": "",
    ": {},\n                ": "",
    ",\n            }),\n        )\n        .await;\n\n        let project = Project::test(fs.clone(), [": "",
    ".as_ref()], cx).await;\n        let workspace =\n            cx.add_window(|window, cx| Workspace::test_new(project.clone(), window, cx));\n        let cx = &mut VisualTestContext::from_window(*workspace, cx);\n        let panel = workspace.update(cx, ProjectPanel::new).unwrap();\n\n        toggle_expand_dir(&panel, ": "",
    ", cx);\n\n        cx.simulate_modifiers_change(gpui::Modifiers {\n            control: true,\n            ..Default::default()\n        });\n\n        select_path_with_mark(&panel, ": "",
    ", cx);\n        select_path_with_mark(&panel, ": "",
    ", cx);\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..15, cx),\n            &[\n                ": "",
    ",\n            ],\n            ": "",
    "\n        );\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.copy(&Default::default(), window, cx);\n        });\n        select_path(&panel, ": "",
    ", cx);\n        panel.update_in(cx, |panel, window, cx| {\n            panel.paste(&Default::default(), window, cx);\n        });\n        cx.executor().run_until_parked();\n\n        toggle_expand_dir(&panel, ": "",
    "\n        );\n\n        // Disambiguating multiple files should not open the rename editor.\n        select_path(&panel, ": "",
    ", cx);\n        panel.update_in(cx, |panel, window, cx| {\n            panel.paste(&Default::default(), window, cx);\n        });\n        cx.executor().run_until_parked();\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..15, cx),\n            &[\n                ": "",
    "\n        );\n    }\n\n    #[gpui::test]\n    async fn test_copy_paste_nested_and_root_entries(cx: &mut gpui::TestAppContext) {\n        init_test(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    ", cx);\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[\n                ": "",
    "\n        );\n    }\n\n    #[gpui::test]\n    async fn test_remove_opened_file(cx: &mut gpui::TestAppContext) {\n        init_test_with_editor(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            path!(": "",
    "),\n            json!({\n                ": "",
    ",\n                }\n            }),\n        )\n        .await;\n\n        let project = Project::test(fs.clone(), [path!(": "",
    ").as_ref()], cx).await;\n        let workspace =\n            cx.add_window(|window, cx| Workspace::test_new(project.clone(), window, cx));\n        let cx = &mut VisualTestContext::from_window(*workspace, cx);\n        let panel = workspace.update(cx, ProjectPanel::new).unwrap();\n\n        toggle_expand_dir(&panel, ": "",
    ", cx);\n        select_path(&panel, ": "",
    ", cx);\n        panel.update_in(cx, |panel, window, cx| panel.open(&Open, window, cx));\n        cx.executor().run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    "\n            ]\n        );\n        ensure_single_file_is_opened(&workspace, ": "",
    ", cx);\n\n        submit_deletion(&panel, cx);\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    "\n            ],\n            ": "",
    "\n        );\n        ensure_no_open_items_and_panes(&workspace, cx);\n\n        panel.update_in(cx, |panel, window, cx| panel.open(&Open, window, cx));\n        cx.executor().run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    ", cx);\n\n        workspace\n            .update(cx, |workspace, window, cx| {\n                let active_items = workspace\n                    .panes()\n                    .iter()\n                    .filter_map(|pane| pane.read(cx).active_item())\n                    .collect::<Vec<_>>();\n                assert_eq!(active_items.len(), 1);\n                let open_editor = active_items\n                    .into_iter()\n                    .next()\n                    .unwrap()\n                    .downcast::<Editor>()\n                    .expect(": "",
    ");\n                open_editor.update(cx, |editor, cx| {\n                    editor.set_text(": "",
    ", window, cx)\n                });\n            })\n            .unwrap();\n        submit_deletion_skipping_prompt(&panel, cx);\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[": "",
    "],\n            ": "",
    "\n        );\n        ensure_no_open_items_and_panes(&workspace, cx);\n    }\n\n    #[gpui::test]\n    async fn test_create_duplicate_items(cx: &mut gpui::TestAppContext) {\n        init_test_with_editor(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    ",\n                }\n            }),\n        )\n        .await;\n\n        let project = Project::test(fs.clone(), [": "",
    ".as_ref()], cx).await;\n        let workspace =\n            cx.add_window(|window, cx| Workspace::test_new(project.clone(), window, cx));\n        let cx = &mut VisualTestContext::from_window(*workspace, cx);\n        let panel = workspace\n            .update(cx, |workspace, window, cx| {\n                let panel = ProjectPanel::new(workspace, window, cx);\n                workspace.add_panel(panel.clone(), window, cx);\n                panel\n            })\n            .unwrap();\n\n        select_path(&panel, ": "",
    ", cx);\n        panel.update_in(cx, |panel, window, cx| panel.confirm(&Confirm, window, cx));\n        cx.executor().run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                //\n                ": "",
    "\n            ]\n        );\n        panel.update_in(cx, |panel, window, cx| {\n            panel.new_directory(&NewDirectory, window, cx)\n        });\n        panel.update_in(cx, |panel, window, cx| {\n            assert!(panel.filename_editor.read(cx).is_focused(window));\n        });\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                //\n                ": "",
    "\n            ]\n        );\n        panel.update_in(cx, |panel, window, cx| {\n            panel\n                .filename_editor\n                .update(cx, |editor, cx| editor.set_text(": "",
    ", window, cx));\n            assert!(\n                panel.confirm_edit(window, cx).is_none(),\n                ": "",
    "\n            )\n        });\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                //\n                ": "",
    "\n        );\n\n        select_path(&panel, ": "",
    "\n            ]\n        );\n        panel.update_in(cx, |panel, window, cx| panel.new_file(&NewFile, window, cx));\n        panel.update_in(cx, |panel, window, cx| {\n            assert!(panel.filename_editor.read(cx).is_focused(window));\n        });\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    "\n            )\n        });\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    ", cx);\n        panel.update_in(cx, |panel, window, cx| panel.confirm(&Confirm, window, cx));\n        cx.executor().run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    "\n            ],\n        );\n        panel.update_in(cx, |panel, window, cx| panel.rename(&Rename, window, cx));\n        panel.update_in(cx, |panel, window, cx| {\n            assert!(panel.filename_editor.read(cx).is_focused(window));\n        });\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    "\n        );\n    }\n\n    #[gpui::test]\n    async fn test_select_git_entry(cx: &mut gpui::TestAppContext) {\n        use git::status::{FileStatus, StatusCode, TrackedStatus};\n        use std::path::Path;\n\n        init_test_with_editor(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    ": {},\n                    ": "",
    ",\n                    },\n                    ": "",
    ",\n                }\n            }),\n        )\n        .await;\n\n        // Mark files as git modified\n        let tree1_modified_files = [\n            ": "",
    ",\n            ": "",
    ",\n        ];\n\n        let tree2_modified_files = [": "",
    "];\n\n        let root1_dot_git = Path::new(": "",
    ");\n        let root2_dot_git = Path::new(": "",
    ");\n        let set_value = FileStatus::Tracked(TrackedStatus {\n            index_status: StatusCode::Modified,\n            worktree_status: StatusCode::Modified,\n        });\n\n        fs.with_git_state(&root1_dot_git, true, |git_repo_state| {\n            for file_path in tree1_modified_files {\n                git_repo_state.statuses.insert(file_path.into(), set_value);\n            }\n        });\n\n        fs.with_git_state(&root2_dot_git, true, |git_repo_state| {\n            for file_path in tree2_modified_files {\n                git_repo_state.statuses.insert(file_path.into(), set_value);\n            }\n        });\n\n        let project = Project::test(\n            fs.clone(),\n            [": "",
    ".as_ref()],\n            cx,\n        )\n        .await;\n        let workspace =\n            cx.add_window(|window, cx| Workspace::test_new(project.clone(), window, cx));\n        let cx = &mut VisualTestContext::from_window(*workspace, cx);\n        let panel = workspace.update(cx, ProjectPanel::new).unwrap();\n\n        // Check initial state\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..15, cx),\n            &[\n                ": "",
    "\n            ],\n        );\n\n        // Test selecting next modified entry\n        panel.update_in(cx, |panel, window, cx| {\n            panel.select_next_git_entry(&SelectNextGitEntry, window, cx);\n        });\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..6, cx),\n            &[\n                ": "",
    ",\n            ],\n        );\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.select_next_git_entry(&SelectNextGitEntry, window, cx);\n        });\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..6, cx),\n            &[\n                ": "",
    ",\n            ],\n        );\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.select_next_git_entry(&SelectNextGitEntry, window, cx);\n        });\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 6..9, cx),\n            &[\n                ": "",
    ",\n            ],\n        );\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.select_next_git_entry(&SelectNextGitEntry, window, cx);\n        });\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 9..11, cx),\n            &[": "",
    ",],\n        );\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.select_next_git_entry(&SelectNextGitEntry, window, cx);\n        });\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 13..16, cx),\n            &[\n                ": "",
    ",\n            ],\n        );\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.select_next_git_entry(&SelectNextGitEntry, window, cx);\n        });\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 16..18, cx),\n            &[": "",
    ",],\n        );\n\n        // Wraps around to first modified file\n        panel.update_in(cx, |panel, window, cx| {\n            panel.select_next_git_entry(&SelectNextGitEntry, window, cx);\n        });\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..18, cx),\n            &[\n                ": "",
    ",\n            ],\n        );\n\n        // Wraps around again to last modified file\n        panel.update_in(cx, |panel, window, cx| {\n            panel.select_prev_git_entry(&SelectPrevGitEntry, window, cx);\n        });\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 16..18, cx),\n            &[": "",
    ",],\n        );\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.select_prev_git_entry(&SelectPrevGitEntry, window, cx);\n        });\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 13..16, cx),\n            &[\n                ": "",
    ",\n            ],\n        );\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.select_prev_git_entry(&SelectPrevGitEntry, window, cx);\n        });\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 9..11, cx),\n            &[": "",
    ",],\n        );\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.select_prev_git_entry(&SelectPrevGitEntry, window, cx);\n        });\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 6..9, cx),\n            &[\n                ": "",
    ",\n            ],\n        );\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.select_prev_git_entry(&SelectPrevGitEntry, window, cx);\n        });\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..6, cx),\n            &[\n                ": "",
    ",\n            ],\n        );\n    }\n\n    #[gpui::test]\n    async fn test_select_directory(cx: &mut gpui::TestAppContext) {\n        init_test_with_editor(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    ": {\n\n                },\n                ": "",
    ": {\n\n                },\n            }),\n        )\n        .await;\n\n        let project = Project::test(fs.clone(), [": "",
    ".as_ref()], cx).await;\n        let workspace =\n            cx.add_window(|window, cx| Workspace::test_new(project.clone(), window, cx));\n        let cx = &mut VisualTestContext::from_window(*workspace, cx);\n        let panel = workspace.update(cx, ProjectPanel::new).unwrap();\n\n        panel.update_in(cx, |panel, window, cx| panel.open(&Open, window, cx));\n        cx.executor().run_until_parked();\n        select_path(&panel, ": "",
    ", cx);\n        cx.executor().run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    ",\n            ]\n        );\n        panel.update_in(cx, |panel, window, cx| {\n            panel.select_prev_directory(&SelectPrevDirectory, window, cx)\n        });\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    ",\n            ]\n        );\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.select_prev_directory(&SelectPrevDirectory, window, cx)\n        });\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    ",\n            ]\n        );\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.select_next_directory(&SelectNextDirectory, window, cx)\n        });\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    ",\n            ]\n        );\n    }\n    #[gpui::test]\n    async fn test_select_first_last(cx: &mut gpui::TestAppContext) {\n        init_test_with_editor(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    ",\n                    }\n                },\n            }),\n        )\n        .await;\n\n        let project = Project::test(fs.clone(), [": "",
    ".as_ref()], cx).await;\n        let workspace =\n            cx.add_window(|window, cx| Workspace::test_new(project.clone(), window, cx));\n        let cx = &mut VisualTestContext::from_window(*workspace, cx);\n        let panel = workspace.update(cx, ProjectPanel::new).unwrap();\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    ",\n            ]\n        );\n        panel.update_in(cx, |panel, window, cx| {\n            panel.select_first(&SelectFirst, window, cx)\n        });\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    ",\n            ]\n        );\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.select_last(&SelectLast, window, cx)\n        });\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    ",\n            ]\n        );\n    }\n\n    #[gpui::test]\n    async fn test_dir_toggle_collapse(cx: &mut gpui::TestAppContext) {\n        init_test_with_editor(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    ", cx);\n        panel.update_in(cx, |panel, window, cx| panel.open(&Open, window, cx));\n        select_path(&panel, ": "",
    ", cx);\n        panel.update_in(cx, |panel, window, cx| panel.open(&Open, window, cx));\n        panel.update_in(cx, |panel, window, cx| panel.open(&Open, window, cx));\n        cx.executor().run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    ",\n            ]\n        );\n    }\n\n    #[gpui::test]\n    async fn test_collapse_all_entries(cx: &mut gpui::TestAppContext) {\n        init_test_with_editor(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    ".as_ref()], cx).await;\n        let workspace =\n            cx.add_window(|window, cx| Workspace::test_new(project.clone(), window, cx));\n        let cx = &mut VisualTestContext::from_window(*workspace, cx);\n        let panel = workspace.update(cx, ProjectPanel::new).unwrap();\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.collapse_all_entries(&CollapseAllEntries, window, cx)\n        });\n        cx.executor().run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[": "",
    ",]\n        );\n\n        // Open dir_1 and make sure nested_dir was collapsed when running collapse_all_entries\n        toggle_expand_dir(&panel, ": "",
    ",\n            ]\n        );\n    }\n\n    #[gpui::test]\n    async fn test_new_file_move(cx: &mut gpui::TestAppContext) {\n        init_test(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.as_fake().insert_tree(path!(": "",
    "), json!({})).await;\n        let project = Project::test(fs, [path!(": "",
    ").as_ref()], cx).await;\n        let workspace =\n            cx.add_window(|window, cx| Workspace::test_new(project.clone(), window, cx));\n        let cx = &mut VisualTestContext::from_window(*workspace, cx);\n        let panel = workspace.update(cx, ProjectPanel::new).unwrap();\n\n        // Make a new buffer with no backing file\n        workspace\n            .update(cx, |workspace, window, cx| {\n                Editor::new_file(workspace, &Default::default(), window, cx)\n            })\n            .unwrap();\n\n        cx.executor().run_until_parked();\n\n        // ": "",
    " the buffer, creating a new backing file for it\n        let save_task = workspace\n            .update(cx, |workspace, window, cx| {\n                workspace.save_active_item(workspace::SaveIntent::Save, window, cx)\n            })\n            .unwrap();\n\n        cx.executor().run_until_parked();\n        cx.simulate_new_path_selection(|_| Some(PathBuf::from(path!(": "",
    "))));\n        save_task.await.unwrap();\n\n        // Rename the file\n        select_path(&panel, ": "",
    ", cx);\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[": "",
    "]\n        );\n        panel.update_in(cx, |panel, window, cx| panel.rename(&Rename, window, cx));\n        panel.update_in(cx, |panel, window, cx| {\n            panel\n                .filename_editor\n                .update(cx, |editor, cx| editor.set_text(": "",
    ", window, cx));\n        });\n        panel.update_in(cx, |panel, window, cx| panel.confirm(&Confirm, window, cx));\n\n        cx.executor().run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[": "",
    "]\n        );\n\n        workspace\n            .update(cx, |workspace, window, cx| {\n                workspace.save_active_item(workspace::SaveIntent::Save, window, cx)\n            })\n            .unwrap()\n            .await\n            .unwrap();\n\n        cx.executor().run_until_parked();\n        // assert that saving the file doesn't restore ": "",
    "\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[": "",
    "]\n        );\n    }\n\n    #[gpui::test]\n    #[cfg_attr(target_os = ": "",
    ", ignore)]\n    async fn test_rename_root_of_worktree(cx: &mut gpui::TestAppContext) {\n        init_test_with_editor(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    ",\n                },\n            }),\n        )\n        .await;\n\n        let project = Project::test(fs.clone(), [": "",
    ", cx);\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[": "",
    ",],\n            ": "",
    ", cx);\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[": "",
    ",],\n        );\n\n        // Rename root1 to new_root1\n        panel.update_in(cx, |panel, window, cx| panel.rename(&Rename, window, cx));\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[\n                ": "",
    ",\n            ],\n        );\n\n        let confirm = panel.update_in(cx, |panel, window, cx| {\n            panel\n                .filename_editor\n                .update(cx, |editor, cx| editor.set_text(": "",
    ", window, cx));\n            panel.confirm_edit(window, cx).unwrap()\n        });\n        confirm.await.unwrap();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[\n                ": "",
    "\n        );\n\n        // Ensure internal paths have been updated\n        select_path(&panel, ": "",
    ", cx);\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[\n                ": "",
    "\n        );\n    }\n\n    #[gpui::test]\n    async fn test_multiple_marked_entries(cx: &mut gpui::TestAppContext) {\n        init_test_with_editor(cx);\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    ".as_ref()], cx).await;\n        let worktree_id =\n            cx.update(|cx| project.read(cx).worktrees(cx).next().unwrap().read(cx).id());\n        let workspace =\n            cx.add_window(|window, cx| Workspace::test_new(project.clone(), window, cx));\n        let cx = &mut VisualTestContext::from_window(*workspace, cx);\n        let panel = workspace.update(cx, ProjectPanel::new).unwrap();\n        cx.update(|window, cx| {\n            panel.update(cx, |this, cx| {\n                this.select_next(&Default::default(), window, cx);\n                this.expand_selected_entry(&Default::default(), window, cx);\n                this.expand_selected_entry(&Default::default(), window, cx);\n                this.select_next(&Default::default(), window, cx);\n                this.expand_selected_entry(&Default::default(), window, cx);\n                this.select_next(&Default::default(), window, cx);\n            })\n        });\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    ",\n            ]\n        );\n        let modifiers_with_shift = gpui::Modifiers {\n            shift: true,\n            ..Default::default()\n        };\n        cx.simulate_modifiers_change(modifiers_with_shift);\n        cx.update(|window, cx| {\n            panel.update(cx, |this, cx| {\n                this.select_next(&Default::default(), window, cx);\n            })\n        });\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    ",\n            ]\n        );\n        cx.update(|window, cx| {\n            panel.update(cx, |this, cx| {\n                this.select_previous(&Default::default(), window, cx);\n            })\n        });\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    ",\n            ]\n        );\n        cx.update(|window, cx| {\n            panel.update(cx, |this, cx| {\n                let drag = DraggedSelection {\n                    active_selection: this.selection.unwrap(),\n                    marked_selections: Arc::new(this.marked_entries.clone()),\n                };\n                let target_entry = this\n                    .project\n                    .read(cx)\n                    .entry_for_path(&(worktree_id, ": "",
    ").into(), cx)\n                    .unwrap();\n                this.drag_onto(&drag, target_entry.id, false, window, cx);\n            });\n        });\n        cx.run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    ",\n            ]\n        );\n        // ESC clears out all marks\n        cx.update(|window, cx| {\n            panel.update(cx, |this, cx| {\n                this.cancel(&menu::Cancel, window, cx);\n            })\n        });\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    ",\n            ]\n        );\n        // ESC clears out all marks\n        cx.update(|window, cx| {\n            panel.update(cx, |this, cx| {\n                this.select_previous(&SelectPrevious, window, cx);\n                this.select_next(&SelectNext, window, cx);\n            })\n        });\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    ",\n            ]\n        );\n        cx.simulate_modifiers_change(Default::default());\n        cx.update(|window, cx| {\n            panel.update(cx, |this, cx| {\n                this.cut(&Cut, window, cx);\n                this.select_previous(&SelectPrevious, window, cx);\n                this.select_previous(&SelectPrevious, window, cx);\n\n                this.paste(&Paste, window, cx);\n                // this.expand_selected_entry(&ExpandSelectedEntry, cx);\n            })\n        });\n        cx.run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    ",\n            ]\n        );\n        cx.simulate_modifiers_change(modifiers_with_shift);\n        cx.update(|window, cx| {\n            panel.update(cx, |this, cx| {\n                this.expand_selected_entry(&Default::default(), window, cx);\n                this.select_next(&SelectNext, window, cx);\n                this.select_next(&SelectNext, window, cx);\n            })\n        });\n        submit_deletion(&panel, cx);\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                ": "",
    ",\n            ]\n        );\n    }\n    #[gpui::test]\n    async fn test_autoreveal_and_gitignored_files(cx: &mut gpui::TestAppContext) {\n        init_test_with_editor(cx);\n        cx.update(|cx| {\n            cx.update_global::<SettingsStore, _>(|store, cx| {\n                store.update_user_settings::<WorktreeSettings>(cx, |worktree_settings| {\n                    worktree_settings.file_scan_exclusions = Some(Vec::new());\n                });\n                store.update_user_settings::<ProjectPanelSettings>(cx, |project_panel_settings| {\n                    project_panel_settings.auto_reveal_entries = Some(false)\n                });\n            })\n        });\n\n        let fs = FakeFs::new(cx.background_executor.clone());\n        fs.insert_tree(\n            ": "",
    ",\n                    },\n                },\n                ": "",
    ".as_ref()], cx).await;\n        let workspace =\n            cx.add_window(|window, cx| Workspace::test_new(project.clone(), window, cx));\n        let cx = &mut VisualTestContext::from_window(*workspace, cx);\n        let panel = workspace.update(cx, ProjectPanel::new).unwrap();\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[\n                ": "",
    ",\n            ]\n        );\n\n        let dir_1_file = find_project_entry(&panel, ": "",
    ", cx)\n            .expect(": "",
    ");\n        let dir_2_file = find_project_entry(&panel, ": "",
    ");\n        let gitignored_dir_file =\n            find_project_entry(&panel, ": "",
    ", cx);\n        assert_eq!(\n            gitignored_dir_file, None,\n            ": "",
    ", cx);\n        cx.executor().run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[\n                ": "",
    "\n        );\n        let gitignored_dir_file =\n            find_project_entry(&panel, ": "",
    ", cx)\n                .expect(": "",
    ");\n\n        toggle_expand_dir(&panel, ": "",
    "\n        );\n\n        for file_entry in [dir_1_file, dir_2_file, gitignored_dir_file] {\n            panel.update(cx, |panel, cx| {\n                panel.project.update(cx, |_, cx| {\n                    cx.emit(project::Event::ActiveEntryChanged(Some(file_entry)))\n                })\n            });\n            cx.run_until_parked();\n            assert_eq!(\n                visible_entries_as_strings(&panel, 0..20, cx),\n                &[\n                    ": "",
    ",\n                ],\n                ": "",
    "\n            );\n        }\n\n        cx.update(|_, cx| {\n            cx.update_global::<SettingsStore, _>(|store, cx| {\n                store.update_user_settings::<ProjectPanelSettings>(cx, |project_panel_settings| {\n                    project_panel_settings.auto_reveal_entries = Some(true)\n                });\n            })\n        });\n\n        panel.update(cx, |panel, cx| {\n            panel.project.update(cx, |_, cx| {\n                cx.emit(project::Event::ActiveEntryChanged(Some(dir_1_file)))\n            })\n        });\n        cx.run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[\n                ": "",
    "\n        );\n\n        panel.update(cx, |panel, cx| {\n            panel.project.update(cx, |_, cx| {\n                cx.emit(project::Event::ActiveEntryChanged(Some(dir_2_file)))\n            })\n        });\n        cx.run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[\n                ": "",
    "\n        );\n\n        panel.update(cx, |panel, cx| {\n            panel.project.update(cx, |_, cx| {\n                cx.emit(project::Event::ActiveEntryChanged(Some(\n                    gitignored_dir_file,\n                )))\n            })\n        });\n        cx.run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[\n                ": "",
    "\n        );\n\n        panel.update(cx, |panel, cx| {\n            panel.project.update(cx, |_, cx| {\n                cx.emit(project::Event::RevealInProjectPanel(gitignored_dir_file))\n            })\n        });\n        cx.run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[\n                ": "",
    "\n        );\n    }\n\n    #[gpui::test]\n    async fn test_explicit_reveal(cx: &mut gpui::TestAppContext) {\n        init_test_with_editor(cx);\n        cx.update(|cx| {\n            cx.update_global::<SettingsStore, _>(|store, cx| {\n                store.update_user_settings::<WorktreeSettings>(cx, |worktree_settings| {\n                    worktree_settings.file_scan_exclusions = Some(Vec::new());\n                });\n                store.update_user_settings::<ProjectPanelSettings>(cx, |project_panel_settings| {\n                    project_panel_settings.auto_reveal_entries = Some(false)\n                });\n            })\n        });\n\n        let fs = FakeFs::new(cx.background_executor.clone());\n        fs.insert_tree(\n            ": "",
    ", cx);\n        cx.run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[\n                ": "",
    "\n            );\n        }\n\n        panel.update(cx, |panel, cx| {\n            panel.project.update(cx, |_, cx| {\n                cx.emit(project::Event::RevealInProjectPanel(dir_1_file))\n            })\n        });\n        cx.run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[\n                ": "",
    "\n        );\n\n        panel.update(cx, |panel, cx| {\n            panel.project.update(cx, |_, cx| {\n                cx.emit(project::Event::RevealInProjectPanel(dir_2_file))\n            })\n        });\n        cx.run_until_parked();\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[\n                ": "",
    "\n        );\n    }\n\n    #[gpui::test]\n    async fn test_creating_excluded_entries(cx: &mut gpui::TestAppContext) {\n        init_test(cx);\n        cx.update(|cx| {\n            cx.update_global::<SettingsStore, _>(|store, cx| {\n                store.update_user_settings::<WorktreeSettings>(cx, |project_settings| {\n                    project_settings.file_scan_exclusions =\n                        Some(vec![": "",
    ".to_string(), ": "",
    ".to_string()]);\n                });\n            });\n        });\n\n        cx.update(|cx| {\n            register_project_item::<TestProjectItemView>(cx);\n        });\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    ",]\n        );\n        workspace\n            .update(cx, |workspace, _, cx| {\n                assert!(\n                    workspace.active_item(cx).is_none(),\n                    ": "",
    "\n                );\n            })\n            .unwrap();\n\n        let excluded_file_path = ": "",
    ";\n        let excluded_dir_path = ": "",
    ";\n\n        panel.update_in(cx, |panel, window, cx| panel.new_file(&NewFile, window, cx));\n        panel.update_in(cx, |panel, window, cx| {\n            assert!(panel.filename_editor.read(cx).is_focused(window));\n        });\n        panel\n            .update_in(cx, |panel, window, cx| {\n                panel.filename_editor.update(cx, |editor, cx| {\n                    editor.set_text(excluded_file_path, window, cx)\n                });\n                panel.confirm_edit(window, cx).unwrap()\n            })\n            .await\n            .unwrap();\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..13, cx),\n            &[": "",
    "\n        );\n        panel.update_in(cx, |panel, window, cx| {\n            assert!(\n                !panel.filename_editor.read(cx).is_focused(window),\n                ": "",
    "\n            );\n        });\n        workspace\n            .update(cx, |workspace, _, cx| {\n                let active_entry_path = workspace\n                    .active_item(cx)\n                    .expect(": "",
    ")\n                    .act_as::<TestProjectItemView>(cx)\n                    .expect(\n                        ": "",
    ",\n                    )\n                    .read(cx)\n                    .path\n                    .clone();\n                assert_eq!(\n                    active_entry_path.path.as_ref(),\n                    Path::new(excluded_file_path),\n                    ": "",
    "\n                );\n\n                assert!(\n                    workspace.notification_ids().is_empty(),\n                    ": "",
    "\n                );\n            })\n            .unwrap();\n        assert!(\n            fs.is_file(Path::new(": "",
    ")).await,\n            ": "",
    ", cx);\n        panel.update_in(cx, |panel, window, cx| {\n            panel.new_directory(&NewDirectory, window, cx)\n        });\n        panel.update_in(cx, |panel, window, cx| {\n            assert!(panel.filename_editor.read(cx).is_focused(window));\n        });\n        panel\n            .update_in(cx, |panel, window, cx| {\n                panel.filename_editor.update(cx, |editor, cx| {\n                    editor.set_text(excluded_file_path, window, cx)\n                });\n                panel.confirm_edit(window, cx).unwrap()\n            })\n            .await\n            .unwrap();\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..13, cx),\n            &[": "",
    "\n            );\n        });\n        workspace\n            .update(cx, |workspace, _, cx| {\n                let notifications = workspace.notification_ids();\n                assert_eq!(\n                    notifications.len(),\n                    1,\n                    ": "",
    "\n                );\n                workspace.dismiss_notification(notifications.first().unwrap(), cx);\n                assert!(workspace.notification_ids().is_empty());\n            })\n            .unwrap();\n\n        select_path(&panel, ": "",
    ", cx);\n        panel.update_in(cx, |panel, window, cx| {\n            panel.new_directory(&NewDirectory, window, cx)\n        });\n        panel.update_in(cx, |panel, window, cx| {\n            assert!(panel.filename_editor.read(cx).is_focused(window));\n        });\n        panel\n            .update_in(cx, |panel, window, cx| {\n                panel.filename_editor.update(cx, |editor, cx| {\n                    editor.set_text(excluded_dir_path, window, cx)\n                });\n                panel.confirm_edit(window, cx).unwrap()\n            })\n            .await\n            .unwrap();\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..13, cx),\n            &[": "",
    "\n                );\n                workspace.dismiss_notification(notifications.first().unwrap(), cx);\n                assert!(workspace.notification_ids().is_empty());\n            })\n            .unwrap();\n        assert!(\n            fs.is_dir(Path::new(": "",
    "\n        );\n    }\n\n    #[gpui::test]\n    async fn test_selection_restored_when_creation_cancelled(cx: &mut gpui::TestAppContext) {\n        init_test_with_editor(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    "\n            ]\n        );\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.cancel(&menu::Cancel, window, cx)\n        });\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..10, cx),\n            &[\n                //\n                ": "",
    "\n            ]\n        );\n    }\n\n    #[gpui::test]\n    async fn test_basic_file_deletion_scenarios(cx: &mut gpui::TestAppContext) {\n        init_test_with_editor(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    ", cx);\n\n        // Test Case 1: Delete middle file in directory\n        select_path(&panel, ": "",
    ", cx);\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..15, cx),\n            &[\n                ": "",
    "\n        );\n\n        submit_deletion(&panel, cx);\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..15, cx),\n            &[\n                ": "",
    "\n        );\n\n        // Test Case 2: Delete last file in directory\n        submit_deletion(&panel, cx);\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..15, cx),\n            &[\n                ": "",
    "\n        );\n\n        // Test Case 3: Delete root level file\n        select_path(&panel, ": "",
    "\n        );\n    }\n\n    #[gpui::test]\n    async fn test_complex_selection_scenarios(cx: &mut gpui::TestAppContext) {\n        init_test_with_editor(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    "\n                    },\n                    ": "",
    ", cx);\n\n        // Test Case 1: Select and delete nested directory with parent\n        cx.simulate_modifiers_change(gpui::Modifiers {\n            control: true,\n            ..Default::default()\n        });\n        select_path_with_mark(&panel, ": "",
    "\n        );\n\n        // Test Case 2: Select mixed files and directories across levels\n        select_path_with_mark(&panel, ": "",
    "\n        );\n    }\n\n    #[gpui::test]\n    async fn test_delete_all_files_and_directories(cx: &mut gpui::TestAppContext) {\n        init_test_with_editor(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    ", cx);\n\n        // Test Case 1: Select all root files and directories\n        cx.simulate_modifiers_change(gpui::Modifiers {\n            control: true,\n            ..Default::default()\n        });\n        select_path_with_mark(&panel, ": "",
    "\n        );\n\n        submit_deletion(&panel, cx);\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[": "",
    "\n        );\n    }\n\n    #[gpui::test]\n    async fn test_nested_selection_deletion(cx: &mut gpui::TestAppContext) {\n        init_test_with_editor(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    ", cx);\n        cx.simulate_modifiers_change(gpui::Modifiers {\n            control: true,\n            ..Default::default()\n        });\n\n        // Test Case 1: Select parent directory, subdirectory, and a file inside the subdirectory\n        select_path_with_mark(&panel, ": "",
    "\n        );\n        submit_deletion(&panel, cx);\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[": "",
    "\n        );\n    }\n\n    #[gpui::test]\n    async fn test_multiple_worktrees_deletion(cx: &mut gpui::TestAppContext) {\n        init_test_with_editor(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        // First worktree\n        fs.insert_tree(\n            ": "",
    ",\n                },\n            }),\n        )\n        .await;\n\n        // Second worktree\n        fs.insert_tree(\n            ": "",
    ".as_ref()], cx).await;\n        let workspace =\n            cx.add_window(|window, cx| Workspace::test_new(project.clone(), window, cx));\n        let cx = &mut VisualTestContext::from_window(*workspace, cx);\n        let panel = workspace.update(cx, ProjectPanel::new).unwrap();\n\n        // Expand all directories for testing\n        toggle_expand_dir(&panel, ": "",
    ", cx);\n\n        // Test Case 1: Delete files across different worktrees\n        cx.simulate_modifiers_change(gpui::Modifiers {\n            control: true,\n            ..Default::default()\n        });\n        select_path_with_mark(&panel, ": "",
    "\n        );\n\n        submit_deletion(&panel, cx);\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[\n                ": "",
    "\n        );\n\n        // Test Case 2: Delete directories from different worktrees\n        select_path_with_mark(&panel, ": "",
    "\n        );\n\n        // Test Case 4: Delete all remaining files except roots\n        select_path_with_mark(&panel, ": "",
    "\n        );\n    }\n\n    #[gpui::test]\n    async fn test_selection_vs_marked_entries_priority(cx: &mut gpui::TestAppContext) {\n        init_test_with_editor(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    "\n        );\n\n        // Delete should operate on the selected entry (file1.txt)\n        submit_deletion(&panel, cx);\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..15, cx),\n            &[\n                ": "",
    "\n        );\n\n        select_path_with_mark(&panel, ": "",
    "\n        );\n\n        // Delete should operate on all marked entries, ignoring the selection\n        submit_deletion(&panel, cx);\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..15, cx),\n            &[\n                ": "",
    "\n        );\n    }\n\n    #[gpui::test]\n    async fn test_selection_fallback_to_next_highest_worktree(cx: &mut gpui::TestAppContext) {\n        init_test_with_editor(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            ": "",
    ",\n                },\n            }),\n        )\n        .await;\n\n        fs.insert_tree(\n            ": "",
    ": {},\n            }),\n        )\n        .await;\n\n        let project = Project::test(fs.clone(), [": "",
    ", cx);\n\n        cx.simulate_modifiers_change(gpui::Modifiers {\n            control: true,\n            ..Default::default()\n        });\n        select_path_with_mark(&panel, ": "",
    ", cx);\n\n        submit_deletion(&panel, cx);\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[": "",
    "\n        );\n    }\n\n    fn toggle_expand_dir(\n        panel: &Entity<ProjectPanel>,\n        path: impl AsRef<Path>,\n        cx: &mut VisualTestContext,\n    ) {\n        let path = path.as_ref();\n        panel.update_in(cx, |panel, window, cx| {\n            for worktree in panel.project.read(cx).worktrees(cx).collect::<Vec<_>>() {\n                let worktree = worktree.read(cx);\n                if let Ok(relative_path) = path.strip_prefix(worktree.root_name()) {\n                    let entry_id = worktree.entry_for_path(relative_path).unwrap().id;\n                    panel.toggle_expanded(entry_id, window, cx);\n                    return;\n                }\n            }\n            panic!(": "",
    ", path);\n        });\n    }\n\n    #[gpui::test]\n    async fn test_expand_all_for_entry(cx: &mut gpui::TestAppContext) {\n        init_test_with_editor(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            path!(": "",
    ": {\n                            ": "",
    ": {\n                                ": "",
    "\n                            }\n                        }\n                    },\n                    ": "",
    "\n                        }\n                    },\n                    ": "",
    "\n                        }\n                    }\n                }\n            }),\n        )\n        .await;\n\n        let project = Project::test(fs.clone(), [path!(": "",
    ").as_ref()], cx).await;\n        let workspace =\n            cx.add_window(|window, cx| Workspace::test_new(project.clone(), window, cx));\n        let cx = &mut VisualTestContext::from_window(*workspace, cx);\n\n        // Test 1: When auto-fold is enabled\n        cx.update(|_, cx| {\n            let settings = *ProjectPanelSettings::get_global(cx);\n            ProjectPanelSettings::override_global(\n                ProjectPanelSettings {\n                    auto_fold_dirs: true,\n                    ..settings\n                },\n                cx,\n            );\n        });\n\n        let panel = workspace.update(cx, ProjectPanel::new).unwrap();\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[": "",
    ", cx);\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[\n                separator!(": "",
    "),\n                separator!(": "",
    "),\n            ],\n            ": "",
    "\n        );\n\n        let entry_id = find_project_entry(&panel, ": "",
    ", cx).unwrap();\n        panel.update(cx, |panel, cx| {\n            let project = panel.project.read(cx);\n            let worktree = project.worktrees(cx).next().unwrap().read(cx);\n            panel.expand_all_for_entry(worktree.id(), entry_id, cx);\n            panel.update_visible_entries(None, cx);\n        });\n        cx.run_until_parked();\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[\n                separator!(": "",
    "\n        );\n\n        // Test 2: When auto-fold is disabled\n        cx.update(|_, cx| {\n            let settings = *ProjectPanelSettings::get_global(cx);\n            ProjectPanelSettings::override_global(\n                ProjectPanelSettings {\n                    auto_fold_dirs: false,\n                    ..settings\n                },\n                cx,\n            );\n        });\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.collapse_all_entries(&CollapseAllEntries, window, cx);\n        });\n\n        toggle_expand_dir(&panel, ": "",
    "\n        );\n\n        // Test 3: When explicitly called on ignored directory\n        let ignored_dir_entry = find_project_entry(&panel, ": "",
    ", cx).unwrap();\n        panel.update(cx, |panel, cx| {\n            let project = panel.project.read(cx);\n            let worktree = project.worktrees(cx).next().unwrap().read(cx);\n            panel.expand_all_for_entry(worktree.id(), ignored_dir_entry, cx);\n            panel.update_visible_entries(None, cx);\n        });\n        cx.run_until_parked();\n\n        assert_eq!(\n            visible_entries_as_strings(&panel, 0..20, cx),\n            &[\n                separator!(": "",
    "\n        );\n    }\n\n    #[gpui::test]\n    async fn test_collapse_all_for_entry(cx: &mut gpui::TestAppContext) {\n        init_test(cx);\n\n        let fs = FakeFs::new(cx.executor().clone());\n        fs.insert_tree(\n            path!(": "",
    ",\n                            ": "",
    "\n                        },\n                    },\n                    ": "",
    "\n                    }\n                },\n                ": "",
    "\n                    }\n                }\n            }),\n        )\n        .await;\n\n        let project = Project::test(fs.clone(), [path!(": "",
    ").as_ref()], cx).await;\n        let workspace =\n            cx.add_window(|window, cx| Workspace::test_new(project.clone(), window, cx));\n        let cx = &mut VisualTestContext::from_window(*workspace, cx);\n\n        // Test 1: Basic collapsing\n        {\n            let panel = workspace.update(cx, ProjectPanel::new).unwrap();\n\n            toggle_expand_dir(&panel, ": "",
    ", cx);\n            toggle_expand_dir(&panel, ": "",
    ", cx);\n\n            assert_eq!(\n                visible_entries_as_strings(&panel, 0..20, cx),\n                &[\n                    separator!(": "",
    "),\n                    separator!(": "",
    "),\n                ],\n                ": "",
    "\n            );\n\n            let entry_id = find_project_entry(&panel, ": "",
    ", cx).unwrap();\n            panel.update(cx, |panel, cx| {\n                let project = panel.project.read(cx);\n                let worktree = project.worktrees(cx).next().unwrap().read(cx);\n                panel.collapse_all_for_entry(worktree.id(), entry_id, cx);\n                panel.update_visible_entries(None, cx);\n            });\n\n            assert_eq!(\n                visible_entries_as_strings(&panel, 0..20, cx),\n                &[": "",
    ",],\n                ": "",
    "\n            );\n        }\n\n        // Test 2: With auto-fold enabled\n        {\n            cx.update(|_, cx| {\n                let settings = *ProjectPanelSettings::get_global(cx);\n                ProjectPanelSettings::override_global(\n                    ProjectPanelSettings {\n                        auto_fold_dirs: true,\n                        ..settings\n                    },\n                    cx,\n                );\n            });\n\n            let panel = workspace.update(cx, ProjectPanel::new).unwrap();\n\n            toggle_expand_dir(&panel, ": "",
    ", cx).unwrap();\n            panel.update(cx, |panel, cx| {\n                let project = panel.project.read(cx);\n                let worktree = project.worktrees(cx).next().unwrap().read(cx);\n                panel.collapse_all_for_entry(worktree.id(), entry_id, cx);\n            });\n\n            toggle_expand_dir(&panel, ": "",
    "\n            );\n        }\n\n        // Test 3: With auto-fold disabled\n        {\n            cx.update(|_, cx| {\n                let settings = *ProjectPanelSettings::get_global(cx);\n                ProjectPanelSettings::override_global(\n                    ProjectPanelSettings {\n                        auto_fold_dirs: false,\n                        ..settings\n                    },\n                    cx,\n                );\n            });\n\n            let panel = workspace.update(cx, ProjectPanel::new).unwrap();\n\n            toggle_expand_dir(&panel, ": "",
    "\n            );\n        }\n    }\n\n    fn select_path(\n        panel: &Entity<ProjectPanel>,\n        path: impl AsRef<Path>,\n        cx: &mut VisualTestContext,\n    ) {\n        let path = path.as_ref();\n        panel.update(cx, |panel, cx| {\n            for worktree in panel.project.read(cx).worktrees(cx).collect::<Vec<_>>() {\n                let worktree = worktree.read(cx);\n                if let Ok(relative_path) = path.strip_prefix(worktree.root_name()) {\n                    let entry_id = worktree.entry_for_path(relative_path).unwrap().id;\n                    panel.selection = Some(crate::SelectedEntry {\n                        worktree_id: worktree.id(),\n                        entry_id,\n                    });\n                    return;\n                }\n            }\n            panic!(": "",
    ", path);\n        });\n    }\n\n    fn select_path_with_mark(\n        panel: &Entity<ProjectPanel>,\n        path: impl AsRef<Path>,\n        cx: &mut VisualTestContext,\n    ) {\n        let path = path.as_ref();\n        panel.update(cx, |panel, cx| {\n            for worktree in panel.project.read(cx).worktrees(cx).collect::<Vec<_>>() {\n                let worktree = worktree.read(cx);\n                if let Ok(relative_path) = path.strip_prefix(worktree.root_name()) {\n                    let entry_id = worktree.entry_for_path(relative_path).unwrap().id;\n                    let entry = crate::SelectedEntry {\n                        worktree_id: worktree.id(),\n                        entry_id,\n                    };\n                    if !panel.marked_entries.contains(&entry) {\n                        panel.marked_entries.insert(entry);\n                    }\n                    panel.selection = Some(entry);\n                    return;\n                }\n            }\n            panic!(": "",
    ", path);\n        });\n    }\n\n    fn find_project_entry(\n        panel: &Entity<ProjectPanel>,\n        path: impl AsRef<Path>,\n        cx: &mut VisualTestContext,\n    ) -> Option<ProjectEntryId> {\n        let path = path.as_ref();\n        panel.update(cx, |panel, cx| {\n            for worktree in panel.project.read(cx).worktrees(cx).collect::<Vec<_>>() {\n                let worktree = worktree.read(cx);\n                if let Ok(relative_path) = path.strip_prefix(worktree.root_name()) {\n                    return worktree.entry_for_path(relative_path).map(|entry| entry.id);\n                }\n            }\n            panic!(": "",
    ");\n        })\n    }\n\n    fn visible_entries_as_strings(\n        panel: &Entity<ProjectPanel>,\n        range: Range<usize>,\n        cx: &mut VisualTestContext,\n    ) -> Vec<String> {\n        let mut result = Vec::new();\n        let mut project_entries = HashSet::default();\n        let mut has_editor = false;\n\n        panel.update_in(cx, |panel, window, cx| {\n            panel.for_each_visible_entry(range, window, cx, |project_entry, details, _, _| {\n                if details.is_editing {\n                    assert!(!has_editor, ": "",
    ");\n                    has_editor = true;\n                } else {\n                    assert!(\n                        project_entries.insert(project_entry),\n                        ": "",
    ",\n                        project_entry,\n                        details\n                    );\n                }\n\n                let indent = ": "",
    ".repeat(details.depth);\n                let icon = if details.kind.is_dir() {\n                    if details.is_expanded {\n                        ": "",
    "\n                    } else {\n                        ": "",
    "\n                    }\n                } else {\n                    ": "",
    "\n                };\n                let name = if details.is_editing {\n                    format!(": "",
    ", details.filename)\n                } else if details.is_processing {\n                    format!(": "",
    ", details.filename)\n                } else {\n                    details.filename.clone()\n                };\n                let selected = if details.is_selected {\n                    ": "",
    "\n                } else {\n                    ": "",
    "\n                };\n                let marked = if details.is_marked {\n                    ": "",
    "\n                };\n\n                result.push(format!(": "",
    "));\n            });\n        });\n\n        result\n    }\n\n    fn init_test(cx: &mut TestAppContext) {\n        cx.update(|cx| {\n            let settings_store = SettingsStore::test(cx);\n            cx.set_global(settings_store);\n            init_settings(cx);\n            theme::init(theme::LoadThemes::JustBase, cx);\n            language::init(cx);\n            editor::init_settings(cx);\n            crate::init(cx);\n            workspace::init_settings(cx);\n            client::init_settings(cx);\n            Project::init_settings(cx);\n\n            cx.update_global::<SettingsStore, _>(|store, cx| {\n                store.update_user_settings::<ProjectPanelSettings>(cx, |project_panel_settings| {\n                    project_panel_settings.auto_fold_dirs = Some(false);\n                });\n                store.update_user_settings::<WorktreeSettings>(cx, |worktree_settings| {\n                    worktree_settings.file_scan_exclusions = Some(Vec::new());\n                });\n            });\n        });\n    }\n\n    fn init_test_with_editor(cx: &mut TestAppContext) {\n        cx.update(|cx| {\n            let app_state = AppState::test(cx);\n            theme::init(theme::LoadThemes::JustBase, cx);\n            init_settings(cx);\n            language::init(cx);\n            editor::init(cx);\n            crate::init(cx);\n            workspace::init(app_state.clone(), cx);\n            Project::init_settings(cx);\n\n            cx.update_global::<SettingsStore, _>(|store, cx| {\n                store.update_user_settings::<ProjectPanelSettings>(cx, |project_panel_settings| {\n                    project_panel_settings.auto_fold_dirs = Some(false);\n                });\n                store.update_user_settings::<WorktreeSettings>(cx, |worktree_settings| {\n                    worktree_settings.file_scan_exclusions = Some(Vec::new());\n                });\n            });\n        });\n    }\n\n    fn ensure_single_file_is_opened(\n        window: &WindowHandle<Workspace>,\n        expected_path: &str,\n        cx: &mut TestAppContext,\n    ) {\n        window\n            .update(cx, |workspace, _, cx| {\n                let worktrees = workspace.worktrees(cx).collect::<Vec<_>>();\n                assert_eq!(worktrees.len(), 1);\n                let worktree_id = worktrees[0].read(cx).id();\n\n                let open_project_paths = workspace\n                    .panes()\n                    .iter()\n                    .filter_map(|pane| pane.read(cx).active_item()?.project_path(cx))\n                    .collect::<Vec<_>>();\n                assert_eq!(\n                    open_project_paths,\n                    vec![ProjectPath {\n                        worktree_id,\n                        path: Arc::from(Path::new(expected_path))\n                    }],\n                    ": "",
    "\n                );\n            })\n            .unwrap();\n    }\n\n    fn submit_deletion(panel: &Entity<ProjectPanel>, cx: &mut VisualTestContext) {\n        assert!(\n            !cx.has_pending_prompt(),\n            ": "",
    "\n        );\n        panel.update_in(cx, |panel, window, cx| {\n            panel.delete(&Delete { skip_prompt: false }, window, cx)\n        });\n        assert!(\n            cx.has_pending_prompt(),\n            ": "",
    "\n        );\n        cx.simulate_prompt_answer(": "",
    ");\n        assert!(\n            !cx.has_pending_prompt(),\n            ": "",
    "\n        );\n        cx.executor().run_until_parked();\n    }\n\n    fn submit_deletion_skipping_prompt(panel: &Entity<ProjectPanel>, cx: &mut VisualTestContext) {\n        assert!(\n            !cx.has_pending_prompt(),\n            ": "",
    "\n        );\n        panel.update_in(cx, |panel, window, cx| {\n            panel.delete(&Delete { skip_prompt: true }, window, cx)\n        });\n        assert!(!cx.has_pending_prompt(), ": "",
    ");\n        cx.executor().run_until_parked();\n    }\n\n    fn ensure_no_open_items_and_panes(\n        workspace: &WindowHandle<Workspace>,\n        cx: &mut VisualTestContext,\n    ) {\n        assert!(\n            !cx.has_pending_prompt(),\n            ": "",
    "\n        );\n        workspace\n            .read_with(cx, |workspace, cx| {\n                let open_project_paths = workspace\n                    .panes()\n                    .iter()\n                    .filter_map(|pane| pane.read(cx).active_item()?.project_path(cx))\n                    .collect::<Vec<_>>();\n                assert!(\n                    open_project_paths.is_empty(),\n                    ": ""
  },
  "zed/crates/prompt_library/src/prompt_library.rs": {
    "This prompt supports special functionality.\n": "",
    "It's read-only, but you can remove it from your default prompt.": "",
    "Prompt Library": "",
    "No prompts.": "",
    "No prompts found matching your search.": "",
    "Search...": "",
    "Untitled": "",
    "toggle-default-prompt": "",
    "Remove from Default Prompt": "",
    "built-in-prompt": "",
    "Built-in prompt": "",
    "delete-prompt": "",
    "Delete Prompt": "",
    "Add to Default Prompt": "",
    "error while loading prompt: {:?}": "",
    "Are you sure you want to delete {}": "",
    "Delete": "",
    "Cancel": "",
    " copy": "",
    "{title_to_duplicate}{DUPLICATE_SUFFIX} {i}": "",
    "prompt-list": "",
    "new-prompt": "",
    "New Prompt": "",
    "prompt-editor": "",
    "prompt-editor-inner": "",
    "active-editor-header": "",
    "token_count": "",
    "{} tokens": "",
    "Model: {}": "",
    "duplicate-prompt": "",
    "Duplicate Prompt": "",
    "prompt-manager": "",
    "PromptLibrary": "",
    "No prompts yet": "",
    "Create your first prompt:": "",
    "create-prompt": ""
  },
  "zed/crates/recent_projects/src/disconnected_overlay.rs": {
    "Failed to reconnect": "",
    "Your connection to the remote project has been lost.": "",
    "\nUnsaved changes are stored locally.": "",
    "Your connection to {} has been lost.{}": "",
    "disconnected": "",
    "Disconnected": "",
    "close-window": "",
    "Close Window": "",
    "reconnect": "",
    "Reconnect": ""
  },
  "zed/crates/recent_projects/src/recent_projects.rs": {
    "{reuse_window} reuses this window, {create_window} opens a new one": "",
    "Recently opened projects will show up here": "",
    "No matches": "",
    ", ": "",
    "delete": "",
    "Delete from Recent Projects...": "",
    "remote": "",
    "Open Remote Folder": "",
    "local": "",
    "Open Local Folder": "",
    "/dir": "",
    "main.ts": "",
    "a": "",
    "/dir/main.ts": "",
    "EDIT": "",
    "After inserting more text into the editor without saving, we should have a dirty project": "",
    "fake candidate": "",
    "/test/path/": "",
    "Should have no pending prompt on dirty project before opening the new recent project": "",
    "Should remove the modal after selecting new recent project": "",
    "Dirty workspace should prompt before opening the new recent project": "",
    "Cancel": "",
    "Should have no pending prompt after cancelling": "",
    "Should be in the same dirty project after cancelling": ""
  },
  "zed/crates/recent_projects/src/remote_servers.rs": {
    "Add a nickname for this server": "",
    "Failed to open path": "",
    "SSH Project Created": "",
    "could not parse: {:?}": "",
    "Failed to connect": "",
    "SSH Server Created": "",
    "({})": "",
    "ssh-server": "",
    "No projects.": "",
    "Open Folder": "",
    "View Server Options": "",
    "Failed to connect: {:?}": "",
    "Ok": "",
    ", ": "",
    "Delete Remote Project": "",
    "ssh user@example -p 2222": "",
    "create-remote-server": "",
    "Enter the command you use to SSH into this server.": "",
    "learn-more": "",
    "Learn more…": "",
    "https://zed.dev/docs/remote-development": "",
    "Edit Nickname": "",
    "Add Nickname to Server": "",
    "ssh-options-add-nickname": "",
    "add-nickname": "",
    "Copied server address ({}) to clipboard": "",
    "ssh-options-copy-server-address": "",
    "copy-server-address": "",
    "Copy Server Address": "",
    "Remove server `{}`?": "",
    "Yes, remove it": "",
    "No, keep it": "",
    "remove-server": "",
    "Remove Server": "",
    "go-back": "",
    "Go Back": "",
    "ssh-edit-nickname": "",
    "ssh-connect-new-server-container": "",
    "register-remove-server-button": "",
    "Connect New Server": "",
    "ssh-server-list": "",
    "No remote servers registered yet.": "",
    "remote-projects": "",
    "Remote Projects (beta)": "",
    "RemoteServerModal": ""
  },
  "zed/crates/recent_projects/src/ssh_connections.rs": {
    "Option::is_none": "",
    "Vec::is_empty": "",
    "yes/no": "",
    "Connecting": "",
    "PasswordPrompt": "",
    "{}…": "",
    "({})": "",
    "SshConnectionModal": "",
    "Failed to download remote server binary (version: {}, os: {}, arch: {}): {}": "",
    "unknown": "",
    "Failed to open project: {:?}": "",
    "Failed to connect over SSH": "",
    "Retry": "",
    "Ok": ""
  },
  "zed/crates/refineable/derive_refineable/src/derive_refineable.rs": {
    "refineable": "",
    "Debug": "",
    "{}Refinement": "",
    "This derive macro only supports structs with named fields": "",
    "Option": "",
    "Expected struct type for a refineable field": ""
  },
  "zed/crates/repl/src/components/kernel_options.rs": {
    "...{}": "",
    "Select a kernel...": "",
    "Python Env": "",
    "Remote": "",
    "kernel-docs": "",
    "Kernel Docs": "",
    "kernel-switcher": ""
  },
  "zed/crates/repl/src/kernels/native_kernel.rs": {
    "Empty argv in kernelspec {}": "",
    "Invalid argv in kernelspec {}": "",
    "{connection_file}": "",
    "Missing 'connection_file' in argv in kernelspec {}": "",
    "RunningKernel": "",
    "process": "",
    "hmac-sha256": "",
    "zed-{}": "",
    "Failed to create jupyter runtime dir {runtime_dir:?}": "",
    "kernel-zed-{entity_id}.json": "",
    "failed to start the kernel process": "",
    "kernel: {}": "",
    "kernel process exited successfully": "",
    "kernel process exited with status: {:?}": "",
    "kernel process exited with error: {:?}": "",
    "Failed to kill the kernel process: {}": "",
    "Invalid kernelspec directory: {path:?}": "",
    "Not a directory: {path:?}": "",
    "kernel.json": "",
    "Error reading kernelspec directory: {err:?}": "",
    "CONDA_PREFIX": "",
    "share": "",
    "jupyter": "",
    "python": "",
    "-c": "",
    "import sys; print(sys.prefix)": "",
    "kernels": "",
    "/jupyter": "",
    ".zed": "",
    "settings.json": "",
    "{ ": "",
    ": 8 }": "",
    "tasks.json": "",
    "[{\n                        ": "",
    ": ": "",
    ",\n                        ": "",
    ": [": "",
    ", ": "",
    "]\n                    },]": "",
    "{\n                            ": "",
    ",\n                            ": "",
    "],\n                            ": "",
    ": {}\n                        }": "",
    "deno": "",
    "/jupyter/kernels": ""
  },
  "zed/crates/repl/src/kernels/remote_kernels.rs": {
    "POST": "",
    "/kernels": "",
    "Authorization": "",
    "token {}": "",
    "Failed to launch kernel: {}": "",
    "/kernelspecs": "",
    "GET": "",
    "No kernel specs found": "",
    "Failed to fetch kernel specs: {}": "",
    "{}/api/kernels/{}/channels?token={}": "",
    "http": "",
    "ws": "",
    "User-Agent": "",
    "Zed/{} ({}; {})": "",
    "repl": "",
    "Error receiving message: {:?}": "",
    "RemoteRunningKernel": "",
    "remote_server url": "",
    "working_directory": "",
    "request_tx": "",
    "execution_state": "",
    "kernel_info": "",
    "/kernels/{}": "",
    "DELETE": "",
    "Failed to shutdown kernel: {}": ""
  },
  "zed/crates/repl/src/notebook/notebook_ui.rs": {
    "LOCAL_NOTEBOOK_DEV": "",
    "Cells would all run here, if that was implemented!": "",
    "Open notebook triggered": "",
    "Move cell up triggered": "",
    "Move cell down triggered": "",
    "Add markdown block triggered": "",
    "Add code block triggered": "",
    "run-all-cells": "",
    "Execute all cells": "",
    "clear-all-outputs": "",
    "Clear all outputs": "",
    "move-cell-up": "",
    "Move cell up": "",
    "move-cell-down": "",
    "Move cell down": "",
    "new-markdown-cell": "",
    "Add markdown block": "",
    "new-code-cell": "",
    "Add code block": "",
    "more-menu": "",
    "repl": "",
    "notebook": "",
    "notebook-cells": "",
    "ipynb": "",
    "Failed to find the absolute path": "",
    "Failed to parse notebook: {:?}": "",
    "Entry not found": "",
    "notebook controls": "",
    "save() must be implemented if can_save() returns true": "",
    "save_as() must be implemented if can_save() returns true": "",
    "reload() must be implemented if can_save() returns true": ""
  },
  "zed/crates/repl/src/outputs/image.rs": {
    "unsupported image format": ""
  },
  "zed/crates/repl/src/outputs.rs": {
    "copy-output": "",
    "Copy Output": "",
    "open-in-buffer": "",
    "Open in Buffer": "",
    "REPL Output": "",
    "Failed to load image: {}": "",
    "Unsupported media type": "",
    "the output": "",
    "Connecting to kernel...": "",
    "Executing...": "",
    "Unknown status": "",
    "Kernel shutting down...": "",
    "Kernel restarting...": "",
    "Kernel shutdown": "",
    "Queued...": "",
    "Kernel error: {}": ""
  },
  "zed/crates/repl/src/repl_editor.rs": {
    "editor is not in a worktree": "",
    "editor was dropped": "",
    "No kernel found for language: {}": "",
    "{comment_prefix}%%": "",
    "TypeScript": "",
    "Python": "",
    "TestLang": "",
    "# ": "",
    "\n                    print(1 + 1)\n                    print(2 + 2)\n\n                    print(4 + 4)\n\n\n                ": "",
    "print(1 + 1)": "",
    "\n                print(1 + 1)\n                print(2 + 2)": "",
    "\n                print(1 + 1)\n                print(2 + 2)\n\n                print(4 + 4)": "",
    "\n                    # Hello!\n                    # %% [markdown]\n                    # This is some arithmetic\n                    print(1 + 1)\n                    print(2 + 2)\n\n                    # %%\n                    print(3 + 3)\n                    print(4 + 4)\n\n                    print(5 + 5)\n\n\n\n                ": "",
    "\n                # %% [markdown]\n                # This is some arithmetic\n                print(1 + 1)\n                print(2 + 2)": "",
    "\n                    # %% [markdown]\n                    # This is some arithmetic\n                    print(1 + 1)\n                    print(2 + 2)": "",
    "\n                    # %%\n                    print(3 + 3)\n                    print(4 + 4)\n\n                    print(5 + 5)": "",
    "markdown": "",
    "typescript": "",
    "python": "",
    "\n                    Hey this is Markdown!\n\n                    ```typescript\n                    let foo = 999;\n                    console.log(foo + 1999);\n                    ```\n\n                    ```typescript\n                    console.log(": "",
    ")\n                    ```\n                    ": "",
    "\n                    let foo = 999;\n                    console.log(foo + 1999);\n                    ": "",
    "console.log(\"foo\")\n": "",
    "\n                    Hey this is Markdown!\n\n                    ```typescript\n                    let foo = 999;\n                    console.log(foo + 1999);\n                    ```\n\n                    ```ts\n                    console.log(": "",
    ")\n                    ```\n\n                    ```typescript\n                    console.log(": "",
    ")\n                    ```\n                ": "",
    "console.log(\"another code block\")\n": "",
    "\n                    Hey this is Markdown!\n\n                    ```python\n                    print(": "",
    ")\n                    print(": "",
    "\n                print(": "",
    ")\n                print(": "",
    ")\n                ": ""
  },
  "zed/crates/repl/src/repl_sessions_ui.rs": {
    "Python": "",
    "REPL Sessions": "",
    "REPL Session Started": "",
    "To start interactively running code in your editor, you need to install and configure Jupyter kernels.": "",
    "No Jupyter Kernels Available": "",
    "install-kernels": "",
    "Install Kernels": "",
    "https://zed.dev/docs/repl#language-specific-instructions": "",
    "To run code in a Jupyter kernel, select some code and use the 'repl::Run' command.": "",
    "No Jupyter Kernel Sessions": "",
    "Jupyter Kernel Sessions": ""
  },
  "zed/crates/repl/src/repl_store.rs": {
    "repl": "",
    "Failed to get python kernelspecs: {:?}": "",
    "JUPYTER_SERVER": "",
    "JUPYTER_TOKEN": ""
  },
  "zed/crates/repl/src/session.rs": {
    "editor is not open": "",
    "workspace dropped": "",
    "close_output_area": "",
    "Close output area": "",
    "Kernel Status Changed": "",
    "restarting kernel": "",
    "interrupt": "",
    "Interrupt": "",
    "Starting": "",
    "Error: {err}": "",
    "Shutting Down": "",
    "Shutdown": "",
    "Restarting": "",
    "({status_text})": "",
    "shutdown": ""
  },
  "zed/crates/reqwest_client/src/reqwest_client.rs": {
    "key=[^&]+": "",
    "Failed to initialize HTTP client": "",
    "Failed to parse proxy URI {}: {}": "",
    "no tokio runtime found, creating one for Reqwest...": "",
    "key=REDACTED": "",
    "http://localhost:10809": "",
    "test": "",
    "https://localhost:10809": "",
    "socks4://localhost:10808": "",
    "socks4a://localhost:10808": "",
    "socks5://localhost:10808": "",
    "socks5h://localhost:10808": "",
    "file:///etc/hosts": ""
  },
  "zed/crates/rope/src/chunk.rs": {
    "point {:?} extends beyond rows for string {:?}": "",
    "point {:?} extends beyond row for string {:?}": "",
    "point {:?} is beyond this chunk's extent {:?}": "",
    "point {:?} is beyond the end of the line in chunk {:?}": "",
    "point {:?} is within character in chunk {:?}": "",
    "Chunk: {:?}": "",
    "Range: {:?}": "",
    "nth_set_bit({:0128b}, {})": "",
    "Verifying chunk {:?}": "",
    "mismatch at offset {}": "",
    "mismatch at point {:?}": "",
    "mismatch at offset_utf16 {:?}": "",
    "mismatch at point_utf16 {:?}": "",
    "mismatch for unclipped_point_utf16_to_point at {:?}": "",
    "incorrect left clip at {:?}": "",
    "incorrect right clip at {:?}": "",
    "incorrect left clip within multi-byte char at {:?}": "",
    "incorrect right clip within multi-byte char at {:?}": "",
    "incorrect unclipped_point_utf16_to_point within multi-byte char at {:?}": "",
    "incorrect left clip_point_utf16 within multi-byte char at {:?}": "",
    "incorrect right clip_point_utf16 within multi-byte char at {:?}": "",
    "incorrect left clip_offset_utf16 within multi-byte char at {:?}": "",
    "incorrect right clip_offset_utf16 within multi-byte char at {:?}": "",
    "mismatch at final offset {}": "",
    "mismatch at final point {:?}": "",
    "mismatch at final point_utf16 {:?}": "",
    "mismatch for unclipped_point_utf16_to_point at final point {:?}": "",
    "incorrect left clip at final point {:?}": "",
    "incorrect right clip at final point {:?}": "",
    "incorrect left clip_point_utf16 at final point {:?}": "",
    "incorrect right clip_point_utf16 at final point {:?}": "",
    "incorrect left clip_offset_utf16 at final offset {:?}": "",
    "incorrect right clip_offset_utf16 at final offset {:?}": ""
  },
  "zed/crates/rpc/src/auth.rs": {
    "failed to encrypt string with public key": "",
    "failed to base64-decode encrypted string": "",
    "failed to decrypt string with private key": "",
    "decrypted content was not valid utf8": "",
    "failed to serialize public key": "",
    "failed to base64-decode public key string": "",
    "failed to parse public key": "",
    "MIGJAoGBAMPvufou8wOuUIF1Wlkbtn0ZMM9nC55QJ06nTZvgMfZv5esFVU9-cQO_JC1P9ZoEcMDJweFERnQuQLqzsrMDLFbkdgL128ZU43WOLiQraxaICFIZsPUeTtWMKp2D5bPWsNxs-lnCma7vCAry6fpXuj5AKQdk7cTZJNucgvZQ0uUfAgMBAAE=": "",
    "token {:?} has non-printable char {}": "",
    "token {:?} is not URL-safe": ""
  },
  "zed/crates/rpc/src/peer.rs": {
    "{}/{}": "",
    "handle io future: start": "",
    "connection closed": "",
    "handle io future: end": "",
    "outer loop iteration start": "",
    "inner loop iteration start": "",
    "outgoing rpc message: writing": "",
    "outgoing rpc message: done writing": "",
    "failed to write RPC message": "",
    "keepalive interval: resetting after sending message": "",
    "outgoing rpc message: writing timed out": "",
    "timed out writing message": "",
    "outgoing rpc message: channel closed": "",
    "keepalive interval: pinging": "",
    "keepalive interval: done pinging": "",
    "failed to send keepalive": "",
    "keepalive interval: resetting after pinging": "",
    "keepalive interval: pinging timed out": "",
    "timed out sending keepalive": "",
    "error reading rpc message from socket": "",
    "incoming rpc message: received": "",
    "receive timeout: resetting": "",
    "incoming rpc message: processing": "",
    "incoming rpc message: processed": "",
    "incoming rpc message: channel closed": "",
    "incoming rpc message: processing timed out": "",
    "timed out processing incoming message": "",
    "receive timeout: delay between messages too long": "",
    "delay between messages too long": "",
    "incoming message future: start": "",
    "incoming message future: end": "",
    "incoming response: received": "",
    "incoming response: request future dropped": "",
    "incoming response: waiting to resume requester": "",
    "incoming response: requester resumed": "",
    "incoming stream response: request future dropped": "",
    "incoming stream response: waiting to resume requester": "",
    "incoming stream response: requester resumed": "",
    "incoming response: unknown request": "",
    "incoming message: received": "",
    "unable to construct a typed envelope": "",
    "received response of the wrong type": "",
    "connection was closed": "",
    "message {} was not handled": "",
    "no such connection: {}": "",
    "Peer": "",
    "connections": "",
    "unknown message type": "",
    "message 1": "",
    "message 2": "",
    "response": "",
    "response 2": ""
  },
  "zed/crates/rpc/src/proto_client.rs": {
    "registered handler for the same message twice": "",
    "EntityMessageSubscriber::Entity": "",
    "handle": "",
    "EntityMessageSubscriber::Pending": "",
    "envelopes": "",
    "received response of the wrong type": ""
  },
  "zed/crates/search/src/buffer_search.rs": {
    "util::serde::default_true": "",
    "search_bar": "",
    "Search…": "",
    "Replace with…": "",
    "{}/{}": "",
    "0/0": "",
    "BufferSearchBar": "",
    "in_replace": "",
    "Find in results": "",
    "editor-scroll": "",
    "buffer-search-bar-toggle-replace-button": "",
    "Toggle Replace": "",
    "buffer-search-bar-toggle-search-selection-button": "",
    "Toggle Search Selection": "",
    "select-all": "",
    "Select All Matches": "",
    "Select Previous Match": "",
    "Select Next Match": "",
    "Close": "",
    "Close Search Bar": "",
    "search-replace-next": "",
    "Replace Next Match": "",
    "search-replace-all": "",
    "Replace All Matches": "",
    "buffer_search": "",
    "query editor should be backed by a singleton buffer": "",
    "regex": "",
    "loading regex language": "",
    "\n                A regular expression (shortened as regex or regexp;[1] also referred to as\n                rational expression[2][3]) is a sequence of characters that specifies a search\n                pattern in text. Usually such patterns are used by string-searching algorithms\n                for ": "",
    " or ": "",
    " operations on strings, or for input validation.\n                ": "",
    "us": "",
    "or": "",
    "\n        A regular expression (shortened as regex or regexp;[1] also referred to as\n        rational expression[2][3]) is a sequence of characters that specifies a search\n        pattern in text. Usually such patterns are used by string-searching algorithms\n        for ": "",
    " operations on strings, or for input validation.\n        ": "",
    "Should pick a query with multiple results": "",
    "a": "",
    "Initially, the editor should not be focused": "",
    "Expected to have only one selection before adding carets to all matches, but got: {initial_selections:?}": "",
    "Should focus editor after successful SelectAllMatches": "",
    "Should select all `a` characters in the buffer, but got: {all_selections:?}": "",
    "Match index should not change after selecting all matches": "",
    "Should still have editor focused after SelectNextMatch": "",
    "On next match, should deselect items and select the next match": "",
    "Next match should be different from the first selection": "",
    "Match index should be updated to the next one": "",
    "Should still have editor focused after SelectPreviousMatch": "",
    "On previous match, should deselect items and select the previous item": "",
    "Previous match should be the same as the first selection": "",
    "Match index should be updated to the previous one": "",
    "abas_nonexistent_match": "",
    "Should not switch focus to editor if SelectAllMatches does not find any matches": "",
    "Should not select anything new if there are no matches": "",
    "For no matches, there should be no active match index": "",
    "\n        self.buffer.update(cx, |buffer, cx| {\n            buffer.edit(\n                edits,\n                Some(AutoindentMode::Block {\n                    original_indent_columns,\n                }),\n                cx,\n            )\n        });\n\n        this.buffer.update(cx, |buffer, cx| {\n            buffer.edit([(end_of_line..start_of_next_line, replace)], None, cx)\n        });\n        ": "",
    "edit\\(": "",
    "Should select all `edit(` in the buffer, but got: {all_selections:?}": "",
    "edit(": "",
    "b": "",
    "c": "",
    "ba": "",
    "expression": "",
    "expr$1": "",
    "\n        A regular expr$1 (shortened as regex or regexp;[1] also referred to as\n        rational expr$1[2][3]) is a sequence of characters that specifies a search\n        pattern in text. Usually such patterns are used by string-searching algorithms\n        for ": "",
    "banana": "",
    "\n        A regular expr$1 (shortened as regex banana regexp;[1] also referred to as\n        rational expr$1[2][3]) is a sequence of characters that specifies a search\n        pattern in text. Usually such patterns are used by string-searching algorithms\n        for ": "",
    "\\[([^\\]]+)\\]": "",
    "${1}number": "",
    "\n        A regular expr$1 (shortened as regex banana regexp;1number also referred to as\n        rational expr$12number3number) is a sequence of characters that specifies a search\n        pattern in text. Usually such patterns are used by string-searching algorithms\n        for ": "",
    "a\\w+s": "",
    "things": "",
    "\n        A regular expr$1 (shortened as regex banana regexp;1number also referred to as\n        rational expr$12number3number) is a sequence of characters that specifies a search\n        pattern in text. Usually such patterns are used by string-searching things\n        for ": "",
    "\n            A regular \n (shortened as regex or regexp;[1] also referred to as\n            rational \n[2][3]) is a sequence of characters that specifies a search\n            pattern in text. Usually such patterns are used by string-searching algorithms\n            for ": "",
    " operations on strings, or for input validation.\n            ": "",
    "\\\n\\\\": "",
    "find": "",
    "find and replace": "",
    "#\n            .unindent(),\n        })\n        .await;\n\n        run_replacement_test(ReplacementTestParams {\n            editor: &editor,\n            search_bar: &search_bar,\n            cx,\n            search_text: r": "",
    ",\n            search_options: Some(SearchOptions::REGEX),\n            replacement_text: r": "",
    ",\n            replace_all: true,\n            expected_text: r#": "",
    "#\n            .unindent(),\n        })\n        .await;\n    }\n\n    #[gpui::test]\n    async fn test_find_matches_in_selections_singleton_buffer_multiple_selections(\n        cx: &mut TestAppContext,\n    ) {\n        init_globals(cx);\n        let buffer = cx.new(|cx| {\n            Buffer::local(\n                r#": "",
    "#\n                .unindent(),\n                cx,\n            )\n        });\n        let cx = cx.add_empty_window();\n        let editor =\n            cx.new_window_entity(|window, cx| Editor::for_buffer(buffer.clone(), None, window, cx));\n\n        let search_bar = cx.new_window_entity(|window, cx| {\n            let mut search_bar = BufferSearchBar::new(None, window, cx);\n            search_bar.set_active_pane_item(Some(&editor), window, cx);\n            search_bar.show(window, cx);\n            search_bar\n        });\n\n        editor.update_in(cx, |editor, window, cx| {\n            editor.change_selections(None, window, cx, |s| {\n                s.select_ranges(vec![Point::new(1, 0)..Point::new(2, 4)])\n            })\n        });\n\n        search_bar.update_in(cx, |search_bar, window, cx| {\n            let deploy = Deploy {\n                focus: true,\n                replace_enabled: false,\n                selection_search_enabled: true,\n            };\n            search_bar.deploy(&deploy, window, cx);\n        });\n\n        cx.run_until_parked();\n\n        search_bar\n            .update_in(cx, |search_bar, window, cx| {\n                search_bar.search(": "",
    ", None, window, cx)\n            })\n            .await\n            .unwrap();\n\n        editor.update(cx, |editor, cx| {\n            assert_eq!(\n                editor.search_background_highlights(cx),\n                &[\n                    Point::new(1, 0)..Point::new(1, 3),\n                    Point::new(1, 8)..Point::new(1, 11),\n                    Point::new(2, 0)..Point::new(2, 3),\n                ]\n            );\n        });\n    }\n\n    #[gpui::test]\n    async fn test_find_matches_in_selections_multiple_excerpts_buffer_multiple_selections(\n        cx: &mut TestAppContext,\n    ) {\n        init_globals(cx);\n        let text = r#": "",
    "#\n        .unindent();\n\n        let cx = cx.add_empty_window();\n        let editor = cx.new_window_entity(|window, cx| {\n            let multibuffer = MultiBuffer::build_multi(\n                [\n                    (\n                        &text,\n                        vec![\n                            Point::new(0, 0)..Point::new(2, 0),\n                            Point::new(4, 0)..Point::new(5, 0),\n                        ],\n                    ),\n                    (&text, vec![Point::new(9, 0)..Point::new(11, 0)]),\n                ],\n                cx,\n            );\n            Editor::for_multibuffer(multibuffer, None, false, window, cx)\n        });\n\n        let search_bar = cx.new_window_entity(|window, cx| {\n            let mut search_bar = BufferSearchBar::new(None, window, cx);\n            search_bar.set_active_pane_item(Some(&editor), window, cx);\n            search_bar.show(window, cx);\n            search_bar\n        });\n\n        editor.update_in(cx, |editor, window, cx| {\n            editor.change_selections(None, window, cx, |s| {\n                s.select_ranges(vec![\n                    Point::new(1, 0)..Point::new(1, 4),\n                    Point::new(5, 3)..Point::new(6, 4),\n                ])\n            })\n        });\n\n        search_bar.update_in(cx, |search_bar, window, cx| {\n            let deploy = Deploy {\n                focus: true,\n                replace_enabled: false,\n                selection_search_enabled: true,\n            };\n            search_bar.deploy(&deploy, window, cx);\n        });\n\n        cx.run_until_parked();\n\n        search_bar\n            .update_in(cx, |search_bar, window, cx| {\n                search_bar.search(": "",
    ", None, window, cx)\n            })\n            .await\n            .unwrap();\n\n        editor.update(cx, |editor, cx| {\n            assert_eq!(\n                editor.search_background_highlights(cx),\n                &[\n                    Point::new(1, 0)..Point::new(1, 3),\n                    Point::new(5, 8)..Point::new(5, 11),\n                    Point::new(6, 0)..Point::new(6, 3),\n                ]\n            );\n        });\n    }\n\n    #[gpui::test]\n    async fn test_invalid_regexp_search_after_valid(cx: &mut TestAppContext) {\n        let (editor, search_bar, cx) = init_test(cx);\n        // Search using valid regexp\n        search_bar\n            .update_in(cx, |search_bar, window, cx| {\n                search_bar.enable_search_option(SearchOptions::REGEX, window, cx);\n                search_bar.search(": "",
    ", None, window, cx)\n            })\n            .await\n            .unwrap();\n        editor.update_in(cx, |editor, window, cx| {\n            assert_eq!(\n                display_points_of(editor.all_text_background_highlights(window, cx)),\n                &[\n                    DisplayPoint::new(DisplayRow(0), 10)..DisplayPoint::new(DisplayRow(0), 20),\n                    DisplayPoint::new(DisplayRow(1), 9)..DisplayPoint::new(DisplayRow(1), 19),\n                ],\n            );\n        });\n\n        // Now, the expression is invalid\n        search_bar\n            .update_in(cx, |search_bar, window, cx| {\n                search_bar.search(": "",
    ", None, window, cx)\n            })\n            .await\n            .unwrap_err();\n        editor.update_in(cx, |editor, window, cx| {\n            assert!(\n                display_points_of(editor.all_text_background_highlights(window, cx)).is_empty(),\n            );\n        });\n    }\n\n    #[gpui::test]\n    async fn test_search_options_changes(cx: &mut TestAppContext) {\n        let (_editor, search_bar, cx) = init_test(cx);\n        update_search_settings(\n            SearchSettings {\n                whole_word: false,\n                case_sensitive: false,\n                include_ignored: false,\n                regex: false,\n            },\n            cx,\n        );\n\n        let deploy = Deploy {\n            focus: true,\n            replace_enabled: false,\n            selection_search_enabled: true,\n        };\n\n        search_bar.update_in(cx, |search_bar, window, cx| {\n            assert_eq!(\n                search_bar.search_options,\n                SearchOptions::NONE,\n                ": "",
    "\n            );\n            search_bar.toggle_search_option(SearchOptions::WHOLE_WORD, window, cx);\n            assert_eq!(\n                search_bar.search_options,\n                SearchOptions::WHOLE_WORD,\n                ": "",
    "\n            );\n            assert!(\n                !search_bar.dismissed,\n                ": "",
    "\n            );\n            search_bar.deploy(&deploy, window, cx);\n            assert_eq!(\n                search_bar.configured_options,\n                SearchOptions::NONE,\n                ": "",
    "\n            );\n            assert_eq!(\n                search_bar.search_options,\n                SearchOptions::WHOLE_WORD,\n                ": "",
    "\n            );\n\n            search_bar.dismiss(&Dismiss, window, cx);\n            search_bar.deploy(&deploy, window, cx);\n            assert_eq!(\n                search_bar.search_options,\n                SearchOptions::NONE,\n                ": "",
    "\n            );\n\n            search_bar.toggle_search_option(SearchOptions::REGEX, window, cx);\n            search_bar.toggle_search_option(SearchOptions::WHOLE_WORD, window, cx);\n            assert_eq!(\n                search_bar.search_options,\n                SearchOptions::REGEX | SearchOptions::WHOLE_WORD,\n                ": "",
    "\n            );\n        });\n\n        update_search_settings(\n            SearchSettings {\n                whole_word: false,\n                case_sensitive: true,\n                include_ignored: false,\n                regex: false,\n            },\n            cx,\n        );\n        search_bar.update_in(cx, |search_bar, window, cx| {\n            assert_eq!(\n                search_bar.search_options,\n                SearchOptions::REGEX | SearchOptions::WHOLE_WORD,\n                ": "",
    "\n            );\n\n            search_bar.deploy(&deploy, window, cx);\n            assert_eq!(\n                search_bar.configured_options,\n                SearchOptions::CASE_SENSITIVE,\n                ": "",
    "\n            );\n            assert_eq!(\n                search_bar.search_options,\n                SearchOptions::REGEX | SearchOptions::WHOLE_WORD,\n                ": "",
    "\n            );\n            search_bar.dismiss(&Dismiss, window, cx);\n            search_bar.deploy(&deploy, window, cx);\n            assert_eq!(\n                search_bar.search_options,\n                SearchOptions::CASE_SENSITIVE,\n                ": ""
  },
  "zed/crates/search/src/mode.rs": {
    "Text": "",
    "Regex": "",
    "Activate {} Mode": ""
  },
  "zed/crates/search/src/project_search.rs": {
    ",": "",
    "Searching…": "",
    "No Results": "",
    "Search All Files": "",
    "No results found in this project for the provided query": "",
    "project-search-landing-page": "",
    "Project Search": "",
    "Project Search Opened": "",
    "save_as should not have been called": "",
    "Search all files…": "",
    "Replace in project…": "",
    "Include: crates/**/*.toml": "",
    "Exclude: vendor/*, *.lock": "",
    "regex": "",
    "loading regex language": "",
    "Hit enter to search. For more options:": "",
    "filter-paths": "",
    "Include/exclude specific paths": "",
    "find-replace": "",
    "Find and replace": "",
    "Match with regex": "",
    "match-case": "",
    "Match case": "",
    "match-whole-words": "",
    "Match whole words": "",
    "query editor should be backed by a singleton buffer": "",
    "project-search-filter-button": "",
    "Toggle Filters": "",
    "project-search-toggle-replace": "",
    "Toggle Replace": "",
    "{index}/{match_quantity}+": "",
    "{index}/{match_quantity}": "",
    "0/0": "",
    "project-search-prev-match": "",
    "Go To Previous Match": "",
    "project-search-next-match": "",
    "Go To Next Match": "",
    "matches": "",
    "Search limits reached.\nTry narrowing your search.": "",
    "project-search-replace-next": "",
    "Replace Next Match": "",
    "project-search-replace-all": "",
    "Replace All Matches": "",
    "project-search-opened-only": "",
    "Only Search Open Files": "",
    "ProjectSearchBar": "",
    "in_replace": "",
    "/dir": "",
    "one.rs": "",
    "const ONE: usize = 1;": "",
    "two.rs": "",
    "const TWO: usize = one::ONE + one::ONE;": "",
    "three.rs": "",
    "const THREE: usize = one::ONE + two::TWO;": "",
    "four.rs": "",
    "const FOUR: usize = one::ONE + three::THREE;": "",
    "TWO": "",
    "\n\n\nconst THREE: usize = one::ONE + two::TWO;\n\n\n\n\nconst TWO: usize = one::ONE + one::ONE;\n": "",
    "Expected no search panel to be active": "",
    "Search view expected to appear after new search event trigger": "",
    "Empty search view should be focused after the toggle focus event: no results panel to focus on": "",
    "Search view should be focused after the new search view is activated": "",
    "New search query should be empty but got '{query_text}'": "",
    "Empty search view should have no results but got '{results_text}'": "",
    "sOMETHINGtHATsURELYdOESnOTeXIST": "",
    "Search view for mismatching query should have no results but got '{results_text}'": "",
    "Search view should be focused after mismatching query had been used in search": "",
    "Search view with mismatching query should be focused after the toggle focus event: still no results panel to focus on": "",
    "Search view results should match the query": "",
    "Search view with mismatching query should be focused after search results are available": "",
    "Search view with matching query should still have its results editor focused after the toggle focus event": "",
    "two": "",
    "Query should be updated to first search result after search view 2nd open in a row": "",
    "Results should be unchanged after search view 2nd open in a row": "",
    "Focus should be moved into query editor again after search view 2nd open in a row": "",
    "Search view with matching query should switch focus to the results editor after the toggle focus event": "",
    "New search view should be open after `workspace::NewSearch` event": "",
    "First search view should not have an updated query": "",
    "Results of the first search view should not update too": "",
    "Focus should be moved away from the first search view": "",
    "New search view should get the query from the text cursor was at during the event spawn (first search view's first result)": "",
    "No search results should be in the 2nd view yet, as we did not spawn a search for it": "",
    "Focus should be moved into query editor of the new window": "",
    "FOUR": "",
    "\n\n\nconst FOUR: usize = one::ONE + three::THREE;\n": "",
    "New search view with the updated query should have new search results": "",
    "a": "",
    "b": "",
    "no entry for /a/ directory": "",
    "Search view expected to appear after new search in directory event trigger": "",
    "On new search in directory, focus should be moved into query editor": "",
    "New search in directory should not have any excluded files": "",
    "New search in directory should have included dir entry path": "",
    "const": "",
    "\n\n\nconst ONE: usize = 1;\n\n\n\n\nconst TWO: usize = one::ONE + one::ONE;\n": "",
    "New search in directory should have a filter that matches a certain directory": "",
    "ONE": "",
    "THREE": "",
    "JUST_TEXT_INPUT": "",
    "TWO_NEW": "",
    "1.txt": "",
    "\n\n\n\n\n A \n\n\n\n\n": "",
    "2.txt": "",
    "3.rs": "",
    "4.rs": "",
    "5.rs": "",
    "6.rs": "",
    "7.rs": "",
    "8.rs": "",
    "9.rs": "",
    "a.rs": "",
    "b.rs": "",
    "\n\n\n\n\n B \n\n\n\n\n": "",
    "c.rs": "",
    "d.rs": "",
    "e.rs": "",
    "f.rs": "",
    "g.rs": "",
    "h.rs": "",
    "i.rs": "",
    "j.rs": "",
    "k.rs": "",
    "A": "",
    " A ": "",
    "unable to update search view": "",
    "B": "",
    " B ": "",
    "search bar query": "",
    "should open a project search view after spawning a new search": "",
    "Project search should take the query from the buffer search bar since it got focused and had a query inside": ""
  },
  "zed/crates/search/src/search.rs": {
    "Match Whole Words": "",
    "Match Case Sensitively": "",
    "Also search files ignored by configuration": "",
    "Use Regular Expressions": "",
    "{:?} is not a named SearchOption": "",
    "No more matches": ""
  },
  "zed/crates/semantic_index/examples/index.rs": {
    "Zed semantic index example": "",
    "http://localhost:11434": "",
    "Usage: cargo run --example index -p semantic_index -- <project_path>": "",
    "OPENAI_API_KEY": "",
    "OPENAI_API_KEY not set": "",
    "/tmp/semantic-index-db.mdb": "",
    "no event emitted": "",
    "Index time: {:?}": "",
    "converting an anchor to a point": "",
    "✄✄✄✄✄✄✄✄✄✄✄✄✄✄ {:?} @ {} ✄✄✄✄✄✄✄✄✄✄✄✄✄✄": "",
    "{:?}:{:?}:{:?}": ""
  },
  "zed/crates/semantic_index/src/embedding/cloud.rs": {
    "openai/text-embedding-3-small": "",
    "sign in required": "",
    "failed to fetch cached embeddings via cloud model": "",
    "invalid digest for cached embedding": "",
    "server did not return an embedding for {:?}": ""
  },
  "zed/crates/semantic_index/src/embedding/ollama.rs": {
    "nomic-embed-text": "",
    "mxbai-embed-large": "",
    "http://localhost:11434/api/embeddings": "",
    "Unable to pull response": ""
  },
  "zed/crates/semantic_index/src/chunking.rs": {
    "failed to parse file {path:?} for chunking": "",
    "\n            struct Person {\n                first_name: String,\n                last_name: String,\n                age: u32,\n            }\n\n            impl Person {\n                fn new(first_name: String, last_name: String, age: u32) -> Self {\n                    Self { first_name, last_name, age }\n                }\n\n                /// Returns the first name\n                /// something something something\n                fn first_name(&self) -> &str {\n                    &self.first_name\n                }\n\n                fn last_name(&self) -> &str {\n                    &self.last_name\n                }\n\n                fn age(&self) -> u32 {\n                    self.age\n                }\n            }\n        ": "",
    "    /// Returns the first name": "",
    "\n            struct T {}\n            struct U {}\n            struct V {}\n            struct W {\n                a: T,\n                b: U,\n            }\n        ": "",
    "\n            struct S { a: u32 }\n            struct T { a: u64 }\n            struct U { a: u64, b: u64, c: u64, d: u64, e: u64, f: u64, g: u64, h: u64, i: u64, j: u64 }\n            struct W { a: u64, b: u64, c: u64, d: u64, e: u64, f: u64, g: u64, h: u64, i: u64, j: u64 }\n        ": "",
    "unexpected number of chunks: {chunks:?}": "",
    "chunk {ix} starts at unexpected offset {}. expected {}": "",
    "invalid expected chunk prefix {ix}: {expected_prefix:?}": "",
    "chunk ranges are not contiguous: {:?}": "",
    "chunks don't cover entire text {:?}": "",
    "a\n": "",
    "\n            (function_item name: (_) @name) @item\n            (impl_item type: (_) @name) @item\n            (struct_item name: (_) @name) @item\n            (field_declaration name: (_) @name) @item\n        ": ""
  },
  "zed/crates/semantic_index/src/embedding_index.rs": {
    "failed to create read transaction": "",
    "failed to create iterator": "",
    "scanning for embedding index: {:?}": "",
    "embedding provider returned unexpected embedding count {}, expected {}": "",
    "deleting embeddings in range {:?}": "",
    "saving embedding for file {:?}": "",
    "no such path": "",
    "\\0": ""
  },
  "zed/crates/semantic_index/src/embedding.rs": {
    "Embedding(sized: {}; values: [": "",
    ", ": "",
    "{:.3}": "",
    "...": "",
    "])": ""
  },
  "zed/crates/semantic_index/src/project_index_debug_view.rs": {
    "chunk {} of {}. length: {}": "",
    "prev": "",
    "next": "",
    "selected-path-name": "",
    "x": "",
    "Project Index (Debug)": ""
  },
  "zed/crates/semantic_index/src/project_index.rs": {
    "failed to create read transaction": "",
    "failed to iterate database": "",
    "Searching for {queries:?}": "",
    "The number of query embeddings does not match the number of queries": "",
    "searched {} entries in {:?}": "",
    "embedding query took {:?}": "",
    "failed to create db read transaction": "",
    "No summary found for {:?}": "",
    "Error reading from summary database: {:?}": "",
    "Error flushing summary backlog: {:?}": "",
    "Summary backlog flushed in {:?}": ""
  },
  "zed/crates/semantic_index/src/semantic_index.rs": {
    "opening database connection": "",
    "No SemanticDb, skipping project index": "",
    "\n\n": "",
    "garbage in": "",
    "garbage out": "",
    "/fake_project": "",
    "../fixture/main.rs": "",
    "../fixture/needle.md": "",
    "garbage in, garbage out": "",
    "should have found some results, but only found {:?}": "",
    "result: {:?}": "",
    "score: {:?}": "",
    "cannot embed text containing a 'g' character": "",
    "test1.md": "",
    "test2.md": "",
    "one\ntwo\nthree\nfour\nfive\n": "",
    "aaa\nbbb\nccc\nddd\neee\n": "",
    "file1.txt": "",
    "file2.txt": ""
  },
  "zed/crates/semantic_index/src/worktree_index.rs": {
    "digests-{}": "",
    "summaries-{}": "",
    "Updating entries...": "",
    "failed to create read transaction": ""
  },
  "zed/crates/semantic_version/src/semantic_version.rs": {
    "missing major version number": "",
    "missing minor version number": "",
    "missing patch version number": "",
    "{}.{}.{}": "",
    "Invalid version string \"{string}\"": ""
  },
  "zed/crates/settings/src/keymap_file.rs": {
    ", ": "",
    "KeymapAction": "",
    "Error loading built-in keymap \"{asset_path}\": {error_message}": "",
    "JSON parse error in built-in keymap \"{asset_path}\": {error}": "",
    "{error_message}": "",
    "JSON parse error: {error}": "",
    " Parse error in section `context` field: {}": "",
    "\n\n - Unrecognized fields: {}": "",
    "{:?}": "",
    "  ": "",
    "\n\n- In binding {}, {indented_err}": "",
    "Errors in user keymap file.\n": "",
    "\n\nIn section without context predicate:": "",
    "\n\nIn section with {}:": "",
    "context = \"{}\"": "",
    "{section_errors}": "",
    ",\n                        MarkdownString::inline_code(&action.0.to_string())\n                    ));\n                }\n                let serde_json::Value::String(ref name) = items[0] else {\n                    return Err(format!(\n                        ": "",
    ",\n                        MarkdownString::inline_code(&action.0.to_string())\n                    ));\n                };\n                let action_input = items[1].clone();\n                let action_input_string = action_input.to_string();\n                (\n                    cx.build_action(&name, Some(action_input)),\n                    Some(action_input_string),\n                )\n            }\n            Value::String(name) => (cx.build_action(&name, None), None),\n            Value::Null => (Ok(NoAction.boxed_clone()), None),\n            _ => {\n                return Err(format!(\n                    ": "",
    ",\n                    MarkdownString::inline_code(&action.0.to_string())\n                ));\n            }\n        };\n\n        let action = match build_result {\n            Ok(action) => action,\n            Err(ActionBuildError::NotFound { name }) => {\n                return Err(format!(\n                    ": "",
    ",\n                    inline_code_string(&name)\n                ))\n            }\n            Err(ActionBuildError::BuildError { name, error }) => match action_input_string {\n                Some(action_input_string) => {\n                    return Err(format!(\n                        ": "",
    ",\n                        inline_code_string(&name),\n                        MarkdownString::inline_code(&action_input_string),\n                        MarkdownString::escape(&error.to_string())\n                    ))\n                }\n                None => {\n                    return Err(format!(\n                        ": "",
    ",\n                        inline_code_string(&name),\n                        MarkdownString::escape(&error.to_string())\n                    ))\n                }\n            },\n        };\n\n        let key_binding = match KeyBinding::load(keystrokes, action, context, key_equivalents) {\n            Ok(key_binding) => key_binding,\n            Err(InvalidKeystrokeError { keystroke }) => {\n                return Err(format!(\n                    ": "",
    ",\n                    inline_code_string(&keystroke),\n                    KEYSTROKE_PARSE_EXPECTED_MESSAGE\n                ))\n            }\n        };\n\n        if let Some(validator) = KEY_BINDING_VALIDATORS.get(&key_binding.action().type_id()) {\n            match validator.validate(&key_binding) {\n                Ok(()) => Ok(key_binding),\n                Err(error) => Err(error.0),\n            }\n        } else {\n            Ok(key_binding)\n        }\n    }\n\n    pub fn generate_json_schema_for_registered_actions(cx: &mut App) -> Value {\n        let mut generator = SchemaSettings::draft07()\n            .with(|settings| settings.option_add_null_type = false)\n            .into_generator();\n\n        let action_schemas = cx.action_schemas(&mut generator);\n        let deprecations = cx.action_deprecations();\n        KeymapFile::generate_json_schema(generator, action_schemas, deprecations)\n    }\n\n    fn generate_json_schema(\n        generator: SchemaGenerator,\n        action_schemas: Vec<(SharedString, Option<Schema>)>,\n        deprecations: &HashMap<SharedString, SharedString>,\n    ) -> serde_json::Value {\n        fn set<I, O>(input: I) -> Option<O>\n        where\n            I: Into<O>,\n        {\n            Some(input.into())\n        }\n\n        fn add_deprecation(schema_object: &mut SchemaObject, message: String) {\n            schema_object.extensions.insert(\n                // deprecationMessage is not part of the JSON Schema spec,\n                // but json-language-server recognizes it.\n                ": "",
    ".to_owned(),\n                Value::String(message),\n            );\n        }\n\n        fn add_deprecation_preferred_name(schema_object: &mut SchemaObject, new_name: &str) {\n            add_deprecation(schema_object, format!(": "",
    "));\n        }\n\n        fn add_description(schema_object: &mut SchemaObject, description: String) {\n            schema_object\n                .metadata\n                .get_or_insert(Default::default())\n                .description = Some(description);\n        }\n\n        let empty_object: SchemaObject = SchemaObject {\n            instance_type: set(InstanceType::Object),\n            ..Default::default()\n        };\n\n        // This is a workaround for a json-language-server issue where it matches the first\n        // alternative that matches the value's shape and uses that for documentation.\n        //\n        // In the case of the array validations, it would even provide an error saying that the name\n        // must match the name of the first alternative.\n        let mut plain_action = SchemaObject {\n            instance_type: set(InstanceType::String),\n            const_value: Some(Value::String(": "",
    ".to_owned())),\n            ..Default::default()\n        };\n        let no_action_message = ": "",
    ";\n        add_description(&mut plain_action, no_action_message.to_owned());\n        add_deprecation(&mut plain_action, no_action_message.to_owned());\n        let mut matches_action_name = SchemaObject {\n            const_value: Some(Value::String(": "",
    ";\n        add_description(&mut matches_action_name, no_action_message.to_owned());\n        add_deprecation(&mut matches_action_name, no_action_message.to_owned());\n        let action_with_input = SchemaObject {\n            instance_type: set(InstanceType::Array),\n            array: set(ArrayValidation {\n                items: set(vec![\n                    matches_action_name.into(),\n                    // Accept any value, as we want this to be the preferred match when there is a\n                    // typo in the name.\n                    Schema::Bool(true),\n                ]),\n                min_items: Some(2),\n                max_items: Some(2),\n                ..Default::default()\n            }),\n            ..Default::default()\n        };\n        let mut keymap_action_alternatives = vec![plain_action.into(), action_with_input.into()];\n\n        for (name, action_schema) in action_schemas.iter() {\n            let schema = if let Some(Schema::Object(schema)) = action_schema {\n                Some(schema.clone())\n            } else {\n                None\n            };\n\n            let description = schema.as_ref().and_then(|schema| {\n                schema\n                    .metadata\n                    .as_ref()\n                    .and_then(|metadata| metadata.description.clone())\n            });\n\n            let deprecation = if name == NoAction.name() {\n                Some(": "",
    ")\n            } else {\n                deprecations.get(name).map(|new_name| new_name.as_ref())\n            };\n\n            // Add an alternative for plain action names.\n            let mut plain_action = SchemaObject {\n                instance_type: set(InstanceType::String),\n                const_value: Some(Value::String(name.to_string())),\n                ..Default::default()\n            };\n            if let Some(new_name) = deprecation {\n                add_deprecation_preferred_name(&mut plain_action, new_name);\n            }\n            if let Some(description) = description.clone() {\n                add_description(&mut plain_action, description);\n            }\n            keymap_action_alternatives.push(plain_action.into());\n\n            // Add an alternative for actions with data specified as a [name, data] array.\n            //\n            // When a struct with no deserializable fields is added with impl_actions! /\n            // impl_actions_as! an empty object schema is produced. The action should be invoked\n            // without data in this case.\n            if let Some(schema) = schema {\n                if schema != empty_object {\n                    let mut matches_action_name = SchemaObject {\n                        const_value: Some(Value::String(name.to_string())),\n                        ..Default::default()\n                    };\n                    if let Some(description) = description.clone() {\n                        add_description(&mut matches_action_name, description.to_string());\n                    }\n                    if let Some(new_name) = deprecation {\n                        add_deprecation_preferred_name(&mut matches_action_name, new_name);\n                    }\n                    let action_with_input = SchemaObject {\n                        instance_type: set(InstanceType::Array),\n                        array: set(ArrayValidation {\n                            items: set(vec![matches_action_name.into(), schema.into()]),\n                            min_items: Some(2),\n                            max_items: Some(2),\n                            ..Default::default()\n                        }),\n                        ..Default::default()\n                    };\n                    keymap_action_alternatives.push(action_with_input.into());\n                }\n            }\n        }\n\n        // Placing null first causes json-language-server to default assuming actions should be\n        // null, so place it last.\n        keymap_action_alternatives.push(\n            SchemaObject {\n                instance_type: set(InstanceType::Null),\n                ..Default::default()\n            }\n            .into(),\n        );\n\n        let action_schema = SchemaObject {\n            subschemas: set(SubschemaValidation {\n                one_of: Some(keymap_action_alternatives),\n                ..Default::default()\n            }),\n            ..Default::default()\n        }\n        .into();\n\n        // The `KeymapSection` schema will reference the `KeymapAction` schema by name, so replacing\n        // the definition of `KeymapAction` results in the full action schema being used.\n        let mut root_schema = generator.into_root_schema_for::<KeymapFile>();\n        root_schema\n            .definitions\n            .insert(KeymapAction::schema_name(), action_schema);\n\n        // This and other json schemas can be viewed via `debug: open language server logs` ->\n        // `json-language-server` -> `Server Info`.\n        serde_json::to_value(root_schema).unwrap()\n    }\n\n    pub fn sections(&self) -> impl DoubleEndedIterator<Item = &KeymapSection> {\n        self.0.iter()\n    }\n\n    pub async fn load_keymap_file(fs: &Arc<dyn Fs>) -> Result<String> {\n        match fs.load(paths::keymap_file()).await {\n            result @ Ok(_) => result,\n            Err(err) => {\n                if let Some(e) = err.downcast_ref::<std::io::Error>() {\n                    if e.kind() == std::io::ErrorKind::NotFound {\n                        return Ok(crate::initial_keymap_content().to_string());\n                    }\n                }\n                Err(err)\n            }\n        }\n    }\n}\n\n// Double quotes a string and wraps it in backticks for markdown inline code..\nfn inline_code_string(text: &str) -> MarkdownString {\n    MarkdownString::inline_code(&format!(": "",
    "{}\"": "",
    "[\n              // Standard macOS bindings\n              {\n                \"bindings\": {\n                  \"up\": \"menu::SelectPrevious\",\n                },\n              },\n            ]\n                  ": ""
  },
  "zed/crates/settings/src/settings_file.rs": {
    "empty-theme": "",
    "ui_font_family": "",
    "Courier": "",
    "ui_font_features": "",
    "ui_font_size": "",
    "ui_font_fallback": "",
    "buffer_font_family": "",
    "buffer_font_features": "",
    "buffer_font_size": "",
    "buffer_font_fallback": "",
    "theme": "",
    "Courier New": "",
    "languages": ""
  },
  "zed/crates/settings/src/settings_store.rs": {
    "version": "",
    "missing default": "",
    "creating editorconfig parser": "",
    "parsing editorconfig sections": "",
    "A default setting must be added to the `default.json` file": "",
    "unregistered setting type {}": "",
    "no default value for setting type": "",
    "Failed to canonicalize settings path {:?}": "",
    "Failed to write settings to file {:?}": "",
    "settings must be an object": "",
    "Attempted to submit tasks into the settings store": "",
    "dev": "",
    "nightly": "",
    "stable": "",
    "preview": "",
    "{message}": "",
    "SettingsStore": "",
    "types": "",
    "default_settings": "",
    "user_settings": "",
    "local_settings": "",
    "no default value for setting {}": "",
    "(pair key: (string) @key value: (_) @value)": "",
    "Failed to create PAIR_QUERY": "",
    "\"{}\"": "",
    "\"{new_key}\": {new_val},\n{space:width$}": "",
    ": {new_val},": "",
    "{\n                    ": "",
    ": false,\n                    ": "",
    ": {\n                        ": "",
    ": ": "",
    ",\n                        ": "",
    ": 30,\n                        ": "",
    ": false\n                    }\n                }": "",
    "John Doe": "",
    ": true,\n                    ": "",
    ": { ": "",
    ": 31 },\n                    ": "",
    "\n                }": "",
    "/root1": "",
    "{ ": "",
    ": true } }": "",
    "/root1/subdir": "",
    " } }": "",
    "/root2": "",
    ": 42 }, ": "",
    " }": "",
    "/root1/something": "",
    "/root1/subdir/something": "",
    "Jane Doe": "",
    "/root2/something": "",
    "a": "",
    "b": "",
    ": false\n                    },\n                    ": "",
    ": false }": "",
    "x": "",
    "{\n                ": "",
    ": {\n                    ": "",
    ": true\n                    }\n                }\n            }": "",
    "JSON": "",
    ": true\n                    },\n                    ": "",
    ": false\n                    }\n                }\n            }": "",
    ":   { ": "",
    ": 36, ": "",
    ", ": "",
    ": true }\n            }": "",
    ": 37, ": "",
    ": 1, ": "",
    ": 2 }": "",
    ": {}\n            }": "",
    ": 37\n                }\n            }": "",
    ": 37\n                }\n            }\n            ": "",
    "{\n            }\n            ": "",
    "user": "",
    "turbo": "",
    "journal": ""
  },
  "zed/crates/settings_ui/src/appearance_settings_controls.rs": {
    "Theme": "",
    "Font": "",
    "theme": "",
    "Theme Mode": "",
    "light": "",
    "Light": "",
    "system": "",
    "System": "",
    "dark": "",
    "Dark": "",
    "UI Font Family": "",
    "ui-font-family": "",
    "UI Font Size": "",
    "ui-font-size": "",
    "UI Font Weight": "",
    "ui-font-weight": "",
    "UI Font Ligatures": "",
    "calt": "",
    "ui-font-ligatures": ""
  },
  "zed/crates/settings_ui/src/settings_ui.rs": {
    "settings-ui": "",
    "Settings": "",
    "Appearance": "",
    "Editor": ""
  },
  "zed/crates/snippet/src/snippet.rs": {
    "failed to parse snippet": "",
    "|": "",
    "expected a closing brace": "",
    "expected an integer": "",
    "Placeholder choice doesn't contain closing pipe-character '|'": "",
    "one-two-three": "",
    "one$1two": "",
    "onetwo": "",
    "one$123-$99-two": "",
    "one--two": "",
    "foo.$1": "",
    "foo.": "",
    "<div class=": "",
    ">$0</div>": "",
    "></div>": "",
    "one${1:two}three${2:four}": "",
    "onetwothreefour": "",
    "type ${1|i32, u32|} = $2": "",
    "Should be able to unpack choice placeholders": "",
    "type i32 = ": "",
    "i32": "",
    " u32": "",
    "${1|\\$\\{1\\|one\\,two\\,tree\\|\\}|}": "",
    "Should be able to parse choice with escape characters": "",
    "${1|one,two,tree|}": "",
    "for (${1:var ${2:i} = 0; ${2:i} < ${3:${4:array}.length}; ${2:i}++}) {$0}": "",
    "for (var i = 0; i < array.length; i++) {}": "",
    "\"\\$schema\": $1": "",
    "\"$schema\": ": "",
    "{a\\}": "",
    "{a}": "",
    "a\\b": "",
    "one\\\\$1two": "",
    "one\\two": ""
  },
  "zed/crates/snippets_ui/src/snippets_ui.rs": {
    "snippets": "",
    "Global": "",
    "Select snippet scope...": "",
    ".json": ""
  },
  "zed/crates/sqlez/src/bindable.rs": {
    "Failed to bind bool at index {start_index}": "",
    "Failed to read bool at index {start_index}": "",
    "Failed to bind &[u8] at index {start_index}": "",
    "Failed to bind &[u8; C] at index {start_index}": "",
    "Failed to bind Vec<u8> at index {start_index}": "",
    "Failed to read Vec<u8> at index {start_index}": "",
    "Failed to bind f64 at index {start_index}": "",
    "Failed to parse f64 at index {start_index}": "",
    "Failed to parse f32 at index {start_index}": "",
    "Failed to bind i32 at index {start_index}": "",
    "Failed to bind i64 at index {start_index}": "",
    "Failed to bind usize at index {start_index}": ""
  },
  "zed/crates/sqlez/src/connection.rs": {
    "file:{}?mode=memory&cache=shared": "",
    ":memory:": "",
    "Could not create fallback in memory db": "",
    "main": "",
    ";": "",
    "CREATE TABLE {table_to_alter}({column})": "",
    "Sqlite call failed with code {} and message: {:?}": "",
    "alter": "",
    "table": "",
    "rename column": "",
    "drop column": "",
    "__place_holder_column_for_syntax_checking": "",
    "string_round_trips": "",
    "\n            CREATE TABLE text (\n                text TEXT\n            );": "",
    "Some test text": "",
    "INSERT INTO text (text) VALUES (?);": "",
    "SELECT text FROM text;": "",
    "tuple_round_trips": "",
    "\n                CREATE TABLE test (\n                    text TEXT,\n                    integer INTEGER,\n                    blob BLOB\n                );": "",
    "test": "",
    "test2": "",
    "INSERT INTO test (text, integer, blob) VALUES (?, ?, ?)": "",
    "SELECT * FROM test": "",
    "bool_round_trips": "",
    "\n                CREATE TABLE bools (\n                    t INTEGER,\n                    f INTEGER\n                );": "",
    "INSERT INTO bools(t, f) VALUES (?, ?)": "",
    "SELECT * FROM bools;": "",
    "backup_works": "",
    "\n                CREATE TABLE blobs (\n                    data BLOB\n                );": "",
    "INSERT INTO blobs (data) VALUES (?);": "",
    "backup_works_other": "",
    "SELECT * FROM blobs;": "",
    "multi_step_statement_works": "",
    "\n                CREATE TABLE test (\n                    col INTEGER\n                )": "",
    "\n            INSERT INTO test(col) VALUES (2)": "",
    "test_sql_has_syntax_errors": "",
    "CREATE TABLE kv_store(key TEXT PRIMARY KEY, value TEXT NOT NULL) STRICT ;": "",
    "SELECT FROM": "",
    "{}\n{}": "",
    "test_alter_table_syntax": "",
    "ALTER TABLE test ADD x TEXT": "",
    "ALTER TABLE test AAD x TEXT": ""
  },
  "zed/crates/sqlez/src/migrations.rs": {
    "Error creating cstr": "",
    "Prepare call failed for query:\n{}": "",
    "migrating": "",
    "\n                CREATE TABLE IF NOT EXISTS migrations (\n                    domain TEXT,\n                    step INTEGER,\n                    migration TEXT\n                )": "",
    "\n                    SELECT domain, step, migration FROM migrations\n                    WHERE domain = ?\n                    ORDER BY step\n                    ": "",
    "INSERT INTO migrations (domain, step, migration) VALUES (?, ?, ?)": "",
    "\n                            Migration changed for {} at step {}\n\n                            Stored migration:\n                            {}\n\n                            Proposed migration:\n                            {}": "",
    "migrations_are_added_to_table": "",
    "test": "",
    "\n                CREATE TABLE test1 (\n                    a TEXT,\n                    b TEXT\n                )": "",
    "SELECT (migration) FROM migrations": "",
    "CREATE TABLE test1 (a TEXT, b TEXT)": "",
    "\n                    CREATE TABLE test1 (\n                        a TEXT,\n                        b TEXT\n                    )": "",
    "\n                    CREATE TABLE test2 (\n                        c TEXT,\n                        d TEXT\n                    )": "",
    "CREATE TABLE test2 (c TEXT, d TEXT)": "",
    "migration_setup_works": "",
    "\n                CREATE TABLE IF NOT EXISTS migrations (\n                    domain TEXT,\n                    step INTEGER,\n                    migration TEXT\n                );": "",
    "\n                INSERT INTO migrations (domain, step, migration)\n                VALUES (?, ?, ?)": "",
    "test_domain": "",
    "CREATE TABLE table{} ( test TEXT );": "",
    "migrations_dont_rerun": "",
    "\n                CREATE TABLE test_table (\n                    test_column INTEGER\n                );": "",
    "\n            INSERT INTO test_table (test_column) VALUES (1);": "",
    "SELECT * FROM test_table": "",
    "DELETE FROM test_table": "",
    "INSERT INTO test_table (test_column) VALUES (2)": "",
    "changed_migration_fails": "",
    "test migration": "",
    "\n                CREATE TABLE test (\n                    col INTEGER\n                )": "",
    "\n                    INSERT INTO test (col) VALUES (1)": "",
    "\n                CREATE TABLE test (\n                    color INTEGER\n                )": "",
    "\n                INSERT INTO test (color) VALUES (1)": "",
    "test_create_alter_drop": "",
    "first_migration": "",
    "CREATE TABLE table1(a TEXT) STRICT;": "",
    "INSERT INTO table1(a) VALUES (\"test text\");": "",
    "second_migration": "",
    "\n                    CREATE TABLE table2(b TEXT) STRICT;\n\n                    INSERT INTO table2 (b)\n                    SELECT a FROM table1;\n\n                    DROP TABLE table1;\n\n                    ALTER TABLE table2 RENAME TO table1;\n                ": "",
    "SELECT b FROM table1": "",
    "test text": ""
  },
  "zed/crates/sqlez/src/savepoint.rs": {
    "SAVEPOINT {name}": "",
    "RELEASE {name}": "",
    "\n                    ROLLBACK TO {name};\n                    RELEASE {name}": "",
    "nested_savepoints": "",
    "\n            CREATE TABLE text (\n                text TEXT,\n                idx INTEGER\n            );": "",
    "test save1": "",
    "test save2": "",
    "first": "",
    "INSERT INTO text(text, idx) VALUES (?, ?)": "",
    "second": "",
    "SELECT text FROM text ORDER BY text.idx ASC": "",
    "Failed second save point :(": ""
  },
  "zed/crates/sqlez/src/statement.rs": {
    "Error creating cstr": "",
    "Parsing remaining sql": "",
    ";": "",
    "Prepare call failed for query:\n{}": "",
    "Write statement prepared with connection that is not write capable. SQL:\n{} ": "",
    "Failed to bind value at index {index}": "",
    "Failed to bind parameters": "",
    "Failed to read blob at index {index}": "",
    "Failed to read length of blob at index {index}": "",
    "Failed to read double at index {index}": "",
    "Failed to read int at index {index}": "",
    "Failed to read i64 at index {index}": "",
    "Failed to read text from column {index}": "",
    "Failed to read text length at {index}": "",
    "Column type returned was incorrect ": "",
    "Statement step returned SQLITE_MISUSE": "",
    "Step returned error code and last error failed to catch it": "",
    "{:?}": "",
    "single called with query that returns no rows.": "",
    "single called with a query that returns more than one row.": "",
    "Failed on step call": "",
    "Failed to parse row result": "",
    "Second step call": "",
    "maybe called with a query that returns more than one row.": "",
    "binding_multiple_statements_with_parameter_gaps": "",
    "\n            CREATE TABLE test (\n                col INTEGER\n            )": "",
    "\n                INSERT INTO test(col) VALUES (?3);\n                SELECT * FROM test WHERE col = ?1": "",
    "Could not bind parameter to first index": "",
    "Could not bind parameter to second index": "",
    "Could not bind parameter to third index": "",
    "blob_round_trips": "",
    "\n                CREATE TABLE blobs (\n                    data BLOB\n                )": "",
    "INSERT INTO blobs (data) VALUES (?)": "",
    "SELECT * FROM blobs": "",
    "DELETE FROM blobs": "",
    "maybe_returns_options": "",
    "\n                CREATE TABLE texts (\n                    text TEXT\n                )": "",
    "SELECT text FROM texts": "",
    "This is a test": "",
    "INSERT INTO texts VALUES (?)": ""
  },
  "zed/crates/sqlez/src/thread_safe_connection.rs": {
    "Db initialize query failed to execute: {}": "",
    "Migration never run": "",
    "thread_safe_multi_migration": "",
    "Queues are inserted when build is called. This should always succeed": "",
    "Write queue unexpectedly closed": "",
    "Initialize query failed to execute: {}": "",
    "Could not send write action to background thread": "",
    "test": "",
    "CREATE TABLE test(col1 TEXT, col2 TEXT) STRICT;": "",
    "annoying-test.db": "",
    "PRAGMA journal_mode=WAL": "",
    "\n                                PRAGMA synchronous=NORMAL;\n                                PRAGMA busy_timeout=1;\n                                PRAGMA foreign_keys=TRUE;\n                                PRAGMA case_sensitive_like=TRUE;\n                            ": "",
    "workspace": "",
    "\n                    CREATE TABLE workspaces(\n                        workspace_id INTEGER PRIMARY KEY,\n                        dock_visible INTEGER, -- Boolean\n                        dock_anchor TEXT, -- Enum: 'Bottom' / 'Right' / 'Expanded'\n                        dock_pane INTEGER, -- NULL indicates that we don't have a dock pane yet\n                        timestamp TEXT DEFAULT CURRENT_TIMESTAMP NOT NULL,\n                        FOREIGN KEY(dock_pane) REFERENCES panes(pane_id),\n                        FOREIGN KEY(active_pane) REFERENCES panes(pane_id)\n                    ) STRICT;\n\n                    CREATE TABLE panes(\n                        pane_id INTEGER PRIMARY KEY,\n                        workspace_id INTEGER NOT NULL,\n                        active INTEGER NOT NULL, -- Boolean\n                        FOREIGN KEY(workspace_id) REFERENCES workspaces(workspace_id)\n                            ON DELETE CASCADE\n                            ON UPDATE CASCADE\n                    ) STRICT;\n                ": "",
    "wild_zed_lost_failure": "",
    "PRAGMA FOREIGN_KEYS=true": ""
  },
  "zed/crates/sqlez/src/typed_statements.rs": {
    "Bindings failed": "",
    "Maybe row failed": ""
  },
  "zed/crates/streaming_diff/src/streaming_diff.rs": {
    "column out of bounds": "",
    "row out of bounds": "",
    "{:5}": "",
    "aaaa\nbbbb": "",
    "\ncccc": "",
    "aaaa\nbbbb\ncccc": "",
    "BBBB": "",
    "aaaa\nbbbb\ncccc\ndddd": "",
    "A": "",
    "\nEEEE": "",
    "aaaabbbb": "",
    "\n\n": "",
    "aaaa\n\n\nbbbb": "",
    "line1\nline2\nline3\nline4": "",
    "inserted\n": "",
    "\nnewline": "",
    "line1\ninserted\nline3\nnewline\nline4": "",
    "        for y in 0..size.y() {\n": "",
    "            let a = 10;\n": "",
    "            let b = 20;\n": "",
    "        }": "",
    "let": "",
    " mut": "",
    " y": "",
    " =": "",
    " 0": "",
    ";": "",
    "        while": "",
    " < size": "",
    ".": "",
    "y": "",
    "()": "",
    " {": "",
    "    y": "",
    " +=": "",
    " 1": "",
    "        ": "",
    "OLD_TEXT_LEN": "",
    "invalid `OLD_TEXT_LEN` variable": "",
    "old text: {:?}": "",
    "new text: {:?}": "",
    "char operations: {:?}": "",
    "line operations: {:?}": "",
    "ITERATIONS": "",
    "invalid `ITERATIONS` variable": "",
    "SEED": "",
    "invalid `SEED` variable": "",
    "Running test with {} iterations and seed {}": "",
    "Iteration {}": "",
    "Hello, world!": "",
    "Hello, Rust!": ""
  },
  "zed/crates/tab_switcher/src/tab_switcher.rs": {
    "TabSwitcher": "",
    "No tabs": "",
    "Invalid matches state: no element for index {ix}": "",
    "close-button": "",
    "close_tab": "",
    "Close": ""
  },
  "zed/crates/task/src/task_template.rs": {
    "regular": "",
    "main": "",
    "default_true": "",
    "\n": "",
    "hashing task template": "",
    "hashing task variables": "",
    "{id_base}_{task_hash}_{variables_hash}": "",
    "serializing the object": "",
    "Unknown variable name: {variable_name}": "",
    "${{{var}}}": "",
    "test_base": "",
    "test_label": "",
    "test_command": "",
    "test_arg": "",
    "test_env_key": "",
    "test_env_var": "",
    "should not resolve task with blank label and/or command: {task_with_blank_property:?}": "",
    "test task": "",
    "echo 4": "",
    "failed to resolve task {task_without_cwd:?}": "",
    "failed to get resolve data for resolved task. Template: {task_without_cwd:?} Resolved: {resolved_task:?}": "",
    "When neither task nor task context have cwd, it should be None": "",
    "a": "",
    "b": "",
    "c": "",
    "TaskContext's cwd should be taken on resolve if task's cwd is None": "",
    "d": "",
    "e": "",
    "f": "",
    "TaskTemplate's cwd should be taken on resolve if TaskContext's cwd is None": "",
    "TaskTemplate's cwd should be taken on resolve if TaskContext's cwd is not None": "",
    "custom_variable_1": "",
    "custom_variable_2": "",
    "01": "",
    "1234": "",
    "5678": "",
    "test_file": "",
    "test_selected_text": "",
    "/test_root/": "",
    "test_custom_variable_1": "",
    "test_custom_variable_2": "",
    "test label for {} and {}": "",
    "echo {} {}": "",
    "arg1 {}": "",
    "arg2 {}": "",
    "arg3 {}": "",
    "env_key_1": "",
    "env_key_2": "",
    "env_var_2 {} {}": "",
    "env_key_3": "",
    "env_var_3 {}": "",
    "Should successfully resolve task {task_with_all_variables:?} with variables {all_variables:?}": "",
    "Step {i}, for the same task template and context, there should be the same resolved task id": "",
    "Resolved task should store its template without changes": "",
    "test label for 1234 and {long_value}": "",
    "Resolved task label should be substituted with variables and those should not be shortened": "",
    "should have resolved a spawn in terminal task": "",
    "test label for 1234 and …{}": "",
    "Human-readable label should have long substitutions trimmed": "",
    "echo test_file {long_value}": "",
    "Command should be substituted with variables and those should not be shortened": "",
    "arg1 $ZED_SELECTED_TEXT": "",
    "arg2 $ZED_COLUMN": "",
    "arg3 $ZED_SYMBOL": "",
    "Args should not be substituted with variables": "",
    "{} arg1 test_selected_text arg2 5678 arg3 {long_value}": "",
    "Command label args should be substituted with variables and those should not be shortened": "",
    "env_var_2 test_custom_variable_1 test_custom_variable_2": "",
    "env_var_3 {long_value}": "",
    "Env vars should be substituted with variables and those should not be shortened": "",
    "If any of the Zed task variables is not substituted, the task should not be resolved, but got some resolution without the variable {removed_variable:?} (index {i})": "",
    "My task": "",
    "echo": "",
    "$PATH": "",
    "$ZED_VARIABLE": "",
    "test_symbol": "",
    "test_label_{}": "",
    "test_command_{}": "",
    "test_arg_{}": "",
    "test_env_var_{}": "",
    "Failed to resolve task {symbol_dependent_task:?}": "",
    "(index {i}) Expected the task to depend on symbol task variable: {resolved:?}": "",
    "go test {}/{}": "",
    "go": "",
    "^{}$/^{}$": "",
    "my-symbol": "",
    "base": "",
    "my symbol": "",
    "my task": "",
    "TASK_ENV_VAR1": "",
    "TASK_ENV_VAR1_VALUE": "",
    "TASK_ENV_VAR2": "",
    "PROJECT_ENV_WILL_BE_OVERWRITTEN": "",
    "overwritten": "",
    "PROJECT_ENV_VAR1": "",
    "PROJECT_ENV_VAR1_VALUE": "",
    "PROJECT_ENV_WILL_BE_OVERWRITTEN_VALUE": "",
    "env_var_2 1234 5678": ""
  },
  "zed/crates/task/src/vscode_format.rs": {
    "camelCase": "",
    "type": "",
    "${{{substitution}": "",
    "${{{var}}}": "",
    "dependsOn": "",
    "Encountered unsupported `dependsOn` key during deserialization": "",
    "Missing `type` field in task": "",
    "npm": "",
    "run": "",
    "gulp": "",
    "workspaceFolder": "",
    "file": "",
    "lineNumber": "",
    "selectedText": "",
    "Food": "",
    "$PATH is an environment variable": "",
    "${PATH}": "",
    "${PATH:food}": "",
    "PATH": "",
    "ZED_PATH": "",
    "${ZED_PATH} is an environment variable": "",
    "${ZED_PATH}": "",
    "${ZED_PATH:food}": "",
    "../test_data/typescript.json": "",
    "gulp: tests": "",
    "build:tests:notypecheck": "",
    "tsc: watch ./src": "",
    "node": "",
    "${workspaceFolder}/node_modules/typescript/lib/tsc.js": "",
    "--build": "",
    "${workspaceFolder}/src": "",
    "--watch": "",
    "npm: build:compiler": "",
    "build:compiler": "",
    "npm: build:tests": "",
    "${ZED_WORKTREE_ROOT}/node_modules/typescript/lib/tsc.js": "",
    "${ZED_WORKTREE_ROOT}/src": "",
    "../test_data/rust-analyzer.json": "",
    "Build Extension in Background": "",
    "watch": "",
    "Build Extension": "",
    "build": "",
    "Build Server": "",
    "cargo build --package rust-analyzer": "",
    "Build Server (Release)": "",
    "cargo build --release --package rust-analyzer": "",
    "Pretest": "",
    "pretest": "",
    "Build Server and Extension": "",
    "Build Server (Release) and Extension": ""
  },
  "zed/crates/tasks_ui/src/modal.rs": {
    "Find a task, or run a command in the central pane": "",
    "Find a task, or run a command": "",
    "TasksModal": "",
    "tasks-modal-{ix}": "",
    "delete": "",
    "Delete Previously Scheduled Task": "",
    "Rerun Last Task": "",
    "edit-current-task": "",
    "Spawn Oneshot Without History": "",
    "Spawn Oneshot": "",
    "spawn-onehshot": "",
    "Rerun Without History": "",
    "Spawn Without History": "",
    "spawn": "",
    "Rerun": "",
    "Spawn": "",
    "/dir": "",
    ".zed": "",
    "tasks.json": "",
    "[\n                        {\n                            ": "",
    ": ": "",
    ",\n                            ": "",
    ": [": "",
    "]\n                        },\n                        {\n                            ": "",
    "]\n                        },\n                    ]": "",
    "a.ts": "",
    "a": "",
    "Initial query should be empty": "",
    "another one": "",
    "example task": "",
    "With no global tasks and no open item, a single worktree should be used and its tasks listed": "",
    "/dir/a.ts": "",
    "Initial tasks should be listed in alphabetical order": "",
    "tas": "",
    "Only one task should match the query {query_str}": "",
    "echo 4": "",
    "Query should be set to the selected task's command": "",
    "No task should be listed": "",
    "Query should be reset after confirming": "",
    "New oneshot task should be listed first": "",
    "New oneshot should match custom command query": "",
    "Last recently used one show task should be listed first": "",
    "Query should be set to the custom task's name": "",
    "Only custom task should be listed": "",
    "0": "",
    "echo 40": "",
    "New oneshot should not match any command query": "",
    "No query should be added to the list, as it was submitted with secondary action (that maps to omit_history = true)": "",
    ", ": "",
    "]\n                        }\n                    ]": "",
    "file_without_extension": "",
    "aaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaa": "",
    "file_with.odd_extension": "",
    "b": "",
    "opened now: ": "",
    "When no file is open for a single worktree, should autodetect all worktree-related tasks": "",
    "/dir/file_with.odd_extension": "",
    "hello from ": "",
    "/dir/file_with.odd_extension:1:1": "",
    "Second opened buffer should fill the context, labels should be trimmed if long enough": "",
    "/dir/file_without_extension": "",
    "/dir/file_without_extension:2:3": "",
    "Opened buffer should fill the context, labels should be trimmed if long enough": "",
    "a1.ts": "",
    "// a1": "",
    "a2.ts": "",
    "// a2": "",
    "b.rs": "",
    "// b": "",
    "TypeScript": "",
    "ts": "",
    "Task without variables": "",
    "npm run clean": "",
    "TypeScript task from file $ZED_FILE": "",
    "npm run build": "",
    "Another task from file $ZED_FILE": "",
    "npm run lint": "",
    "Rust task": "",
    "cargo check": "",
    "/dir/a1.ts": "",
    "Another task from file ": "",
    "TypeScript task from file ": "",
    "Should open spawn TypeScript tasks for the opened file, tasks with most template variables above, all groups sorted alphanumerically": "",
    "After spawning the task and getting it into the history, it should be up in the sort as recently used.\n            Tasks with the same labels and context are deduplicated.": "",
    "/dir/a2.ts": "",
    "Even when both TS files are open, should only show the history (on the top), and tasks, resolved for the current file": "",
    "/dir/b.rs": "",
    "Even when both TS files are open and one TS task spawned, opened file's language tasks should be displayed only": "",
    "\n        );\n    }\n\n    fn emulate_task_schedule(\n        tasks_picker: Entity<Picker<TasksModalDelegate>>,\n        project: &Entity<Project>,\n        scheduled_task_label: &str,\n        cx: &mut VisualTestContext,\n    ) {\n        let scheduled_task = tasks_picker.update(cx, |tasks_picker, _| {\n            tasks_picker\n                .delegate\n                .candidates\n                .iter()\n                .flatten()\n                .find(|(_, task)| task.resolved_label == scheduled_task_label)\n                .cloned()\n                .unwrap()\n        });\n        project.update(cx, |project, cx| {\n            if let Some(task_inventory) = project.task_store().read(cx).task_inventory().cloned() {\n                task_inventory.update(cx, |inventory, _| {\n                    let (kind, task) = scheduled_task;\n                    inventory.task_scheduled(kind, task);\n                });\n            }\n        });\n        tasks_picker.update(cx, |_, cx| {\n            cx.emit(DismissEvent);\n        });\n        drop(tasks_picker);\n        cx.executor().run_until_parked()\n    }\n\n    fn open_spawn_tasks(\n        workspace: &Entity<Workspace>,\n        cx: &mut VisualTestContext,\n    ) -> Entity<Picker<TasksModalDelegate>> {\n        cx.dispatch_action(Spawn::modal());\n        workspace.update(cx, |workspace, cx| {\n            workspace\n                .active_modal::<TasksModal>(cx)\n                .expect(": ""
  },
  "zed/crates/terminal/src/terminal.rs": {
    "<non-utf8 path> {}": "",
    "<none specified, using home directory> {}": "",
    "<none specified, could not find home directory>": "",
    "<system defined shell>": "",
    "{} {} ({})": "",
    " ": "",
    "{} {}": "",
    "Working directory: {} Shell command: `{}`, IOError: {}": "",
    "(ipfs:|ipns:|magnet:|mailto:|gemini://|gopher://|https://|http://|news:|file://|git://|ssh:|ftp://)[^\\u{0000}-\\u{001F}\\u{007F}-\\u{009F}<>": "",
    "#;\n// Optional suffix matches MSBuild diagnostic suffixes for path parsing in PathLikeWithPosition\n// https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-diagnostic-format-for-tasks\nconst WORD_REGEX: &str =\n    r#": "",
    "#;\n\npub struct TerminalBuilder {\n    terminal: Terminal,\n    events_rx: UnboundedReceiver<AlacTermEvent>,\n}\n\nimpl TerminalBuilder {\n    pub fn new(\n        working_directory: Option<PathBuf>,\n        python_venv_directory: Option<PathBuf>,\n        task: Option<TaskState>,\n        shell: Shell,\n        mut env: HashMap<String, String>,\n        cursor_shape: CursorShape,\n        alternate_scroll: AlternateScroll,\n        max_scroll_history_lines: Option<usize>,\n        is_ssh_terminal: bool,\n        window: AnyWindowHandle,\n        completion_tx: Sender<()>,\n        cx: &App,\n    ) -> Result<TerminalBuilder> {\n        // If the parent environment doesn't have a locale set\n        // (As is the case when launched from a .app on MacOS),\n        // and the Project doesn't have a locale set, then\n        // set a fallback for our child environment to use.\n        if std::env::var(": "",
    ").is_err() {\n            env.entry(": "",
    ".to_string())\n                .or_insert_with(|| ": "",
    ".to_string());\n        }\n\n        env.insert(": "",
    ".to_string(), ": "",
    ".to_string());\n        env.insert(": "",
    ".to_string());\n        env.insert(\n            ": "",
    ".to_string(),\n            release_channel::AppVersion::global(cx).to_string(),\n        );\n\n        let mut terminal_title_override = None;\n\n        let pty_options = {\n            let alac_shell = match shell.clone() {\n                Shell::System => None,\n                Shell::Program(program) => {\n                    Some(alacritty_terminal::tty::Shell::new(program, Vec::new()))\n                }\n                Shell::WithArguments {\n                    program,\n                    args,\n                    title_override,\n                } => {\n                    terminal_title_override = title_override;\n                    Some(alacritty_terminal::tty::Shell::new(program, args))\n                }\n            };\n\n            alacritty_terminal::tty::Options {\n                shell: alac_shell,\n                working_directory: working_directory\n                    .clone()\n                    .or_else(|| Some(home_dir().to_path_buf())),\n                drain_on_exit: true,\n                env: env.into_iter().collect(),\n            }\n        };\n\n        // Setup Alacritty's env, which modifies the current process's environment\n        alacritty_terminal::tty::setup_env();\n\n        let default_cursor_style = AlacCursorStyle::from(cursor_shape);\n        let scrolling_history = if task.is_some() {\n            // Tasks like `cargo build --all` may produce a lot of output, ergo allow maximum scrolling.\n            // After the task finishes, we do not allow appending to that terminal, so small tasks output should not\n            // cause excessive memory usage over time.\n            MAX_SCROLL_HISTORY_LINES\n        } else {\n            max_scroll_history_lines\n                .unwrap_or(DEFAULT_SCROLL_HISTORY_LINES)\n                .min(MAX_SCROLL_HISTORY_LINES)\n        };\n        let config = Config {\n            scrolling_history,\n            default_cursor_style,\n            ..Config::default()\n        };\n\n        //Spawn a task so the Alacritty EventLoop can communicate with us\n        //TODO: Remove with a bounded sender which can be dispatched on &self\n        let (events_tx, events_rx) = unbounded();\n        //Set up the terminal...\n        let mut term = Term::new(\n            config.clone(),\n            &TerminalBounds::default(),\n            ZedListener(events_tx.clone()),\n        );\n\n        //Alacritty defaults to alternate scrolling being on, so we just need to turn it off.\n        if let AlternateScroll::Off = alternate_scroll {\n            term.unset_private_mode(PrivateMode::Named(NamedPrivateMode::AlternateScroll));\n        }\n\n        let term = Arc::new(FairMutex::new(term));\n\n        //Setup the pty...\n        let pty = match tty::new(\n            &pty_options,\n            TerminalBounds::default().into(),\n            window.window_id().as_u64(),\n        ) {\n            Ok(pty) => pty,\n            Err(error) => {\n                bail!(TerminalError {\n                    directory: working_directory,\n                    shell,\n                    source: error,\n                });\n            }\n        };\n\n        let pty_info = PtyProcessInfo::new(&pty);\n\n        //And connect them together\n        let event_loop = EventLoop::new(\n            term.clone(),\n            ZedListener(events_tx.clone()),\n            pty,\n            pty_options.drain_on_exit,\n            false,\n        )?;\n\n        //Kick things off\n        let pty_tx = event_loop.channel();\n        let _io_thread = event_loop.spawn(); // DANGER\n\n        let terminal = Terminal {\n            task,\n            pty_tx: Notifier(pty_tx),\n            completion_tx,\n            term,\n            term_config: config,\n            title_override: terminal_title_override,\n            events: VecDeque::with_capacity(10), //Should never get this high.\n            last_content: Default::default(),\n            last_mouse: None,\n            matches: Vec::new(),\n            selection_head: None,\n            pty_info,\n            breadcrumb_text: String::new(),\n            scroll_px: px(0.),\n            next_link_id: 0,\n            selection_phase: SelectionPhase::Ended,\n            // hovered_word: false,\n            url_regex: RegexSearch::new(URL_REGEX).unwrap(),\n            word_regex: RegexSearch::new(WORD_REGEX).unwrap(),\n            vi_mode_enabled: false,\n            is_ssh_terminal,\n            python_venv_directory,\n        };\n\n        Ok(TerminalBuilder {\n            terminal,\n            events_rx,\n        })\n    }\n\n    pub fn subscribe(mut self, cx: &Context<Terminal>) -> Terminal {\n        //Event loop\n        cx.spawn(|terminal, mut cx| async move {\n            while let Some(event) = self.events_rx.next().await {\n                terminal.update(&mut cx, |terminal, cx| {\n                    //Process the first event immediately for lowered latency\n                    terminal.process_event(&event, cx);\n                })?;\n\n                'outer: loop {\n                    let mut events = Vec::new();\n                    let mut timer = cx\n                        .background_executor()\n                        .timer(Duration::from_millis(4))\n                        .fuse();\n                    let mut wakeup = false;\n                    loop {\n                        futures::select_biased! {\n                            _ = timer => break,\n                            event = self.events_rx.next() => {\n                                if let Some(event) = event {\n                                    if matches!(event, AlacTermEvent::Wakeup) {\n                                        wakeup = true;\n                                    } else {\n                                        events.push(event);\n                                    }\n\n                                    if events.len() > 100 {\n                                        break;\n                                    }\n                                } else {\n                                    break;\n                                }\n                            },\n                        }\n                    }\n\n                    if events.is_empty() && !wakeup {\n                        smol::future::yield_now().await;\n                        break 'outer;\n                    }\n\n                    terminal.update(&mut cx, |this, cx| {\n                        if wakeup {\n                            this.process_event(&AlacTermEvent::Wakeup, cx);\n                        }\n\n                        for event in events {\n                            this.process_event(&event, cx);\n                        }\n                    })?;\n                    smol::future::yield_now().await;\n                }\n            }\n\n            anyhow::Ok(())\n        })\n        .detach();\n\n        self.terminal\n    }\n}\n\n#[derive(Debug, Clone, Deserialize, Serialize)]\npub struct IndexedCell {\n    pub point: AlacPoint,\n    pub cell: Cell,\n}\n\nimpl Deref for IndexedCell {\n    type Target = Cell;\n\n    #[inline]\n    fn deref(&self) -> &Cell {\n        &self.cell\n    }\n}\n\n// TODO: Un-pub\n#[derive(Clone)]\npub struct TerminalContent {\n    pub cells: Vec<IndexedCell>,\n    pub mode: TermMode,\n    pub display_offset: usize,\n    pub selection_text: Option<String>,\n    pub selection: Option<SelectionRange>,\n    pub cursor: RenderableCursor,\n    pub cursor_char: char,\n    pub terminal_bounds: TerminalBounds,\n    pub last_hovered_word: Option<HoveredWord>,\n}\n\n#[derive(Clone)]\npub struct HoveredWord {\n    pub word: String,\n    pub word_match: RangeInclusive<AlacPoint>,\n    pub id: usize,\n}\n\nimpl Default for TerminalContent {\n    fn default() -> Self {\n        TerminalContent {\n            cells: Default::default(),\n            mode: Default::default(),\n            display_offset: Default::default(),\n            selection_text: Default::default(),\n            selection: Default::default(),\n            cursor: RenderableCursor {\n                shape: alacritty_terminal::vte::ansi::CursorShape::Block,\n                point: AlacPoint::new(Line(0), Column(0)),\n            },\n            cursor_char: Default::default(),\n            terminal_bounds: Default::default(),\n            last_hovered_word: None,\n        }\n    }\n}\n\n#[derive(PartialEq, Eq)]\npub enum SelectionPhase {\n    Selecting,\n    Ended,\n}\n\npub struct Terminal {\n    pty_tx: Notifier,\n    completion_tx: Sender<()>,\n    term: Arc<FairMutex<Term<ZedListener>>>,\n    term_config: Config,\n    events: VecDeque<InternalEvent>,\n    /// This is only used for mouse mode cell change detection\n    last_mouse: Option<(AlacPoint, AlacDirection)>,\n    pub matches: Vec<RangeInclusive<AlacPoint>>,\n    pub last_content: TerminalContent,\n    pub selection_head: Option<AlacPoint>,\n    pub breadcrumb_text: String,\n    pub pty_info: PtyProcessInfo,\n    title_override: Option<SharedString>,\n    pub python_venv_directory: Option<PathBuf>,\n    scroll_px: Pixels,\n    next_link_id: usize,\n    selection_phase: SelectionPhase,\n    url_regex: RegexSearch,\n    word_regex: RegexSearch,\n    task: Option<TaskState>,\n    vi_mode_enabled: bool,\n    is_ssh_terminal: bool,\n}\n\npub struct TaskState {\n    pub id: TaskId,\n    pub full_label: String,\n    pub label: String,\n    pub command_label: String,\n    pub status: TaskStatus,\n    pub completion_rx: Receiver<()>,\n    pub hide: HideStrategy,\n    pub show_summary: bool,\n    pub show_command: bool,\n    pub show_rerun: bool,\n}\n\n/// A status of the current terminal tab's task.\n#[derive(Debug, Clone, Copy, PartialEq, Eq)]\npub enum TaskStatus {\n    /// The task had been started, but got cancelled or somehow otherwise it did not\n    /// report its exit code before the terminal event loop was shut down.\n    Unknown,\n    /// The task is started and running currently.\n    Running,\n    /// After the start, the task stopped running and reported its error code back.\n    Completed { success: bool },\n}\n\nimpl TaskStatus {\n    fn register_terminal_exit(&mut self) {\n        if self == &Self::Running {\n            *self = Self::Unknown;\n        }\n    }\n\n    fn register_task_exit(&mut self, error_code: i32) {\n        *self = TaskStatus::Completed {\n            success: error_code == 0,\n        };\n    }\n}\n\nimpl Terminal {\n    fn process_event(&mut self, event: &AlacTermEvent, cx: &mut Context<Self>) {\n        match event {\n            AlacTermEvent::Title(title) => {\n                self.breadcrumb_text = title.to_string();\n                cx.emit(Event::BreadcrumbsChanged);\n            }\n            AlacTermEvent::ResetTitle => {\n                self.breadcrumb_text = String::new();\n                cx.emit(Event::BreadcrumbsChanged);\n            }\n            AlacTermEvent::ClipboardStore(_, data) => {\n                cx.write_to_clipboard(ClipboardItem::new_string(data.to_string()))\n            }\n            AlacTermEvent::ClipboardLoad(_, format) => {\n                self.write_to_pty(\n                    match &cx.read_from_clipboard().and_then(|item| item.text()) {\n                        // The terminal only supports pasting strings, not images.\n                        Some(text) => format(text),\n                        _ => format(": "",
    "),\n                    },\n                )\n            }\n            AlacTermEvent::PtyWrite(out) => self.write_to_pty(out.clone()),\n            AlacTermEvent::TextAreaSizeRequest(format) => {\n                self.write_to_pty(format(self.last_content.terminal_bounds.into()))\n            }\n            AlacTermEvent::CursorBlinkingChange => {\n                let terminal = self.term.lock();\n                let blinking = terminal.cursor_style().blinking;\n                cx.emit(Event::BlinkChanged(blinking));\n            }\n            AlacTermEvent::Bell => {\n                cx.emit(Event::Bell);\n            }\n            AlacTermEvent::Exit => self.register_task_finished(None, cx),\n            AlacTermEvent::MouseCursorDirty => {\n                //NOOP, Handled in render\n            }\n            AlacTermEvent::Wakeup => {\n                cx.emit(Event::Wakeup);\n\n                if self.pty_info.has_changed() {\n                    cx.emit(Event::TitleChanged);\n                }\n            }\n            AlacTermEvent::ColorRequest(index, format) => {\n                // It's important that the color request is processed here to retain relative order\n                // with other PTY writes. Otherwise applications might witness out-of-order\n                // responses to requests. For example: An application sending `OSC 11 ; ? ST`\n                // (color request) followed by `CSI c` (request device attributes) would receive\n                // the response to `CSI c` first.\n                // Instead of locking, we could store the colors in `self.last_content`. But then\n                // we might respond with out of date value if a ": "",
    " sequence is immediately\n                // followed by a color request sequence.\n                let color = self.term.lock().colors()[*index].unwrap_or_else(|| {\n                    to_alac_rgb(get_color_at_index(*index, cx.theme().as_ref()))\n                });\n                self.write_to_pty(format(color));\n            }\n            AlacTermEvent::ChildExit(error_code) => {\n                self.register_task_finished(Some(*error_code), cx);\n            }\n        }\n    }\n\n    pub fn selection_started(&self) -> bool {\n        self.selection_phase == SelectionPhase::Selecting\n    }\n\n    fn process_terminal_event(\n        &mut self,\n        event: &InternalEvent,\n        term: &mut Term<ZedListener>,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        match event {\n            InternalEvent::Resize(mut new_bounds) => {\n                new_bounds.bounds.size.height =\n                    cmp::max(new_bounds.line_height, new_bounds.height());\n                new_bounds.bounds.size.width = cmp::max(new_bounds.cell_width, new_bounds.width());\n\n                self.last_content.terminal_bounds = new_bounds;\n\n                self.pty_tx.0.send(Msg::Resize(new_bounds.into())).ok();\n\n                term.resize(new_bounds);\n            }\n            InternalEvent::Clear => {\n                // Clear back buffer\n                term.clear_screen(ClearMode::Saved);\n\n                let cursor = term.grid().cursor.point;\n\n                // Clear the lines above\n                term.grid_mut().reset_region(..cursor.line);\n\n                // Copy the current line up\n                let line = term.grid()[cursor.line][..Column(term.grid().columns())]\n                    .iter()\n                    .cloned()\n                    .enumerate()\n                    .collect::<Vec<(usize, Cell)>>();\n\n                for (i, cell) in line {\n                    term.grid_mut()[Line(0)][Column(i)] = cell;\n                }\n\n                // Reset the cursor\n                term.grid_mut().cursor.point =\n                    AlacPoint::new(Line(0), term.grid_mut().cursor.point.column);\n                let new_cursor = term.grid().cursor.point;\n\n                // Clear the lines below the new cursor\n                if (new_cursor.line.0 as usize) < term.screen_lines() - 1 {\n                    term.grid_mut().reset_region((new_cursor.line + 1)..);\n                }\n\n                cx.emit(Event::Wakeup);\n            }\n            InternalEvent::Scroll(scroll) => {\n                term.scroll_display(*scroll);\n                self.refresh_hovered_word(window);\n\n                if self.vi_mode_enabled {\n                    match *scroll {\n                        AlacScroll::Delta(delta) => {\n                            term.vi_mode_cursor = term.vi_mode_cursor.scroll(&term, delta);\n                        }\n                        AlacScroll::PageUp => {\n                            let lines = term.screen_lines() as i32;\n                            term.vi_mode_cursor = term.vi_mode_cursor.scroll(&term, lines);\n                        }\n                        AlacScroll::PageDown => {\n                            let lines = -(term.screen_lines() as i32);\n                            term.vi_mode_cursor = term.vi_mode_cursor.scroll(&term, lines);\n                        }\n                        AlacScroll::Top => {\n                            let point = AlacPoint::new(term.topmost_line(), Column(0));\n                            term.vi_mode_cursor = ViModeCursor::new(point);\n                        }\n                        AlacScroll::Bottom => {\n                            let point = AlacPoint::new(term.bottommost_line(), Column(0));\n                            term.vi_mode_cursor = ViModeCursor::new(point);\n                        }\n                    }\n                    if let Some(mut selection) = term.selection.take() {\n                        let point = term.vi_mode_cursor.point;\n                        selection.update(point, AlacDirection::Right);\n                        term.selection = Some(selection);\n\n                        #[cfg(any(target_os = ": "",
    ", target_os = ": "",
    "))]\n                        if let Some(selection_text) = term.selection_to_string() {\n                            cx.write_to_primary(ClipboardItem::new_string(selection_text));\n                        }\n\n                        self.selection_head = Some(point);\n                        cx.emit(Event::SelectionsChanged)\n                    }\n                }\n            }\n            InternalEvent::SetSelection(selection) => {\n                term.selection = selection.as_ref().map(|(sel, _)| sel.clone());\n\n                #[cfg(any(target_os = ": "",
    "))]\n                if let Some(selection_text) = term.selection_to_string() {\n                    cx.write_to_primary(ClipboardItem::new_string(selection_text));\n                }\n\n                if let Some((_, head)) = selection {\n                    self.selection_head = Some(*head);\n                }\n                cx.emit(Event::SelectionsChanged)\n            }\n            InternalEvent::UpdateSelection(position) => {\n                if let Some(mut selection) = term.selection.take() {\n                    let (point, side) = grid_point_and_side(\n                        *position,\n                        self.last_content.terminal_bounds,\n                        term.grid().display_offset(),\n                    );\n\n                    selection.update(point, side);\n                    term.selection = Some(selection);\n\n                    #[cfg(any(target_os = ": "",
    "))]\n                    if let Some(selection_text) = term.selection_to_string() {\n                        cx.write_to_primary(ClipboardItem::new_string(selection_text));\n                    }\n\n                    self.selection_head = Some(point);\n                    cx.emit(Event::SelectionsChanged)\n                }\n            }\n\n            InternalEvent::Copy => {\n                if let Some(txt) = term.selection_to_string() {\n                    cx.write_to_clipboard(ClipboardItem::new_string(txt))\n                }\n            }\n            InternalEvent::ScrollToAlacPoint(point) => {\n                term.scroll_to_point(*point);\n                self.refresh_hovered_word(window);\n            }\n            InternalEvent::ToggleViMode => {\n                self.vi_mode_enabled = !self.vi_mode_enabled;\n                term.toggle_vi_mode();\n            }\n            InternalEvent::ViMotion(motion) => {\n                term.vi_motion(*motion);\n            }\n            InternalEvent::FindHyperlink(position, open) => {\n                let prev_hovered_word = self.last_content.last_hovered_word.take();\n\n                let point = grid_point(\n                    *position,\n                    self.last_content.terminal_bounds,\n                    term.grid().display_offset(),\n                )\n                .grid_clamp(term, Boundary::Grid);\n\n                let link = term.grid().index(point).hyperlink();\n                let found_word = if link.is_some() {\n                    let mut min_index = point;\n                    loop {\n                        let new_min_index = min_index.sub(term, Boundary::Cursor, 1);\n                        if new_min_index == min_index\n                            || term.grid().index(new_min_index).hyperlink() != link\n                        {\n                            break;\n                        } else {\n                            min_index = new_min_index\n                        }\n                    }\n\n                    let mut max_index = point;\n                    loop {\n                        let new_max_index = max_index.add(term, Boundary::Cursor, 1);\n                        if new_max_index == max_index\n                            || term.grid().index(new_max_index).hyperlink() != link\n                        {\n                            break;\n                        } else {\n                            max_index = new_max_index\n                        }\n                    }\n\n                    let url = link.unwrap().uri().to_owned();\n                    let url_match = min_index..=max_index;\n\n                    Some((url, true, url_match))\n                } else if let Some(url_match) = regex_match_at(term, point, &mut self.url_regex) {\n                    let url = term.bounds_to_string(*url_match.start(), *url_match.end());\n                    Some((url, true, url_match))\n                } else if let Some(word_match) = regex_match_at(term, point, &mut self.word_regex) {\n                    let file_path = term.bounds_to_string(*word_match.start(), *word_match.end());\n\n                    let (sanitized_match, sanitized_word) = 'sanitize: {\n                        let mut word_match = word_match;\n                        let mut file_path = file_path;\n\n                        if is_path_surrounded_by_common_symbols(&file_path) {\n                            word_match = Match::new(\n                                word_match.start().add(term, Boundary::Cursor, 1),\n                                word_match.end().sub(term, Boundary::Cursor, 1),\n                            );\n                            file_path = file_path[1..file_path.len() - 1].to_owned();\n                        }\n\n                        let mut colon_count = 0;\n                        for c in file_path.chars() {\n                            if c == ':' {\n                                colon_count += 1;\n                            }\n                        }\n                        // strip trailing comment after colon in case of\n                        // file/at/path.rs:row:column:description or error message\n                        // so that the file path is `file/at/path.rs:row:column`\n                        if colon_count > 2 {\n                            let last_index = file_path.rfind(':').unwrap();\n                            let prev_is_digit = last_index > 0\n                                && file_path\n                                    .chars()\n                                    .nth(last_index - 1)\n                                    .map_or(false, |c| c.is_ascii_digit());\n                            let next_is_digit = last_index < file_path.len() - 1\n                                && file_path\n                                    .chars()\n                                    .nth(last_index + 1)\n                                    .map_or(true, |c| c.is_ascii_digit());\n                            if prev_is_digit && !next_is_digit {\n                                let stripped_len = file_path.len() - last_index;\n                                word_match = Match::new(\n                                    *word_match.start(),\n                                    word_match.end().sub(term, Boundary::Cursor, stripped_len),\n                                );\n                                file_path = file_path[0..last_index].to_owned();\n                            }\n                        }\n\n                        break 'sanitize (word_match, file_path);\n                    };\n\n                    Some((sanitized_word, false, sanitized_match))\n                } else {\n                    None\n                };\n\n                match found_word {\n                    Some((maybe_url_or_path, is_url, url_match)) => {\n                        let target = if is_url {\n                            // Treat ": "",
    " URLs like file paths to ensure\n                            // that line numbers at the end of the path are\n                            // handled correctly\n                            if let Some(path) = maybe_url_or_path.strip_prefix(": "",
    ") {\n                                MaybeNavigationTarget::PathLike(PathLikeTarget {\n                                    maybe_path: path.to_string(),\n                                    terminal_dir: self.working_directory(),\n                                })\n                            } else {\n                                MaybeNavigationTarget::Url(maybe_url_or_path.clone())\n                            }\n                        } else {\n                            MaybeNavigationTarget::PathLike(PathLikeTarget {\n                                maybe_path: maybe_url_or_path.clone(),\n                                terminal_dir: self.working_directory(),\n                            })\n                        };\n                        if *open {\n                            cx.emit(Event::Open(target));\n                        } else {\n                            self.update_selected_word(\n                                prev_hovered_word,\n                                url_match,\n                                maybe_url_or_path,\n                                target,\n                                cx,\n                            );\n                        }\n                    }\n                    None => {\n                        cx.emit(Event::NewNavigationTarget(None));\n                    }\n                }\n            }\n        }\n    }\n\n    fn update_selected_word(\n        &mut self,\n        prev_word: Option<HoveredWord>,\n        word_match: RangeInclusive<AlacPoint>,\n        word: String,\n        navigation_target: MaybeNavigationTarget,\n        cx: &mut Context<Self>,\n    ) {\n        if let Some(prev_word) = prev_word {\n            if prev_word.word == word && prev_word.word_match == word_match {\n                self.last_content.last_hovered_word = Some(HoveredWord {\n                    word,\n                    word_match,\n                    id: prev_word.id,\n                });\n                return;\n            }\n        }\n\n        self.last_content.last_hovered_word = Some(HoveredWord {\n            word: word.clone(),\n            word_match,\n            id: self.next_link_id(),\n        });\n        cx.emit(Event::NewNavigationTarget(Some(navigation_target)));\n        cx.notify()\n    }\n\n    fn next_link_id(&mut self) -> usize {\n        let res = self.next_link_id;\n        self.next_link_id = self.next_link_id.wrapping_add(1);\n        res\n    }\n\n    pub fn last_content(&self) -> &TerminalContent {\n        &self.last_content\n    }\n\n    pub fn set_cursor_shape(&mut self, cursor_shape: CursorShape) {\n        self.term_config.default_cursor_style = cursor_shape.into();\n        self.term.lock().set_options(self.term_config.clone());\n    }\n\n    pub fn total_lines(&self) -> usize {\n        let term = self.term.clone();\n        let terminal = term.lock_unfair();\n        terminal.total_lines()\n    }\n\n    pub fn viewport_lines(&self) -> usize {\n        let term = self.term.clone();\n        let terminal = term.lock_unfair();\n        terminal.screen_lines()\n    }\n\n    //To test:\n    //- Activate match on terminal (scrolling and selection)\n    //- Editor search snapping behavior\n\n    pub fn activate_match(&mut self, index: usize) {\n        if let Some(search_match) = self.matches.get(index).cloned() {\n            self.set_selection(Some((make_selection(&search_match), *search_match.end())));\n\n            self.events\n                .push_back(InternalEvent::ScrollToAlacPoint(*search_match.start()));\n        }\n    }\n\n    pub fn select_matches(&mut self, matches: &[RangeInclusive<AlacPoint>]) {\n        let matches_to_select = self\n            .matches\n            .iter()\n            .filter(|self_match| matches.contains(self_match))\n            .cloned()\n            .collect::<Vec<_>>();\n        for match_to_select in matches_to_select {\n            self.set_selection(Some((\n                make_selection(&match_to_select),\n                *match_to_select.end(),\n            )));\n        }\n    }\n\n    pub fn select_all(&mut self) {\n        let term = self.term.lock();\n        let start = AlacPoint::new(term.topmost_line(), Column(0));\n        let end = AlacPoint::new(term.bottommost_line(), term.last_column());\n        drop(term);\n        self.set_selection(Some((make_selection(&(start..=end)), end)));\n    }\n\n    fn set_selection(&mut self, selection: Option<(Selection, AlacPoint)>) {\n        self.events\n            .push_back(InternalEvent::SetSelection(selection));\n    }\n\n    pub fn copy(&mut self) {\n        self.events.push_back(InternalEvent::Copy);\n    }\n\n    pub fn clear(&mut self) {\n        self.events.push_back(InternalEvent::Clear)\n    }\n\n    pub fn scroll_line_up(&mut self) {\n        self.events\n            .push_back(InternalEvent::Scroll(AlacScroll::Delta(1)));\n    }\n\n    pub fn scroll_up_by(&mut self, lines: usize) {\n        self.events\n            .push_back(InternalEvent::Scroll(AlacScroll::Delta(lines as i32)));\n    }\n\n    pub fn scroll_line_down(&mut self) {\n        self.events\n            .push_back(InternalEvent::Scroll(AlacScroll::Delta(-1)));\n    }\n\n    pub fn scroll_down_by(&mut self, lines: usize) {\n        self.events\n            .push_back(InternalEvent::Scroll(AlacScroll::Delta(-(lines as i32))));\n    }\n\n    pub fn scroll_page_up(&mut self) {\n        self.events\n            .push_back(InternalEvent::Scroll(AlacScroll::PageUp));\n    }\n\n    pub fn scroll_page_down(&mut self) {\n        self.events\n            .push_back(InternalEvent::Scroll(AlacScroll::PageDown));\n    }\n\n    pub fn scroll_to_top(&mut self) {\n        self.events\n            .push_back(InternalEvent::Scroll(AlacScroll::Top));\n    }\n\n    pub fn scroll_to_bottom(&mut self) {\n        self.events\n            .push_back(InternalEvent::Scroll(AlacScroll::Bottom));\n    }\n\n    ///Resize the terminal and the PTY.\n    pub fn set_size(&mut self, new_bounds: TerminalBounds) {\n        if self.last_content.terminal_bounds != new_bounds {\n            self.events.push_back(InternalEvent::Resize(new_bounds))\n        }\n    }\n\n    ///Write the Input payload to the tty.\n    fn write_to_pty(&self, input: String) {\n        self.pty_tx.notify(input.into_bytes());\n    }\n\n    fn write_bytes_to_pty(&self, input: Vec<u8>) {\n        self.pty_tx.notify(input);\n    }\n\n    pub fn input(&mut self, input: String) {\n        self.events\n            .push_back(InternalEvent::Scroll(AlacScroll::Bottom));\n        self.events.push_back(InternalEvent::SetSelection(None));\n\n        self.write_to_pty(input);\n    }\n\n    pub fn input_bytes(&mut self, input: Vec<u8>) {\n        self.events\n            .push_back(InternalEvent::Scroll(AlacScroll::Bottom));\n        self.events.push_back(InternalEvent::SetSelection(None));\n\n        self.write_bytes_to_pty(input);\n    }\n\n    pub fn toggle_vi_mode(&mut self) {\n        self.events.push_back(InternalEvent::ToggleViMode);\n    }\n\n    pub fn vi_motion(&mut self, keystroke: &Keystroke) {\n        if !self.vi_mode_enabled {\n            return;\n        }\n\n        let mut key = keystroke.key.clone();\n        if keystroke.modifiers.shift {\n            key = key.to_uppercase();\n        }\n\n        let motion: Option<ViMotion> = match key.as_str() {\n            ": "",
    " | ": "",
    " => Some(ViMotion::Left),\n            ": "",
    " => Some(ViMotion::Down),\n            ": "",
    " => Some(ViMotion::Up),\n            ": "",
    " => Some(ViMotion::Right),\n            ": "",
    " => Some(ViMotion::WordRight),\n            ": "",
    " if !keystroke.modifiers.control => Some(ViMotion::WordLeft),\n            ": "",
    " => Some(ViMotion::WordRightEnd),\n            ": "",
    " => Some(ViMotion::Bracket),\n            ": "",
    " => Some(ViMotion::Last),\n            ": "",
    " => Some(ViMotion::First),\n            ": "",
    " => Some(ViMotion::FirstOccupied),\n            ": "",
    " => Some(ViMotion::High),\n            ": "",
    " => Some(ViMotion::Middle),\n            ": "",
    " => Some(ViMotion::Low),\n            _ => None,\n        };\n\n        if let Some(motion) = motion {\n            let cursor = self.last_content.cursor.point;\n            let cursor_pos = Point {\n                x: cursor.column.0 as f32 * self.last_content.terminal_bounds.cell_width,\n                y: cursor.line.0 as f32 * self.last_content.terminal_bounds.line_height,\n            };\n            self.events\n                .push_back(InternalEvent::UpdateSelection(cursor_pos));\n            self.events.push_back(InternalEvent::ViMotion(motion));\n            return;\n        }\n\n        let scroll_motion = match key.as_str() {\n            ": "",
    " => Some(AlacScroll::Top),\n            ": "",
    " => Some(AlacScroll::Bottom),\n            ": "",
    " if keystroke.modifiers.control => Some(AlacScroll::PageUp),\n            ": "",
    " if keystroke.modifiers.control => Some(AlacScroll::PageDown),\n            ": "",
    " if keystroke.modifiers.control => {\n                let amount = self.last_content.terminal_bounds.line_height().to_f64() as i32 / 2;\n                Some(AlacScroll::Delta(-amount))\n            }\n            ": "",
    " if keystroke.modifiers.control => {\n                let amount = self.last_content.terminal_bounds.line_height().to_f64() as i32 / 2;\n                Some(AlacScroll::Delta(amount))\n            }\n            _ => None,\n        };\n\n        if let Some(scroll_motion) = scroll_motion {\n            self.events.push_back(InternalEvent::Scroll(scroll_motion));\n            return;\n        }\n\n        match key.as_str() {\n            ": "",
    " => {\n                let point = self.last_content.cursor.point;\n                let selection_type = SelectionType::Simple;\n                let side = AlacDirection::Right;\n                let selection = Selection::new(selection_type, point, side);\n                self.events\n                    .push_back(InternalEvent::SetSelection(Some((selection, point))));\n                return;\n            }\n\n            ": "",
    " => {\n                self.events.push_back(InternalEvent::SetSelection(None));\n                return;\n            }\n\n            ": "",
    " => {\n                self.events.push_back(InternalEvent::Copy);\n                self.events.push_back(InternalEvent::SetSelection(None));\n                return;\n            }\n\n            ": "",
    " => {\n                self.scroll_to_bottom();\n                self.toggle_vi_mode();\n                return;\n            }\n            _ => {}\n        }\n    }\n\n    pub fn try_keystroke(&mut self, keystroke: &Keystroke, alt_is_meta: bool) -> bool {\n        if self.vi_mode_enabled {\n            self.vi_motion(keystroke);\n            return true;\n        }\n\n        // Keep default terminal behavior\n        let esc = to_esc_str(keystroke, &self.last_content.mode, alt_is_meta);\n        if let Some(esc) = esc {\n            self.input(esc);\n            true\n        } else {\n            false\n        }\n    }\n\n    pub fn try_modifiers_change(\n        &mut self,\n        modifiers: &Modifiers,\n        window: &Window,\n        cx: &mut Context<Self>,\n    ) {\n        if self\n            .last_content\n            .terminal_bounds\n            .bounds\n            .contains(&window.mouse_position())\n            && modifiers.secondary()\n        {\n            self.refresh_hovered_word(window);\n        }\n        cx.notify();\n    }\n\n    ///Paste text into the terminal\n    pub fn paste(&mut self, text: &str) {\n        let paste_text = if self.last_content.mode.contains(TermMode::BRACKETED_PASTE) {\n            format!(": "",
    ", ": "",
    ", text.replace('\\x1b', ": "",
    "), ": "",
    ")\n        } else {\n            text.replace(": "",
    ").replace('\n', ": "",
    ")\n        };\n\n        self.input(paste_text);\n    }\n\n    pub fn sync(&mut self, window: &mut Window, cx: &mut Context<Self>) {\n        let term = self.term.clone();\n        let mut terminal = term.lock_unfair();\n        //Note that the ordering of events matters for event processing\n        while let Some(e) = self.events.pop_front() {\n            self.process_terminal_event(&e, &mut terminal, window, cx)\n        }\n\n        self.last_content = Self::make_content(&terminal, &self.last_content);\n    }\n\n    fn make_content(term: &Term<ZedListener>, last_content: &TerminalContent) -> TerminalContent {\n        let content = term.renderable_content();\n        TerminalContent {\n            cells: content\n                .display_iter\n                //TODO: Add this once there's a way to retain empty lines\n                // .filter(|ic| {\n                //     !ic.flags.contains(Flags::HIDDEN)\n                //         && !(ic.bg == Named(NamedColor::Background)\n                //             && ic.c == ' '\n                //             && !ic.flags.contains(Flags::INVERSE))\n                // })\n                .map(|ic| IndexedCell {\n                    point: ic.point,\n                    cell: ic.cell.clone(),\n                })\n                .collect::<Vec<IndexedCell>>(),\n            mode: content.mode,\n            display_offset: content.display_offset,\n            selection_text: term.selection_to_string(),\n            selection: content.selection,\n            cursor: content.cursor,\n            cursor_char: term.grid()[content.cursor.point].c,\n            terminal_bounds: last_content.terminal_bounds,\n            last_hovered_word: last_content.last_hovered_word.clone(),\n        }\n    }\n\n    pub fn last_n_non_empty_lines(&self, n: usize) -> Vec<String> {\n        let term = self.term.clone();\n        let terminal = term.lock_unfair();\n\n        let mut lines = Vec::new();\n        let mut current_line = terminal.bottommost_line();\n        while lines.len() < n {\n            let mut line_buffer = String::new();\n            for cell in &terminal.grid()[current_line] {\n                line_buffer.push(cell.c);\n            }\n            let line = line_buffer.trim_end();\n            if !line.is_empty() {\n                lines.push(line.to_string());\n            }\n\n            if current_line == terminal.topmost_line() {\n                break;\n            }\n            current_line = Line(current_line.0 - 1);\n        }\n        lines.reverse();\n        lines\n    }\n\n    pub fn focus_in(&self) {\n        if self.last_content.mode.contains(TermMode::FOCUS_IN_OUT) {\n            self.write_to_pty(": "",
    ".to_string());\n        }\n    }\n\n    pub fn focus_out(&mut self) {\n        if self.last_content.mode.contains(TermMode::FOCUS_IN_OUT) {\n            self.write_to_pty(": "",
    ".to_string());\n        }\n    }\n\n    pub fn mouse_changed(&mut self, point: AlacPoint, side: AlacDirection) -> bool {\n        match self.last_mouse {\n            Some((old_point, old_side)) => {\n                if old_point == point && old_side == side {\n                    false\n                } else {\n                    self.last_mouse = Some((point, side));\n                    true\n                }\n            }\n            None => {\n                self.last_mouse = Some((point, side));\n                true\n            }\n        }\n    }\n\n    pub fn mouse_mode(&self, shift: bool) -> bool {\n        self.last_content.mode.intersects(TermMode::MOUSE_MODE) && !shift\n    }\n\n    pub fn mouse_move(&mut self, e: &MouseMoveEvent, cx: &mut Context<Self>) {\n        let position = e.position - self.last_content.terminal_bounds.bounds.origin;\n        if self.mouse_mode(e.modifiers.shift) {\n            let (point, side) = grid_point_and_side(\n                position,\n                self.last_content.terminal_bounds,\n                self.last_content.display_offset,\n            );\n\n            if self.mouse_changed(point, side) {\n                if let Some(bytes) =\n                    mouse_moved_report(point, e.pressed_button, e.modifiers, self.last_content.mode)\n                {\n                    self.pty_tx.notify(bytes);\n                }\n            }\n        } else if e.modifiers.secondary() {\n            self.word_from_position(e.position);\n        }\n        cx.notify();\n    }\n\n    fn word_from_position(&mut self, position: Point<Pixels>) {\n        if self.selection_phase == SelectionPhase::Selecting {\n            self.last_content.last_hovered_word = None;\n        } else if self.last_content.terminal_bounds.bounds.contains(&position) {\n            self.events.push_back(InternalEvent::FindHyperlink(\n                position - self.last_content.terminal_bounds.bounds.origin,\n                false,\n            ));\n        } else {\n            self.last_content.last_hovered_word = None;\n        }\n    }\n\n    pub fn mouse_drag(\n        &mut self,\n        e: &MouseMoveEvent,\n        region: Bounds<Pixels>,\n        cx: &mut Context<Self>,\n    ) {\n        let position = e.position - self.last_content.terminal_bounds.bounds.origin;\n        if !self.mouse_mode(e.modifiers.shift) {\n            self.selection_phase = SelectionPhase::Selecting;\n            // Alacritty has the same ordering, of first updating the selection\n            // then scrolling 15ms later\n            self.events\n                .push_back(InternalEvent::UpdateSelection(position));\n\n            // Doesn't make sense to scroll the alt screen\n            if !self.last_content.mode.contains(TermMode::ALT_SCREEN) {\n                let scroll_delta = match self.drag_line_delta(e, region) {\n                    Some(value) => value,\n                    None => return,\n                };\n\n                let scroll_lines =\n                    (scroll_delta / self.last_content.terminal_bounds.line_height) as i32;\n\n                self.events\n                    .push_back(InternalEvent::Scroll(AlacScroll::Delta(scroll_lines)));\n            }\n\n            cx.notify();\n        }\n    }\n\n    fn drag_line_delta(&self, e: &MouseMoveEvent, region: Bounds<Pixels>) -> Option<Pixels> {\n        //TODO: Why do these need to be doubled? Probably the same problem that the IME has\n        let top = region.origin.y + (self.last_content.terminal_bounds.line_height * 2.);\n        let bottom = region.bottom_left().y - (self.last_content.terminal_bounds.line_height * 2.);\n        let scroll_delta = if e.position.y < top {\n            (top - e.position.y).pow(1.1)\n        } else if e.position.y > bottom {\n            -((e.position.y - bottom).pow(1.1))\n        } else {\n            return None; //Nothing to do\n        };\n        Some(scroll_delta)\n    }\n\n    pub fn mouse_down(&mut self, e: &MouseDownEvent, _cx: &mut Context<Self>) {\n        let position = e.position - self.last_content.terminal_bounds.bounds.origin;\n        let point = grid_point(\n            position,\n            self.last_content.terminal_bounds,\n            self.last_content.display_offset,\n        );\n\n        if self.mouse_mode(e.modifiers.shift) {\n            if let Some(bytes) =\n                mouse_button_report(point, e.button, e.modifiers, true, self.last_content.mode)\n            {\n                self.pty_tx.notify(bytes);\n            }\n        } else {\n            match e.button {\n                MouseButton::Left => {\n                    let (point, side) = grid_point_and_side(\n                        position,\n                        self.last_content.terminal_bounds,\n                        self.last_content.display_offset,\n                    );\n\n                    let selection_type = match e.click_count {\n                        0 => return, //This is a release\n                        1 => Some(SelectionType::Simple),\n                        2 => Some(SelectionType::Semantic),\n                        3 => Some(SelectionType::Lines),\n                        _ => None,\n                    };\n\n                    if selection_type == Some(SelectionType::Simple) && e.modifiers.shift {\n                        self.events\n                            .push_back(InternalEvent::UpdateSelection(position));\n                        return;\n                    }\n\n                    let selection = selection_type\n                        .map(|selection_type| Selection::new(selection_type, point, side));\n\n                    if let Some(sel) = selection {\n                        self.events\n                            .push_back(InternalEvent::SetSelection(Some((sel, point))));\n                    }\n                }\n                #[cfg(any(target_os = ": "",
    "))]\n                MouseButton::Middle => {\n                    if let Some(item) = _cx.read_from_primary() {\n                        let text = item.text().unwrap_or_default().to_string();\n                        self.input(text);\n                    }\n                }\n                _ => {}\n            }\n        }\n    }\n\n    pub fn mouse_up(&mut self, e: &MouseUpEvent, cx: &Context<Self>) {\n        let setting = TerminalSettings::get_global(cx);\n\n        let position = e.position - self.last_content.terminal_bounds.bounds.origin;\n        if self.mouse_mode(e.modifiers.shift) {\n            let point = grid_point(\n                position,\n                self.last_content.terminal_bounds,\n                self.last_content.display_offset,\n            );\n\n            if let Some(bytes) =\n                mouse_button_report(point, e.button, e.modifiers, false, self.last_content.mode)\n            {\n                self.pty_tx.notify(bytes);\n            }\n        } else {\n            if e.button == MouseButton::Left && setting.copy_on_select {\n                self.copy();\n            }\n\n            //Hyperlinks\n            if self.selection_phase == SelectionPhase::Ended {\n                let mouse_cell_index =\n                    content_index_for_mouse(position, &self.last_content.terminal_bounds);\n                if let Some(link) = self.last_content.cells[mouse_cell_index].hyperlink() {\n                    cx.open_url(link.uri());\n                } else if e.modifiers.secondary() {\n                    self.events\n                        .push_back(InternalEvent::FindHyperlink(position, true));\n                }\n            }\n        }\n\n        self.selection_phase = SelectionPhase::Ended;\n        self.last_mouse = None;\n    }\n\n    ///Scroll the terminal\n    pub fn scroll_wheel(&mut self, e: &ScrollWheelEvent) {\n        let mouse_mode = self.mouse_mode(e.shift);\n\n        if let Some(scroll_lines) = self.determine_scroll_lines(e, mouse_mode) {\n            if mouse_mode {\n                let point = grid_point(\n                    e.position - self.last_content.terminal_bounds.bounds.origin,\n                    self.last_content.terminal_bounds,\n                    self.last_content.display_offset,\n                );\n\n                if let Some(scrolls) = scroll_report(point, scroll_lines, e, self.last_content.mode)\n                {\n                    for scroll in scrolls {\n                        self.pty_tx.notify(scroll);\n                    }\n                };\n            } else if self\n                .last_content\n                .mode\n                .contains(TermMode::ALT_SCREEN | TermMode::ALTERNATE_SCROLL)\n                && !e.shift\n            {\n                self.pty_tx.notify(alt_scroll(scroll_lines))\n            } else if scroll_lines != 0 {\n                let scroll = AlacScroll::Delta(scroll_lines);\n\n                self.events.push_back(InternalEvent::Scroll(scroll));\n            }\n        }\n    }\n\n    fn refresh_hovered_word(&mut self, window: &Window) {\n        self.word_from_position(window.mouse_position());\n    }\n\n    fn determine_scroll_lines(&mut self, e: &ScrollWheelEvent, mouse_mode: bool) -> Option<i32> {\n        let scroll_multiplier = if mouse_mode { 1. } else { SCROLL_MULTIPLIER };\n        let line_height = self.last_content.terminal_bounds.line_height;\n        match e.touch_phase {\n            /* Reset scroll state on started */\n            TouchPhase::Started => {\n                self.scroll_px = px(0.);\n                None\n            }\n            /* Calculate the appropriate scroll lines */\n            TouchPhase::Moved => {\n                let old_offset = (self.scroll_px / line_height) as i32;\n\n                self.scroll_px += e.delta.pixel_delta(line_height).y * scroll_multiplier;\n\n                let new_offset = (self.scroll_px / line_height) as i32;\n\n                // Whenever we hit the edges, reset our stored scroll to 0\n                // so we can respond to changes in direction quickly\n                self.scroll_px %= self.last_content.terminal_bounds.height();\n\n                Some(new_offset - old_offset)\n            }\n            TouchPhase::Ended => None,\n        }\n    }\n\n    pub fn find_matches(\n        &self,\n        mut searcher: RegexSearch,\n        cx: &Context<Self>,\n    ) -> Task<Vec<RangeInclusive<AlacPoint>>> {\n        let term = self.term.clone();\n        cx.background_spawn(async move {\n            let term = term.lock();\n\n            all_search_matches(&term, &mut searcher).collect()\n        })\n    }\n\n    pub fn working_directory(&self) -> Option<PathBuf> {\n        if self.is_ssh_terminal {\n            // We can't yet reliably detect the working directory of a shell on the\n            // SSH host. Until we can do that, it doesn't make sense to display\n            // the working directory on the client and persist that.\n            None\n        } else {\n            self.client_side_working_directory()\n        }\n    }\n\n    /// Returns the working directory of the process that's connected to the PTY.\n    /// That means it returns the working directory of the local shell or program\n    /// that's running inside the terminal.\n    ///\n    /// This does *not* return the working directory of the shell that runs on the\n    /// remote host, in case Zed is connected to a remote host.\n    fn client_side_working_directory(&self) -> Option<PathBuf> {\n        self.pty_info\n            .current\n            .as_ref()\n            .map(|process| process.cwd.clone())\n    }\n\n    pub fn title(&self, truncate: bool) -> String {\n        const MAX_CHARS: usize = 25;\n        match &self.task {\n            Some(task_state) => {\n                if truncate {\n                    truncate_and_trailoff(&task_state.label, MAX_CHARS)\n                } else {\n                    task_state.full_label.clone()\n                }\n            }\n            None => self\n                .title_override\n                .as_ref()\n                .map(|title_override| title_override.to_string())\n                .unwrap_or_else(|| {\n                    self.pty_info\n                        .current\n                        .as_ref()\n                        .map(|fpi| {\n                            let process_file = fpi\n                                .cwd\n                                .file_name()\n                                .map(|name| name.to_string_lossy().to_string())\n                                .unwrap_or_default();\n\n                            let argv = fpi.argv.clone();\n                            let process_name = format!(\n                                ": "",
    ",\n                                fpi.name,\n                                if !argv.is_empty() {\n                                    format!(": "",
    ", (argv[1..]).join(": "",
    "))\n                                } else {\n                                    ": "",
    ".to_string()\n                                }\n                            );\n                            let (process_file, process_name) = if truncate {\n                                (\n                                    truncate_and_trailoff(&process_file, MAX_CHARS),\n                                    truncate_and_trailoff(&process_name, MAX_CHARS),\n                                )\n                            } else {\n                                (process_file, process_name)\n                            };\n                            format!(": "",
    ")\n                        })\n                        .unwrap_or_else(|| ": "",
    ".to_string())\n                }),\n        }\n    }\n\n    pub fn task(&self) -> Option<&TaskState> {\n        self.task.as_ref()\n    }\n\n    pub fn wait_for_completed_task(&self, cx: &App) -> Task<()> {\n        if let Some(task) = self.task() {\n            if task.status == TaskStatus::Running {\n                let completion_receiver = task.completion_rx.clone();\n                return cx.spawn(|_| async move {\n                    let _ = completion_receiver.recv().await;\n                });\n            }\n        }\n        Task::ready(())\n    }\n\n    fn register_task_finished(&mut self, error_code: Option<i32>, cx: &mut Context<'_, Terminal>) {\n        self.completion_tx.try_send(()).ok();\n        let task = match &mut self.task {\n            Some(task) => task,\n            None => {\n                if error_code.is_none() {\n                    cx.emit(Event::CloseTerminal);\n                }\n                return;\n            }\n        };\n        if task.status != TaskStatus::Running {\n            return;\n        }\n        match error_code {\n            Some(error_code) => {\n                task.status.register_task_exit(error_code);\n            }\n            None => {\n                task.status.register_terminal_exit();\n            }\n        };\n\n        let (finished_successfully, task_line, command_line) = task_summary(task, error_code);\n        let mut lines_to_show = Vec::new();\n        if task.show_summary {\n            lines_to_show.push(task_line.as_str());\n        }\n        if task.show_command {\n            lines_to_show.push(command_line.as_str());\n        }\n\n        if !lines_to_show.is_empty() {\n            // SAFETY: the invocation happens on non `TaskStatus::Running` tasks, once,\n            // after either `AlacTermEvent::Exit` or `AlacTermEvent::ChildExit` events that are spawned\n            // when Zed task finishes and no more output is made.\n            // After the task summary is output once, no more text is appended to the terminal.\n            unsafe { append_text_to_term(&mut self.term.lock(), &lines_to_show) };\n        }\n\n        match task.hide {\n            HideStrategy::Never => {}\n            HideStrategy::Always => {\n                cx.emit(Event::CloseTerminal);\n            }\n            HideStrategy::OnSuccess => {\n                if finished_successfully {\n                    cx.emit(Event::CloseTerminal);\n                }\n            }\n        }\n    }\n}\n\nfn is_path_surrounded_by_common_symbols(path: &str) -> bool {\n    // Avoid detecting `[]` or `()` strings as paths, surrounded by common symbols\n    path.len() > 2\n        // The rest of the brackets and various quotes cannot be matched by the [`WORD_REGEX`] hence not checked for.\n        && (path.starts_with('[') && path.ends_with(']')\n            || path.starts_with('(') && path.ends_with(')'))\n}\n\nconst TASK_DELIMITER: &str = ": "",
    ";\nfn task_summary(task: &TaskState, error_code: Option<i32>) -> (bool, String, String) {\n    let escaped_full_label = task.full_label.replace(": "",
    ");\n    let (success, task_line) = match error_code {\n        Some(0) => {\n            (true, format!(": "",
    "))\n        }\n        Some(error_code) => {\n            (false, format!(": "",
    "))\n        }\n        None => {\n            (false, format!(": "",
    "))\n        }\n    };\n    let escaped_command_label = task.command_label.replace(": "",
    ");\n    let command_line = format!(": "",
    ");\n    (success, task_line, command_line)\n}\n\n/// Appends a stringified task summary to the terminal, after its output.\n///\n/// SAFETY: This function should only be called after terminal's PTY is no longer alive.\n/// New text being added to the terminal here, uses ": "",
    " APIs,\n/// which are not maintaining the entire terminal state intact.\n///\n///\n/// The library\n///\n/// * does not increment inner grid cursor's _lines_ on `input` calls\n///   (but displaying the lines correctly and incrementing cursor's columns)\n///\n/// * ignores `\n` and \\r` character input, requiring the `newline` call instead\n///\n/// * does not alter grid state after `newline` call\n///   so its `bottommost_line` is always the same additions, and\n///   the cursor's `point` is not updated to the new line and column values\n///\n/// * ??? there could be more consequences, and any further ": "",
    " streaming from the PTY might bug and/or panic.\n///   Still, subsequent `append_text_to_term` invocations are possible and display the contents correctly.\n///\n/// Despite the quirks, this is the simplest approach to appending text to the terminal: its alternative, `grid_mut` manipulations,\n/// do not properly set the scrolling state and display odd text after appending; also those manipulations are more tedious and error-prone.\n/// The function achieves proper display and scrolling capabilities, at a cost of grid state not properly synchronized.\n/// This is enough for printing moderately-sized texts like task summaries, but might break or perform poorly for larger texts.\nunsafe fn append_text_to_term(term: &mut Term<ZedListener>, text_lines: &[&str]) {\n    term.newline();\n    term.grid_mut().cursor.point.column = Column(0);\n    for line in text_lines {\n        for c in line.chars() {\n            term.input(c);\n        }\n        term.newline();\n        term.grid_mut().cursor.point.column = Column(0);\n    }\n}\n\nimpl Drop for Terminal {\n    fn drop(&mut self) {\n        self.pty_tx.0.send(Msg::Shutdown).ok();\n    }\n}\n\nimpl EventEmitter<Event> for Terminal {}\n\n/// Based on alacritty/src/display/hint.rs > regex_match_at\n/// Retrieve the match, if the specified point is inside the content matching the regex.\nfn regex_match_at<T>(term: &Term<T>, point: AlacPoint, regex: &mut RegexSearch) -> Option<Match> {\n    visible_regex_match_iter(term, regex).find(|rm| rm.contains(&point))\n}\n\n/// Copied from alacritty/src/display/hint.rs:\n/// Iterate over all visible regex matches.\npub fn visible_regex_match_iter<'a, T>(\n    term: &'a Term<T>,\n    regex: &'a mut RegexSearch,\n) -> impl Iterator<Item = Match> + 'a {\n    let viewport_start = Line(-(term.grid().display_offset() as i32));\n    let viewport_end = viewport_start + term.bottommost_line();\n    let mut start = term.line_search_left(AlacPoint::new(viewport_start, Column(0)));\n    let mut end = term.line_search_right(AlacPoint::new(viewport_end, Column(0)));\n    start.line = start.line.max(viewport_start - MAX_SEARCH_LINES);\n    end.line = end.line.min(viewport_end + MAX_SEARCH_LINES);\n\n    RegexIter::new(start, end, AlacDirection::Right, term, regex)\n        .skip_while(move |rm| rm.end().line < viewport_start)\n        .take_while(move |rm| rm.start().line <= viewport_end)\n}\n\nfn make_selection(range: &RangeInclusive<AlacPoint>) -> Selection {\n    let mut selection = Selection::new(SelectionType::Simple, *range.start(), AlacDirection::Left);\n    selection.update(*range.end(), AlacDirection::Right);\n    selection\n}\n\nfn all_search_matches<'a, T>(\n    term: &'a Term<T>,\n    regex: &'a mut RegexSearch,\n) -> impl Iterator<Item = Match> + 'a {\n    let start = AlacPoint::new(term.grid().topmost_line(), Column(0));\n    let end = AlacPoint::new(term.grid().bottommost_line(), term.grid().last_column());\n    RegexIter::new(start, end, AlacDirection::Right, term, regex)\n}\n\nfn content_index_for_mouse(pos: Point<Pixels>, terminal_bounds: &TerminalBounds) -> usize {\n    let col = (pos.x / terminal_bounds.cell_width()).round() as usize;\n    let clamped_col = min(col, terminal_bounds.columns() - 1);\n    let row = (pos.y / terminal_bounds.line_height()).round() as usize;\n    let clamped_row = min(row, terminal_bounds.screen_lines() - 1);\n    clamped_row * terminal_bounds.columns() + clamped_col\n}\n\n/// Converts an 8 bit ANSI color to its GPUI equivalent.\n/// Accepts `usize` for compatibility with the `alacritty::Colors` interface,\n/// Other than that use case, should only be called with values in the `[0,255]` range\npub fn get_color_at_index(index: usize, theme: &Theme) -> Hsla {\n    let colors = theme.colors();\n\n    match index {\n        // 0-15 are the same as the named colors above\n        0 => colors.terminal_ansi_black,\n        1 => colors.terminal_ansi_red,\n        2 => colors.terminal_ansi_green,\n        3 => colors.terminal_ansi_yellow,\n        4 => colors.terminal_ansi_blue,\n        5 => colors.terminal_ansi_magenta,\n        6 => colors.terminal_ansi_cyan,\n        7 => colors.terminal_ansi_white,\n        8 => colors.terminal_ansi_bright_black,\n        9 => colors.terminal_ansi_bright_red,\n        10 => colors.terminal_ansi_bright_green,\n        11 => colors.terminal_ansi_bright_yellow,\n        12 => colors.terminal_ansi_bright_blue,\n        13 => colors.terminal_ansi_bright_magenta,\n        14 => colors.terminal_ansi_bright_cyan,\n        15 => colors.terminal_ansi_bright_white,\n        // 16-231 are mapped to their RGB colors on a 0-5 range per channel\n        16..=231 => {\n            let (r, g, b) = rgb_for_index(index as u8); // Split the index into its ANSI-RGB components\n            let step = (u8::MAX as f32 / 5.).floor() as u8; // Split the RGB range into 5 chunks, with floor so no overflow\n            rgba_color(r * step, g * step, b * step) // Map the ANSI-RGB components to an RGB color\n        }\n        // 232-255 are a 24 step grayscale from black to white\n        232..=255 => {\n            let i = index as u8 - 232; // Align index to 0..24\n            let step = (u8::MAX as f32 / 24.).floor() as u8; // Split the RGB grayscale values into 24 chunks\n            rgba_color(i * step, i * step, i * step) // Map the ANSI-grayscale components to the RGB-grayscale\n        }\n        // For compatibility with the alacritty::Colors interface\n        256 => colors.text,\n        257 => colors.background,\n        258 => theme.players().local().cursor,\n        259 => colors.terminal_ansi_dim_black,\n        260 => colors.terminal_ansi_dim_red,\n        261 => colors.terminal_ansi_dim_green,\n        262 => colors.terminal_ansi_dim_yellow,\n        263 => colors.terminal_ansi_dim_blue,\n        264 => colors.terminal_ansi_dim_magenta,\n        265 => colors.terminal_ansi_dim_cyan,\n        266 => colors.terminal_ansi_dim_white,\n        267 => colors.terminal_bright_foreground,\n        268 => colors.terminal_ansi_black, // 'Dim Background', non-standard color\n\n        _ => black(),\n    }\n}\n\n/// Generates the RGB channels in [0, 5] for a given index into the 6x6x6 ANSI color cube.\n/// See: [8 bit ANSI color](https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit).\n///\n/// Wikipedia gives a formula for calculating the index for a given color:\n///\n/// ```\n/// index = 16 + 36 × r + 6 × g + b (0 ≤ r, g, b ≤ 5)\n/// ```\n///\n/// This function does the reverse, calculating the `r`, `g`, and `b` components from a given index.\nfn rgb_for_index(i: u8) -> (u8, u8, u8) {\n    debug_assert!((16..=231).contains(&i));\n    let i = i - 16;\n    let r = (i - (i % 36)) / 36;\n    let g = ((i % 36) - (i % 6)) / 6;\n    let b = (i % 36) % 6;\n    (r, g, b)\n}\n\npub fn rgba_color(r: u8, g: u8, b: u8) -> Hsla {\n    Rgba {\n        r: (r as f32 / 255.),\n        g: (g as f32 / 255.),\n        b: (b as f32 / 255.),\n        a: 1.,\n    }\n    .into()\n}\n\n#[cfg(test)]\nmod tests {\n    use alacritty_terminal::{\n        index::{Column, Line, Point as AlacPoint},\n        term::cell::Cell,\n    };\n    use gpui::{bounds, point, size, Pixels, Point};\n    use rand::{distributions::Alphanumeric, rngs::ThreadRng, thread_rng, Rng};\n\n    use crate::{\n        content_index_for_mouse, rgb_for_index, IndexedCell, TerminalBounds, TerminalContent,\n    };\n\n    #[test]\n    fn test_rgb_for_index() {\n        // Test every possible value in the color cube.\n        for i in 16..=231 {\n            let (r, g, b) = rgb_for_index(i);\n            assert_eq!(i, 16 + 36 * r + 6 * g + b);\n        }\n    }\n\n    #[test]\n    fn test_mouse_to_cell_test() {\n        let mut rng = thread_rng();\n        const ITERATIONS: usize = 10;\n        const PRECISION: usize = 1000;\n\n        for _ in 0..ITERATIONS {\n            let viewport_cells = rng.gen_range(15..20);\n            let cell_size = rng.gen_range(5 * PRECISION..20 * PRECISION) as f32 / PRECISION as f32;\n\n            let size = crate::TerminalBounds {\n                cell_width: Pixels::from(cell_size),\n                line_height: Pixels::from(cell_size),\n                bounds: bounds(\n                    Point::default(),\n                    size(\n                        Pixels::from(cell_size * (viewport_cells as f32)),\n                        Pixels::from(cell_size * (viewport_cells as f32)),\n                    ),\n                ),\n            };\n\n            let cells = get_cells(size, &mut rng);\n            let content = convert_cells_to_content(size, &cells);\n\n            for row in 0..(viewport_cells - 1) {\n                let row = row as usize;\n                for col in 0..(viewport_cells - 1) {\n                    let col = col as usize;\n\n                    let row_offset = rng.gen_range(0..PRECISION) as f32 / PRECISION as f32;\n                    let col_offset = rng.gen_range(0..PRECISION) as f32 / PRECISION as f32;\n\n                    let mouse_pos = point(\n                        Pixels::from(col as f32 * cell_size + col_offset),\n                        Pixels::from(row as f32 * cell_size + row_offset),\n                    );\n\n                    let content_index =\n                        content_index_for_mouse(mouse_pos, &content.terminal_bounds);\n                    let mouse_cell = content.cells[content_index].c;\n                    let real_cell = cells[row][col];\n\n                    assert_eq!(mouse_cell, real_cell);\n                }\n            }\n        }\n    }\n\n    #[test]\n    fn test_mouse_to_cell_clamp() {\n        let mut rng = thread_rng();\n\n        let size = crate::TerminalBounds {\n            cell_width: Pixels::from(10.),\n            line_height: Pixels::from(10.),\n            bounds: bounds(\n                Point::default(),\n                size(Pixels::from(100.), Pixels::from(100.)),\n            ),\n        };\n\n        let cells = get_cells(size, &mut rng);\n        let content = convert_cells_to_content(size, &cells);\n\n        assert_eq!(\n            content.cells[content_index_for_mouse(\n                point(Pixels::from(-10.), Pixels::from(-10.)),\n                &content.terminal_bounds,\n            )]\n            .c,\n            cells[0][0]\n        );\n        assert_eq!(\n            content.cells[content_index_for_mouse(\n                point(Pixels::from(1000.), Pixels::from(1000.)),\n                &content.terminal_bounds,\n            )]\n            .c,\n            cells[9][9]\n        );\n    }\n\n    fn get_cells(size: TerminalBounds, rng: &mut ThreadRng) -> Vec<Vec<char>> {\n        let mut cells = Vec::new();\n\n        for _ in 0..((size.height() / size.line_height()) as usize) {\n            let mut row_vec = Vec::new();\n            for _ in 0..((size.width() / size.cell_width()) as usize) {\n                let cell_char = rng.sample(Alphanumeric) as char;\n                row_vec.push(cell_char)\n            }\n            cells.push(row_vec)\n        }\n\n        cells\n    }\n\n    fn convert_cells_to_content(\n        terminal_bounds: TerminalBounds,\n        cells: &[Vec<char>],\n    ) -> TerminalContent {\n        let mut ic = Vec::new();\n\n        for (index, row) in cells.iter().enumerate() {\n            for (cell_index, cell_char) in row.iter().enumerate() {\n                ic.push(IndexedCell {\n                    point: AlacPoint::new(Line(index as i32), Column(cell_index)),\n                    cell: Cell {\n                        c: *cell_char,\n                        ..Default::default()\n                    },\n                });\n            }\n        }\n\n        TerminalContent {\n            cells: ic,\n            terminal_bounds,\n            ..Default::default()\n        }\n    }\n\n    fn re_test(re: &str, hay: &str, expected: Vec<&str>) {\n        let results: Vec<_> = regex::Regex::new(re)\n            .unwrap()\n            .find_iter(hay)\n            .map(|m| m.as_str())\n            .collect();\n        assert_eq!(results, expected);\n    }\n    #[test]\n    fn test_url_regex() {\n        re_test(\n            crate::URL_REGEX,\n            ": "",
    ",\n            vec![": "",
    "],\n        );\n    }\n    #[test]\n    fn test_word_regex() {\n        re_test(\n            crate::WORD_REGEX,\n            ": "",
    "What\" is this?": "",
    "hello": "",
    "world": "",
    "What": "",
    "is": "",
    "this": "",
    "word": "",
    "a Main.cs(20) b": "",
    "a": "",
    "Main.cs(20)": "",
    "b": "",
    "Main.cs(20,5) Error desc": "",
    "Main.cs(20,5)": "",
    "Error": "",
    "desc": "",
    "a Main.cs:20:5 b": "",
    "Main.cs:20:5": "",
    "filename:line:col:message": "",
    "Main.cs:20:5:Error desc": "",
    "Main.cs:20:5:Error": ""
  },
  "zed/crates/terminal_view/src/persistence.rs": {
    "no window present": "",
    "horizontal": "",
    "vertical": "",
    "Invalid axis value: '{invalid}'": "",
    "?": "",
    ", ": "",
    "DELETE FROM terminals WHERE workspace_id = ? AND item_id NOT IN ({placeholders})": ""
  },
  "zed/crates/terminal_view/src/terminal_panel.rs": {
    "plus": "",
    "New…": "",
    "New Terminal": "",
    "Spawn task": "",
    "terminal-pane-tab-bar-split": "",
    "terminal-pane-split": "",
    "Split Pane": "",
    "Split Right": "",
    "Split Left": "",
    "Split Up": "",
    "Split Down": "",
    "Zoom Out": "",
    "Zoom In": "",
    "{:?}-{:?}": "",
    "terminal not yet supported for remote projects": "",
    "retrieving active terminal item in the workspace": "",
    "Terminal Panel": "",
    "Inline Assist": ""
  },
  "zed/crates/terminal_view/src/terminal_tab_tooltip.rs": {
    "Process ID (PID): {}": ""
  },
  "zed/crates/terminal_view/src/terminal_view.rs": {
    "a": "",
    "b": "",
    "New Terminal": "",
    "Copy": "",
    "Paste": "",
    "Select All": "",
    "Clear": "",
    "Inline Assist": "",
    "Close Terminal Tab": "",
    "ctrl-cmd-space": "",
    "Terminal": "",
    "screen": "",
    "alt": "",
    "normal": "",
    "DECCKM": "",
    "DECPAM": "",
    "DECPNM": "",
    "DECTCEM": "",
    "DECAWM": "",
    "DECOM": "",
    "IRM": "",
    "LNM": "",
    "report_focus": "",
    "alternate_scroll": "",
    "bracketed_paste": "",
    "any_mouse_reporting": "",
    "click": "",
    "drag": "",
    "motion": "",
    "off": "",
    "mouse_reporting": "",
    "sgr": "",
    "utf8": "",
    "mouse_format": "",
    "terminal-view-scroll": "",
    "rerun-icon": "",
    "Rerun task": "",
    "workspace update": "",
    "Received {} items for one path {path_to_open:?}": "",
    "~": "",
    ".": "",
    "terminal-view": "",
    "term-tab-icon": "",
    "/root.txt": "",
    "/root/": "",
    "/root1/": "",
    "/root2.txt": "",
    "/root2/": "",
    "test(\\w)": "",
    "test\\(\\w\\)": ""
  },
  "zed/crates/text/src/text.rs": {
    "\\r\n|\\r": "",
    "Failed to create LINE_SEPARATORS_REGEX": "",
    "Buffer id cannot be 0.": "",
    "gave up waiting for edits": "",
    "gave up waiting for anchors": "",
    "gave up waiting for version": "",
    "invalid edit": "",
    "fragment: {:?}\ninsertion: {:?}": "",
    "\\r\n": "",
    "mutating buffer {} with {:?}": "",
    "undoing buffer {} transaction {:?}": "",
    "invalid insertion": "",
    "invalid anchor {:?}. buffer id: {}, version: {:?}": "",
    "invalid version": "",
    "offset {} is out of range, max allowed is {}": ""
  },
  "zed/crates/theme_importer/src/assets.rs": {
    "../../assets": "",
    "fonts/**/*": "",
    "*.DS_Store": "",
    "could not find asset at path \"{}\"": ""
  },
  "zed/crates/theme_importer/src/main.rs": {
    "https://zed.dev/schema/themes/v0.2.0.json": "",
    "theme_printer": "",
    "could not initialize logger": "",
    "Failed to open file at path: {:?}": "",
    "failed to parse theme {theme_file_path:?}": "",
    "$schema": "",
    "Done!": ""
  },
  "zed/crates/theme_selector/src/theme_selector.rs": {
    "error loading theme {}: {}": "",
    "Select Theme...": "",
    "Settings Changed": "",
    "theme": "",
    "docs": "",
    "View Theme Docs": "",
    "https://zed.dev/docs/themes": "",
    "more-themes": "",
    "Install Themes": ""
  },
  "zed/crates/theme_selector/src/icon_theme_selector.rs": {
    "error loading icon theme {}: {err}": "",
    "Select Icon Theme...": "",
    "Settings Changed": "",
    "icon_theme": "",
    "docs": "",
    "View Icon Theme Docs": "",
    "https://zed.dev/docs/icon-themes": "",
    "more-icon-themes": "",
    "Install Icon Themes": ""
  },
  "zed/crates/time_format/src/time_format.rs": {
    "{} {}": "",
    "Today at {}": "",
    "Yesterday at {}": "",
    "Just now": "",
    "{} minutes ago": "",
    "1 hour ago": "",
    "{} hours ago": "",
    "Today": "",
    "Yesterday": "",
    "{} days ago": "",
    "1 week ago": "",
    "{} weeks ago": "",
    "1 month ago": "",
    "{} months ago": "",
    "1 year ago": "",
    "{} years ago": "",
    "PM": "",
    "AM": "",
    "{}:{:02} {}": "",
    "{:02}:{:02}": "",
    "{:02}/{:02}/{}": "",
    "en-US": "",
    "es-MX": "",
    "es-CO": "",
    "es-SV": "",
    "es-NI": "",
    "es-HN": "",
    "en-CA": "",
    "en-AU": "",
    "en-NZ": "",
    "ar-SA": "",
    "ar-EG": "",
    "ar-JO": "",
    "en-IN": "",
    "hi-IN": "",
    "en-PK": "",
    "ur-PK": "",
    "en-PH": "",
    "fil-PH": "",
    "bn-BD": "",
    "ccp-BD": "",
    "en-IE": "",
    "ga-IE": "",
    "en-MY": "",
    "ms-MY": "",
    "Today at 15:30": "",
    "Today at 3:30 PM": "",
    "Yesterday at 9:00 AM": "",
    "Yesterday at 8:00 PM": "",
    "Yesterday at 6:00 PM": "",
    "Yesterday at 11:55 PM": "",
    "04/10/1990 8:20 PM": "",
    "4 weeks ago": "",
    "Valid timezone offset": ""
  },
  "zed/crates/title_bar/src/application_menu.rs": {
    "{}-menu-item": "",
    "{}-menu-popover": "",
    "{}-menu-trigger": "",
    "Open Application Menu": "",
    "ApplicationMenu": ""
  },
  "zed/crates/title_bar/src/collab.rs": {
    "Screen Share Disabled": "",
    "Screen Share Enabled": "",
    "Sharing Screen Failed": "",
    "{:?}\n\nPlease check that you have given Zed permissions to record your screen in Settings.": "",
    "Microphone Enabled": "",
    "Microphone Disabled": "",
    "collaborator-list": "",
    "collaborator": "",
    "Follow {login}": "",
    "{} is muted": "",
    "+{extra_count}": "",
    "toggle_sharing": "",
    "Unshare": "",
    "Share": "",
    "Stop sharing project with call participants": "",
    "Share project with call participants": "",
    "leave-call": "",
    "Leave call": "",
    "mute-microphone": "",
    "Unmute Microphone": "",
    "Audio will be unmuted": "",
    "Mute Microphone": "",
    "mute-sound": "",
    "Unmute Audio": "",
    "Microphone will be unmuted": "",
    "Mute Audio": "",
    "Microphone will be muted": "",
    "screen-share": "",
    "Stop Sharing Screen": "",
    "Share Screen": ""
  },
  "zed/crates/title_bar/src/title_bar.rs": {
    "stories": "",
    "https://dub.sh/zed-c-onboarding": "",
    "title-bar": "",
    "titlebar": "",
    "titlebar-content": "",
    "ZED_USE_CROSS_PLATFORM_MENU": "",
    "Connecting to: {host}": "",
    "Connected to: {host}": "",
    "Connection attempt to {host} missed. Retrying...": "",
    "Lost connection to {host}. Reconnecting...": "",
    "Disconnected from {host}": "",
    "ssh-server-icon": "",
    "Remote Project": "",
    "disconnected": "",
    "Disconnected": "",
    "project_owner_trigger": "",
    "{} is sharing this project. Click to follow.": "",
    "Open recent project": "",
    "project_name_trigger": "",
    "Recent Projects": "",
    "project_branch_trigger": "",
    "Recent Branches": "",
    "Local branches only": "",
    "Please restart Zed to Collaborate": "",
    "Updating...": "",
    "Please update Zed to Collaborate": "",
    "connection-status": "",
    "sign_in": "",
    "Sign in": "",
    "user-menu": "",
    "Current Plan: {}": "",
    "Free": "",
    "Pro": "",
    "Settings": "",
    "Key Bindings": "",
    "Themes…": "",
    "Icon Themes…": "",
    "Extensions": "",
    "Book Onboarding": "",
    "Sign Out": "",
    "Toggle User Menu": ""
  },
  "zed/crates/title_bar/src/window_controls.rs": {
    "Use WindowControl::new_close() for close control.": ""
  },
  "zed/crates/toolchain_selector/src/active_toolchain.rs": {
    "Toolchain": "",
    "change-toolchain": "",
    "Select {}": ""
  },
  "zed/crates/toolchain_selector/src/toolchain_selector.rs": {
    "Select a {}…": "",
    "Select a toolchain…": "",
    ".": "",
    "{}{}": ""
  },
  "zed/crates/util/src/paths.rs": {
    "failed to determine home directory": "",
    "Invalid WTF-8 sequence: {bytes:?}": "",
    "~": "",
    "\\": "",
    "sanitized": "",
    "(?x)\n    ([^\\(]+)(?:\n        \\((\\d+)[,:](\\d+)\\) # filename(row,column), filename(row:column)\n        |\n        \\((\\d+)\\)()     # filename(row)\n    )\n    |\n    (.+?)(?:\n        \\:+(\\d+)\\:(\\d+)\\:*$  # filename:row:column\n        |\n        \\:+(\\d+)\\:*()$       # filename:row\n        |\n        \\:*()()$             # filename:\n    )": "",
    "test_file": "",
    "test_file:10": "",
    "test_file.rs": "",
    "test_file.rs:1": "",
    "test_file.rs:1:2": "",
    "test_file.rs:a": "",
    "test_file.rs:a:b": "",
    "test_file.rs::": "",
    "test_file.rs::1": "",
    "test_file.rs:1::": "",
    "test_file.rs::1:2": "",
    "test_file.rs:1::2": "",
    "test_file.rs:1:2:3": "",
    "{path_string}:{row}:{column}": "",
    "{path_string}:{row}": "",
    "test_dirs": "",
    "test_dirs/1.46": "",
    "test_dirs/1.46/bar_1": "",
    "test_dirs/1.46/bar_2": "",
    "test_dirs/1.45": "",
    "test_dirs/1.45/foo_2": "",
    "test_dirs/1.45/foo_1": "",
    "root1/one.txt": "",
    "root1/one.two.txt": "",
    "test_dirs/file.rs": "",
    "test_dirs/file.txt": "",
    "test_dirs/file.md": "",
    "test_dirs/file": "",
    "test_dirs/file.a": "",
    "test_DIRS": "",
    "test_DIRS/foo_1": "",
    "test_DIRS/foo_2": "",
    "test_DIRS/bar": "",
    "test_DIRS/BAR": "",
    "test_dirs/foo_1": "",
    "test_dirs/foo_2": "",
    "test_dirs/bar": "",
    "test_dirs/BAR": "",
    " test_file": "",
    "a:bc:.zip:1": "",
    "a:bc:.zip": "",
    "one.second.zip:1": "",
    "one.second.zip": "",
    "test_file:10:1:": "",
    "test_file.rs:": "",
    "test_file.rs:1:": "",
    "app-editors:zed-0.143.6:20240710-201212.log:34:": "",
    "app-editors:zed-0.143.6:20240710-201212.log": "",
    "crates/file_finder/src/file_finder.rs:1902:13:": "",
    "crates/file_finder/src/file_finder.rs": "",
    "crate/utils/src/test:today.log:34": "",
    "crate/utils/src/test:today.log": "",
    "/testing/out/src/file_finder.odin(7:15)": "",
    "/testing/out/src/file_finder.odin": "",
    "crates\\utils\\paths.rs": "",
    "C:\\Users\\someone\\test_file.rs": "",
    "crates\\utils\\paths.rs:101": "",
    "\\\\?\\C:\\Users\\someone\\test_file.rs:1:20": "",
    "\\\\?\\C:\\Users\\someone\\test_file.rs": "",
    "C:\\Users\\someone\\test_file.rs(1902,13)": "",
    "\\\\?\\C:\\Users\\someone\\test_file.rs:1902:13:": "",
    "\\\\?\\C:\\Users\\someone\\test_file.rs:1902:13:15:": "",
    "\\\\?\\C:\\Users\\someone\\test_file.rs:1902": "",
    "\\\\?\\C:\\Users\\someone\\test_file.rs:1902:::15:": "",
    "\\\\?\\C:\\Users\\someone\\test_file.rs(1902,13):": "",
    "\\\\?\\C:\\Users\\someone\\test_file.rs(1902):": "",
    "C:\\Users\\someone\\test_file.rs:1902:13:": "",
    "C:\\Users\\someone\\test_file.rs(1902,13):": "",
    "C:\\Users\\someone\\test_file.rs(1902):": "",
    "crates/utils/paths.rs:101": "",
    "some_file.txt": "",
    "~/some_file.txt": "",
    "/a/b/c/file_name.rs": "",
    "/a/b/c/file.name.rs": "",
    "/a/b/c/long.file.name.rs": "",
    "/a/b/c/.gitignore": "",
    "gitignore": "",
    "/a/b/c/.eslintrc.js": "",
    "eslintrc.js": "",
    "/work/node_modules": "",
    "**/node_modules/**": "",
    "Path matcher should match {path:?}": "",
    "/Users/someonetoignore/work/zed/zed.dev/node_modules": ""
  },
  "zed/crates/util/src/test.rs": {
    ".git": "",
    "JSON object must contain only objects, strings, or null": "",
    "You must pass a JSON object to this helper": ""
  },
  "zed/crates/util/src/util.rs": {
    "{}\n{:?}": "",
    "C:": "",
    "/Users/user/file.txt": "",
    "C:\\Users\\user\\file.txt": "",
    "...": "",
    "…": "",
    "\n…": "",
    "call to getpwuid_r failed. uid: {}, status: {}": "",
    "passwd entry for uid {} not found": "",
    "passwd entry has different uid ({}) than getuid ({}) returned": "",
    "SHELL": "",
    "updating SHELL environment variable to value from passwd entry: {:?}": "",
    "ZED_LOGIN_SHELL_START": "",
    "SHELL environment variable is not assigned so we can't source login environment variables": "",
    "HOME": "",
    "cd '{home}';": "",
    "{}printf '%s' {marker}; /usr/bin/env; exit 0;": "",
    "-l": "",
    "-i": "",
    "-c": "",
    "failed to spawn login shell to source login environment variables": "",
    "login shell exited with error": "",
    "set environment variables from shell:{}, path:{}": "",
    "PATH": "",
    "ZED_MEASUREMENTS": "",
    "1": "",
    "true": "",
    "{}: {:?}": "",
    "{reason} - {error:?}": "",
    "{:?}": "",
    "SIMPLE_TEXT": "",
    "a": "",
    "A": "",
    "hello": "",
    "Hello": "",
    "WORLD": "",
    "(\\p{Emoji}|\\u{200D})": "",
    "👨‍👩‍👧‍👧👋": "",
    "👋!": "",
    "aaaaaa": "",
    "aaaaa…": "",
    "èèèèèè": "",
    "èèèèè…": "",
    "…aaaaa": "",
    "…èèèèè": "",
    "1a": "",
    "12ab": "",
    "ab": "",
    "12_ab": "",
    "_ab": "",
    "1_2ab": "",
    "_2ab": "",
    "1.2": "",
    ".2": "",
    "1.2_a": "",
    ".2_a": "",
    "12.2_a": "",
    "12a.2_a": "",
    "a.2_a": "",
    "1-abc": "",
    "10": "",
    "11def": "",
    "2": "",
    "21-abc": "",
    "numeric_prefix_less": "",
    "aaa": "",
    "~™£": "",
    "String without numeric prefix `{numeric_prefix_less}` should not be converted into NumericPrefixWithSuffix": "",
    "👨‍👩‍👧‍👧👋🥒": "",
    "👋": "",
    "!👋": "",
    "👋 ": "",
    " 👋": "",
    "Test": "",
    "Line 1\nLine 2\nLine 3": "",
    "Line 1\n…": "",
    "Line 1\nLine 2\n…": ""
  },
  "zed/crates/vim/src/change_list.rs": {
    "ˇ": "",
    "i 1 1 escape shift-o 2 2 escape shift-g o 3 3 escape": "",
    "22\n             11\n             3ˇ3": "",
    "g ;": "",
    "2ˇ2\n             11\n             33": "",
    "22\n             1ˇ1\n             33": "",
    "g ,": "",
    "shift-g i 4 4 escape": "",
    "22\n             11\n             34ˇ43": "",
    "2ˇ2\n             11\n             3443": "",
    "one two\n        three fˇour": "",
    "x k d i w ^ x": "",
    "ˇne•\n        three fur": "",
    "2 g ;": "",
    "ne•\n        three fˇur": "",
    "one two\n        three fˇr": "",
    "i o escape k g i": "",
    "u escape": "",
    "one two\n        three foˇur": "",
    "i o escape k ` .": "",
    "one two\n        three fˇor": ""
  },
  "zed/crates/vim/src/mode_indicator.rs": {
    "recording @{reg} ": "",
    "\"{reg}": "",
    "(insert) {}": "",
    "{} -- {} --": ""
  },
  "zed/crates/vim/src/normal.rs": {
    "Unexpected normal mode motion operator: {:?}": "",
    "^": "",
    "[No Name]": "",
    " [modified]": "",
    "{}{} {} lines --{:.0}%--": "",
    "h": "",
    "\n            ˇThe qˇuick\n            ˇbrown": "",
    "backspace": "",
    "\n            aaˇaa\n            😃😃": "",
    "j": "",
    "\n            aaaa\n            😃ˇ😃": "",
    "\n                ˇThe qˇuick broˇwn\n                ˇfox jumps": "",
    "enter": "",
    "\n            ˇThe qˇuick broˇwn\n            ˇfox jumps": "",
    "k": "",
    "\n            ˇThe qˇuick\n            ˇbrown fˇox jumˇps": "",
    "l": "",
    "\n            ˇThe qˇuicˇk\n            ˇbrowˇn": "",
    "$": "",
    "0": "",
    "\n                ˇThe qˇuicˇk\n                ˇbrowˇn": "",
    "shift-g": "",
    "\n                The ˇquick\n\n                brown fox jumps\n                overˇ the lazy doˇg": "",
    "\n            The quiˇck\n\n            brown": "",
    "\n            The quiˇck\n\n            ": "",
    "w": "",
    "\n            The ˇquickˇ-ˇbrown\n            ˇ\n            ˇ\n            ˇfox_jumps ˇover\n            ˇthˇe": "",
    "shift-w": "",
    "e": "",
    "\n            Thˇe quicˇkˇ-browˇn\n\n\n            fox_jumpˇs oveˇr\n            thˇe": "",
    "shift-e": "",
    "b": "",
    "\n            ˇThe ˇquickˇ-ˇbrown\n            ˇ\n            ˇ\n            ˇfox_jumps ˇover\n            ˇthe": "",
    "shift-b": "",
    "g g": "",
    "\n                The qˇuick\n\n                brown fox jumps\n                over ˇthe laˇzy dog": "",
    "\n\n\n                brown fox jumps\n                over the laˇzy dog": "",
    "2 g g": "",
    "\n                ˇ\n\n                brown fox jumps\n                over the lazydog": "",
    "2 shift-g": "",
    "a": "",
    "The qˇuicˇk": "",
    "shift-a": "",
    "\n            ˇ\n            The qˇuick\n            brown ˇfox ": "",
    "The qˇuick": "",
    " The qˇuick": "",
    "ˇ": "",
    "\n                The qˇuick\n                brown fox": "",
    "\n                ˇ\n                The quick": "",
    "   ˇ \nThe quick": "",
    "shift-i": "",
    "shift-d": "",
    "\n                The quick\n                ˇ\n                brown fox": "",
    "x": "",
    "ˇTeˇsˇt": "",
    "\n                Tesˇt\n                test": "",
    "shift-x": "",
    "ˇTˇeˇsˇt": "",
    "\n                Test\n                ˇtest": "",
    "o": "",
    "The ˇquick": "",
    "\n                The qˇuick\n                brown ˇfox\n                jumps ˇover": "",
    "\n                fn test() {\n                    println!(ˇ);\n                }": "",
    "\n                fn test() {\n                    println!();\n                    ˇ\n                }": "",
    "\n                fn test(ˇ) {\n                    println!();\n                }": "",
    "\n                fn test() {\n                    ˇ\n                    println!();\n                }": "",
    "shift-o": "",
    "\n            The qˇuick\n            brown ˇfox\n            jumps ˇover": "",
    "\n            The quick\n            ˇ\n            brown fox": "",
    "\n                ˇ\n                fn test() {\n                    println!();\n                }": "",
    "d d": "",
    "c c": "",
    "\n                The quˇick\n                brown ˇfox\n                jumps ˇover": "",
    "{count} w": "",
    "\n                    ˇThe quˇickˇ browˇn\n                    ˇ\n                    ˇfox ˇjumpsˇ-ˇoˇver\n                    ˇthe lazy dog\n                ": "",
    "Testˇ├ˇ──ˇ┐ˇTest": "",
    "\n                ˇaaaˇbˇ ˇbˇ   ˇbˇbˇ aˇaaˇbaaa\n                ˇ    ˇbˇaaˇa ˇbˇbˇb\n                ˇ\n                ˇb\n            ": "",
    "{count} f b": "",
    "{count} t b": "",
    "\n            ˇaaaˇbˇ ˇbˇ   ˇbˇbˇ aˇaaˇbaaa\n            ˇ    ˇbˇaaˇa ˇbˇbˇb\n            ˇ•••\n            ˇb\n            ": "",
    "{count} shift-f b": "",
    "{count} shift-t b": "",
    "f l": "",
    "\n            ˇfunction print() {\n                console.log('ok')\n            }\n            ": "",
    "\n            function print() {\n                consoˇle.log('ok')\n            }\n            ": "",
    "t l": "",
    "\n            function print() {\n                consˇole.log('ok')\n            }\n            ": "",
    "shift-f p": "",
    "\n            function print() {\n                console.ˇlog('ok')\n            }\n            ": "",
    "\n            function ˇprint() {\n                console.log('ok')\n            }\n            ": "",
    "shift-t p": "",
    "\n            function pˇrint() {\n                console.log('ok')\n            }\n            ": "",
    "f p": "",
    "ˇfmt.Println(\"Hello, World!\")": "",
    "fmt.ˇPrintln(\"Hello, World!\")": "",
    "fmt.Printlnˇ(\"Hello, World!\")": "",
    "t p": "",
    "fmtˇ.Println(\"Hello, World!\")": "",
    "fmt.Pˇrintln(\"Hello, World!\")": "",
    "%": "",
    "ˇconsole.logˇ(ˇvaˇrˇ)ˇ;": "",
    "ˇconsole.logˇ(ˇ'var', ˇ[ˇ1, ˇ2, 3ˇ]ˇ)ˇ;": "",
    "let result = curried_funˇ(ˇ)ˇ(ˇ)ˇ;": "",
    "ˇaa\nbb\ncc": "",
    "aˇa\nbb\ncc": "",
    "2 $": "",
    "aa\nbˇb\ncc": "",
    "4 $": "",
    "aa\nbb\ncˇc": "",
    "Editor && VimControl && !VimWaiting && !menu": "",
    "g e": "",
    "ˇassert_binding": "",
    "assert_ˇbinding": "",
    "c w": "",
    "ˇ_binding": "",
    "asserˇt_binding": "",
    "assert_bindinˇg": "",
    "ˇhello\n": "",
    "r -": "",
    "ˇ-ello\n": "",
    "3 r -": "",
    "--ˇ-lo\n": "",
    "r - 2 l .": "",
    "-eˇ-lo\n": "",
    "ˇhello world\n": "",
    "2 r - f w .": "",
    "--llo -ˇ-rld\n": "",
    "2 0 r - ": "",
    "textwidth=5": "",
    "ˇth th th th th th\n": "",
    "g q q": "",
    "th th\nth th\nˇth th\n": "",
    "ˇth th th th th th\nth th th th th th\n": "",
    "v j g q": "",
    "th th\nth th\nth th\nth th\nth th\nˇth th\n": "",
    "filetype=rust": "",
    "// helloˇ\n": "",
    "// hello\n// ˇ\n": "",
    "x escape shift-o": "",
    "// hello\n// ˇ\n// x\n": "",
    "heˇllo\n": "",
    "y y p": "",
    "hello\nˇhello\n": "",
    "heˇllo": "",
    "hello\nˇhello": "",
    "heˇllo\nhello": "",
    "2 y y p": "",
    "hello\nˇhello\nhello\nhello": "",
    "p p": "",
    "\nhello\nˇhello": "",
    "v i w shift-i": "",
    "ˇhello": "",
    "\n            The quick brown\n            fox ˇjumps over\n            the lazy dog": "",
    "shift-v shift-i": "",
    "\n            The quick brown\n            ˇfox jumps over\n            the lazy dog": "",
    "shift-v shift-a": "",
    "\n            The quick brown\n            fox jˇumps over\n            the lazy dog": ""
  },
  "zed/crates/vim/src/surrounds.rs": {
    "{}\n": "",
    " ": "",
    "{}{}": "",
    "hello in a word": "",
    "b": "",
    ")": "",
    "B": "",
    "}": "",
    "a": "",
    ">": "",
    "r": "",
    "]": "",
    "{": "",
    "'": "",
    "`": "",
    "\"": "",
    "(": "",
    "|": "",
    "[": "",
    "<": "",
    "\n            The quˇick brown\n            fox jumps over\n            the lazy dog.": "",
    "y s i w {": "",
    "\n            The ˇ{ quick } brown\n            fox jumps over\n            the lazy dog.": "",
    "y s i w }": "",
    "\n            The ˇ{quick} brown\n            fox jumps over\n            the lazy dog.": "",
    "y s $ }": "",
    "\n            The quˇ{ick brown}\n            fox jumps over\n            the lazy dog.": "",
    "\n            The quˇick brown\n            fox jumps over\n            the laˇzy dog.": "",
    "y s i w '": "",
    "\n            The ˇ'quick' brown\n            fox jumps over\n            the ˇ'lazy' dog.": "",
    "y s $ '": "",
    "\n            The quˇ'ick brown'\n            fox jumps over\n            the laˇ'zy dog.'": "",
    "y s $ 1": "",
    "\n            The quˇ1ick brown1\n            fox jumps over\n            the laˇ1zy dog.1": "",
    "y s s {": "",
    "\n            ˇ{ The quick brown }\n            fox jumps over\n            the lazy dog.": "",
    "\n                The quˇick brown•\n            fox jumps over\n            the lazy dog.": "",
    "\n                ˇ{ The quick brown }•\n            fox jumps over\n            the lazy dog.": "",
    "2 y s s )": "",
    "\n                ˇ({ The quick brown }•\n            fox jumps over)\n            the lazy dog.": "",
    "\n            The [quˇick] brown\n            fox jumps over\n            the lazy dog.": "",
    "y s a ] )": "",
    "\n            The ˇ([quick]) brown\n            fox jumps over\n            the lazy dog.": "",
    "y s i ] )": "",
    "\n            The [ˇ(quick)] brown\n            fox jumps over\n            the lazy dog.": "",
    "shift-s": "",
    "vim_mode == visual": "",
    "v i w shift-s {": "",
    "v i w shift-s }": "",
    "v e shift-s }": "",
    "\n            The quˇ{ick} brown\n            fox jumps over\n            the lazy dog.": "",
    "v i w shift-s '": "",
    "ctrl-v i w j j shift-s '": "",
    "\n            The ˇ'quick' brown\n            fox 'jumps' over\n            the 'lazy 'dog.": "",
    "j shift-v shift-s '": "",
    "\n            The quick brown\n            ˇ'\n            fox jumps over\n            '\n            the lazy dog.": "",
    "\n            The {quˇick} brown\n            fox jumps over\n            the lazy dog.": "",
    "d s {": "",
    "\n            The ˇquick brown\n            fox jumps over\n            the lazy dog.": "",
    "d s [": "",
    "\n            The {quick} brˇown\n            fox jumps over\n            the lazy dog.": "",
    "\n            The { quick brown\n            fox jumˇps over }\n            the lazy dog.": "",
    "\n            The [quˇick] brown\n            fox jumps over\n            the [laˇzy] dog.": "",
    "d s ]": "",
    "\n            The ˇquick brown\n            fox jumps over\n            the ˇlazy dog.": "",
    "\n            Tˇhe [ quick ] brown\n            fox jumps over\n            the [laˇzy] dog.": "",
    "\n            Tˇhe [ quick ] brown\n            fox jumps over\n            the [laˇzy ] dog.": "",
    "\n            The [quˇick] brown\n            fox jumps over\n            the {laˇzy} dog.": "",
    "\n            The [quick] brown\n            fox jumps over\n            the ˇlazy dog.": "",
    "\n            fn test_surround() {\n                ifˇ 2 > 1 {\n                    ˇprintln!(\"it is fine\");\n                };\n            }": "",
    "d s }": "",
    "\n            fn test_surround() ˇ\n                if 2 > 1 ˇ\n                    println!(\"it is fine\");\n                ;\n            ": "",
    "c s { [": "",
    "\n            The ˇ[ quick ] brown\n            fox jumps over\n            the lazy dog.": "",
    "\n            The {quˇick} brown\n            fox jumps over\n            the {laˇzy} dog.": "",
    "\n            The ˇ[ quick ] brown\n            fox jumps over\n            the ˇ[ lazy ] dog.": "",
    "\n            Thˇe {quick} brown\n            fox jumps over\n            the {laˇzy} dog.": "",
    "\n            Thˇe { quick } brown\n            fox jumps over\n            the {laˇzy} dog.": "",
    "c s { ]": "",
    "\n            The ˇ[quick] brown\n            fox jumps over\n            the ˇ[lazy] dog.": "",
    "\n            The {quˇick} brown\n            fox jumps over\n            the [laˇzy] dog.": "",
    "c s [ '": "",
    "\n            The {quick} brown\n            fox jumps over\n            the ˇ'lazy' dog.": "",
    "\n            fn test_surround() {\n                ifˇ 2 > 1 {\n                    ˇprintln!(\"it is fine\");\n                }\n            };": "",
    "\n            fn test_surround() ˇ[\n                if 2 > 1 ˇ[\n                    println!(\"it is fine\");\n                ]\n            ];": "",
    "y s i w [": "",
    "c s [ }": "",
    "u": "",
    "y s i w b": "",
    "\n            The ˇ(quick) brown\n            fox jumps over\n            the lazy dog.": "",
    "y s i w B": "",
    "y s i w a": "",
    "\n            The ˇ<quick> brown\n            fox jumps over\n            the lazy dog.": "",
    "y s i w r": "",
    "\n            The ˇ[quick] brown\n            fox jumps over\n            the lazy dog.": "",
    "c s { b": "",
    "\n            The (quˇick) brown\n            fox jumps over\n            the lazy dog.": "",
    "c s ( B": "",
    "c s ( a": "",
    "\n            The <quˇick> brown\n            fox jumps over\n            the lazy dog.": "",
    "c s < b": "",
    "c s ( r": "",
    "c s [ b": "",
    "d s B": "",
    "d s b": "",
    "d s r": "",
    "d s a": ""
  },
  "zed/crates/welcome/src/base_keymap_picker.rs": {
    "Select a base keymap...": "",
    "Settings Changed": "",
    "keymap": ""
  },
  "zed/crates/welcome/src/multibuffer_hint.rs": {
    "MULTIBUFFER_HINT_SHOWN_COUNT": "",
    "Edit and save files directly in the results multibuffer!": "",
    "open_docs": "",
    "Learn More": "",
    "https://zed.dev/docs/multibuffers": "",
    "dismiss": "",
    "Dismiss Hint": ""
  },
  "zed/crates/welcome/src/welcome.rs": {
    "first_open": "",
    "https://zed.dev/docs/": "",
    "https://dub.sh/zed-c-onboarding": "",
    "false": "",
    "Edit Prediction Enabled": "",
    "Try Edit Prediction": "",
    "Welcome": "",
    "icons/logo_96.svg": "",
    "Welcome to Zed": "",
    "The editor for what's next": "",
    "Get Started": "",
    "choose-theme": "",
    "Choose a Theme": "",
    "Welcome Theme Changed": "",
    "choose-keymap": "",
    "Choose a Keymap": "",
    "Welcome Keymap Changed": "",
    "try-zed-edit-prediction": "",
    "Welcome Screen Try Edit Prediction clicked": "",
    "edit settings": "",
    "Edit Settings": "",
    "Welcome Settings Edited": "",
    "Resources": "",
    "install-cli": "",
    "Install the CLI": "",
    "Welcome CLI Installed": "",
    "view-docs": "",
    "View Documentation": "",
    "Welcome Documentation Viewed": "",
    "explore-extensions": "",
    "Explore Extensions": "",
    "Welcome Extensions Page Opened": "",
    "book-onboarding": "",
    "Book Onboarding": "",
    "enable-vim": "",
    "Enable Vim Mode": "",
    "Welcome Vim Mode Toggled": "",
    "vim-mode": "",
    "You can also toggle Vim Mode via the command palette or Editor Controls menu.": "",
    "enable-crash": "",
    "Send Crash Reports": "",
    "Welcome Diagnostic Telemetry Toggled": "",
    "Settings Changed": "",
    "diagnostic telemetry": "",
    "enable-telemetry": "",
    "Send Telemetry": "",
    "Welcome Metric Telemetry Toggled": "",
    "metric telemetry": "",
    "Welcome Page Closed": "",
    "Welcome Page Opened": ""
  },
  "zed/crates/workspace/src/notifications.rs": {
    "Error: {err}": "",
    "See docs": "",
    "https://zed.dev/docs/linux#i-cant-open-any-files": "",
    "Response already sent": "",
    "Stream already closed": "",
    "language_server_prompt_notification": "",
    "copy": "",
    "Copy Description": "",
    "close": "",
    "error_message_prompt_notification": "",
    "error_message": "",
    "error_message_prompt_notification_button": "",
    "Showing error notification in workspace: {err:?}": "",
    "{err:?}": "",
    "Showing error notification in app: {message}": "",
    "{err}. Please try again.": "",
    "Ok": ""
  },
  "zed/crates/workspace/src/pane_group.rs": {
    "Pane not found": "",
    "{} is in an unshared pane": "",
    "Follow {} to their active project": "",
    "{} is viewing an unshared Zed project": "",
    "{} is viewing a window outside of Zed": "",
    "up": "",
    "down": "",
    "left": "",
    "right": ""
  },
  "zed/crates/workspace/src/pane.rs": {
    "you have unsaved changes": "",
    "AddItem": "",
    "item": "",
    "ActivateItem": "",
    "local": "",
    "Remove": "",
    "RemoveItem": "",
    "idx": "",
    "RemovedItem": "",
    "item_id": "",
    "Split": "",
    "direction": "",
    "JoinAll": "",
    "JoinIntoNext": "",
    "ChangeItemTitle": "",
    "Focus": "",
    "ZoomIn": "",
    "ZoomOut": "",
    "UserSavedItem": "",
    "save_intent": "",
    "pane-tab-bar-popover-menu": "",
    "plus": "",
    "New...": "",
    "New File": "",
    "Open File": "",
    "Search Project": "",
    "Search Symbols": "",
    "New Terminal": "",
    "pane-tab-bar-split": "",
    "split": "",
    "Split Pane": "",
    "Split Right": "",
    "Split Left": "",
    "Split Up": "",
    "Split Down": "",
    "toggle_zoom": "",
    "Zoom Out": "",
    "Zoom In": "",
    "untitled": "",
    "{}\n.. and {} more": "",
    "Do you want to save changes to the following files?": "",
    "Save all": "",
    "Discard all": "",
    "Cancel": "",
    "This file has changed on disk since you started editing it. Do you want to overwrite it?": "",
    "This file has been deleted on disk since you started editing it. Do you want to recreate it?": "",
    "Save": "",
    "Close": "",
    "Overwrite": "",
    "Discard": "",
    "Don't Save": "",
    "save modal was not present in spawned modals after awaiting for its answer": "",
    "Unpin Tab": "",
    "unpin tab": "",
    "Close Tab": "",
    "close tab": "",
    "Close Others": "",
    "Close Left": "",
    "Close Right": "",
    "Close Clean": "",
    "Close All": "",
    "Pin Tab": "",
    "Copy Path": "",
    "Copy Relative Path": "",
    "Reveal In Project Panel": "",
    "Open in Terminal": "",
    "navigate_backward": "",
    "Go Back": "",
    "navigate_forward": "",
    "Go Forward": "",
    "tab_bar": "",
    "unpinned tabs": "",
    "tab_bar_drop_target": "",
    "Cannot drop files on a remote project": "",
    "Pane": "",
    "EmptyPane": "",
    "Open a file or project to get started.": "",
    "This buffer": "",
    "{path} contains unsaved edits. Do you want to save it?": "",
    "7": "",
    "3": "",
    "4": "",
    "5": "",
    "6": "",
    "7*": "",
    "X": "",
    "X*": "",
    "D{}": "",
    "D0^": "",
    "D1^": "",
    "D2^": "",
    "D3^": "",
    "D4^": "",
    "D5^": "",
    "D6*^": "",
    "N{}": "",
    "D6^": "",
    "N0": "",
    "N1": "",
    "N2": "",
    "N3": "",
    "N4": "",
    "N5": "",
    "N6*": "",
    "A": "",
    "B*": "",
    "C": "",
    "D": "",
    "D*": "",
    "B": "",
    "A*": "",
    "C*": "",
    "buffer 1": "",
    "one.txt": "",
    "buffer 1*": "",
    "1.txt": "",
    "buffer 2": "",
    "2.txt": "",
    "buffer 2*": "",
    "multibuffer 1": "",
    "multibuffer 1*": "",
    "multibuffer 1b": "",
    "multibuffer 1b*": "",
    "1": "",
    "1*": "",
    "E": "",
    "A^": "",
    "C^": "",
    "E*": "",
    "C*^": "",
    "A.txt": "",
    "B.txt": "",
    "C.txt": "",
    "B^": "",
    "AB": "",
    "AB^": "",
    "pane items do not match expectation": ""
  },
  "zed/crates/workspace/src/persistence.rs": {
    "Horizontal": "",
    "Vertical": "",
    "Stored serialized item kind is incorrect": "",
    "Windowed": "",
    "Maximized": "",
    "FullScreen": "",
    "Fixed": "",
    "Window State did not have a valid string": "",
    "No workspaces found": "",
    "Getting center group": "",
    "update_worktrees": "",
    "Clearing old panes": "",
    "clearing out old locations": "",
    "Updating workspace": "",
    "save pane group in save workspace": "",
    "failed to insert ssh project": "",
    "Pane Group Child was neither a pane group or a pane": "",
    "Couldn't retrieve group_id from inserted pane_group": "",
    "Could not retrieve inserted pane_id": "",
    "Saving items": "",
    "Preparing insertion": "",
    "test_next_id_stability": "",
    "test_table": "",
    "test-text-1": "",
    "test_workspace_id_stability": "",
    "/tmp": "",
    "/tmp2": "",
    "test-text-2": "",
    "/tmp3": "",
    "test_full_workspace_serialization": "",
    "Terminal": "",
    "test_basic_functionality": "",
    "/tmp4": "",
    "tmp": "",
    "test_serializing_workspaces_session_id": "",
    "/tmp1": "",
    "session-id-1": "",
    "session-id-2": "",
    "my-host": "",
    "/tmp6a": "",
    "/tmp6b": "",
    "/tmp6c": "",
    "session-id-3": "",
    "dir1": "",
    "dir2": "",
    "dir3": "",
    "dir4": "",
    "test_serializing_workspaces_last_session_workspaces": "",
    "one-session": "",
    "test_serializing_workspaces_last_session_workspaces_ssh_projects": "",
    "host-1": "",
    "my-user-1": "",
    "host-2": "",
    "my-user-2": "",
    "host-3": "",
    "my-user-3": "",
    "host-4": "",
    "my-user-4": "",
    "test_get_or_create_ssh_project": "",
    "example.com": "",
    "/home/user": "",
    "/etc/nginx": "",
    "user": "",
    "otherexample.com": "",
    "/home/otheruser": "",
    "otheruser": "",
    "test_get_or_create_ssh_project_with_null_user": "",
    "test_get_ssh_projects": "",
    "anotherexample.com": "",
    "/home/user2": "",
    "user2": "",
    "yetanother.com": "",
    "/home/user3": "",
    "/proc/1234/exe": "",
    "simple_split": "",
    "test_cleanup_panes": ""
  },
  "zed/crates/workspace/src/theme_preview.rs": {
    "Overview": "",
    "Typography": "",
    "{} Preview": "",
    "https://avatars.githubusercontent.com/u/1714999?v=4": "",
    "{} ({:.2})": "",
    "Text": "",
    "Headline Sizes": "",
    "XLarge Headline": "",
    "Large Headline": "",
    "Medium Headline": "",
    "Small Headline": "",
    "XSmall Headline": "",
    "Text Colors": "",
    "Default Text": "",
    "Accent Text": "",
    "Conflict Text": "",
    "Created Text": "",
    "Deleted Text": "",
    "Disabled Text": "",
    "Error Text": "",
    "Hidden Text": "",
    "Hint Text": "",
    "Ignored Text": "",
    "Info Text": "",
    "Modified Text": "",
    "Muted Text": "",
    "Placeholder Text": "",
    "Selected Text": "",
    "Success Text": "",
    "Warning Text": "",
    "Wrapping Text": "",
    "This is a longer piece of text that should wrap to multiple lines. It demonstrates how text behaves when it exceeds the width of its container.": "",
    "Colors": "",
    "{:?}-preview": "",
    "{:?}": "",
    "theme-preview-overview": "",
    "Theme Preview": "",
    "This view lets you preview a range of UI elements across a theme. Use it for testing out changes to the theme.": "",
    "theme-preview-typography": "",
    "Headline 1": "",
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.": "",
    "Headline 2": "",
    "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.": "",
    "Headline 3": "",
    "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.": "",
    "Headline 4": "",
    "Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.": "",
    "Headline 5": "",
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.": "",
    "Body Text": "",
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.": "",
    "theme-preview-nav": "",
    "theme-preview": "",
    "ThemePreview": ""
  },
  "zed/crates/workspace/src/workspace.rs": {
    "ZED_WINDOW_SIZE": "",
    "ZED_WINDOW_POSITION": "",
    "default_true": "",
    "Failed to read WorkspaceId at index {start_index}": "",
    "cannot deserialize {}, descriptor not found": "",
    "cannot cleanup {}, descriptor not found": "",
    "global context": "",
    "Navigating to {project_path:?}": "",
    "Navigating to {abs_path:?}": "",
    "Failed to navigate history: {open_by_project_path_e:#} and {open_by_abs_path_e:#}": "",
    "Do you want to leave the current call?": "",
    "Close window and hang up": "",
    "Cancel": "",
    "bindings": "",
    "g z": "",
    "workspace::SendKeystrokes": "",
    ": j <enter> u": "",
    "over 100 keystrokes passed to send_keystrokes": "",
    "Do you want to save all changes in the following files?": "",
    "Save all": "",
    "Discard all": "",
    "open paths {abs_paths:?}": "",
    "You cannot add folders to someone else's project": "",
    "open abs path {abs_path:?} task spawn": "",
    "open abs path {abs_path:?} task returned incorrect number of results": "",
    "ensured single task result": "",
    "open abs path {abs_path:?} task join": "",
    "open abs path {abs_path:?} task returned None": "",
    "There must be an active pane": "",
    "pane was dropped": "",
    "cannot open file {:?}": "",
    "Could not find a focus target when in switching focus in {direction} direction for a {:?} dock": "",
    "following interrupted": "",
    ", ": "",
    "empty project": "",
    " — ": "",
    " ↙": "",
    " ↗": "",
    "invalid update": "",
    "invalid view id": "",
    "missing update view variant": "",
    "missing update view id": "",
    "workspace dropped": "",
    "no id for view": "",
    "stopped following": "",
    "missing view variant": "",
    "failed to construct view from leader (maybe from a different version of zed?)": "",
    "failed to send serializable item over channel: {}": "",
    "Failed to save": "",
    "https://github.com/zed-industries/zed/issues/new?assignees=&labels=admin+read%2Ctriage%2Cbug&projects=&template=1_bug_report.yml": "",
    "Failed to load the database file.": "",
    "File an Issue": "",
    "Workspace": "",
    "keyboard_layout": "",
    "workspace": "",
    "creator is missing": "",
    "OpenPaths": "",
    "paths": "",
    "Do you want to switch channels?": "",
    "Leaving this call will unshare your current project.": "",
    "Yes, Join Channel": "",
    "error connecting": "",
    "failed to join channel: {}": "",
    "Please sign in to continue.": "",
    "Your are running an unsupported version of Zed. Please update to continue.": "",
    "No matching channel was found. Please check the link and try again.": "",
    "This channel is private, and you do not have access. Please ask someone to add you and try again.": "",
    "Please check your internet connection and try again.": "",
    "{}\n\nPlease try again.": "",
    "Failed to join channel": "",
    "Ok": "",
    "could not open zed": "",
    "path {path:?} is not a file": "",
    "no paths given": "",
    "SSH Project Opened": "",
    "path": "",
    "'{path}' does not exist": "",
    "not in a call": "",
    "Are you sure you want to restart?": "",
    "Restart": "",
    "window-backdrop": "",
    "c": "",
    "b1/c": "",
    "a/b1/c": "",
    "b2/c": "",
    "a/b2/c": "",
    "/root1": "",
    "one.txt": "",
    "two.txt": "",
    "/root2": "",
    "three.txt": "",
    "root1": "",
    "root1 — one.txt": "",
    "root1 — two.txt": "",
    "root2": "",
    "root1, root2 — one.txt": "",
    "root2 — one.txt": "",
    "/root": "",
    "one": "",
    "root": "",
    "1.txt": "",
    "2.txt": "",
    "3.txt": "",
    "Discard": "",
    "{project_entry_id}.txt": "",
    "4.txt": "",
    "top.txt": "",
    "bottom.txt": "",
    "left.txt": "",
    "right.txt": "",
    "center.txt": "",
    "item{item_id}.txt": "",
    "item is in focus": "",
    "Fake Project Search": "",
    "Should select the multi buffer in the pane": "",
    "should have inactive files to close": "",
    "Closing all buffers but the multi buffer failed": "",
    "Should have only the multi buffer left in the pane": "",
    "The multi buffer containing the unsaved buffer should still be dirty": "",
    "should have the multi buffer to close": "",
    "Dirty multi buffer should prompt a save dialog": "",
    "Save": "",
    "Closing the multi buffer failed": "",
    "Multi buffer item should get be saved": "",
    "No more items should be left in the pane": "",
    "should have active multi buffer to close": "",
    "With one dirty item from the multi buffer not being in the pane, a save prompt should be shown": "",
    "All dirty items from the multi buffer are in the pane still, no save prompts should be shown": "",
    "Closing multi buffer failed": "",
    "Should have no multi buffer left in the pane": "",
    "png": "",
    "ipynb": "",
    "one.png": "",
    "BINARYDATAHERE": "",
    "two.ipynb": "",
    "{ totally a notebook }": "",
    "editing text, sure why not?": ""
  },
  "zed/crates/worktree/src/worktree.rs": {
    "ephemeral": "",
    "could not relativize {:?} against {:?}": "",
    "../": "",
    "failed to stat worktree path": "",
    "Failed to determine whether filesystem is case sensitive (falling back to true) due to error: {e:#}": "",
    "error applying worktree update: {}": "",
    "remote worktrees can't yet load files": "",
    "No repository found for {path:?}": "",
    "remote worktrees can't yet load staged files": "",
    "remote worktrees can't yet load committed files": "",
    "remote worktrees can't yet load binary files": "",
    "remote worktree can't yet write files": "",
    "absolutizing {path:?}": "",
    "Copying external entries is not supported for remote worktrees": "",
    "invalid entry": "",
    "no such entry": "",
    ".git": "",
    "refreshing entries for the following always included paths: {:?}": "",
    "Failed to determine whether filesystem is case sensitive: {e:#}": "",
    "worktree was dropped": "",
    "Loading metadata for excluded file {abs_path:?}": "",
    "Excluded file {abs_path:?} got removed during loading": "",
    "absolutizing path {path:?}": "",
    "creating directory {task_abs_path:?}": "",
    "creating file {task_abs_path:?}": "",
    "invalid path {path:?}": "",
    "worktree dropped": "",
    "Fetching metadata after saving the excluded buffer {abs_path:?}": "",
    "Excluded buffer {path:?} got removed during saving": "",
    "no entry to rename for id {entry_id:?}": "",
    "no parent for path {:?}": "",
    "absolutizing path {new_path:?}": "",
    "Renaming {abs_old_path:?} into {abs_new_path:?}": "",
    "Failed to copy file from {source:?} to {target:?}": "",
    "Dropped worktree": "",
    "Worktree is not local": "",
    "refreshed entry {path:?} in {:?}": "",
    "failed to read path after update": "",
    "waiting to resume updates": "",
    "consumer runs to completion": "",
    "absolutizing {new_path:?}": "",
    "invalid path": "",
    "applying remote worktree update. {} entries updated, {} removed": "",
    "no work directory entry for repository {:?}": "",
    "error loading .gitignore file {:?} - {:?}": "",
    "entries_by_path and entries_by_id are inconsistent": "",
    "populating a directory {:?} that has been removed": "",
    "background scanner removing path {path:?}": "",
    "dropping repository entry for {:?}": "",
    "not building git repository for nested `.git` directory, `.git` path in the worktree: {dot_git_path:?}": "",
    "building git repository, `.git` path in the worktree: {dot_git_path:?}": "",
    "not building git repository for the worktree itself, `.git` path in the worktree: {dot_git_path:?}": "",
    "insert git reposiutory for {dot_git_path:?}": "",
    "existing git repository for {work_directory:?}": "",
    "opened git repo for {dot_git_abs_path:?}": "",
    "commondir": "",
    "constructed libgit2 repo in {:?}": "",
    "inserting new local git repository": "",
    "HEAD": "",
    "config": "",
    "Snapshot": "",
    "not remote": "",
    "worktree id does not match file": "",
    "considering ancestor: {ancestor_dot_git:?}": "",
    "inserting parent git repo for this worktree: {location_in_repo:?}": "",
    "containing git repository: {containing_git_repository:?}": "",
    "adding path prefix {:?}": "",
    "rescanning paths {:?}": "",
    "failed to canonicalize root path: {}": "",
    "root renamed from {} to {}": "",
    "root path could not be canonicalized: {}": "",
    "stripping off the ancestor": "",
    "ignoring event {abs_path:?} as it's in the .git directory among skipped files or directories": "",
    "ignoring event {abs_path:?}, since it's in git dir outside of root path {root_canonical_path:?}": "",
    "ignoring event {abs_path:?} outside of root path {root_canonical_path:?}": "",
    "ignoring event {relative_path:?} within unloaded directory": "",
    "ignoring FS event for excluded path {relative_path:?}": "",
    "received fs events {:?}": "",
    "error scanning directory {:?}: {}": "",
    "skipping excluded directory {:?}": "",
    "scanning directory {:?}": "",
    "error processing entry {:?}": "",
    "skipping excluded child entry {child_path:?}": "",
    "error processing {child_abs_path:?}: {err:?}": "",
    "error reading target of symlink {:?}: {:?}": "",
    "error canonicalizing root {:?}: {:?}": "",
    "detected private file: {relative_path:?}": "",
    "defer scanning directory {:?}": "",
    "channel is unbounded": "",
    "remove path {:?}": "",
    "error reading file {abs_path:?} on event: {err:#}": "",
    "update ignore status {:?}": "",
    "reloading repositories: {dot_git_paths:?}": "",
    "updating git statuses for repo {repository_name}": "",
    "computed git statuses for repo {repository_name} in {:?}": "",
    "Tried to update git statuses for a repository that isn't in the snapshot": "",
    "MERGE_MSG": "",
    "applied git status updates for repo {repository_name} in {:?}": "",
    "Missing repository": "",
    "redundant": "",
    "Invalid git status code: {simple_status}": "",
    "Invalid code for simple status: {simple_status}": "",
    "Invalid git status code: {head}": "",
    "Invalid code for unmerged status: {code:?}": "",
    "Invalid git status code: {status}": "",
    "Invalid code for tracked status: {code:?}": ""
  },
  "zed/crates/worktree/src/worktree_settings.rs": {
    "**/.git": "",
    "**/.svn": "",
    "**/.hg": "",
    "**/.jj": "",
    "**/CVS": "",
    "**/.DS_Store": "",
    "**/Thumbs.db": "",
    "**/.classpath": "",
    "**/.settings": "",
    ".env*": "",
    "docker-compose.*.yml": "",
    "**/.env*": "",
    "file_scan_exclusions": "",
    "private_files": "",
    "file_scan_inclusions": "",
    "Failed to parse globs from {}": ""
  },
  "zed/crates/zed/src/main.rs": {
    "mimalloc": "",
    "Zed failed to launch": "",
    "{kind} when creating directory {:?}": "",
    "match arm checks for a single entry": "",
    "{kind} when creating directories {paths:?}": "",
    ");\n                    }\n                    _ => {}\n                }\n            }\n\n            Some(error_kind_details)\n        })\n        .collect::<Vec<_>>().join(": "",
    ");\n\n    eprintln!(": "",
    ");\n    Application::new().run(move |cx| {\n        if let Ok(window) = cx.open_window(gpui::WindowOptions::default(), |_, cx| {\n            cx.new(|_| gpui::Empty)\n        }) {\n            window\n                .update(cx, |_, window, cx| {\n                    let response = window.prompt(\n                        gpui::PromptLevel::Critical,\n                        message,\n                        Some(&error_details),\n                        &[": "",
    "],\n                        cx,\n                    );\n\n                    cx.spawn_in(window, |_, mut cx| async move {\n                        response.await?;\n                        cx.update(|_, cx| cx.quit())\n                    })\n                    .detach_and_log_err(cx);\n                })\n                .log_err();\n        } else {\n            fail_to_open_window(anyhow::anyhow!(": "",
    "), cx)\n        }\n    })\n}\n\nfn fail_to_open_window_async(e: anyhow::Error, cx: &mut AsyncApp) {\n    cx.update(|cx| fail_to_open_window(e, cx)).log_err();\n}\n\nfn fail_to_open_window(e: anyhow::Error, _cx: &mut App) {\n    eprintln!(\n        ": "",
    "\n    );\n    #[cfg(not(any(target_os = ": "",
    ", target_os = ": "",
    ")))]\n    {\n        process::exit(1);\n    }\n\n    #[cfg(any(target_os = ": "",
    "))]\n    {\n        use ashpd::desktop::notification::{Notification, NotificationProxy, Priority};\n        _cx.spawn(|_cx| async move {\n            let Ok(proxy) = NotificationProxy::new().await else {\n                process::exit(1);\n            };\n\n            let notification_id = ": "",
    ";\n            proxy\n                .add_notification(\n                    notification_id,\n                    Notification::new(": "",
    ")\n                        .body(Some(\n                            format!(\n                                ": "",
    "\n                            )\n                            .as_str(),\n                        ))\n                        .priority(Priority::High)\n                        .icon(ashpd::desktop::Icon::with_names(&[\n                            ": "",
    ",\n                        ])),\n                )\n                .await\n                .ok();\n\n            process::exit(1);\n        })\n        .detach();\n    }\n}\n\nfn main() {\n    let args = Args::parse();\n\n    #[cfg(all(not(debug_assertions), target_os = ": "",
    "))]\n    unsafe {\n        use windows::Win32::System::Console::{AttachConsole, ATTACH_PARENT_PROCESS};\n\n        if args.foreground {\n            let _ = AttachConsole(ATTACH_PARENT_PROCESS);\n        }\n    }\n\n    menu::init();\n    zed_actions::init();\n\n    let file_errors = init_paths();\n    if !file_errors.is_empty() {\n        files_not_created_on_launch(file_errors);\n        return;\n    }\n\n    if stdout_is_a_pty() {\n        init_stdout_logger();\n    } else {\n        init_logger();\n    }\n\n    log::info!(": "",
    ");\n\n    let app = Application::new().with_assets(Assets);\n\n    let system_id = app.background_executor().block(system_id()).ok();\n    let installation_id = app.background_executor().block(installation_id()).ok();\n    let session_id = Uuid::new_v4().to_string();\n    let session = app.background_executor().block(Session::new());\n    let app_version = AppVersion::init(env!(": "",
    "));\n    let app_commit_sha =\n        option_env!(": "",
    ").map(|commit_sha| AppCommitSha(commit_sha.to_string()));\n\n    reliability::init_panic_hook(\n        app_version,\n        app_commit_sha.clone(),\n        system_id.as_ref().map(|id| id.to_string()),\n        installation_id.as_ref().map(|id| id.to_string()),\n        session_id.clone(),\n    );\n\n    let (open_listener, mut open_rx) = OpenListener::new();\n\n    let failed_single_instance_check = if *db::ZED_STATELESS\n        || *release_channel::RELEASE_CHANNEL == ReleaseChannel::Dev\n    {\n        false\n    } else {\n        #[cfg(any(target_os = ": "",
    "))]\n        {\n            crate::zed::listen_for_cli_connections(open_listener.clone()).is_err()\n        }\n\n        #[cfg(target_os = ": "",
    ")]\n        {\n            !crate::zed::windows_only_instance::check_single_instance(open_listener.clone(), &args)\n        }\n\n        #[cfg(target_os = ": "",
    ")]\n        {\n            use zed::mac_only_instance::*;\n            ensure_only_instance() != IsOnlyInstance::Yes\n        }\n    };\n    if failed_single_instance_check {\n        println!(": "",
    ");\n        return;\n    }\n\n    let git_hosting_provider_registry = Arc::new(GitHostingProviderRegistry::new());\n    let git_binary_path =\n        if cfg!(target_os = ": "",
    ") && option_env!(": "",
    ").as_deref() == Some(": "",
    ") {\n            app.path_for_auxiliary_executable(": "",
    ")\n                .context(": "",
    ")\n                .log_err()\n        } else {\n            None\n        };\n    log::info!(": "",
    ", git_binary_path);\n\n    let fs = Arc::new(RealFs::new(git_binary_path));\n    let user_settings_file_rx = watch_config_file(\n        &app.background_executor(),\n        fs.clone(),\n        paths::settings_file().clone(),\n    );\n    let user_keymap_file_rx = watch_config_file(\n        &app.background_executor(),\n        fs.clone(),\n        paths::keymap_file().clone(),\n    );\n\n    #[cfg(unix)]\n    if !stdout_is_a_pty() {\n        app.background_executor()\n            .spawn(async {\n                load_shell_from_passwd().log_err();\n                load_login_shell_environment().log_err();\n            })\n            .detach()\n    };\n\n    app.on_open_urls({\n        let open_listener = open_listener.clone();\n        move |urls| open_listener.open_urls(urls)\n    });\n    app.on_reopen(move |cx| {\n        if let Some(app_state) = AppState::try_global(cx).and_then(|app_state| app_state.upgrade())\n        {\n            cx.spawn({\n                let app_state = app_state.clone();\n                |mut cx| async move {\n                    if let Err(e) = restore_or_create_workspace(app_state, &mut cx).await {\n                        fail_to_open_window_async(e, &mut cx)\n                    }\n                }\n            })\n            .detach();\n        }\n    });\n\n    app.run(move |cx| {\n        release_channel::init(app_version, cx);\n        gpui_tokio::init(cx);\n        if let Some(app_commit_sha) = app_commit_sha {\n            AppCommitSha::set_global(app_commit_sha, cx);\n        }\n        settings::init(cx);\n        handle_settings_file_changes(user_settings_file_rx, cx, handle_settings_changed);\n        handle_keymap_file_changes(user_keymap_file_rx, cx);\n        client::init_settings(cx);\n        let user_agent = format!(\n            ": "",
    ",\n            AppVersion::global(cx),\n            std::env::consts::OS,\n            std::env::consts::ARCH\n        );\n        let proxy_str = ProxySettings::get_global(cx).proxy.to_owned();\n        let proxy_url = proxy_str\n            .as_ref()\n            .and_then(|input| {\n                input\n                    .parse::<Uri>()\n                    .inspect_err(|e| log::error!(": "",
    ", e))\n                    .ok()\n            })\n            .or_else(read_proxy_from_env);\n        let http = {\n            let _guard = Tokio::handle(cx).enter();\n\n            ReqwestClient::proxy_and_user_agent(proxy_url, &user_agent)\n                .expect(": "",
    ")\n        };\n        cx.set_http_client(Arc::new(http));\n\n        <dyn Fs>::set_global(fs.clone(), cx);\n\n        GitHostingProviderRegistry::set_global(git_hosting_provider_registry, cx);\n        git_hosting_providers::init(cx);\n\n        OpenListener::set_global(cx, open_listener.clone());\n\n        extension::init(cx);\n        let extension_host_proxy = ExtensionHostProxy::global(cx);\n\n        let client = Client::production(cx);\n        cx.set_http_client(client.http_client().clone());\n        let mut languages = LanguageRegistry::new(cx.background_executor().clone());\n        languages.set_language_server_download_dir(paths::languages_dir().clone());\n        let languages = Arc::new(languages);\n        let (tx, rx) = async_watch::channel(None);\n        cx.observe_global::<SettingsStore>(move |cx| {\n            let settings = &ProjectSettings::get_global(cx).node;\n            let options = NodeBinaryOptions {\n                allow_path_lookup: !settings.ignore_system_version.unwrap_or_default(),\n                // TODO: Expose this setting\n                allow_binary_download: true,\n                use_paths: settings.path.as_ref().map(|node_path| {\n                    let node_path = PathBuf::from(shellexpand::tilde(node_path).as_ref());\n                    let npm_path = settings\n                        .npm_path\n                        .as_ref()\n                        .map(|path| PathBuf::from(shellexpand::tilde(&path).as_ref()));\n                    (\n                        node_path.clone(),\n                        npm_path.unwrap_or_else(|| {\n                            let base_path = PathBuf::new();\n                            node_path.parent().unwrap_or(&base_path).join(": "",
    ")\n                        }),\n                    )\n                }),\n            };\n            tx.send(Some(options)).log_err();\n        })\n        .detach();\n        let node_runtime = NodeRuntime::new(client.http_client(), rx);\n\n        language::init(cx);\n        language_extension::init(extension_host_proxy.clone(), languages.clone());\n        languages::init(languages.clone(), node_runtime.clone(), cx);\n        let user_store = cx.new(|cx| UserStore::new(client.clone(), cx));\n        let workspace_store = cx.new(|cx| WorkspaceStore::new(client.clone(), cx));\n\n        Client::set_global(client.clone(), cx);\n\n        zed::init(cx);\n        project::Project::init(&client, cx);\n        client::init(&client, cx);\n        let telemetry = client.telemetry();\n        telemetry.start(\n            system_id.as_ref().map(|id| id.to_string()),\n            installation_id.as_ref().map(|id| id.to_string()),\n            session_id.clone(),\n            cx,\n        );\n\n        // We should rename these in the future to `first app open`, `first app open for release channel`, and `app open`\n        if let (Some(system_id), Some(installation_id)) = (&system_id, &installation_id) {\n            match (&system_id, &installation_id) {\n                (IdType::New(_), IdType::New(_)) => {\n                    telemetry::event!(": "",
    ");\n                    telemetry::event!(": "",
    ");\n                }\n                (IdType::Existing(_), IdType::New(_)) => {\n                    telemetry::event!(": "",
    ");\n                }\n                (_, IdType::Existing(_)) => {\n                    telemetry::event!(": "",
    ");\n                }\n            }\n        }\n        let app_session = cx.new(|cx| AppSession::new(session, cx));\n\n        let app_state = Arc::new(AppState {\n            languages: languages.clone(),\n            client: client.clone(),\n            user_store: user_store.clone(),\n            fs: fs.clone(),\n            build_window_options,\n            workspace_store,\n            node_runtime: node_runtime.clone(),\n            session: app_session,\n        });\n        AppState::set_global(Arc::downgrade(&app_state), cx);\n\n        auto_update::init(client.http_client(), cx);\n        auto_update_ui::init(cx);\n        reliability::init(\n            client.http_client(),\n            system_id.as_ref().map(|id| id.to_string()),\n            installation_id.clone().map(|id| id.to_string()),\n            session_id.clone(),\n            cx,\n        );\n\n        SystemAppearance::init(cx);\n        theme::init(theme::LoadThemes::All(Box::new(Assets)), cx);\n        theme_extension::init(\n            extension_host_proxy.clone(),\n            ThemeRegistry::global(cx),\n            cx.background_executor().clone(),\n        );\n        command_palette::init(cx);\n        let copilot_language_server_id = app_state.languages.next_language_server_id();\n        copilot::init(\n            copilot_language_server_id,\n            app_state.fs.clone(),\n            app_state.client.http_client(),\n            app_state.node_runtime.clone(),\n            cx,\n        );\n        supermaven::init(app_state.client.clone(), cx);\n        language_model::init(app_state.client.clone(), cx);\n        language_models::init(\n            app_state.user_store.clone(),\n            app_state.client.clone(),\n            app_state.fs.clone(),\n            cx,\n        );\n        snippet_provider::init(cx);\n        inline_completion_registry::init(\n            app_state.client.clone(),\n            app_state.user_store.clone(),\n            cx,\n        );\n        let prompt_builder = PromptBuilder::load(app_state.fs.clone(), stdout_is_a_pty(), cx);\n        assistant::init(\n            app_state.fs.clone(),\n            app_state.client.clone(),\n            prompt_builder.clone(),\n            cx,\n        );\n        assistant2::init(\n            app_state.fs.clone(),\n            app_state.client.clone(),\n            prompt_builder.clone(),\n            cx,\n        );\n        assistant_tools::init(cx);\n        repl::init(app_state.fs.clone(), cx);\n        extension_host::init(\n            extension_host_proxy,\n            app_state.fs.clone(),\n            app_state.client.clone(),\n            app_state.node_runtime.clone(),\n            cx,\n        );\n        recent_projects::init(cx);\n\n        load_embedded_fonts(cx);\n\n        #[cfg(any(target_os = ": "",
    "))]\n        crate::zed::linux_prompts::init(cx);\n\n        app_state.languages.set_theme(cx.theme().clone());\n        editor::init(cx);\n        image_viewer::init(cx);\n        repl::notebook::init(cx);\n        diagnostics::init(cx);\n\n        audio::init(Assets, cx);\n        workspace::init(app_state.clone(), cx);\n\n        go_to_line::init(cx);\n        file_finder::init(cx);\n        tab_switcher::init(cx);\n        outline::init(cx);\n        project_symbols::init(cx);\n        project_panel::init(cx);\n        outline_panel::init(cx);\n        tasks_ui::init(cx);\n        snippets_ui::init(cx);\n        channel::init(&app_state.client.clone(), app_state.user_store.clone(), cx);\n        search::init(cx);\n        vim::init(cx);\n        terminal_view::init(cx);\n        journal::init(app_state.clone(), cx);\n        language_selector::init(cx);\n        toolchain_selector::init(cx);\n        theme_selector::init(cx);\n        language_tools::init(cx);\n        call::init(app_state.client.clone(), app_state.user_store.clone(), cx);\n        notifications::init(app_state.client.clone(), app_state.user_store.clone(), cx);\n        collab_ui::init(&app_state, cx);\n        git_ui::init(cx);\n        feedback::init(cx);\n        markdown_preview::init(cx);\n        welcome::init(cx);\n        settings_ui::init(cx);\n        extensions_ui::init(cx);\n        zeta::init(cx);\n\n        cx.observe_global::<SettingsStore>({\n            let fs = fs.clone();\n            let languages = app_state.languages.clone();\n            let http = app_state.client.http_client();\n            let client = app_state.client.clone();\n            move |cx| {\n                for &mut window in cx.windows().iter_mut() {\n                    let background_appearance = cx.theme().window_background_appearance();\n                    window\n                        .update(cx, |_, window, _| {\n                            window.set_background_appearance(background_appearance)\n                        })\n                        .ok();\n                }\n\n                eager_load_active_theme_and_icon_theme(fs.clone(), cx);\n\n                languages.set_theme(cx.theme().clone());\n                let new_host = &client::ClientSettings::get_global(cx).server_url;\n                if &http.base_url() != new_host {\n                    http.set_base_url(new_host);\n                    if client.status().borrow().is_connected() {\n                        client.reconnect(&cx.to_async());\n                    }\n                }\n            }\n        })\n        .detach();\n        telemetry::event!(\n            ": "",
    ",\n            setting = ": "",
    ",\n            value = cx.theme().name.to_string()\n        );\n        telemetry::event!(\n            ": "",
    ",\n            value = BaseKeymap::get_global(cx).to_string()\n        );\n        telemetry.flush_events();\n\n        let fs = app_state.fs.clone();\n        load_user_themes_in_background(fs.clone(), cx);\n        watch_themes(fs.clone(), cx);\n        watch_languages(fs.clone(), app_state.languages.clone(), cx);\n\n        cx.set_menus(app_menus());\n        initialize_workspace(app_state.clone(), prompt_builder, cx);\n\n        cx.activate(true);\n\n        cx.spawn({\n            let client = app_state.client.clone();\n            |cx| async move { authenticate(client, &cx).await }\n        })\n        .detach_and_log_err(cx);\n\n        let urls: Vec<_> = args\n            .paths_or_urls\n            .iter()\n            .filter_map(|arg| parse_url_arg(arg, cx).log_err())\n            .collect();\n\n        if !urls.is_empty() {\n            open_listener.open_urls(urls)\n        }\n\n        match open_rx\n            .try_next()\n            .ok()\n            .flatten()\n            .and_then(|urls| OpenRequest::parse(urls, cx).log_err())\n        {\n            Some(request) => {\n                handle_open_request(request, app_state.clone(), cx);\n            }\n            None => {\n                cx.spawn({\n                    let app_state = app_state.clone();\n                    |mut cx| async move {\n                        if let Err(e) = restore_or_create_workspace(app_state, &mut cx).await {\n                            fail_to_open_window_async(e, &mut cx)\n                        }\n                    }\n                })\n                .detach();\n            }\n        }\n\n        let app_state = app_state.clone();\n\n        component_preview::init(app_state.clone(), cx);\n\n        cx.spawn(move |cx| async move {\n            while let Some(urls) = open_rx.next().await {\n                cx.update(|cx| {\n                    if let Some(request) = OpenRequest::parse(urls, cx).log_err() {\n                        handle_open_request(request, app_state.clone(), cx);\n                    }\n                })\n                .ok();\n            }\n        })\n        .detach();\n    });\n}\n\nfn handle_open_request(request: OpenRequest, app_state: Arc<AppState>, cx: &mut App) {\n    if let Some(connection) = request.cli_connection {\n        let app_state = app_state.clone();\n        cx.spawn(move |cx| handle_cli_connection(connection, app_state, cx))\n            .detach();\n        return;\n    }\n\n    if let Some(action_index) = request.dock_menu_action {\n        cx.perform_dock_menu_action(action_index);\n        return;\n    }\n\n    if let Some(connection_options) = request.ssh_connection {\n        cx.spawn(|mut cx| async move {\n            let paths_with_position =\n                derive_paths_with_position(app_state.fs.as_ref(), request.open_paths).await;\n            open_ssh_project(\n                connection_options,\n                paths_with_position.into_iter().map(|p| p.path).collect(),\n                app_state,\n                workspace::OpenOptions::default(),\n                &mut cx,\n            )\n            .await\n        })\n        .detach_and_log_err(cx);\n        return;\n    }\n\n    let mut task = None;\n    if !request.open_paths.is_empty() {\n        let app_state = app_state.clone();\n        task = Some(cx.spawn(|mut cx| async move {\n            let paths_with_position =\n                derive_paths_with_position(app_state.fs.as_ref(), request.open_paths).await;\n            let (_window, results) = open_paths_with_positions(\n                &paths_with_position,\n                app_state,\n                workspace::OpenOptions::default(),\n                &mut cx,\n            )\n            .await?;\n            for result in results.into_iter().flatten() {\n                if let Err(err) = result {\n                    log::error!(": "",
    ",);\n                }\n            }\n            anyhow::Ok(())\n        }));\n    }\n\n    if !request.open_channel_notes.is_empty() || request.join_channel.is_some() {\n        cx.spawn(|mut cx| async move {\n            let result = maybe!(async {\n                if let Some(task) = task {\n                    task.await?;\n                }\n                let client = app_state.client.clone();\n                // we continue even if authentication fails as join_channel/ open channel notes will\n                // show a visible error message.\n                authenticate(client, &cx).await.log_err();\n\n                if let Some(channel_id) = request.join_channel {\n                    cx.update(|cx| {\n                        workspace::join_channel(\n                            client::ChannelId(channel_id),\n                            app_state.clone(),\n                            None,\n                            cx,\n                        )\n                    })?\n                    .await?;\n                }\n\n                let workspace_window =\n                    workspace::get_any_active_workspace(app_state, cx.clone()).await?;\n                let workspace = workspace_window.entity(&cx)?;\n\n                let mut promises = Vec::new();\n                for (channel_id, heading) in request.open_channel_notes {\n                    promises.push(cx.update_window(workspace_window.into(), |_, window, cx| {\n                        ChannelView::open(\n                            client::ChannelId(channel_id),\n                            heading,\n                            workspace.clone(),\n                            window,\n                            cx,\n                        )\n                        .log_err()\n                    })?)\n                }\n                future::join_all(promises).await;\n                anyhow::Ok(())\n            })\n            .await;\n            if let Err(err) = result {\n                fail_to_open_window_async(err, &mut cx);\n            }\n        })\n        .detach()\n    } else if let Some(task) = task {\n        cx.spawn(|mut cx| async move {\n            if let Err(err) = task.await {\n                fail_to_open_window_async(err, &mut cx);\n            }\n        })\n        .detach();\n    }\n}\n\nasync fn authenticate(client: Arc<Client>, cx: &AsyncApp) -> Result<()> {\n    if stdout_is_a_pty() {\n        if client::IMPERSONATE_LOGIN.is_some() {\n            client.authenticate_and_connect(false, cx).await?;\n        } else if client.has_credentials(cx).await {\n            client.authenticate_and_connect(true, cx).await?;\n        }\n    } else if client.has_credentials(cx).await {\n        client.authenticate_and_connect(true, cx).await?;\n    }\n    Ok::<_, anyhow::Error>(())\n}\n\nasync fn system_id() -> Result<IdType> {\n    let key_name = ": "",
    ".to_string();\n\n    if let Ok(Some(system_id)) = GLOBAL_KEY_VALUE_STORE.read_kvp(&key_name) {\n        return Ok(IdType::Existing(system_id));\n    }\n\n    let system_id = Uuid::new_v4().to_string();\n\n    GLOBAL_KEY_VALUE_STORE\n        .write_kvp(key_name, system_id.clone())\n        .await?;\n\n    Ok(IdType::New(system_id))\n}\n\nasync fn installation_id() -> Result<IdType> {\n    let legacy_key_name = ": "",
    ".to_string();\n    let key_name = ": "",
    ".to_string();\n\n    // Migrate legacy key to new key\n    if let Ok(Some(installation_id)) = KEY_VALUE_STORE.read_kvp(&legacy_key_name) {\n        KEY_VALUE_STORE\n            .write_kvp(key_name, installation_id.clone())\n            .await?;\n        KEY_VALUE_STORE.delete_kvp(legacy_key_name).await?;\n        return Ok(IdType::Existing(installation_id));\n    }\n\n    if let Ok(Some(installation_id)) = KEY_VALUE_STORE.read_kvp(&key_name) {\n        return Ok(IdType::Existing(installation_id));\n    }\n\n    let installation_id = Uuid::new_v4().to_string();\n\n    KEY_VALUE_STORE\n        .write_kvp(key_name, installation_id.clone())\n        .await?;\n\n    Ok(IdType::New(installation_id))\n}\n\nasync fn restore_or_create_workspace(app_state: Arc<AppState>, cx: &mut AsyncApp) -> Result<()> {\n    if let Some(locations) = restorable_workspace_locations(cx, &app_state).await {\n        for location in locations {\n            match location {\n                SerializedWorkspaceLocation::Local(location, _) => {\n                    let task = cx.update(|cx| {\n                        workspace::open_paths(\n                            location.paths().as_ref(),\n                            app_state.clone(),\n                            workspace::OpenOptions::default(),\n                            cx,\n                        )\n                    })?;\n                    task.await?;\n                }\n                SerializedWorkspaceLocation::Ssh(ssh) => {\n                    let connection_options = cx.update(|cx| {\n                        SshSettings::get_global(cx)\n                            .connection_options_for(ssh.host, ssh.port, ssh.user)\n                    })?;\n                    let app_state = app_state.clone();\n                    cx.spawn(move |mut cx| async move {\n                        recent_projects::open_ssh_project(\n                            connection_options,\n                            ssh.paths.into_iter().map(PathBuf::from).collect(),\n                            app_state,\n                            workspace::OpenOptions::default(),\n                            &mut cx,\n                        )\n                        .await\n                        .log_err();\n                    })\n                    .detach();\n                }\n            }\n        }\n    } else if matches!(KEY_VALUE_STORE.read_kvp(FIRST_OPEN), Ok(None)) {\n        cx.update(|cx| show_welcome_view(app_state, cx))?.await?;\n    } else {\n        cx.update(|cx| {\n            workspace::open_new(\n                Default::default(),\n                app_state,\n                cx,\n                |workspace, window, cx| {\n                    Editor::new_file(workspace, &Default::default(), window, cx)\n                },\n            )\n        })?\n        .await?;\n    }\n\n    Ok(())\n}\n\npub(crate) async fn restorable_workspace_locations(\n    cx: &mut AsyncApp,\n    app_state: &Arc<AppState>,\n) -> Option<Vec<SerializedWorkspaceLocation>> {\n    let mut restore_behavior = cx\n        .update(|cx| WorkspaceSettings::get(None, cx).restore_on_startup)\n        .ok()?;\n\n    let session_handle = app_state.session.clone();\n    let (last_session_id, last_session_window_stack) = cx\n        .update(|cx| {\n            let session = session_handle.read(cx);\n\n            (\n                session.last_session_id().map(|id| id.to_string()),\n                session.last_session_window_stack(),\n            )\n        })\n        .ok()?;\n\n    if last_session_id.is_none()\n        && matches!(\n            restore_behavior,\n            workspace::RestoreOnStartupBehavior::LastSession\n        )\n    {\n        restore_behavior = workspace::RestoreOnStartupBehavior::LastWorkspace;\n    }\n\n    match restore_behavior {\n        workspace::RestoreOnStartupBehavior::LastWorkspace => {\n            workspace::last_opened_workspace_location()\n                .await\n                .map(|location| vec![location])\n        }\n        workspace::RestoreOnStartupBehavior::LastSession => {\n            if let Some(last_session_id) = last_session_id {\n                let ordered = last_session_window_stack.is_some();\n\n                let mut locations = workspace::last_session_workspace_locations(\n                    &last_session_id,\n                    last_session_window_stack,\n                )\n                .filter(|locations| !locations.is_empty());\n\n                // Since last_session_window_order returns the windows ordered front-to-back\n                // we need to open the window that was frontmost last.\n                if ordered {\n                    if let Some(locations) = locations.as_mut() {\n                        locations.reverse();\n                    }\n                }\n\n                locations\n            } else {\n                None\n            }\n        }\n        _ => None,\n    }\n}\n\nfn init_paths() -> HashMap<io::ErrorKind, Vec<&'static Path>> {\n    [\n        paths::config_dir(),\n        paths::extensions_dir(),\n        paths::languages_dir(),\n        paths::database_dir(),\n        paths::logs_dir(),\n        paths::temp_dir(),\n    ]\n    .into_iter()\n    .fold(HashMap::default(), |mut errors, path| {\n        if let Err(e) = std::fs::create_dir_all(path) {\n            errors.entry(e.kind()).or_insert_with(Vec::new).push(path);\n        }\n        errors\n    })\n}\n\nfn stdout_is_a_pty() -> bool {\n    std::env::var(FORCE_CLI_MODE_ENV_VAR_NAME).ok().is_none() && io::stdout().is_terminal()\n}\n\n#[derive(Parser, Debug)]\n#[command(name = ": "",
    ", disable_version_flag = true)]\nstruct Args {\n    /// A sequence of space-separated paths or urls that you want to open.\n    ///\n    /// Use `path:line:row` syntax to open a file at a specific location.\n    /// Non-existing paths and directories will ignore `:line:row` suffix.\n    ///\n    /// URLs can either be `file://` or `zed://` scheme, or relative to <https://zed.dev>.\n    paths_or_urls: Vec<String>,\n\n    /// Instructs zed to run as a dev server on this machine. (not implemented)\n    #[arg(long)]\n    dev_server_token: Option<String>,\n\n    /// Run zed in the foreground, only used on Windows, to match the behavior of the behavior on macOS.\n    #[arg(long)]\n    #[cfg(target_os = ": "",
    ")]\n    #[arg(hide = true)]\n    foreground: bool,\n\n    /// The dock action to perform. This is used on Windows only.\n    #[arg(long)]\n    #[cfg(target_os = ": "",
    ")]\n    #[arg(hide = true)]\n    dock_action: Option<usize>,\n}\n\n#[derive(Clone, Debug)]\nenum IdType {\n    New(String),\n    Existing(String),\n}\n\nimpl ToString for IdType {\n    fn to_string(&self) -> String {\n        match self {\n            IdType::New(id) | IdType::Existing(id) => id.clone(),\n        }\n    }\n}\n\nfn parse_url_arg(arg: &str, cx: &App) -> Result<String> {\n    match std::fs::canonicalize(Path::new(&arg)) {\n        Ok(path) => Ok(format!(": "",
    ", path.display())),\n        Err(error) => {\n            if arg.starts_with(": "",
    ")\n                || arg.starts_with(": "",
    ")\n                || parse_zed_link(arg, cx).is_some()\n            {\n                Ok(arg.into())\n            } else {\n                Err(anyhow!(": "",
    ", error))\n            }\n        }\n    }\n}\n\nfn load_embedded_fonts(cx: &App) {\n    let asset_source = cx.asset_source();\n    let font_paths = asset_source.list(": "",
    ").unwrap();\n    let embedded_fonts = Mutex::new(Vec::new());\n    let executor = cx.background_executor();\n\n    executor.block(executor.scoped(|scope| {\n        for font_path in &font_paths {\n            if !font_path.ends_with(": "",
    ") {\n                continue;\n            }\n\n            scope.spawn(async {\n                let font_bytes = asset_source.load(font_path).unwrap().unwrap();\n                embedded_fonts.lock().push(font_bytes);\n            });\n        }\n    }));\n\n    cx.text_system()\n        .add_fonts(embedded_fonts.into_inner())\n        .unwrap();\n}\n\n/// Eagerly loads the active theme and icon theme based on the selections in the\n/// theme settings.\n///\n/// This fast path exists to load these themes as soon as possible so the user\n/// doesn't see the default themes while waiting on extensions to load.\nfn eager_load_active_theme_and_icon_theme(fs: Arc<dyn Fs>, cx: &App) {\n    let extension_store = ExtensionStore::global(cx);\n    let theme_registry = ThemeRegistry::global(cx);\n    let theme_settings = ThemeSettings::get_global(cx);\n    let appearance = SystemAppearance::global(cx).0;\n\n    if let Some(theme_selection) = theme_settings.theme_selection.as_ref() {\n        let theme_name = theme_selection.theme(appearance);\n        if matches!(theme_registry.get(theme_name), Err(ThemeNotFoundError(_))) {\n            if let Some(theme_path) = extension_store.read(cx).path_to_extension_theme(theme_name) {\n                cx.spawn({\n                    let theme_registry = theme_registry.clone();\n                    let fs = fs.clone();\n                    |cx| async move {\n                        theme_registry.load_user_theme(&theme_path, fs).await?;\n\n                        cx.update(|cx| {\n                            ThemeSettings::reload_current_theme(cx);\n                        })\n                    }\n                })\n                .detach_and_log_err(cx);\n            }\n        }\n    }\n\n    if let Some(icon_theme_selection) = theme_settings.icon_theme_selection.as_ref() {\n        let icon_theme_name = icon_theme_selection.icon_theme(appearance);\n        if matches!(\n            theme_registry.get_icon_theme(icon_theme_name),\n            Err(IconThemeNotFoundError(_))\n        ) {\n            if let Some((icon_theme_path, icons_root_path)) = extension_store\n                .read(cx)\n                .path_to_extension_icon_theme(icon_theme_name)\n            {\n                cx.spawn({\n                    let theme_registry = theme_registry.clone();\n                    let fs = fs.clone();\n                    |cx| async move {\n                        theme_registry\n                            .load_icon_theme(&icon_theme_path, &icons_root_path, fs)\n                            .await?;\n\n                        cx.update(|cx| {\n                            ThemeSettings::reload_current_icon_theme(cx);\n                        })\n                    }\n                })\n                .detach_and_log_err(cx);\n            }\n        }\n    }\n}\n\n/// Spawns a background task to load the user themes from the themes directory.\nfn load_user_themes_in_background(fs: Arc<dyn fs::Fs>, cx: &mut App) {\n    cx.spawn({\n        let fs = fs.clone();\n        |cx| async move {\n            if let Some(theme_registry) =\n                cx.update(|cx| ThemeRegistry::global(cx).clone()).log_err()\n            {\n                let themes_dir = paths::themes_dir().as_ref();\n                match fs\n                    .metadata(themes_dir)\n                    .await\n                    .ok()\n                    .flatten()\n                    .map(|m| m.is_dir)\n                {\n                    Some(is_dir) => {\n                        anyhow::ensure!(is_dir, ": "",
    ")\n                    }\n                    None => {\n                        fs.create_dir(themes_dir).await.with_context(|| {\n                            format!(": "",
    ")\n                        })?;\n                    }\n                }\n                theme_registry.load_user_themes(themes_dir, fs).await?;\n                cx.update(ThemeSettings::reload_current_theme)?;\n            }\n            anyhow::Ok(())\n        }\n    })\n    .detach_and_log_err(cx);\n}\n\n/// Spawns a background task to watch the themes directory for changes.\nfn watch_themes(fs: Arc<dyn fs::Fs>, cx: &mut App) {\n    use std::time::Duration;\n    cx.spawn(|cx| async move {\n        let (mut events, _) = fs\n            .watch(paths::themes_dir(), Duration::from_millis(100))\n            .await;\n\n        while let Some(paths) = events.next().await {\n            for event in paths {\n                if fs.metadata(&event.path).await.ok().flatten().is_some() {\n                    if let Some(theme_registry) =\n                        cx.update(|cx| ThemeRegistry::global(cx).clone()).log_err()\n                    {\n                        if let Some(()) = theme_registry\n                            .load_user_theme(&event.path, fs.clone())\n                            .await\n                            .log_err()\n                        {\n                            cx.update(ThemeSettings::reload_current_theme).log_err();\n                        }\n                    }\n                }\n            }\n        }\n    })\n    .detach()\n}\n\n#[cfg(debug_assertions)]\nfn watch_languages(fs: Arc<dyn fs::Fs>, languages: Arc<LanguageRegistry>, cx: &mut App) {\n    use std::time::Duration;\n\n    let path = {\n        let p = Path::new(": "",
    ");\n        let Ok(full_path) = p.canonicalize() else {\n            return;\n        };\n        full_path\n    };\n\n    cx.spawn(|_| async move {\n        let (mut events, _) = fs.watch(path.as_path(), Duration::from_millis(100)).await;\n        while let Some(event) = events.next().await {\n            let has_language_file = event.iter().any(|event| {\n                event\n                    .path\n                    .extension()\n                    .map(|ext| ext.to_string_lossy().as_ref() == ": ""
  },
  "zed/crates/zed/src/reliability.rs": {
    "<unnamed>": "",
    "Box<Any>": "",
    "Thread {:?} panicked with {:?} at {}:{}:{}\n{}{:?}": "",
    ",\n                        commit_sha.0,\n                        location.file(),\n                        location.line()\n                    ),\n                    None => ": "",
    ".to_string(),\n                },\n                backtrace,\n            );\n            std::process::exit(-1);\n        }\n        let main_module_base_address = get_main_module_base_address();\n\n        let backtrace = Backtrace::new();\n        let mut symbols = backtrace\n            .frames()\n            .iter()\n            .flat_map(|frame| {\n                let base = frame\n                    .module_base_address()\n                    .unwrap_or(main_module_base_address);\n                frame.symbols().iter().map(move |symbol| {\n                    format!(\n                        ": "",
    ",\n                        symbol\n                            .name()\n                            .as_ref()\n                            .map_or(": "",
    ".to_owned(), <_>::to_string),\n                        (frame.ip() as isize).saturating_sub(base as isize)\n                    )\n                })\n            })\n            .collect::<Vec<_>>();\n\n        // Strip out leading stack frames for rust panic-handling.\n        if let Some(ix) = symbols\n            .iter()\n            .position(|name| name == ": "",
    " || name == ": "",
    ")\n        {\n            symbols.drain(0..=ix);\n        }\n\n        let panic_data = telemetry_events::Panic {\n            thread: thread_name.into(),\n            payload,\n            location_data: info.location().map(|location| LocationData {\n                file: location.file().into(),\n                line: location.line(),\n            }),\n            app_version: app_version.to_string(),\n            app_commit_sha: app_commit_sha.as_ref().map(|sha| sha.0.clone()),\n            release_channel: RELEASE_CHANNEL.dev_name().into(),\n            target: env!(": "",
    ").to_owned().into(),\n            os_name: telemetry::os_name(),\n            os_version: Some(telemetry::os_version()),\n            architecture: env::consts::ARCH.into(),\n            panicked_on: Utc::now().timestamp_millis(),\n            backtrace: symbols,\n            system_id: system_id.clone(),\n            installation_id: installation_id.clone(),\n            session_id: session_id.clone(),\n        };\n\n        if let Some(panic_data_json) = serde_json::to_string_pretty(&panic_data).log_err() {\n            log::error!(": "",
    ", panic_data_json);\n        }\n\n        if !is_pty {\n            if let Some(panic_data_json) = serde_json::to_string(&panic_data).log_err() {\n                let timestamp = chrono::Utc::now().format(": "",
    ").to_string();\n                let panic_file_path = paths::logs_dir().join(format!(": "",
    "));\n                let panic_file = std::fs::OpenOptions::new()\n                    .append(true)\n                    .create(true)\n                    .open(&panic_file_path)\n                    .log_err();\n                if let Some(mut panic_file) = panic_file {\n                    writeln!(&mut panic_file, ": "",
    ").log_err();\n                    panic_file.flush().log_err();\n                }\n            }\n        }\n\n        std::process::abort();\n    }));\n}\n\n#[cfg(not(target_os = ": "",
    "))]\nfn get_main_module_base_address() -> *mut c_void {\n    let mut dl_info = libc::Dl_info {\n        dli_fname: std::ptr::null(),\n        dli_fbase: std::ptr::null_mut(),\n        dli_sname: std::ptr::null(),\n        dli_saddr: std::ptr::null_mut(),\n    };\n    unsafe {\n        libc::dladdr(get_main_module_base_address as _, &mut dl_info);\n    }\n    dl_info.dli_fbase\n}\n\n#[cfg(target_os = ": "",
    ")]\nfn get_main_module_base_address() -> *mut c_void {\n    std::ptr::null_mut()\n}\n\npub fn init(\n    http_client: Arc<HttpClientWithUrl>,\n    system_id: Option<String>,\n    installation_id: Option<String>,\n    session_id: String,\n    cx: &mut App,\n) {\n    #[cfg(target_os = ": "",
    ")]\n    monitor_main_thread_hangs(http_client.clone(), installation_id.clone(), cx);\n\n    let Some(panic_report_url) = http_client\n        .build_zed_api_url(": "",
    ", &[])\n        .log_err()\n    else {\n        return;\n    };\n\n    upload_panics_and_crashes(\n        http_client.clone(),\n        panic_report_url.clone(),\n        installation_id.clone(),\n        cx,\n    );\n\n    cx.observe_new(move |project: &mut Project, _, cx| {\n        let http_client = http_client.clone();\n        let panic_report_url = panic_report_url.clone();\n        let session_id = session_id.clone();\n        let installation_id = installation_id.clone();\n        let system_id = system_id.clone();\n\n        if let Some(ssh_client) = project.ssh_client() {\n            ssh_client.update(cx, |client, cx| {\n                if TelemetrySettings::get_global(cx).diagnostics {\n                    let request = client.proto_client().request(proto::GetPanicFiles {});\n                    cx.background_spawn(async move {\n                        let panic_files = request.await?;\n                        for file in panic_files.file_contents {\n                            let panic: Option<Panic> = serde_json::from_str(&file)\n                                .log_err()\n                                .or_else(|| {\n                                    file.lines()\n                                        .next()\n                                        .and_then(|line| serde_json::from_str(line).ok())\n                                })\n                                .unwrap_or_else(|| {\n                                    log::error!(": "",
    ", file);\n                                    None\n                                });\n\n                            if let Some(mut panic) = panic {\n                                panic.session_id = session_id.clone();\n                                panic.system_id = system_id.clone();\n                                panic.installation_id = installation_id.clone();\n\n                                upload_panic(&http_client, &panic_report_url, panic, &mut None)\n                                    .await?;\n                            }\n                        }\n\n                        anyhow::Ok(())\n                    })\n                    .detach_and_log_err(cx);\n                }\n            })\n        }\n    })\n    .detach();\n}\n\n#[cfg(target_os = ": "",
    ")]\npub fn monitor_main_thread_hangs(\n    http_client: Arc<HttpClientWithUrl>,\n    installation_id: Option<String>,\n    cx: &App,\n) {\n    // This is too noisy to ship to stable for now.\n    if !matches!(\n        ReleaseChannel::global(cx),\n        ReleaseChannel::Dev | ReleaseChannel::Nightly | ReleaseChannel::Preview\n    ) {\n        return;\n    }\n\n    use nix::sys::signal::{\n        sigaction, SaFlags, SigAction, SigHandler, SigSet,\n        Signal::{self, SIGUSR2},\n    };\n\n    use parking_lot::Mutex;\n\n    use http_client::Method;\n    use std::{\n        ffi::c_int,\n        sync::{mpsc, OnceLock},\n        time::Duration,\n    };\n    use telemetry_events::{BacktraceFrame, HangReport};\n\n    use nix::sys::pthread;\n\n    let foreground_executor = cx.foreground_executor();\n    let background_executor = cx.background_executor();\n    let telemetry_settings = *client::TelemetrySettings::get_global(cx);\n\n    // Initialize SIGUSR2 handler to send a backtrace to a channel.\n    let (backtrace_tx, backtrace_rx) = mpsc::channel();\n    static BACKTRACE: Mutex<Vec<backtrace::Frame>> = Mutex::new(Vec::new());\n    static BACKTRACE_SENDER: OnceLock<mpsc::Sender<()>> = OnceLock::new();\n    BACKTRACE_SENDER.get_or_init(|| backtrace_tx);\n    BACKTRACE.lock().reserve(100);\n\n    fn handle_backtrace_signal() {\n        unsafe {\n            extern ": "",
    " fn handle_sigusr2(_i: c_int) {\n                unsafe {\n                    // ASYNC SIGNAL SAFETY: This lock is only accessed one other time,\n                    // which can only be triggered by This signal handler. In addition,\n                    // this signal handler is immediately removed by SA_RESETHAND, and this\n                    // signal handler cannot be re-entrant due to to the SIGUSR2 mask defined\n                    // below\n                    let mut bt = BACKTRACE.lock();\n                    bt.clear();\n                    backtrace::trace_unsynchronized(|frame| {\n                        if bt.len() < bt.capacity() {\n                            bt.push(frame.clone());\n                            true\n                        } else {\n                            false\n                        }\n                    });\n                }\n\n                BACKTRACE_SENDER.get().unwrap().send(()).ok();\n            }\n\n            let mut mask = SigSet::empty();\n            mask.add(SIGUSR2);\n            sigaction(\n                Signal::SIGUSR2,\n                &SigAction::new(\n                    SigHandler::Handler(handle_sigusr2),\n                    SaFlags::SA_RESTART | SaFlags::SA_RESETHAND,\n                    mask,\n                ),\n            )\n            .log_err();\n        }\n    }\n\n    handle_backtrace_signal();\n    let main_thread = pthread::pthread_self();\n\n    let (mut tx, mut rx) = futures::channel::mpsc::channel(3);\n    foreground_executor\n        .spawn(async move { while (rx.next().await).is_some() {} })\n        .detach();\n\n    background_executor\n        .spawn({\n            let background_executor = background_executor.clone();\n            async move {\n                loop {\n                    background_executor.timer(Duration::from_secs(1)).await;\n                    match tx.try_send(()) {\n                        Ok(_) => continue,\n                        Err(e) => {\n                            if e.into_send_error().is_full() {\n                                pthread::pthread_kill(main_thread, SIGUSR2).log_err();\n                            }\n                            // Only detect the first hang\n                            break;\n                        }\n                    }\n                }\n            }\n        })\n        .detach();\n\n    let app_version = release_channel::AppVersion::global(cx);\n    let os_name = client::telemetry::os_name();\n\n    background_executor\n        .clone()\n        .spawn(async move {\n            let os_version = client::telemetry::os_version();\n\n            loop {\n                while backtrace_rx.recv().is_ok() {\n                    if !telemetry_settings.diagnostics {\n                        return;\n                    }\n\n                    // ASYNC SIGNAL SAFETY: This lock is only accessed _after_\n                    // the backtrace transmitter has fired, which itself is only done\n                    // by the signal handler. And due to SA_RESETHAND  the signal handler\n                    // will not run again until `handle_backtrace_signal` is called.\n                    let raw_backtrace = BACKTRACE.lock().drain(..).collect::<Vec<_>>();\n                    let backtrace: Vec<_> = raw_backtrace\n                        .into_iter()\n                        .map(|frame| {\n                            let mut btf = BacktraceFrame {\n                                ip: frame.ip() as usize,\n                                symbol_addr: frame.symbol_address() as usize,\n                                base: frame.module_base_address().map(|addr| addr as usize),\n                                symbols: vec![],\n                            };\n\n                            backtrace::resolve_frame(&frame, |symbol| {\n                                if let Some(name) = symbol.name() {\n                                    btf.symbols.push(name.to_string());\n                                }\n                            });\n\n                            btf\n                        })\n                        .collect();\n\n                    // IMPORTANT: Don't move this to before `BACKTRACE.lock()`\n                    handle_backtrace_signal();\n\n                    log::error!(\n                        ": "",
    ",\n                        backtrace\n                            .iter()\n                            .flat_map(|bt| bt.symbols.first().as_ref().map(|s| s.as_str()))\n                            .collect::<Vec<_>>()\n                            .join(": "",
    ")\n                    );\n\n                    let report = HangReport {\n                        backtrace,\n                        app_version: Some(app_version),\n                        os_name: os_name.clone(),\n                        os_version: Some(os_version.clone()),\n                        architecture: env::consts::ARCH.into(),\n                        installation_id: installation_id.clone(),\n                    };\n\n                    let Some(json_bytes) = serde_json::to_vec(&report).log_err() else {\n                        continue;\n                    };\n\n                    let Some(checksum) = client::telemetry::calculate_json_checksum(&json_bytes)\n                    else {\n                        continue;\n                    };\n\n                    let Ok(url) = http_client.build_zed_api_url(": "",
    ", &[]) else {\n                        continue;\n                    };\n\n                    let Ok(request) = http_client::Request::builder()\n                        .method(Method::POST)\n                        .uri(url.as_ref())\n                        .header(": "",
    ", checksum)\n                        .body(json_bytes.into())\n                    else {\n                        continue;\n                    };\n\n                    if let Some(response) = http_client.send(request).await.log_err() {\n                        if response.status() != 200 {\n                            log::error!(": "",
    ", response.status());\n                        }\n                    }\n                }\n            }\n        })\n        .detach()\n}\n\nfn upload_panics_and_crashes(\n    http: Arc<HttpClientWithUrl>,\n    panic_report_url: Url,\n    installation_id: Option<String>,\n    cx: &App,\n) {\n    let telemetry_settings = *client::TelemetrySettings::get_global(cx);\n    cx.background_spawn(async move {\n        let most_recent_panic =\n            upload_previous_panics(http.clone(), &panic_report_url, telemetry_settings)\n                .await\n                .log_err()\n                .flatten();\n        upload_previous_crashes(http, most_recent_panic, installation_id, telemetry_settings)\n            .await\n            .log_err()\n    })\n    .detach()\n}\n\n/// Uploads panics via `zed.dev`.\nasync fn upload_previous_panics(\n    http: Arc<HttpClientWithUrl>,\n    panic_report_url: &Url,\n    telemetry_settings: client::TelemetrySettings,\n) -> anyhow::Result<Option<(i64, String)>> {\n    let mut children = smol::fs::read_dir(paths::logs_dir()).await?;\n\n    let mut most_recent_panic = None;\n\n    while let Some(child) = children.next().await {\n        let child = child?;\n        let child_path = child.path();\n\n        if child_path.extension() != Some(OsStr::new(": "",
    ")) {\n            continue;\n        }\n        let filename = if let Some(filename) = child_path.file_name() {\n            filename.to_string_lossy()\n        } else {\n            continue;\n        };\n\n        if !filename.starts_with(": "",
    ") {\n            continue;\n        }\n\n        if telemetry_settings.diagnostics {\n            let panic_file_content = smol::fs::read_to_string(&child_path)\n                .await\n                .context(": "",
    ")?;\n\n            let panic: Option<Panic> = serde_json::from_str(&panic_file_content)\n                .log_err()\n                .or_else(|| {\n                    panic_file_content\n                        .lines()\n                        .next()\n                        .and_then(|line| serde_json::from_str(line).ok())\n                })\n                .unwrap_or_else(|| {\n                    log::error!(": "",
    ", panic_file_content);\n                    None\n                });\n\n            if let Some(panic) = panic {\n                if !upload_panic(&http, &panic_report_url, panic, &mut most_recent_panic).await? {\n                    continue;\n                }\n            }\n        }\n\n        // We've done what we can, delete the file\n        std::fs::remove_file(child_path)\n            .context(": "",
    ")\n            .log_err();\n    }\n    Ok(most_recent_panic)\n}\n\nasync fn upload_panic(\n    http: &Arc<HttpClientWithUrl>,\n    panic_report_url: &Url,\n    panic: telemetry_events::Panic,\n    most_recent_panic: &mut Option<(i64, String)>,\n) -> Result<bool> {\n    *most_recent_panic = Some((panic.panicked_on, panic.payload.clone()));\n\n    let json_bytes = serde_json::to_vec(&PanicRequest { panic }).unwrap();\n\n    let Some(checksum) = client::telemetry::calculate_json_checksum(&json_bytes) else {\n        return Ok(false);\n    };\n\n    let Ok(request) = http_client::Request::builder()\n        .method(Method::POST)\n        .uri(panic_report_url.as_ref())\n        .header(": "",
    ", checksum)\n        .body(json_bytes.into())\n    else {\n        return Ok(false);\n    };\n\n    let response = http.send(request).await.context(": "",
    ")?;\n    if !response.status().is_success() {\n        log::error!(": "",
    ", response.status());\n    }\n\n    Ok(true)\n}\nconst LAST_CRASH_UPLOADED: &str = ": "",
    ";\n\n/// upload crashes from apple's diagnostic reports to our server.\n/// (only if telemetry is enabled)\nasync fn upload_previous_crashes(\n    http: Arc<HttpClientWithUrl>,\n    most_recent_panic: Option<(i64, String)>,\n    installation_id: Option<String>,\n    telemetry_settings: client::TelemetrySettings,\n) -> Result<()> {\n    if !telemetry_settings.diagnostics {\n        return Ok(());\n    }\n    let last_uploaded = KEY_VALUE_STORE\n        .read_kvp(LAST_CRASH_UPLOADED)?\n        .unwrap_or(": "",
    ".to_string()); // don't upload old crash reports from before we had this.\n    let mut uploaded = last_uploaded.clone();\n\n    let crash_report_url = http.build_zed_api_url(": "",
    ", &[])?;\n\n    // Crash directories are only set on macOS.\n    for dir in [crashes_dir(), crashes_retired_dir()]\n        .iter()\n        .filter_map(|d| d.as_deref())\n    {\n        let mut children = smol::fs::read_dir(&dir).await?;\n        while let Some(child) = children.next().await {\n            let child = child?;\n            let Some(filename) = child\n                .path()\n                .file_name()\n                .map(|f| f.to_string_lossy().to_lowercase())\n            else {\n                continue;\n            };\n\n            if !filename.starts_with(": "",
    ") || !filename.ends_with(": "",
    ") {\n                continue;\n            }\n\n            if filename <= last_uploaded {\n                continue;\n            }\n\n            let body = smol::fs::read_to_string(&child.path())\n                .await\n                .context(": "",
    ")?;\n\n            let mut request = http_client::Request::post(&crash_report_url.to_string())\n                .follow_redirects(http_client::RedirectPolicy::FollowAll)\n                .header(": "",
    ", ": "",
    ");\n\n            if let Some((panicked_on, payload)) = most_recent_panic.as_ref() {\n                request = request\n                    .header(": "",
    ", format!(": "",
    "))\n                    .header(": "",
    ", payload)\n            }\n            if let Some(installation_id) = installation_id.as_ref() {\n                request = request.header(": "",
    ", installation_id);\n            }\n\n            let request = request.body(body.into())?;\n\n            let response = http.send(request).await.context(": "",
    ")?;\n            if !response.status().is_success() {\n                log::error!(": ""
  },
  "zed/crates/zed/src/zed.rs": {
    "ZED_WINDOW_DECORATIONS": "",
    "server": "",
    "client": "",
    "Using GPU: {:?}": "",
    "\n            inotify_init returned {}\n\n            This may be due to system-wide limits on inotify instances. For troubleshooting see: https://zed.dev/docs/linux\n            ": "",
    "Could not start inotify": "",
    "Troubleshoot and Quit": "",
    "https://zed.dev/docs/linux#could-not-start-inotify": "",
    "\n            ReadDirectoryChangesW initialization failed: {}\n\n            This may occur on network filesystems and WSL paths. For troubleshooting see: https://zed.dev/docs/windows\n            ": "",
    "Could not start ReadDirectoryChangesW": "",
    "https://zed.dev/docs/windows": "",
    "ZED_ALLOW_EMULATED_GPU": "",
    "\n            Zed uses Vulkan for rendering and requires a compatible GPU.\n\n            Currently you are using a software emulated GPU ({}) which\n            will result in awful performance.\n\n            For troubleshooting see: https://zed.dev/docs/linux\n            Set ZED_ALLOW_EMULATED_GPU=1 env var to permanently override.\n            ": "",
    "Unsupported GPU": "",
    "Skip": "",
    "https://zed.dev/docs/linux#zed-fails-to-open-windows": "",
    "[assistant2-debug] initializing Assistant2": "",
    "[assistant2-debug] finished initializing Assistant2": "",
    "[assistant2-debug] adding Assistant2 panel": "",
    "Project Opened": "",
    "zed:// links will now open in {}.": "",
    "Error registering zed:// scheme": "",
    "licenses.md": "",
    "Open Source License Attribution": "",
    "Default Key Bindings": "",
    "JSON": "",
    "Default Settings": "",
    "Settings file must have a location": "",
    "CARGO_PKG_VERSION": "",
    "(debug)": "",
    "{release_channel} {version} {debug}": "",
    "OK": "",
    "Ran the TestPanic action": "",
    "If you installed Zed from our official release add ~/.local/bin to your PATH.\n\nIf you installed Zed from a different source like your package manager, then you may need to create an alias/symlink manually.\n\nDepending on your package manager, the CLI might be named zeditor, zedit, zed-editor or something else.": "",
    "CLI should already be installed": "",
    "Ok": "",
    "error creating CLI symlink": "",
    "Installed `zed` to {}. You can launch {} from your terminal.": "",
    "Error installing zed cli": "",
    "Are you sure you want to quit?": "",
    "Quit": "",
    "Cancel": "",
    "Unable to access/open log file at path {:?}": "",
    "Log": "",
    "Last {} lines in {}": "",
    "Failed to load user settings: {err}": "",
    "JSON parse error in keymap file. Bindings not reloaded.\n\n{error}": "",
    "Open Keymap File": "",
    "New Window": "",
    "Invalid user settings file\n{error}": "",
    "Open Settings File": "",
    "Not an ssh project": "",
    "worktree was removed": "",
    "unexpected item type: expected editor item": "",
    "This project has no folders open.": "",
    "// No data has been collected yet": "",
    "// Zed collects anonymous usage data to help us understand how people are using the app.\n": "",
    "// Telemetry can be disabled via the `settings.json` file.\n": "",
    "// Here is the data that has been reported for the current session:\n": "",
    "{}\n{}": "",
    "Telemetry Log": "",
    "/root": "",
    "a": "",
    "/root/a/new": "",
    "aa": "",
    "ab": "",
    "b": "",
    "ba": "",
    "bb": "",
    "c": "",
    "ca": "",
    "cb": "",
    "d": "",
    "da": "",
    "db": "",
    "e": "",
    "ea": "",
    "eb": "",
    "/root/a": "",
    "/root/b": "",
    "/root/c": "",
    "/root/d": "",
    "/root/e": "",
    "hey": "",
    "dir": "",
    "f": "",
    "/root/dir": "",
    "/root/dir/c": "",
    "dir1": "",
    "dir2": "",
    "/root/dir1/a": "",
    "/root/dir2/c": "",
    "/root/dir2": "",
    "EDIT": "",
    "Don't Save": "",
    "EDIThey": "",
    "/root/the-new-name": "",
    "the-new-name": "",
    "file1": "",
    "contents 1": "",
    "file2": "",
    "contents 2": "",
    "file3": "",
    "contents 3": "",
    "a.txt": "",
    "b.txt": "",
    "dir3": "",
    "c.txt": "",
    "d.txt": "",
    "/dir1/": "",
    "found no project panels": "",
    "project panel should have a selected entry": "",
    "Unexpected project panel selected worktree path": "",
    "Unexpected project panel selected entry path": "",
    "/dir1/a.txt": "",
    "/dir1": "",
    "/dir2/b.txt": "",
    "/dir3": "",
    "/dir3/c.txt": "",
    "/d.txt": "",
    "excluded_dir": "",
    "**/.git": "",
    ".gitignore": "",
    "ignored_dir\n": "",
    ".git": "",
    "HEAD": "",
    "ref: refs/heads/main": "",
    "regular_dir": "",
    "file": "",
    "regular file contents": "",
    "ignored_dir": "",
    "ignored_subdir": "",
    "ignored subfile contents": "",
    "ignored file contents": "",
    "excluded file contents": "",
    "/root/excluded_dir/file": "",
    "/root/.git/HEAD": "",
    "/root/excluded_dir/ignored_subdir": "",
    "Excluded files in subfolders of a workspace root should be opened in the workspace": "",
    "Expect to get the same number of opened items as submitted paths to open": "",
    "Excluded file {path:?} failed to open: {e:?}": "",
    ".git/HEAD": "",
    "excluded_dir/file": "",
    "Excluded files should get opened, excluded dir should not get opened": "",
    "Workspace entries should not change after opening excluded files and directories paths": "",
    "all excluded files that got open should have a path": "",
    "Despite not being present in the worktrees, buffers for excluded files are opened and added to the pane": "",
    "/root/a.txt": "",
    "x": "",
    "changed": "",
    "Overwrite": "",
    "untitled": "",
    "hi": "",
    "the-new-name.rs": "",
    " there": "",
    "/root/the-new-name.rs": "",
    "dirt": "",
    "contents 1\n": "",
    "contents 2\n": "",
    "contents 3\n": "",
    "/root/a/file2": "",
    "file4": "",
    "/settings.json": "",
    "{": "",
    ": ": "",
    "}": "",
    "/keymap.json": "",
    "[{": "",
    ": {": "",
    "}}]": "",
    "backspace": "",
    "k": "",
    ": null}}]": "",
    "6": "",
    "vim::FindCommand": "",
    "vim::Literal": "",
    "vim::ResizePane": "",
    "vim::PushObject": "",
    "vim::PushFindForward": "",
    "vim::PushFindBackward": "",
    "vim::PushSneak": "",
    "vim::PushSneakBackward": "",
    "vim::PushChangeSurrounds": "",
    "vim::PushJump": "",
    "vim::PushDigraph": "",
    "vim::PushLiteral": "",
    "vim::Number": "",
    "vim::SelectRegister": "",
    "git::StageAndNext": "",
    "git::UnstageAndNext": "",
    "terminal::SendText": "",
    "terminal::SendKeystroke": "",
    "app_menu::OpenApplicationMenu": "",
    "picker::ConfirmInput": "",
    "editor::HandleInput": "",
    "editor::FoldAtLevel": "",
    "pane::ActivateItem": "",
    "workspace::ActivatePane": "",
    "workspace::MoveItemToPane": "",
    "workspace::MoveItemToPaneInDirection": "",
    "workspace::OpenTerminal": "",
    "workspace::SendKeystrokes": "",
    "zed::OpenBrowser": "",
    "zed::OpenZedUrl": "",
    "{action} failed to build: {err:?}": "",
    "Failed to build actions using {{}} as input: {:?}. Errors:\n{}": "",
    "fonts/plex-mono/ZedPlexMono-Regular.ttf": "",
    "fonts/plex-sans/ZedPlexSans-Regular.ttf": "",
    "language name {name}": "",
    "md": "",
    "On {} Failed to find {}": "",
    "On {} Failed to find {} with key binding {}": ""
  },
  "zed/crates/zed/src/zed/app_menus.rs": {
    "About Zed…": "",
    "Check for Updates": "",
    "Settings": "",
    "Open Settings": "",
    "Open Key Bindings": "",
    "Open Default Settings": "",
    "Open Default Key Bindings": "",
    "Open Project Settings": "",
    "Select Theme...": "",
    "Services": "",
    "Extensions": "",
    "Install CLI": "",
    "Hide Zed": "",
    "Hide Others": "",
    "Show All": "",
    "Quit": "",
    "File": "",
    "New": "",
    "New Window": "",
    "Open File...": "",
    "Open Folder...": "",
    "Open…": "",
    "Open Recent...": "",
    "Open Remote...": "",
    "Add Folder to Project…": "",
    "Save": "",
    "Save As…": "",
    "Save All": "",
    "Close Editor": "",
    "Close Window": "",
    "Edit": "",
    "Undo": "",
    "Redo": "",
    "Cut": "",
    "Copy": "",
    "Paste": "",
    "Find": "",
    "Find In Project": "",
    "Toggle Line Comment": "",
    "Selection": "",
    "Select All": "",
    "Expand Selection": "",
    "Shrink Selection": "",
    "Add Cursor Above": "",
    "Add Cursor Below": "",
    "Select Next Occurrence": "",
    "Move Line Up": "",
    "Move Line Down": "",
    "Duplicate Selection": "",
    "View": "",
    "Zoom In": "",
    "Zoom Out": "",
    "Reset Zoom": "",
    "Toggle Left Dock": "",
    "Toggle Right Dock": "",
    "Toggle Bottom Dock": "",
    "Close All Docks": "",
    "Editor Layout": "",
    "Split Up": "",
    "Split Down": "",
    "Split Left": "",
    "Split Right": "",
    "Project Panel": "",
    "Outline Panel": "",
    "Collab Panel": "",
    "Terminal Panel": "",
    "Diagnostics": "",
    "Go": "",
    "Back": "",
    "Forward": "",
    "Command Palette...": "",
    "Go to File...": "",
    "Go to Symbol in Project": "",
    "Go to Symbol in Editor...": "",
    "Go to Line/Column...": "",
    "Go to Definition": "",
    "Go to Declaration": "",
    "Go to Type Definition": "",
    "Find All References": "",
    "Next Problem": "",
    "Previous Problem": "",
    "Window": "",
    "Minimize": "",
    "Zoom": "",
    "Help": "",
    "View Telemetry": "",
    "View Dependency Licenses": "",
    "Show Welcome": "",
    "Give Feedback...": "",
    "Documentation": "",
    "https://zed.dev/docs": "",
    "Zed Twitter": "",
    "https://twitter.com/zeddotdev": "",
    "Join the Team": "",
    "https://zed.dev/jobs": ""
  },
  "zed/crates/zed/src/zed/mac_only_instance.rs": {
    "Zed Editor Dev Instance Running": "",
    "Zed Editor Nightly Instance Running": "",
    "Zed Editor Preview Instance Running": "",
    "Zed Editor Stable Instance Running": "",
    "Error binding to single instance port: {err}": "",
    "Backup handshake request failed, continuing without handshake": "",
    "Connected to single instance port but failed to read: {err}": "",
    "Got instance handshake": "",
    "Got wrong instance handshake value": ""
  },
  "zed/crates/zed/src/zed/open_listener.rs": {
    "zed-cli://": "",
    "zed-dock-action://": "",
    "file://": "",
    "zed://file": "",
    "zed://ssh": "",
    "ssh:/": "",
    "ssh://": "",
    "unhandled url: {}": "",
    "missing host in ssh url: {}": "",
    "cannot open both local and ssh paths": "",
    "cannot open multiple ssh connections": "",
    "channel": "",
    "notes#": "",
    "notes": "",
    "invalid zed url: {}": "",
    "no listener for open requests": "",
    "error connecting to cli": "",
    "error sending ipc handshake": "",
    "failed to open a workspace": "",
    "error opening {path:?}: {err}": "",
    "error opening {paths_with_position:?}: {error}": "",
    "Workspace should have two items": ""
  },
  "zed/crates/zed/src/zed/quick_action_bar.rs": {
    "empty quick action bar": "",
    "toggle buffer search": "",
    "Buffer Search": "",
    "toggle inline assistant": "",
    "Inline Assist": "",
    "Selection Controls": "",
    "Select All": "",
    "Select Next Occurrence": "",
    "Expand Selection": "",
    "Shrink Selection": "",
    "Add Cursor Above": "",
    "Add Cursor Below": "",
    "Go to Symbol": "",
    "Go to Line/Column": "",
    "Next Problem": "",
    "Previous Problem": "",
    "Next Hunk": "",
    "Previous Hunk": "",
    "Move Line Up": "",
    "Move Line Down": "",
    "Duplicate Selection": "",
    "editor-settings": "",
    "toggle_editor_settings_icon": "",
    "Editor Controls": "",
    "Inlay Hints": "",
    "Inline Diagnostics": "",
    "Edit Predictions": "",
    "You can't toggle edit predictions for this file as it is within the excluded files list.": "",
    "Line Numbers": "",
    "Selection Menu": "",
    "Auto Signature Help": "",
    "Inline Git Blame": "",
    "Column Git Blame": "",
    "Vim Mode": "",
    "quick action bar": ""
  },
  "zed/crates/zed/src/zed/windows_only_instance.rs": {
    "Unable to create instance mutex.": "",
    "Failed to create named pipe: {:?}": "",
    "Failed to read from named pipe": "",
    "Handshake before Zed spawn": "",
    "error parsing path argument: {}": "",
    "Handshake after Zed spawn": ""
  },
  "zed/crates/zed/src/zed/quick_action_bar/markdown_preview.rs": {
    "click": "",
    "toggle-markdown-preview": "",
    "Preview Markdown": "",
    "{} to open in a split": ""
  },
  "zed/crates/zed/src/zed/quick_action_bar/repl_menu.rs": {
    "menu": "",
    "kernel: {} ({})": "",
    "Run Selection": "",
    "Run Line": "",
    "Interrupt": "",
    "Clear Outputs": "",
    "Shut Down Kernel": "",
    "Restart Kernel": "",
    "View Sessions": "",
    "Shut Down all Kernels": "",
    "dropdown": "",
    "REPL Menu": "",
    "toggle_repl_icon": "",
    "Start REPL for {}": "",
    "Select Kernel": "",
    "Setup Zed REPL for {}": "",
    "{}#installation": "",
    "Nothing running": "",
    "Restarting {}": "",
    "Run code on {} ({})": "",
    "Interrupt {} ({})": "",
    "{} is starting": "",
    "Error with kernel {}: {}": "",
    "{} is shutting down": ""
  },
  "zed/crates/zeta/src/zeta.rs": {
    "path": "",
    "edits": "",
    "untitled": "",
    "Events:\n{}\nExcerpt:\n{:?}": "",
    "Update Zed": "",
    "completion response: {}": "",
    "error predicting edits.\nStatus: {:?}\nBody: {}": "",
    "expected exactly one start marker, found {}": "",
    "expected exactly one end marker, found {}": "",
    "expected at most one start-of-file marker, found {}": "",
    "could not find newline": "",
    "could not find end marker": "",
    "Edit Prediction Rated": "",
    "true": "",
    "false": "",
    "unknown value in '{ZED_PREDICT_DATA_COLLECTION_CHOICE}'": "",
    "You must update to Zed version {minimum_version} or higher to continue using edit predictions.": "",
    "detected '{path:?}' as open source license": "",
    "didn't detect '{path:?}' as open source license": "",
    "didn't find a license file to check, assuming closed source": "",
    "User renamed {:?} to {:?}\n": "",
    "User edited {:?}:\n```diff\n{}\n```": "",
    "Zed's Edit Predictions": "",
    "edit prediction failed": ""
  }
}
