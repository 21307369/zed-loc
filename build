#!/bin/bash
# git restore .
# python3 extract.py
# python3 delete.py
python3 replace.py


path=$(pwd)
# 检查并创建必要的目标目录
if [ ! -d "target" ]; then
    mkdir -p "target"
    echo "创建 target 目录..."
fi

cd zed
set -eu
version=$(git rev-parse --short HEAD)
echo "Publishing version: ${version} on release channel release"
echo "stable" > crates/zed/RELEASE_CHANNEL
export BINDGEN_EXTRA_CLANG_ARGS="--sysroot=$(xcrun --show-sdk-path)"

rm -rf zed/target
script/bundle-mac

cd $path
# 创建DMG函数
create_dmg() {
    local arch=$1
    local timestr=$(date "+%y%m%d")
    local target_dir="zed/target/$arch/zed"
    local dmg_path="target/zed-$arch-$timestr.dmg"
    local app_path="zed/target/${arch}/release/bundle/osx/Zed.app"
    local cli_path="zed/target/${arch}/release/cli"
    echo "创建 $arch 架构的DMG..."
    rm -rf $target_dir && mkdir -p $target_dir # 清理并重建目录
    cp ${cli_path} ${app_path}/Contents/MacOS/cli  #复制cli
    cp -R ${app_path} "$target_dir/Zed.app"  # 复制应用
    ln -s /Applications $target_dir # 可选：添加快捷方式
    # 创建DMG
    hdiutil create -volname "zed_cn" -srcfolder $target_dir -ov -format UDZO $dmg_path

}


# 为两种架构创建DMG
create_dmg "aarch64-apple-darwin"
create_dmg "x86_64-apple-darwin"
#  cross build -p remote_server --target x86_64-unknown-linux-gnu --release
